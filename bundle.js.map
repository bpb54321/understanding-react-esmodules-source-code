{
  "version": 3,
  "sources": ["dist/shared/ReactFeatureFlags.js", "dist/react-dom-bindings/src/client/HTMLNodeType.js", "dist/react-dom-bindings/src/client/ReactDOMContainer.js", "dist/scheduler/index.js", "dist/scheduler/src/SchedulerFeatureFlags.js", "dist/scheduler/src/SchedulerMinHeap.js", "dist/scheduler/src/SchedulerPriorities.js", "dist/scheduler/src/SchedulerProfiling.js", "dist/scheduler/src/forks/Scheduler.js", "dist/react-reconciler/src/ReactWorkTags.js", "dist/react-reconciler/src/ReactFiberFlags.js", "dist/react-reconciler/src/ReactFiberTreeReflection.js", "dist/react-reconciler/src/ReactRootTags.js", "dist/shared/ReactInstanceMap.js", "dist/shared/ReactSymbols.js", "dist/shared/getComponentNameFromType.js", "dist/react-reconciler/src/getComponentNameFromFiber.js", "dist/shared/isArray.js", "dist/shared/ReactVersion.js", "dist/react/src/ReactNoopUpdateQueue.js", "dist/shared/assign.js", "dist/react/src/ReactBaseClasses.js", "dist/shared/noop.js", "dist/shared/hasOwnProperty.js", "dist/react/src/jsx/ReactJSXElement.js", "dist/react/src/ReactSharedInternalsClient.js", "dist/shared/reportGlobalError.js", "dist/shared/ReactSharedInternals.js", "dist/react-reconciler/src/ReactFiberConfig.js", "dist/react-reconciler/src/ReactFiberStack.js", "dist/react-reconciler/src/ReactFiberContext.js", "dist/react-reconciler/src/ReactFiberOffscreenComponent.js", "dist/react-reconciler/src/clz32.js", "dist/react-reconciler/src/ReactFiberLane.js", "dist/react-reconciler/src/ReactEventPriorities.js", "dist/react-reconciler/src/Scheduler.js", "dist/react-reconciler/src/ReactFiberDevToolsHook.js", "dist/react-reconciler/src/ReactFiberViewTransitionComponent.js", "dist/shared/ReactOwnerStackReset.js", "dist/shared/objectIs.js", "dist/react-reconciler/src/ReactFiberPerformanceTrack.js", "dist/react-reconciler/src/ReactFiberShellHydration.js", "dist/shared/ConsolePatchingDev.js", "dist/shared/DefaultPrepareStackTrace.js", "dist/shared/ReactComponentStackFrame.js", "dist/react-reconciler/src/ReactFiberComponentStack.js", "dist/react-reconciler/src/ReactCapturedValue.js", "dist/react-reconciler/src/ReactFiberTreeContext.js", "dist/react-reconciler/src/ReactFiberHostContext.js", "dist/react-reconciler/src/ReactFiberHydrationContext.js", "dist/react-reconciler/src/ReactTypeOfMode.js", "dist/react-reconciler/src/ReactFiberNewContext.js", "dist/react-reconciler/src/ReactFiberCacheComponent.js", "dist/react-reconciler/src/ReactFiberTransitionTypes.js", "dist/react-reconciler/src/ReactProfilerTimer.js", "dist/react-reconciler/src/ReactFiberRootScheduler.js", "dist/react-reconciler/src/ReactFiberAsyncAction.js", "dist/react-reconciler/src/ReactFiberGestureScheduler.js", "dist/react-reconciler/src/ReactFiberTransition.js", "dist/shared/shallowEqual.js", "dist/react-reconciler/src/ReactStrictModeWarnings.js", "dist/react-reconciler/src/ReactFiberThenable.js", "dist/react-reconciler/src/ReactFiberCallUserSpace.js", "dist/react-reconciler/src/ReactChildFiber.js", "dist/react-reconciler/src/ReactFiberConcurrentUpdates.js", "dist/react-reconciler/src/ReactFiberClassUpdateQueue.js", "dist/react-reconciler/src/ReactFiberHiddenContext.js", "dist/react-reconciler/src/ReactFiberSuspenseContext.js", "dist/react-reconciler/src/ReactFiberSuspenseComponent.js", "dist/react-reconciler/src/ReactHookEffectTags.js", "dist/react-reconciler/src/ReactFiberHooks.js", "dist/react-reconciler/src/ReactFiberClassComponent.js", "dist/react-reconciler/src/ReactFiberLazyComponent.js", "dist/react-reconciler/src/ReactFiberErrorLogger.js", "dist/react-reconciler/src/ReactFiberThrow.js", "dist/react-reconciler/src/ReactFiberTracingMarkerComponent.js", "dist/react-reconciler/src/ReactFiberBeginWork.js", "dist/react-reconciler/src/ReactFiberScope.js", "dist/react-reconciler/src/ReactFiberCompleteWork.js", "dist/react-reconciler/src/ReactFiberUnwindWork.js", "dist/react-reconciler/src/ReactFiberCommitEffects.js", "dist/react-reconciler/src/ReactFiberMutationTracking.js", "dist/react-reconciler/src/ReactFiberCommitHostEffects.js", "dist/react-reconciler/src/ReactFiberCommitViewTransitions.js", "dist/react-reconciler/src/ReactFiberCommitWork.js", "dist/react-reconciler/src/ReactFiberApplyGesture.js", "dist/react-reconciler/src/ReactFiberAsyncDispatcher.js", "dist/react-reconciler/src/ReactTestSelectors.js", "dist/react-reconciler/src/ReactPostPaintCallback.js", "dist/react-reconciler/src/ReactFiberWorkLoop.js", "dist/react-reconciler/src/ReactFiber.js", "dist/react-reconciler/src/ReactFiberRoot.js", "dist/react-reconciler/src/ReactFiberReconciler.js", "dist/react-dom-bindings/src/events/EventSystemFlags.js", "dist/react-dom-bindings/src/events/getEventTarget.js", "dist/react-dom/src/ReactDOMSharedInternals.js", "dist/react-dom/src/shared/ReactDOM.js", "dist/shared/ReactDOMSharedInternals.js", "dist/react-dom-bindings/src/shared/ReactDOMFormActions.js", "dist/react-dom-bindings/src/client/ReactDOMSrcObject.js", "dist/react-dom-bindings/src/client/ReactDOMUpdatePriority.js", "dist/react-dom-bindings/src/events/EventRegistry.js", "dist/react-dom-bindings/src/shared/isAttributeNameSafe.js", "dist/react-dom-bindings/src/client/DOMPropertyOperations.js", "dist/react-dom-bindings/src/client/ToStringValue.js", "dist/react-dom-bindings/src/client/inputValueTracking.js", "dist/react-dom-bindings/src/client/getActiveElement.js", "dist/react-dom-bindings/src/client/escapeSelectorAttributeValueInsideDoubleQuotes.js", "dist/react-dom-bindings/src/client/ReactDOMInput.js", "dist/react-dom-bindings/src/client/ReactDOMOption.js", "dist/react-dom-bindings/src/client/ReactDOMSelect.js", "dist/react-dom-bindings/src/client/ReactDOMTextarea.js", "dist/react-dom-bindings/src/client/validateDOMNesting.js", "dist/react-dom-bindings/src/client/setTextContent.js", "dist/react-dom-bindings/src/shared/isUnitlessNumber.js", "dist/react-dom-bindings/src/client/CSSPropertyOperations.js", "dist/react-dom-bindings/src/shared/isCustomElement.js", "dist/react-dom-bindings/src/shared/getAttributeAlias.js", "dist/react-dom-bindings/src/shared/ReactDOMInvalidARIAHook.js", "dist/react-dom-bindings/src/shared/ReactDOMUnknownPropertyHook.js", "dist/react-dom-bindings/src/shared/sanitizeURL.js", "dist/react-dom-bindings/src/events/CurrentReplayingEvent.js", "dist/react-dom-bindings/src/events/ReactDOMControlledComponent.js", "dist/react-dom-bindings/src/events/ReactDOMUpdateBatching.js", "dist/react-dom-bindings/src/events/getListener.js", "dist/shared/ExecutionEnvironment.js", "dist/react-dom-bindings/src/events/checkPassiveEvents.js", "dist/react-dom-bindings/src/events/EventListener.js", "dist/react-dom-bindings/src/events/FallbackCompositionState.js", "dist/react-dom-bindings/src/events/getEventCharCode.js", "dist/react-dom-bindings/src/events/SyntheticEvent.js", "dist/react-dom-bindings/src/events/plugins/BeforeInputEventPlugin.js", "dist/react-dom-bindings/src/events/isTextInputElement.js", "dist/react-dom-bindings/src/events/isEventSupported.js", "dist/react-dom-bindings/src/events/plugins/ChangeEventPlugin.js", "dist/react-dom-bindings/src/events/plugins/EnterLeaveEventPlugin.js", "dist/react-dom-bindings/src/client/ReactInputSelection.js", "dist/react-dom-bindings/src/events/plugins/SelectEventPlugin.js", "dist/react-dom-bindings/src/events/getVendorPrefixedEventName.js", "dist/react-dom-bindings/src/events/DOMEventNames.js", "dist/react-dom-bindings/src/events/DOMEventProperties.js", "dist/react-dom-bindings/src/events/plugins/SimpleEventPlugin.js", "dist/react-dom-bindings/src/events/plugins/FormActionEventPlugin.js", "dist/react-dom-bindings/src/events/plugins/ScrollEndEventPlugin.js", "dist/react-dom-bindings/src/events/DOMPluginEventSystem.js", "dist/react-dom-bindings/src/client/ReactDOMComponent.js", "dist/react-dom-bindings/src/client/ReactFiberConfigDOM.js", "dist/react-dom-bindings/src/client/ReactDOMComponentTree.js", "dist/react-dom-bindings/src/events/ReactDOMEventListener.js", "dist/react-dom-bindings/src/events/ReactDOMEventReplaying.js", "dist/react-dom/src/client/ReactDOMDefaultTransitionIndicator.js", "dist/react-dom/src/client/ReactDOMRoot.js", "dist/react-dom/src/shared/ensureCorrectIsomorphicReactVersion.js", "dist/react-dom/src/client/ReactDOMClient.js", "src/main.js"],
  "sourcesContent": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n */\n\n// -----------------------------------------------------------------------------\n// Land or remove (zero effort)\n//\n// Flags that can likely be deleted or landed without consequences\n// -----------------------------------------------------------------------------\n\n// None\n\n// -----------------------------------------------------------------------------\n// Killswitch\n//\n// Flags that exist solely to turn off a change in case it causes a regression\n// when it rolls out to prod. We should remove these as soon as possible.\n// -----------------------------------------------------------------------------\n\nexport const enableHydrationLaneScheduling = true;\n\n// -----------------------------------------------------------------------------\n// Land or remove (moderate effort)\n//\n// Flags that can be probably deleted or landed, but might require extra effort\n// like migrating internal callers or performance testing.\n// -----------------------------------------------------------------------------\n\n// TODO: Finish rolling out in www\nexport const favorSafetyOverHydrationPerf = true;\n\n// Need to remove didTimeout argument from Scheduler before landing\nexport const disableSchedulerTimeoutInWorkLoop = false;\n\n// TODO: Land at Meta before removing.\nexport const disableDefaultPropsExceptForClasses = true;\n\n// -----------------------------------------------------------------------------\n// Slated for removal in the future (significant effort)\n//\n// These are experiments that didn't work out, and never shipped, but we can't\n// delete from the codebase until we migrate internal callers.\n// -----------------------------------------------------------------------------\n\n// Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n//\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\n//\n// This will eventually be replaced by the Transition Tracing proposal.\nexport const enableSuspenseCallback = false;\n\n// Experimental Scope support.\nexport const enableScopeAPI = false;\n\n// Experimental Create Event Handle API.\nexport const enableCreateEventHandleAPI = false;\n\n// Support legacy Primer support on internal FB www\nexport const enableLegacyFBSupport = false;\n\n// -----------------------------------------------------------------------------\n// Ongoing experiments\n//\n// These are features that we're either actively exploring or are reasonably\n// likely to include in an upcoming release.\n// -----------------------------------------------------------------------------\n\n// Yield to the browser event loop and not just the scheduler event loop before passive effects.\n// Fix gated tests that fail with this flag enabled before turning it back on.\nexport const enableYieldingBeforePassive = false;\n\n// Experiment to intentionally yield less to block high framerate animations.\nexport const enableThrottledScheduling = false;\n\nexport const enableLegacyCache = false;\n\nexport const enableAsyncIterableChildren = false;\n\nexport const enableTaint = false;\n\nexport const enablePostpone = false;\n\nexport const enableHalt = false;\n\nexport const enableViewTransition = false;\n\nexport const enableGestureTransition = false;\n\nexport const enableScrollEndPolyfill = false;\n\nexport const enableSuspenseyImages = false;\n\nexport const enableFizzBlockingRender = false; // rel=\"expect\"\n\nexport const enableSrcObject = false;\n\nexport const enableHydrationChangeEvent = false;\n\nexport const enableDefaultTransitionIndicator = false;\n\n/**\n * Switches Fiber creation to a simple object instead of a constructor.\n */\nexport const enableObjectFiber = false;\n\nexport const enableTransitionTracing = false;\n\n// FB-only usage. The new API has different semantics.\nexport const enableLegacyHidden = false;\n\n// Enables unstable_avoidThisFallback feature in Fiber\nexport const enableSuspenseAvoidThisFallback = false;\n\nexport const enableCPUSuspense = false;\n\n// Test this at Meta before enabling.\nexport const enableNoCloningMemoCache = false;\n\nexport const enableUseEffectEventHook = false;\n\n// Test in www before enabling in open source.\n// Enables DOM-server to stream its instruction set as data-attributes\n// (handled with an MutationObserver) instead of inline-scripts\nexport const enableFizzExternalRuntime = false;\n\nexport const alwaysThrottleRetries = true;\n\nexport const passChildrenWhenCloningPersistedNodes = false;\n\n/**\n * Enables a new Fiber flag used in persisted mode to reduce the number\n * of cloned host components.\n */\nexport const enablePersistedModeClonedFlag = false;\n\nexport const enableShallowPropDiffing = false;\n\nexport const enableEagerAlternateStateNodeCleanup = true;\n\n/**\n * Enables an expiration time for retry lanes to avoid starvation.\n */\nexport const enableRetryLaneExpiration = false;\nexport const retryLaneExpirationMs = 5000;\nexport const syncLaneExpirationMs = 250;\nexport const transitionLaneExpirationMs = 5000;\n\n/**\n * Enables a new error detection for infinite render loops from updates caused\n * by setState or similar outside of the component owning the state.\n */\nexport const enableInfiniteRenderLoopDetection = false;\n\nexport const enableFastAddPropertiesInDiffing = true;\nexport const enableLazyPublicInstanceInFabric = false;\n\nexport const enableFragmentRefs = false;\n\n// -----------------------------------------------------------------------------\n// Ready for next major.\n//\n// Alias __NEXT_MAJOR__ to false for easier skimming.\n// -----------------------------------------------------------------------------\n\n// TODO: Anything that's set to `true` in this section should either be cleaned\n// up (if it's on everywhere, including Meta and RN builds) or moved to a\n// different section of this file.\n\n// const __NEXT_MAJOR__ = false;\n\n// Renames the internal symbol for elements since they have changed signature/constructor\nexport const renameElementSymbol = true;\n\n/**\n * Enables a fix to run insertion effect cleanup on hidden subtrees.\n */\nexport const enableHiddenSubtreeInsertionEffectCleanup = false;\n\n/**\n * Removes legacy style context defined using static `contextTypes` and consumed with static `childContextTypes`.\n */\nexport const disableLegacyContext = true;\n/**\n * Removes legacy style context just from function components.\n */\nexport const disableLegacyContextForFunctionComponents = true;\n\n// Enable the moveBefore() alternative to insertBefore(). This preserves states of moves.\nexport const enableMoveBefore = false;\n\n// Disabled caching behavior of `react/cache` in client runtimes.\nexport const disableClientCache = true;\n\n// Warn on any usage of ReactTestRenderer\nexport const enableReactTestRendererWarning = true;\n\n// Disables legacy mode\n// This allows us to land breaking changes to remove legacy mode APIs in experimental builds\n// before removing them in stable in the next Major\nexport const disableLegacyMode = true;\n\n// Make <Context> equivalent to <Context.Provider> instead of <Context.Consumer>\nexport const enableRenderableContext = true;\n\n// -----------------------------------------------------------------------------\n// Chopping Block\n//\n// Planned feature deprecations and breaking changes. Sorted roughly in order of\n// when we plan to enable them.\n// -----------------------------------------------------------------------------\n\n// -----------------------------------------------------------------------------\n// React DOM Chopping Block\n//\n// Similar to main Chopping Block but only flags related to React DOM. These are\n// grouped because we will likely batch all of them into a single major release.\n// -----------------------------------------------------------------------------\n\n// Disable support for comment nodes as React DOM containers. Already disabled\n// in open source, but www codebase still relies on it. Need to remove.\nexport const disableCommentsAsDOMContainers = true;\n\nexport const enableTrustedTypesIntegration = false;\n\n// Prevent the value and checked attributes from syncing with their related\n// DOM properties\nexport const disableInputAttributeSyncing = false;\n\n// Disables children for <textarea> elements\nexport const disableTextareaChildren = false;\n\n// -----------------------------------------------------------------------------\n// Debugging and DevTools\n// -----------------------------------------------------------------------------\n\n// Gather advanced timing metrics for Profiler subtrees.\nexport const enableProfilerTimer = false;\n\n// Adds performance.measure() marks using Chrome extensions to allow formatted\n// Component rendering tracks to show up in the Performance tab.\n// This flag will be used for both Server Component and Client Component tracks.\n// All calls should also be gated on enableProfilerTimer.\nexport const enableComponentPerformanceTrack = false;\n\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\nexport const enableSchedulingProfiler          =\n  !enableComponentPerformanceTrack && false;\n\n// Record durations for commit and passive effects phases.\nexport const enableProfilerCommitHooks = false;\n\n// Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\nexport const enableProfilerNestedUpdatePhase = false;\n\nexport const enableAsyncDebugInfo = false;\n\n// Track which Fiber(s) schedule render work.\nexport const enableUpdaterTracking = false;\n\n// Internal only.\nexport const enableDO_NOT_USE_disableStrictPassiveEffect = false;\n\nexport const ownerStackLimit = 1e4;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n/**\n * HTML nodeType values that represent the type of the node\n */\n\nexport const ELEMENT_NODE = 1;\nexport const TEXT_NODE = 3;\nexport const COMMENT_NODE = 8;\nexport const DOCUMENT_NODE = 9;\nexport const DOCUMENT_TYPE_NODE = 10;\nexport const DOCUMENT_FRAGMENT_NODE = 11;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {disableCommentsAsDOMContainers} from 'shared/ReactFeatureFlags';\n\nimport {\n  ELEMENT_NODE,\n  COMMENT_NODE,\n  DOCUMENT_NODE,\n  DOCUMENT_FRAGMENT_NODE,\n} from './HTMLNodeType';\n\nexport function isValidContainer(node     )          {\n  return !!(\n    node &&\n    (node.nodeType === ELEMENT_NODE ||\n      node.nodeType === DOCUMENT_NODE ||\n      node.nodeType === DOCUMENT_FRAGMENT_NODE ||\n      (!disableCommentsAsDOMContainers &&\n        node.nodeType === COMMENT_NODE &&\n        (node     ).nodeValue === ' react-mount-point-unstable '))\n  );\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nexport * from './src/forks/Scheduler';\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n */\n\nexport const enableProfiling = false;\nexport const frameYieldMs = 5;\n\nexport const userBlockingPriorityTimeout = 250;\nexport const normalPriorityTimeout = 5000;\nexport const lowPriorityTimeout = 10000;\nexport const enableRequestPaint = true;\n\nexport const enableAlwaysYieldScheduler = false;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n */\n\n                              \n             \n             \n                    \n     \n  \n\nexport function push         (heap         , node   )       {\n  const index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\n\nexport function peek         (heap         )           {\n  return heap.length === 0 ? null : heap[0];\n}\n\nexport function pop         (heap         )           {\n  if (heap.length === 0) {\n    return null;\n  }\n  const first = heap[0];\n  const last = heap.pop();\n  if (last !== first) {\n    // $FlowFixMe[incompatible-type]\n    heap[0] = last;\n    // $FlowFixMe[incompatible-call]\n    siftDown(heap, last, 0);\n  }\n  return first;\n}\n\nfunction siftUp         (heap         , node   , i        )       {\n  let index = i;\n  while (index > 0) {\n    const parentIndex = (index - 1) >>> 1;\n    const parent = heap[parentIndex];\n    if (compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown         (heap         , node   , i        )       {\n  let index = i;\n  const length = heap.length;\n  const halfLength = length >>> 1;\n  while (index < halfLength) {\n    const leftIndex = (index + 1) * 2 - 1;\n    const left = heap[leftIndex];\n    const rightIndex = leftIndex + 1;\n    const right = heap[rightIndex];\n\n    // If the left or right node is smaller, swap with the smaller of those.\n    if (compare(left, node) < 0) {\n      if (rightIndex < length && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (rightIndex < length && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a      , b      ) {\n  // Compare sort index first, then task id.\n  const diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *       strict\n */\n\n                                                  \n\n// TODO: Use symbols?\nexport const NoPriority = 0;\nexport const ImmediatePriority = 1;\nexport const UserBlockingPriority = 2;\nexport const NormalPriority = 3;\nexport const LowPriority = 4;\nexport const IdlePriority = 5;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                         \nimport {enableProfiling} from './SchedulerFeatureFlags';\n\nlet runIdCounter         = 0;\nlet mainThreadIdCounter         = 0;\n\n// Bytes per element is 4\nconst INITIAL_EVENT_LOG_SIZE = 131072;\nconst MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\nlet eventLogSize = 0;\nlet eventLogBuffer = null;\nlet eventLog = null;\nlet eventLogIndex = 0;\n\nconst TaskStartEvent = 1;\nconst TaskCompleteEvent = 2;\nconst TaskErrorEvent = 3;\nconst TaskCancelEvent = 4;\nconst TaskRunEvent = 5;\nconst TaskYieldEvent = 6;\nconst SchedulerSuspendEvent = 7;\nconst SchedulerResumeEvent = 8;\n\nfunction logEvent(entries                               ) {\n  if (eventLog !== null) {\n    const offset = eventLogIndex;\n    eventLogIndex += entries.length;\n    if (eventLogIndex + 1 > eventLogSize) {\n      eventLogSize *= 2;\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n        // Using console['error'] to evade Babel and ESLint\n        console['error'](\n          \"Scheduler Profiling: Event log exceeded maximum size. Don't \" +\n            'forget to call `stopLoggingProfilingEvents()`.',\n        );\n        stopLoggingProfilingEvents();\n        return;\n      }\n      const newEventLog = new Int32Array(eventLogSize * 4);\n      // $FlowFixMe[incompatible-call] found when upgrading Flow\n      newEventLog.set(eventLog);\n      eventLogBuffer = newEventLog.buffer;\n      eventLog = newEventLog;\n    }\n    eventLog.set(entries, offset);\n  }\n}\n\nexport function startLoggingProfilingEvents()       {\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n  eventLog = new Int32Array(eventLogBuffer);\n  eventLogIndex = 0;\n}\n\nexport function stopLoggingProfilingEvents()                     {\n  const buffer = eventLogBuffer;\n  eventLogSize = 0;\n  eventLogBuffer = null;\n  eventLog = null;\n  eventLogIndex = 0;\n  return buffer;\n}\n\nexport function markTaskStart(\n  task   \n               \n                                 \n       \n   ,\n  ms        ,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      // performance.now returns a float, representing milliseconds. When the\n      // event is logged, it's coerced to an int. Convert to microseconds to\n      // maintain extra degrees of precision.\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n    }\n  }\n}\n\nexport function markTaskCompleted(\n  task   \n               \n                                 \n       \n   ,\n  ms        ,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskCanceled(\n  task   \n               \n                                 \n       \n   ,\n  ms        ,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskErrored(\n  task   \n               \n                                 \n       \n   ,\n  ms        ,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskRun(\n  task   \n               \n                                 \n       \n   ,\n  ms        ,\n) {\n  if (enableProfiling) {\n    runIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markTaskYield(task                   , ms        ) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerSuspended(ms        ) {\n  if (enableProfiling) {\n    mainThreadIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerUnsuspended(ms        ) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n/* eslint-disable no-var */\n\n                                                          \n\nimport {\n  enableProfiling,\n  frameYieldMs,\n  userBlockingPriorityTimeout,\n  lowPriorityTimeout,\n  normalPriorityTimeout,\n  enableRequestPaint,\n  enableAlwaysYieldScheduler,\n} from '../SchedulerFeatureFlags';\n\nimport {push, pop, peek} from '../SchedulerMinHeap';\n\n// TODO: Use symbols?\nimport {\n  ImmediatePriority,\n  UserBlockingPriority,\n  NormalPriority,\n  LowPriority,\n  IdlePriority,\n} from '../SchedulerPriorities';\nimport {\n  markTaskRun,\n  markTaskYield,\n  markTaskCompleted,\n  markTaskCanceled,\n  markTaskErrored,\n  markSchedulerSuspended,\n  markSchedulerUnsuspended,\n  markTaskStart,\n  stopLoggingProfilingEvents,\n  startLoggingProfilingEvents,\n} from '../SchedulerProfiling';\n\n                                            \n\n                           \n             \n                            \n                               \n                    \n                         \n                    \n                     \n  \n\nlet getCurrentTime                                    ;\nconst hasPerformanceNow =\n  // $FlowFixMe[method-unbinding]\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  const localPerformance = performance;\n  getCurrentTime = () => localPerformance.now();\n} else {\n  const localDate = Date;\n  const initialTime = localDate.now();\n  getCurrentTime = () => localDate.now() - initialTime;\n}\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar maxSigned31BitInt = 1073741823;\n\n// Tasks are stored on a min heap\nvar taskQueue              = [];\nvar timerQueue              = [];\n\n// Incrementing id counter. Used to maintain insertion order.\nvar taskIdCounter = 1;\n\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority;\n\n// This is set while performing work, to prevent re-entrance.\nvar isPerformingWork = false;\n\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nvar needsPaint = false;\n\n// Capture local references to native APIs, in case a polyfill overrides them.\nconst localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;\nconst localClearTimeout =\n  typeof clearTimeout === 'function' ? clearTimeout : null;\nconst localSetImmediate =\n  typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom\n\nfunction advanceTimers(currentTime        ) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime        ) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback();\n    } else {\n      const firstTimer = peek(timerQueue);\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(initialTime        ) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  }\n\n  // We'll need a host callback the next time work is scheduled.\n  isHostCallbackScheduled = false;\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          const currentTime = getCurrentTime();\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskErrored(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n    if (enableProfiling) {\n      const currentTime = getCurrentTime();\n      markSchedulerSuspended(currentTime);\n    }\n  }\n}\n\nfunction workLoop(initialTime        ) {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n  while (currentTask !== null) {\n    if (!enableAlwaysYieldScheduler) {\n      if (currentTask.expirationTime > currentTime && shouldYieldToHost()) {\n        // This currentTask hasn't expired, and we've reached the deadline.\n        break;\n      }\n    }\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    const callback = currentTask.callback;\n    if (typeof callback === 'function') {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentTask.callback = null;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      currentPriorityLevel = currentTask.priorityLevel;\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      if (enableProfiling) {\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        markTaskRun(currentTask, currentTime);\n      }\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n      if (typeof continuationCallback === 'function') {\n        // If a continuation is returned, immediately yield to the main thread\n        // regardless of how much time is left in the current time slice.\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        currentTask.callback = continuationCallback;\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskYield(currentTask, currentTime);\n        }\n        advanceTimers(currentTime);\n        return true;\n      } else {\n        if (enableProfiling) {\n          // $FlowFixMe[incompatible-call] found when upgrading Flow\n          markTaskCompleted(currentTask, currentTime);\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          currentTask.isQueued = false;\n        }\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n        advanceTimers(currentTime);\n      }\n    } else {\n      pop(taskQueue);\n    }\n    currentTask = peek(taskQueue);\n    if (enableAlwaysYieldScheduler) {\n      if (currentTask === null || currentTask.expirationTime > currentTime) {\n        // This currentTask hasn't expired we yield to the browser task.\n        break;\n      }\n    }\n  }\n  // Return whether there's additional work\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority   (\n  priorityLevel               ,\n  eventHandler         ,\n)    {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next   (eventHandler         )    {\n  var priorityLevel;\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback                               (callback   )    {\n  var parentPriorityLevel = currentPriorityLevel;\n  // $FlowFixMe[incompatible-return]\n  // $FlowFixMe[missing-this-annot]\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(\n  priorityLevel               ,\n  callback          ,\n  options                  ,\n)       {\n  var currentTime = getCurrentTime();\n\n  var startTime;\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      // Times out immediately\n      timeout = -1;\n      break;\n    case UserBlockingPriority:\n      // Eventually times out\n      timeout = userBlockingPriorityTimeout;\n      break;\n    case IdlePriority:\n      // Never times out\n      timeout = maxSigned31BitInt;\n      break;\n    case LowPriority:\n      // Eventually times out\n      timeout = lowPriorityTimeout;\n      break;\n    case NormalPriority:\n    default:\n      // Eventually times out\n      timeout = normalPriorityTimeout;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n\n  var newTask       = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1,\n  };\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      }\n      // Schedule a timeout.\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    }\n    // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback();\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_cancelCallback(task      ) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      const currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  }\n\n  // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel()                {\n  return currentPriorityLevel;\n}\n\nlet isMessageLoopRunning = false;\nlet taskTimeoutID            = (-1     );\n\n// Scheduler periodically yields in case there is other work on the main\n// thread, like user events. By default, it yields multiple times per frame.\n// It does not attempt to align with frame boundaries, since most tasks don't\n// need to be frame aligned; for those that do, use requestAnimationFrame.\nlet frameInterval = frameYieldMs;\nlet startTime = -1;\n\nfunction shouldYieldToHost()          {\n  if (!enableAlwaysYieldScheduler && enableRequestPaint && needsPaint) {\n    // Yield now.\n    return true;\n  }\n  const timeElapsed = getCurrentTime() - startTime;\n  if (timeElapsed < frameInterval) {\n    // The main thread has only been blocked for a really short amount of time;\n    // smaller than a single frame. Don't yield yet.\n    return false;\n  }\n  // Yield now.\n  return true;\n}\n\nfunction requestPaint() {\n  if (enableRequestPaint) {\n    needsPaint = true;\n  }\n}\n\nfunction forceFrameRate(fps        ) {\n  if (fps < 0 || fps > 125) {\n    // Using console['error'] to evade Babel and ESLint\n    console['error'](\n      'forceFrameRate takes a positive int between 0 and 125, ' +\n        'forcing frame rates higher than 125 fps is not supported',\n    );\n    return;\n  }\n  if (fps > 0) {\n    frameInterval = Math.floor(1000 / fps);\n  } else {\n    // reset the framerate\n    frameInterval = frameYieldMs;\n  }\n}\n\nconst performWorkUntilDeadline = () => {\n  if (enableRequestPaint) {\n    needsPaint = false;\n  }\n  if (isMessageLoopRunning) {\n    const currentTime = getCurrentTime();\n    // Keep track of the start time so we can measure how long the main thread\n    // has been blocked.\n    startTime = currentTime;\n\n    // If a scheduler task throws, exit the current browser task so the\n    // error can be observed.\n    //\n    // Intentionally not using a try-catch, since that makes some debugging\n    // techniques harder. Instead, if `flushWork` errors, then `hasMoreWork` will\n    // remain true, and we'll continue the work loop.\n    let hasMoreWork = true;\n    try {\n      hasMoreWork = flushWork(currentTime);\n    } finally {\n      if (hasMoreWork) {\n        // If there's more work, schedule the next message event at the end\n        // of the preceding one.\n        schedulePerformWorkUntilDeadline();\n      } else {\n        isMessageLoopRunning = false;\n      }\n    }\n  }\n};\n\nlet schedulePerformWorkUntilDeadline;\nif (typeof localSetImmediate === 'function') {\n  // Node.js and old IE.\n  // There's a few reasons for why we prefer setImmediate.\n  //\n  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n  // (Even though this is a DOM fork of the Scheduler, you could get here\n  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n  // https://github.com/facebook/react/issues/20756\n  //\n  // But also, it runs earlier which is the semantic we want.\n  // If other browsers ever implement it, it's better to use it.\n  // Although both of these would be inferior to native scheduling.\n  schedulePerformWorkUntilDeadline = () => {\n    localSetImmediate(performWorkUntilDeadline);\n  };\n} else if (typeof MessageChannel !== 'undefined') {\n  // DOM and Worker environments.\n  // We prefer MessageChannel because of the 4ms setTimeout clamping.\n  const channel = new MessageChannel();\n  const port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n  schedulePerformWorkUntilDeadline = () => {\n    port.postMessage(null);\n  };\n} else {\n  // We should only fallback here in non-browser environments.\n  schedulePerformWorkUntilDeadline = () => {\n    // $FlowFixMe[not-a-function] nullable value\n    localSetTimeout(performWorkUntilDeadline, 0);\n  };\n}\n\nfunction requestHostCallback() {\n  if (!isMessageLoopRunning) {\n    isMessageLoopRunning = true;\n    schedulePerformWorkUntilDeadline();\n  }\n}\n\nfunction requestHostTimeout(\n  callback                               ,\n  ms        ,\n) {\n  // $FlowFixMe[not-a-function] nullable value\n  taskTimeoutID = localSetTimeout(() => {\n    callback(getCurrentTime());\n  }, ms);\n}\n\nfunction cancelHostTimeout() {\n  // $FlowFixMe[not-a-function] nullable value\n  localClearTimeout(taskTimeoutID);\n  taskTimeoutID = ((-1     )           );\n}\n\nexport {\n  ImmediatePriority as unstable_ImmediatePriority,\n  UserBlockingPriority as unstable_UserBlockingPriority,\n  NormalPriority as unstable_NormalPriority,\n  IdlePriority as unstable_IdlePriority,\n  LowPriority as unstable_LowPriority,\n  unstable_runWithPriority,\n  unstable_next,\n  unstable_scheduleCallback,\n  unstable_cancelCallback,\n  unstable_wrapCallback,\n  unstable_getCurrentPriorityLevel,\n  shouldYieldToHost as unstable_shouldYield,\n  requestPaint as unstable_requestPaint,\n  getCurrentTime as unstable_now,\n  forceFrameRate as unstable_forceFrameRate,\n};\n\nexport const unstable_Profiling   \n                                      \n                                                   \n         = enableProfiling\n  ? {\n      startLoggingProfilingEvents,\n      stopLoggingProfilingEvents,\n    }\n  : null;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n     \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n       \n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const ScopeComponent = 21;\nexport const OffscreenComponent = 22;\nexport const LegacyHiddenComponent = 23;\nexport const CacheComponent = 24;\nexport const TracingMarkerComponent = 25;\nexport const HostHoistable = 26;\nexport const HostSingleton = 27;\nexport const IncompleteFunctionComponent = 28;\nexport const Throw = 29;\nexport const ViewTransitionComponent = 30;\nexport const ActivityComponent = 31;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {\n  enableCreateEventHandleAPI,\n  enableUseEffectEventHook,\n} from 'shared/ReactFeatureFlags';\n\n                           \n\n// Don't change these values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b0000000000000000000000000000000;\nexport const PerformedWork = /*                */ 0b0000000000000000000000000000001;\nexport const Placement = /*                    */ 0b0000000000000000000000000000010;\nexport const DidCapture = /*                   */ 0b0000000000000000000000010000000;\nexport const Hydrating = /*                    */ 0b0000000000000000001000000000000;\n\n// You can change the rest (and add more).\nexport const Update = /*                       */ 0b0000000000000000000000000000100;\nexport const Cloned = /*                       */ 0b0000000000000000000000000001000;\n\nexport const ChildDeletion = /*                */ 0b0000000000000000000000000010000;\nexport const ContentReset = /*                 */ 0b0000000000000000000000000100000;\nexport const Callback = /*                     */ 0b0000000000000000000000001000000;\n/* Used by DidCapture:                            0b0000000000000000000000010000000; */\n\nexport const ForceClientRender = /*            */ 0b0000000000000000000000100000000;\nexport const Ref = /*                          */ 0b0000000000000000000001000000000;\nexport const Snapshot = /*                     */ 0b0000000000000000000010000000000;\nexport const Passive = /*                      */ 0b0000000000000000000100000000000;\n/* Used by Hydrating:                             0b0000000000000000001000000000000; */\n\nexport const Visibility = /*                   */ 0b0000000000000000010000000000000;\nexport const StoreConsistency = /*             */ 0b0000000000000000100000000000000;\n\n// It's OK to reuse these bits because these flags are mutually exclusive for\n// different fiber types. We should really be doing this for as many flags as\n// possible, because we're about to run out of bits.\nexport const Hydrate = Callback;\nexport const ScheduleRetry = StoreConsistency;\nexport const ShouldSuspendCommit = Visibility;\nexport const ViewTransitionNamedMount = ShouldSuspendCommit;\nexport const DidDefer = ContentReset;\nexport const FormReset = Snapshot;\nexport const AffectedParentLayout = ContentReset;\n\nexport const LifecycleEffectMask =\n  Passive | Update | Callback | Ref | Snapshot | StoreConsistency;\n\n// Union of all commit flags (flags with the lifetime of a particular commit)\nexport const HostEffectMask = /*               */ 0b0000000000000000111111111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b0000000000000001000000000000000;\nexport const ShouldCapture = /*                */ 0b0000000000000010000000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b0000000000000100000000000000000;\nexport const DidPropagateContext = /*          */ 0b0000000000001000000000000000000;\nexport const NeedsPropagation = /*             */ 0b0000000000010000000000000000000;\nexport const Forked = /*                       */ 0b0000000000100000000000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const SnapshotStatic = /*               */ 0b0000000001000000000000000000000;\nexport const LayoutStatic = /*                 */ 0b0000000010000000000000000000000;\nexport const RefStatic = LayoutStatic;\nexport const PassiveStatic = /*                */ 0b0000000100000000000000000000000;\nexport const MaySuspendCommit = /*             */ 0b0000001000000000000000000000000;\n// ViewTransitionNamedStatic tracks explicitly name ViewTransition components deeply\n// that might need to be visited during clean up. This is similar to SnapshotStatic\n// if there was any other use for it. It also needs to run in the same phase as\n// MaySuspendCommit tracking.\nexport const ViewTransitionNamedStatic =\n  /*    */ SnapshotStatic | MaySuspendCommit;\n// ViewTransitionStatic tracks whether there are an ViewTransition components from\n// the nearest HostComponent down. It resets at every HostComponent level.\nexport const ViewTransitionStatic = /*         */ 0b0000010000000000000000000000000;\n\n// Flag used to identify newly inserted fibers. It isn't reset after commit unlike `Placement`.\nexport const PlacementDEV = /*                 */ 0b0000100000000000000000000000000;\nexport const MountLayoutDev = /*               */ 0b0001000000000000000000000000000;\nexport const MountPassiveDev = /*              */ 0b0010000000000000000000000000000;\n\n// Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nexport const BeforeMutationMask         =\n  Snapshot |\n  (enableCreateEventHandleAPI\n    ? // createEventHandle needs to visit deleted and hidden trees to\n      // fire beforeblur\n      // TODO: Only need to visit Deletions during BeforeMutation phase if an\n      // element is focused.\n      Update | ChildDeletion | Visibility\n    : enableUseEffectEventHook\n      ? // TODO: The useEffectEvent hook uses the snapshot phase for clean up but it\n        // really should use the mutation phase for this or at least schedule an\n        // explicit Snapshot phase flag for this.\n        Update\n      : 0);\n\n// For View Transition support we use the snapshot phase to scan the tree for potentially\n// affected ViewTransition components.\nexport const BeforeAndAfterMutationTransitionMask         =\n  Snapshot | Update | Placement | ChildDeletion | Visibility | ContentReset;\n\nexport const MutationMask =\n  Placement |\n  Update |\n  ChildDeletion |\n  ContentReset |\n  Ref |\n  Hydrating |\n  Visibility |\n  FormReset;\nexport const LayoutMask = Update | Callback | Ref | Visibility;\n\n// TODO: Split into PassiveMountMask and PassiveUnmountMask\nexport const PassiveMask = Passive | Visibility | ChildDeletion;\n\n// For View Transitions we need to visit anything we visited in the snapshot phase to\n// restore the view-transition-name after committing the transition.\nexport const PassiveTransitionMask         = PassiveMask | Update | Placement;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask =\n  LayoutStatic |\n  PassiveStatic |\n  RefStatic |\n  MaySuspendCommit |\n  ViewTransitionStatic |\n  ViewTransitionNamedStatic;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n             \n            \n                   \n                   \n                            \n                                                                 \n                                                                 \n\nimport {\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostRoot,\n  HostPortal,\n  HostText,\n  ActivityComponent,\n  SuspenseComponent,\n  OffscreenComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\n\nexport function getNearestMountedFiber(fiber       )               {\n  let node = fiber;\n  let nearestMounted               = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode        = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      // $FlowFixMe[incompatible-type] we bail out when we get a null\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber       ,\n)                          {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState                       = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getActivityInstanceFromFiber(\n  fiber       ,\n)                          {\n  if (fiber.tag === ActivityComponent) {\n    let activityState                       = fiber.memoizedState;\n    if (activityState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        activityState = current.memoizedState;\n      }\n    }\n    if (activityState !== null) {\n      return activityState.dehydrated;\n    }\n  }\n  // TODO: Implement this on ActivityComponent.\n  return null;\n}\n\nexport function getContainerFromFiber(fiber       )                   {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo           )\n    : null;\n}\n\nfunction assertIsMounted(fiber       ) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber       )               {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a        = fiber;\n  let b        = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw new Error(\n            'Child was not found in either parent set. This indicates a bug ' +\n              'in React related to the return pointer. Please file an issue.',\n          );\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw new Error(\n        \"Return fibers should always be each others' alternates. \" +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  if (a.tag !== HostRoot) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent       )               {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberImpl(node       )               {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  const tag = node.tag;\n  if (\n    tag === HostComponent ||\n    tag === HostHoistable ||\n    tag === HostSingleton ||\n    tag === HostText\n  ) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    const match = findCurrentHostFiberImpl(child);\n    if (match !== null) {\n      return match;\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent       )               {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberWithNoPortalsImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node       )               {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  const tag = node.tag;\n  if (\n    tag === HostComponent ||\n    tag === HostHoistable ||\n    tag === HostSingleton ||\n    tag === HostText\n  ) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      const match = findCurrentHostFiberWithNoPortalsImpl(child);\n      if (match !== null) {\n        return match;\n      }\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber       )          {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber       ,\n  childFiber       ,\n)          {\n  let node               = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n\nexport function traverseFragmentInstance         (\n  fragmentFiber       ,\n  fn                             ,\n  a   ,\n  b   ,\n  c   ,\n)       {\n  traverseVisibleHostChildren(fragmentFiber.child, false, fn, a, b, c);\n}\n\nexport function traverseFragmentInstanceDeeply         (\n  fragmentFiber       ,\n  fn                             ,\n  a   ,\n  b   ,\n  c   ,\n)       {\n  traverseVisibleHostChildren(fragmentFiber.child, true, fn, a, b, c);\n}\n\nfunction traverseVisibleHostChildren         (\n  child              ,\n  searchWithinHosts         ,\n  fn                             ,\n  a   ,\n  b   ,\n  c   ,\n)          {\n  while (child !== null) {\n    if (child.tag === HostComponent && fn(child, a, b, c)) {\n      return true;\n    } else if (\n      child.tag === OffscreenComponent &&\n      child.memoizedState !== null\n    ) {\n      // Skip hidden subtrees\n    } else {\n      if (\n        (searchWithinHosts || child.tag !== HostComponent) &&\n        traverseVisibleHostChildren(child.child, searchWithinHosts, fn, a, b, c)\n      ) {\n        return true;\n      }\n    }\n    child = child.sibling;\n  }\n  return false;\n}\n\nexport function getFragmentParentHostFiber(fiber       )               {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (parent.tag === HostRoot || parent.tag === HostComponent) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n\n  return null;\n}\n\nexport function getInstanceFromHostFiber   (fiber       )    {\n  switch (fiber.tag) {\n    case HostComponent:\n      return fiber.stateNode;\n    case HostRoot:\n      return fiber.stateNode.containerInfo;\n    default:\n      throw new Error('Expected to find a host node. This is a bug in React.');\n  }\n}\n\nlet searchTarget = null;\nlet searchBoundary = null;\nfunction pushSearchTarget(target              )       {\n  searchTarget = target;\n}\nfunction popSearchTarget()               {\n  return searchTarget;\n}\nfunction pushSearchBoundary(value              )       {\n  searchBoundary = value;\n}\nfunction popSearchBoundary()               {\n  return searchBoundary;\n}\n\nexport function getNextSiblingHostFiber(fiber       )               {\n  traverseVisibleHostChildren(fiber.sibling, false, findNextSibling);\n  const sibling = popSearchTarget();\n  pushSearchTarget(null);\n  return sibling;\n}\n\nfunction findNextSibling(child       )          {\n  pushSearchTarget(child);\n  return true;\n}\n\nexport function isFiberContainedBy(\n  maybeChild       ,\n  maybeParent       ,\n)          {\n  let parent = maybeParent.return;\n  if (parent === maybeChild || parent === maybeChild.alternate) {\n    return true;\n  }\n  while (parent !== null && parent !== maybeChild) {\n    if (\n      (parent.tag === HostComponent || parent.tag === HostRoot) &&\n      (parent.return === maybeChild || parent.return === maybeChild.alternate)\n    ) {\n      return true;\n    }\n    parent = parent.return;\n  }\n  return false;\n}\n\nexport function isFiberPreceding(fiber       , otherFiber       )          {\n  const commonAncestor = getLowestCommonAncestor(\n    fiber,\n    otherFiber,\n    getParentForFragmentAncestors,\n  );\n  if (commonAncestor === null) {\n    return false;\n  }\n  traverseVisibleHostChildren(\n    commonAncestor,\n    true,\n    isFiberPrecedingCheck,\n    otherFiber,\n    fiber,\n  );\n  const target = popSearchTarget();\n  pushSearchTarget(null);\n  return target !== null;\n}\n\nfunction isFiberPrecedingCheck(\n  child       ,\n  target       ,\n  boundary       ,\n)          {\n  if (child === boundary) {\n    return true;\n  }\n  if (child === target) {\n    pushSearchTarget(child);\n    return true;\n  }\n  return false;\n}\n\nexport function isFiberFollowing(fiber       , otherFiber       )          {\n  const commonAncestor = getLowestCommonAncestor(\n    fiber,\n    otherFiber,\n    getParentForFragmentAncestors,\n  );\n  if (commonAncestor === null) {\n    return false;\n  }\n  traverseVisibleHostChildren(\n    commonAncestor,\n    true,\n    isFiberFollowingCheck,\n    otherFiber,\n    fiber,\n  );\n  const target = popSearchTarget();\n  pushSearchTarget(null);\n  pushSearchBoundary(null);\n  return target !== null;\n}\n\nfunction isFiberFollowingCheck(\n  child       ,\n  target       ,\n  boundary       ,\n)          {\n  if (child === boundary) {\n    pushSearchBoundary(child);\n    return false;\n  }\n  if (child === target) {\n    // The target is only following if we already found the boundary.\n    if (popSearchBoundary() !== null) {\n      pushSearchTarget(child);\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction getParentForFragmentAncestors(inst              )               {\n  if (inst === null) {\n    return null;\n  }\n  do {\n    inst = inst === null ? null : inst.return;\n  } while (\n    inst &&\n    inst.tag !== HostComponent &&\n    inst.tag !== HostSingleton &&\n    inst.tag !== HostRoot\n  );\n  if (inst) {\n    return inst;\n  }\n  return null;\n}\n\n/**\n * Return the lowest common ancestor of A and B, or null if they are in\n * different trees.\n */\nexport function getLowestCommonAncestor(\n  instA       ,\n  instB       ,\n  getParent                                      ,\n)               {\n  let nodeA               = instA;\n  let nodeB               = instB;\n  let depthA = 0;\n  for (let tempA               = nodeA; tempA; tempA = getParent(tempA)) {\n    depthA++;\n  }\n  let depthB = 0;\n  for (let tempB               = nodeB; tempB; tempB = getParent(tempB)) {\n    depthB++;\n  }\n\n  // If A is deeper, crawl up.\n  while (depthA - depthB > 0) {\n    nodeA = getParent(nodeA);\n    depthA--;\n  }\n\n  // If B is deeper, crawl up.\n  while (depthB - depthA > 0) {\n    nodeB = getParent(nodeB);\n    depthB--;\n  }\n\n  // Walk in lockstep until we find a match.\n  let depth = depthA;\n  while (depth--) {\n    if (nodeA === nodeB || (nodeB !== null && nodeA === nodeB.alternate)) {\n      return nodeA;\n    }\n    nodeA = getParent(nodeA);\n    nodeB = getParent(nodeB);\n  }\n  return null;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                            \n\nexport const LegacyRoot = 0;\nexport const ConcurrentRoot = 1;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {renameElementSymbol} from 'shared/ReactFeatureFlags';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types.\nexport const REACT_LEGACY_ELEMENT_TYPE         = Symbol.for('react.element');\nexport const REACT_ELEMENT_TYPE         = renameElementSymbol\n  ? Symbol.for('react.transitional.element')\n  : REACT_LEGACY_ELEMENT_TYPE;\nexport const REACT_PORTAL_TYPE         = Symbol.for('react.portal');\nexport const REACT_FRAGMENT_TYPE         = Symbol.for('react.fragment');\nexport const REACT_STRICT_MODE_TYPE         = Symbol.for('react.strict_mode');\nexport const REACT_PROFILER_TYPE         = Symbol.for('react.profiler');\nexport const REACT_PROVIDER_TYPE         = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\nexport const REACT_CONSUMER_TYPE         = Symbol.for('react.consumer');\nexport const REACT_CONTEXT_TYPE         = Symbol.for('react.context');\nexport const REACT_FORWARD_REF_TYPE         = Symbol.for('react.forward_ref');\nexport const REACT_SUSPENSE_TYPE         = Symbol.for('react.suspense');\nexport const REACT_SUSPENSE_LIST_TYPE         = Symbol.for(\n  'react.suspense_list',\n);\nexport const REACT_MEMO_TYPE         = Symbol.for('react.memo');\nexport const REACT_LAZY_TYPE         = Symbol.for('react.lazy');\nexport const REACT_SCOPE_TYPE         = Symbol.for('react.scope');\nexport const REACT_ACTIVITY_TYPE         = Symbol.for('react.activity');\nexport const REACT_LEGACY_HIDDEN_TYPE         = Symbol.for(\n  'react.legacy_hidden',\n);\nexport const REACT_TRACING_MARKER_TYPE         = Symbol.for(\n  'react.tracing_marker',\n);\n\nexport const REACT_MEMO_CACHE_SENTINEL         = Symbol.for(\n  'react.memo_cache_sentinel',\n);\n\nexport const REACT_POSTPONE_TYPE         = Symbol.for('react.postpone');\n\nexport const REACT_VIEW_TRANSITION_TYPE         = Symbol.for(\n  'react.view_transition',\n);\n\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable      )                        {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n\nexport const ASYNC_ITERATOR = Symbol.asyncIterator;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                       \n                                                                       \n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_CONSUMER_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n  REACT_VIEW_TRANSITION_TYPE,\n  REACT_ACTIVITY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {\n  enableTransitionTracing,\n  enableRenderableContext,\n  enableViewTransition,\n} from './ReactFeatureFlags';\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getWrappedName(\n  outerType       ,\n  innerType     ,\n  wrapperName        ,\n)         {\n  const displayName = (outerType     ).displayName;\n  if (displayName) {\n    return displayName;\n  }\n  const functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName;\n}\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getContextName(type                   ) {\n  return type.displayName || 'Context';\n}\n\nconst REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\n\n// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\nexport default function getComponentNameFromType(type       )                {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (typeof type === 'function') {\n    if ((type     ).$$typeof === REACT_CLIENT_REFERENCE) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n    return (type     ).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n    case REACT_ACTIVITY_TYPE:\n      return 'Activity';\n    case REACT_VIEW_TRANSITION_TYPE:\n      if (enableViewTransition) {\n        return 'ViewTransition';\n      }\n    // Fall through\n    case REACT_TRACING_MARKER_TYPE:\n      if (enableTransitionTracing) {\n        return 'TracingMarker';\n      }\n  }\n  if (typeof type === 'object') {\n    if (__DEV__) {\n      if (typeof (type     ).tag === 'number') {\n        console.error(\n          'Received an unexpected object in getComponentNameFromType(). ' +\n            'This is likely a bug in React. Please file an issue.',\n        );\n      }\n    }\n    switch (type.$$typeof) {\n      case REACT_PORTAL_TYPE:\n        return 'Portal';\n      case REACT_PROVIDER_TYPE:\n        if (enableRenderableContext) {\n          return null;\n        } else {\n          const provider = (type     );\n          return getContextName(provider._context) + '.Provider';\n        }\n      case REACT_CONTEXT_TYPE:\n        const context                    = (type     );\n        if (enableRenderableContext) {\n          return getContextName(context) + '.Provider';\n        } else {\n          return getContextName(context) + '.Consumer';\n        }\n      case REACT_CONSUMER_TYPE:\n        if (enableRenderableContext) {\n          const consumer                         = (type     );\n          return getContextName(consumer._context) + '.Consumer';\n        } else {\n          return null;\n        }\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        const outerName = (type     ).displayName || null;\n        if (outerName !== null) {\n          return outerName;\n        }\n        return getComponentNameFromType(type.type) || 'Memo';\n      case REACT_LAZY_TYPE: {\n        const lazyComponent                          = (type     );\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentNameFromType(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n    }\n  }\n  return null;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                       \n                                                \n\nimport {\n  disableLegacyMode,\n  enableLegacyHidden,\n  enableRenderableContext,\n  enableViewTransition,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostPortal,\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostText,\n  Fragment,\n  Mode,\n  ContextConsumer,\n  ContextProvider,\n  ForwardRef,\n  Profiler,\n  SuspenseComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  IncompleteFunctionComponent,\n  DehydratedFragment,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n  Throw,\n  ViewTransitionComponent,\n  ActivityComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\n                                                                \n\n// Keep in sync with shared/getComponentNameFromType\nfunction getWrappedName(\n  outerType       ,\n  innerType     ,\n  wrapperName        ,\n)         {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType     ).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getContextName(type                   ) {\n  return type.displayName || 'Context';\n}\n\nexport function getComponentNameFromOwner(\n  owner                            ,\n)                {\n  if (typeof owner.tag === 'number') {\n    return getComponentNameFromFiber((owner     ));\n  }\n  if (typeof owner.name === 'string') {\n    return owner.name;\n  }\n  return null;\n}\n\nexport default function getComponentNameFromFiber(fiber       )                {\n  const {tag, type} = fiber;\n  switch (tag) {\n    case ActivityComponent:\n      return 'Activity';\n    case CacheComponent:\n      return 'Cache';\n    case ContextConsumer:\n      if (enableRenderableContext) {\n        const consumer                         = (type     );\n        return getContextName(consumer._context) + '.Consumer';\n      } else {\n        const context                    = (type     );\n        return getContextName(context) + '.Consumer';\n      }\n    case ContextProvider:\n      if (enableRenderableContext) {\n        const context                    = (type     );\n        return getContextName(context) + '.Provider';\n      } else {\n        const provider = (type     );\n        return getContextName(provider._context) + '.Provider';\n      }\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n    case Fragment:\n      return 'Fragment';\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n    case HostPortal:\n      return 'Portal';\n    case HostRoot:\n      return 'Root';\n    case HostText:\n      return 'Text';\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n      return 'Mode';\n    case OffscreenComponent:\n      return 'Offscreen';\n    case Profiler:\n      return 'Profiler';\n    case ScopeComponent:\n      return 'Scope';\n    case SuspenseComponent:\n      return 'Suspense';\n    case SuspenseListComponent:\n      return 'SuspenseList';\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    case ViewTransitionComponent:\n      if (enableViewTransition) {\n        return 'ViewTransition';\n      }\n    // The display name for these tags come from the user-provided type:\n    // Fallthrough\n    case IncompleteClassComponent:\n    case IncompleteFunctionComponent:\n      if (disableLegacyMode) {\n        break;\n      }\n    // Fallthrough\n    case ClassComponent:\n    case FunctionComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return (type     ).displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      break;\n    case LegacyHiddenComponent:\n      if (enableLegacyHidden) {\n        return 'LegacyHidden';\n      }\n      break;\n    case Throw: {\n      if (__DEV__) {\n        // For an error in child position we use the name of the inner most parent component.\n        // Whether a Server Component or the parent Fiber.\n        const debugInfo = fiber._debugInfo;\n        if (debugInfo != null) {\n          for (let i = debugInfo.length - 1; i >= 0; i--) {\n            if (typeof debugInfo[i].name === 'string') {\n              return debugInfo[i].name;\n            }\n          }\n        }\n        if (fiber.return === null) {\n          return null;\n        }\n        return getComponentNameFromFiber(fiber.return);\n      }\n      return null;\n    }\n  }\n\n  return null;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                      \n\nconst isArrayImpl = Array.isArray;\n\nfunction isArray(a       )          {\n  return isArrayImpl(a);\n}\n\nexport default isArray;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\n//\n// It exists as a placeholder so that DevTools can support work tag changes between releases.\n// When we next publish a release, update the matching TODO in backend/renderer.js\n// TODO: This module is used both by the release scripts and to expose a version\n// at runtime. We should instead inject the version number as part of the build\n// process, and use the ReactVersions.js module as the single source of truth.\nexport default '19.1.0';\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  if (__DEV__) {\n    const constructor = publicInstance.constructor;\n    const componentName =\n      (constructor && (constructor.displayName || constructor.name)) ||\n      'ReactClass';\n    const warningKey = `${componentName}.${callerName}`;\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n    console.error(\n      \"Can't call %s on a component that is not yet mounted. \" +\n        'This is a no-op, but it might indicate a bug in your application. ' +\n        'Instead, assign to `this.state` directly or define a `state = {};` ' +\n        'class property with the desired state in the %s component.',\n      callerName,\n      componentName,\n    );\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nconst ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (\n    publicInstance,\n    completeState,\n    callback,\n    callerName,\n  ) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (\n    publicInstance,\n    partialState,\n    callback,\n    callerName,\n  ) {\n    warnNoop(publicInstance, 'setState');\n  },\n};\n\nexport default ReactNoopUpdateQueue;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nconst assign = Object.assign;\n\nexport default assign;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport ReactNoopUpdateQueue from './ReactNoopUpdateQueue';\nimport assign from 'shared/assign';\n\nconst emptyObject = {};\nif (__DEV__) {\n  Object.freeze(emptyObject);\n}\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  // If a component has string refs, we will assign a different object later.\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nComponent.prototype.setState = function (partialState, callback) {\n  if (\n    typeof partialState !== 'object' &&\n    typeof partialState !== 'function' &&\n    partialState != null\n  ) {\n    throw new Error(\n      'takes an object of state variables to update or a ' +\n        'function which returns an object of state variables.',\n    );\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (__DEV__) {\n  const deprecatedAPIs = {\n    isMounted: [\n      'isMounted',\n      'Instead, make sure to clean up subscriptions and pending requests in ' +\n        'componentWillUnmount to prevent memory leaks.',\n    ],\n    replaceState: [\n      'replaceState',\n      'Refactor your code to use setState instead (see ' +\n        'https://github.com/facebook/react/issues/3236).',\n    ],\n  };\n  const defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        console.warn(\n          '%s(...) is deprecated in plain JavaScript React classes. %s',\n          info[0],\n          info[1],\n        );\n        return undefined;\n      },\n    });\n  };\n  for (const fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\nComponentDummy.prototype = Component.prototype;\n\n/**\n * Convenience component with default shallow equality check for sCU.\n */\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  // If a component has string refs, we will assign a different object later.\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nconst pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());\npureComponentPrototype.constructor = PureComponent;\n// Avoid an extra prototype jump for these methods.\nassign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\nexport {Component, PureComponent};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nexport default function noop() {}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n// $FlowFixMe[method-unbinding]\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\nimport assign from 'shared/assign';\nimport {\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\nimport {checkKeyStringCoercion} from 'shared/CheckStringCoercion';\nimport isArray from 'shared/isArray';\nimport {\n  disableDefaultPropsExceptForClasses,\n  ownerStackLimit,\n} from 'shared/ReactFeatureFlags';\n\nconst createTask =\n  // eslint-disable-next-line react-internal/no-production-logging\n  __DEV__ && console.createTask\n    ? // eslint-disable-next-line react-internal/no-production-logging\n      console.createTask\n    : () => null;\n\nfunction getTaskName(type) {\n  if (type === REACT_FRAGMENT_TYPE) {\n    return '<>';\n  }\n  if (\n    typeof type === 'object' &&\n    type !== null &&\n    type.$$typeof === REACT_LAZY_TYPE\n  ) {\n    // We don't want to eagerly initialize the initializer in DEV mode so we can't\n    // call it to extract the type so we don't know the type of this component.\n    return '<...>';\n  }\n  try {\n    const name = getComponentNameFromType(type);\n    return name ? '<' + name + '>' : '<...>';\n  } catch (x) {\n    return '<...>';\n  }\n}\n\nfunction getOwner() {\n  if (__DEV__) {\n    const dispatcher = ReactSharedInternals.A;\n    if (dispatcher === null) {\n      return null;\n    }\n    return dispatcher.getOwner();\n  }\n  return null;\n}\n\n/** @noinline */\nfunction UnknownOwner() {\n  /** @noinline */\n  return (() => Error('react-stack-top-frame'))();\n}\nconst createFakeCallStack = {\n  'react-stack-bottom-frame': function (callStackForError) {\n    return callStackForError();\n  },\n};\n\nlet specialPropKeyWarningShown;\nlet didWarnAboutElementRef;\nlet didWarnAboutOldJSXRuntime;\nlet unknownOwnerDebugStack;\nlet unknownOwnerDebugTask;\n\nif (__DEV__) {\n  didWarnAboutElementRef = {};\n\n  // We use this technique to trick minifiers to preserve the function name.\n  unknownOwnerDebugStack = createFakeCallStack['react-stack-bottom-frame'].bind(\n    createFakeCallStack,\n    UnknownOwner,\n  )();\n  unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n}\n\nfunction hasValidRef(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'ref')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'key')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  if (__DEV__) {\n    const warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n        console.error(\n          '%s: `key` is not a prop. Trying to access it will result ' +\n            'in `undefined` being returned. If you need to access the same ' +\n            'value within the child component, you should pass it as a different ' +\n            'prop. (https://react.dev/link/special-props)',\n          displayName,\n        );\n      }\n    };\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true,\n    });\n  }\n}\n\nfunction elementRefGetterWithDeprecationWarning() {\n  if (__DEV__) {\n    const componentName = getComponentNameFromType(this.type);\n    if (!didWarnAboutElementRef[componentName]) {\n      didWarnAboutElementRef[componentName] = true;\n      console.error(\n        'Accessing element.ref was removed in React 19. ref is now a ' +\n          'regular prop. It will be removed from the JSX Element ' +\n          'type in a future release.',\n      );\n    }\n\n    // An undefined `element.ref` is coerced to `null` for\n    // backwards compatibility.\n    const refProp = this.props.ref;\n    return refProp !== undefined ? refProp : null;\n  }\n}\n\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.transitional.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\nfunction ReactElement(\n  type,\n  key,\n  self,\n  source,\n  owner,\n  props,\n  debugStack,\n  debugTask,\n) {\n  // Ignore whatever was passed as the ref argument and treat `props.ref` as\n  // the source of truth. The only thing we use this for is `element.ref`,\n  // which will log a deprecation warning on access. In the next release, we\n  // can remove `element.ref` as well as the `ref` argument.\n  const refProp = props.ref;\n\n  // An undefined `element.ref` is coerced to `null` for\n  // backwards compatibility.\n  const ref = refProp !== undefined ? refProp : null;\n\n  let element;\n  if (__DEV__) {\n    // In dev, make `ref` a non-enumerable property with a warning. It's non-\n    // enumerable so that test matchers and serializers don't access it and\n    // trigger the warning.\n    //\n    // `ref` will be removed from the element completely in a future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n\n      // Built-in properties that belong on the element\n      type,\n      key,\n\n      props,\n\n      // Record the component responsible for creating this element.\n      _owner: owner,\n    };\n    if (ref !== null) {\n      Object.defineProperty(element, 'ref', {\n        enumerable: false,\n        get: elementRefGetterWithDeprecationWarning,\n      });\n    } else {\n      // Don't warn on access if a ref is not given. This reduces false\n      // positives in cases where a test serializer uses\n      // getOwnPropertyDescriptors to compare objects, like Jest does, which is\n      // a problem because it bypasses non-enumerability.\n      //\n      // So unfortunately this will trigger a false positive warning in Jest\n      // when the diff is printed:\n      //\n      //   expect(<div ref={ref} />).toEqual(<span ref={ref} />);\n      //\n      // A bit sketchy, but this is what we've done for the `props.key` and\n      // `props.ref` accessors for years, which implies it will be good enough\n      // for `element.ref`, too. Let's see if anyone complains.\n      Object.defineProperty(element, 'ref', {\n        enumerable: false,\n        value: null,\n      });\n    }\n  } else {\n    // In prod, `ref` is a regular property and _owner doesn't exist.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n\n      // Built-in properties that belong on the element\n      type,\n      key,\n      ref,\n\n      props,\n    };\n  }\n\n  if (__DEV__) {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: 0,\n    });\n    // debugInfo contains Server Component debug information.\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null,\n    });\n    Object.defineProperty(element, '_debugStack', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: debugStack,\n    });\n    Object.defineProperty(element, '_debugTask', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: debugTask,\n    });\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\nexport function jsxProd(type, config, maybeKey) {\n  let key = null;\n\n  // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n  if (maybeKey !== undefined) {\n    if (__DEV__) {\n      checkKeyStringCoercion(maybeKey);\n    }\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    if (__DEV__) {\n      checkKeyStringCoercion(config.key);\n    }\n    key = '' + config.key;\n  }\n\n  let props;\n  if (!('key' in config)) {\n    // If key was not spread in, we can reuse the original props object. This\n    // only works for `jsx`, not `createElement`, because `jsx` is a compiler\n    // target and the compiler always passes a new object. For `createElement`,\n    // we can't assume a new object is passed every time because it can be\n    // called manually.\n    //\n    // Spreading key is a warning in dev. In a future release, we will not\n    // remove a spread key from the props object. (But we'll still warn.) We'll\n    // always pass the object straight through.\n    props = config;\n  } else {\n    // We need to remove reserved props (key, prop, ref). Create a fresh props\n    // object and copy over all the non-reserved props. We don't use `delete`\n    // because in V8 it will deopt the object to dictionary mode.\n    props = {};\n    for (const propName in config) {\n      // Skip over reserved prop names\n      if (propName !== 'key') {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  if (!disableDefaultPropsExceptForClasses) {\n    // Resolve default props\n    if (type && type.defaultProps) {\n      const defaultProps = type.defaultProps;\n      for (const propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n  }\n\n  return ReactElement(\n    type,\n    key,\n    undefined,\n    undefined,\n    getOwner(),\n    props,\n    undefined,\n    undefined,\n  );\n}\n\n// While `jsxDEV` should never be called when running in production, we do\n// support `jsx` and `jsxs` when running in development. This supports the case\n// where a third-party dependency ships code that was compiled for production;\n// we want to still provide warnings in development.\n//\n// So these functions are the _dev_ implementations of the _production_\n// API signatures.\n//\n// Since these functions are dev-only, it's ok to add an indirection here. They\n// only exist to provide different versions of `isStaticChildren`. (We shouldn't\n// use this pattern for the prod versions, though, because it will add an call\n// frame.)\nexport function jsxProdSignatureRunningInDevWithDynamicChildren(\n  type,\n  config,\n  maybeKey,\n  source,\n  self,\n) {\n  if (__DEV__) {\n    const isStaticChildren = false;\n    const trackActualOwner =\n      __DEV__ &&\n      ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;\n    return jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      __DEV__ &&\n        (trackActualOwner\n          ? Error('react-stack-top-frame')\n          : unknownOwnerDebugStack),\n      __DEV__ &&\n        (trackActualOwner\n          ? createTask(getTaskName(type))\n          : unknownOwnerDebugTask),\n    );\n  }\n}\n\nexport function jsxProdSignatureRunningInDevWithStaticChildren(\n  type,\n  config,\n  maybeKey,\n  source,\n  self,\n) {\n  if (__DEV__) {\n    const isStaticChildren = true;\n    const trackActualOwner =\n      __DEV__ &&\n      ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;\n    return jsxDEVImpl(\n      type,\n      config,\n      maybeKey,\n      isStaticChildren,\n      source,\n      self,\n      __DEV__ &&\n        (trackActualOwner\n          ? Error('react-stack-top-frame')\n          : unknownOwnerDebugStack),\n      __DEV__ &&\n        (trackActualOwner\n          ? createTask(getTaskName(type))\n          : unknownOwnerDebugTask),\n    );\n  }\n}\n\nconst didWarnAboutKeySpread = {};\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\nexport function jsxDEV(type, config, maybeKey, isStaticChildren, source, self) {\n  const trackActualOwner =\n    __DEV__ &&\n    ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;\n  return jsxDEVImpl(\n    type,\n    config,\n    maybeKey,\n    isStaticChildren,\n    source,\n    self,\n    __DEV__ &&\n      (trackActualOwner\n        ? Error('react-stack-top-frame')\n        : unknownOwnerDebugStack),\n    __DEV__ &&\n      (trackActualOwner\n        ? createTask(getTaskName(type))\n        : unknownOwnerDebugTask),\n  );\n}\n\nfunction jsxDEVImpl(\n  type,\n  config,\n  maybeKey,\n  isStaticChildren,\n  source,\n  self,\n  debugStack,\n  debugTask,\n) {\n  if (__DEV__) {\n    // We don't warn for invalid element type here because with owner stacks,\n    // we error in the renderer. The renderer is the only one that knows what\n    // types are valid for this particular renderer so we let it error there.\n\n    // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing\n    // errors. We don't want exception behavior to differ between dev and\n    // prod. (Rendering will throw with a helpful message and as soon as the\n    // type is fixed, the key warnings will appear.)\n    // With owner stacks, we no longer need the type here so this comment is\n    // no longer true. Which is why we can run this even for invalid types.\n    const children = config.children;\n    if (children !== undefined) {\n      if (isStaticChildren) {\n        if (isArray(children)) {\n          for (let i = 0; i < children.length; i++) {\n            validateChildKeys(children[i], type);\n          }\n\n          if (Object.freeze) {\n            Object.freeze(children);\n          }\n        } else {\n          console.error(\n            'React.jsx: Static children should always be an array. ' +\n              'You are likely explicitly calling React.jsxs or React.jsxDEV. ' +\n              'Use the Babel transform instead.',\n          );\n        }\n      } else {\n        validateChildKeys(children, type);\n      }\n    }\n\n    // Warn about key spread regardless of whether the type is valid.\n    if (hasOwnProperty.call(config, 'key')) {\n      const componentName = getComponentNameFromType(type);\n      const keys = Object.keys(config).filter(k => k !== 'key');\n      const beforeExample =\n        keys.length > 0\n          ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}'\n          : '{key: someKey}';\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        const afterExample =\n          keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n        console.error(\n          'A props object containing a \"key\" prop is being spread into JSX:\\n' +\n            '  let props = %s;\\n' +\n            '  <%s {...props} />\\n' +\n            'React keys must be passed directly to JSX without using spread:\\n' +\n            '  let props = %s;\\n' +\n            '  <%s key={someKey} {...props} />',\n          beforeExample,\n          componentName,\n          afterExample,\n          componentName,\n        );\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    let key = null;\n\n    // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n    if (maybeKey !== undefined) {\n      if (__DEV__) {\n        checkKeyStringCoercion(maybeKey);\n      }\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n      key = '' + config.key;\n    }\n\n    let props;\n    if (!('key' in config)) {\n      // If key was not spread in, we can reuse the original props object. This\n      // only works for `jsx`, not `createElement`, because `jsx` is a compiler\n      // target and the compiler always passes a new object. For `createElement`,\n      // we can't assume a new object is passed every time because it can be\n      // called manually.\n      //\n      // Spreading key is a warning in dev. In a future release, we will not\n      // remove a spread key from the props object. (But we'll still warn.) We'll\n      // always pass the object straight through.\n      props = config;\n    } else {\n      // We need to remove reserved props (key, prop, ref). Create a fresh props\n      // object and copy over all the non-reserved props. We don't use `delete`\n      // because in V8 it will deopt the object to dictionary mode.\n      props = {};\n      for (const propName in config) {\n        // Skip over reserved prop names\n        if (propName !== 'key') {\n          props[propName] = config[propName];\n        }\n      }\n    }\n\n    if (!disableDefaultPropsExceptForClasses) {\n      // Resolve default props\n      if (type && type.defaultProps) {\n        const defaultProps = type.defaultProps;\n        for (const propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      }\n    }\n\n    if (key) {\n      const displayName =\n        typeof type === 'function'\n          ? type.displayName || type.name || 'Unknown'\n          : type;\n      defineKeyPropWarningGetter(props, displayName);\n    }\n\n    return ReactElement(\n      type,\n      key,\n      self,\n      source,\n      getOwner(),\n      props,\n      debugStack,\n      debugTask,\n    );\n  }\n}\n\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\nexport function createElement(type, config, children) {\n  if (__DEV__) {\n    // We don't warn for invalid element type here because with owner stacks,\n    // we error in the renderer. The renderer is the only one that knows what\n    // types are valid for this particular renderer so we let it error there.\n\n    // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing\n    // errors. We don't want exception behavior to differ between dev and\n    // prod. (Rendering will throw with a helpful message and as soon as the\n    // type is fixed, the key warnings will appear.)\n    for (let i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n\n    // Unlike the jsx() runtime, createElement() doesn't warn about key spread.\n  }\n\n  let propName;\n\n  // Reserved names are extracted\n  const props = {};\n\n  let key = null;\n\n  if (config != null) {\n    if (__DEV__) {\n      if (\n        !didWarnAboutOldJSXRuntime &&\n        '__self' in config &&\n        // Do not assume this is the result of an oudated JSX transform if key\n        // is present, because the modern JSX transform sometimes outputs\n        // createElement to preserve precedence between a static key and a\n        // spread key. To avoid false positive warnings, we never warn if\n        // there's a key.\n        !('key' in config)\n      ) {\n        didWarnAboutOldJSXRuntime = true;\n        console.warn(\n          'Your app (or one of its dependencies) is using an outdated JSX ' +\n            'transform. Update to the modern JSX transform for ' +\n            'faster performance: https://react.dev/link/new-jsx-transform',\n        );\n      }\n    }\n\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n      key = '' + config.key;\n    }\n\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (\n        hasOwnProperty.call(config, propName) &&\n        // Skip over reserved prop names\n        propName !== 'key' &&\n        // Even though we don't use these anymore in the runtime, we don't want\n        // them to appear as props, so in createElement we filter them out.\n        // We don't have to do this in the jsx() runtime because the jsx()\n        // transform never passed these as props; it used separate arguments.\n        propName !== '__self' &&\n        propName !== '__source'\n      ) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  const childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    if (__DEV__) {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n  if (__DEV__) {\n    if (key) {\n      const displayName =\n        typeof type === 'function'\n          ? type.displayName || type.name || 'Unknown'\n          : type;\n      defineKeyPropWarningGetter(props, displayName);\n    }\n  }\n  const trackActualOwner =\n    __DEV__ &&\n    ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;\n  return ReactElement(\n    type,\n    key,\n    undefined,\n    undefined,\n    getOwner(),\n    props,\n    __DEV__ &&\n      (trackActualOwner\n        ? Error('react-stack-top-frame')\n        : unknownOwnerDebugStack),\n    __DEV__ &&\n      (trackActualOwner\n        ? createTask(getTaskName(type))\n        : unknownOwnerDebugTask),\n  );\n}\n\nexport function cloneAndReplaceKey(oldElement, newKey) {\n  const clonedElement = ReactElement(\n    oldElement.type,\n    newKey,\n    undefined,\n    undefined,\n    !__DEV__ ? undefined : oldElement._owner,\n    oldElement.props,\n    __DEV__ && oldElement._debugStack,\n    __DEV__ && oldElement._debugTask,\n  );\n  if (__DEV__) {\n    // The cloned element should inherit the original element's key validation.\n    if (oldElement._store) {\n      clonedElement._store.validated = oldElement._store.validated;\n    }\n  }\n  return clonedElement;\n}\n\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\nexport function cloneElement(element, config, children) {\n  if (element === null || element === undefined) {\n    throw new Error(\n      `The argument must be a React element, but you passed ${element}.`,\n    );\n  }\n\n  let propName;\n\n  // Original props are copied\n  const props = assign({}, element.props);\n\n  // Reserved names are extracted\n  let key = element.key;\n\n  // Owner will be preserved, unless ref is overridden\n  let owner = !__DEV__ ? undefined : element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      owner = __DEV__ ? getOwner() : undefined;\n    }\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n      key = '' + config.key;\n    }\n\n    // Remaining properties override existing props\n    let defaultProps;\n    if (\n      !disableDefaultPropsExceptForClasses &&\n      element.type &&\n      element.type.defaultProps\n    ) {\n      defaultProps = element.type.defaultProps;\n    }\n    for (propName in config) {\n      if (\n        hasOwnProperty.call(config, propName) &&\n        // Skip over reserved prop names\n        propName !== 'key' &&\n        // ...and maybe these, too, though we currently rely on them for\n        // warnings and debug information in dev. Need to decide if we're OK\n        // with dropping them. In the jsx() runtime it's not an issue because\n        // the data gets passed as separate arguments instead of props, but\n        // it would be nice to stop relying on them entirely so we can drop\n        // them from the internal Fiber field.\n        propName !== '__self' &&\n        propName !== '__source' &&\n        // Undefined `ref` is ignored by cloneElement. We treat it the same as\n        // if the property were missing. This is mostly for\n        // backwards compatibility.\n        !(propName === 'ref' && config.ref === undefined)\n      ) {\n        if (\n          !disableDefaultPropsExceptForClasses &&\n          config[propName] === undefined &&\n          defaultProps !== undefined\n        ) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  const childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  const clonedElement = ReactElement(\n    element.type,\n    key,\n    undefined,\n    undefined,\n    owner,\n    props,\n    __DEV__ && element._debugStack,\n    __DEV__ && element._debugTask,\n  );\n\n  for (let i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], clonedElement.type);\n  }\n\n  return clonedElement;\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (__DEV__) {\n    // With owner stacks is, no warnings happens. All we do is\n    // mark elements as being in a valid static child position so they\n    // don't need keys.\n    if (isValidElement(node)) {\n      if (node._store) {\n        node._store.validated = 1;\n      }\n    }\n  }\n}\n\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\nexport function isValidElement(object) {\n  return (\n    typeof object === 'object' &&\n    object !== null &&\n    object.$$typeof === REACT_ELEMENT_TYPE\n  );\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                        \n                                                                             \n                                                       \n                                                                       \n\nimport {enableGestureTransition} from 'shared/ReactFeatureFlags';\n\n                                                           \n                                       \n             \n                  \n                  \n                \n\n                                 \n                                                           \n                                                           \n                                                                  \n                                    \n                                           \n\n             \n\n                         \n                                       \n\n                                                                 \n                           \n\n                                                                   \n                            \n                                   \n\n                                                                            \n                                                                                \n                                 \n                         \n\n                                               \n                             \n\n                           \n                                         \n\n                         \n                                \n  \n\n                                                          \n\nconst ReactSharedInternals                    = ({\n  H: null,\n  A: null,\n  T: null,\n  S: null,\n}     );\nif (enableGestureTransition) {\n  ReactSharedInternals.G = null;\n}\n\nif (__DEV__) {\n  ReactSharedInternals.actQueue = null;\n  ReactSharedInternals.asyncTransitions = 0;\n  ReactSharedInternals.isBatchingLegacy = false;\n  ReactSharedInternals.didScheduleLegacyUpdate = false;\n  ReactSharedInternals.didUsePromise = false;\n  ReactSharedInternals.thrownErrors = [];\n  // Stack implementation injected by the current renderer.\n  ReactSharedInternals.getCurrentStack = (null                       );\n  ReactSharedInternals.recentlyCreatedOwnerStacks = 0;\n}\n\nexport default ReactSharedInternals;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nconst reportGlobalError                         =\n  typeof reportError === 'function'\n    ? // In modern browsers, reportError will dispatch an error event,\n      // emulating an uncaught JavaScript error.\n      reportError\n    : error => {\n        if (\n          typeof window === 'object' &&\n          typeof window.ErrorEvent === 'function'\n        ) {\n          // Browser Polyfill\n          const message =\n            typeof error === 'object' &&\n            error !== null &&\n            typeof error.message === 'string'\n              ? // eslint-disable-next-line react-internal/safe-string-coercion\n                String(error.message)\n              : // eslint-disable-next-line react-internal/safe-string-coercion\n                String(error);\n          const event = new window.ErrorEvent('error', {\n            bubbles: true,\n            cancelable: true,\n            message: message,\n            error: error,\n          });\n          const shouldLog = window.dispatchEvent(event);\n          if (!shouldLog) {\n            return;\n          }\n        } else if (\n          typeof process === 'object' &&\n          // $FlowFixMe[method-unbinding]\n          typeof process.emit === 'function'\n        ) {\n          // Node Polyfill\n          process.emit('uncaughtException', error);\n          return;\n        }\n        console['error'](error);\n      };\n\nexport default reportGlobalError;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;\n\nexport default ReactSharedInternals;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n/* eslint-disable react-internal/prod-error-codes */\n\n// We expect that our Rollup, Jest, and Flow configurations\n// always shim this module with the corresponding host config\n// (either provided by a renderer, or a generic shim for npm).\n//\n// We should never resolve to this file, but it exists to make\n// sure that if we *do* accidentally break the configuration,\n// the failure isn't silent.\n\nthrow new Error('This module must be shimmed by a specific renderer.');\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n\n                                          \n\nconst valueStack             = [];\n\nlet fiberStack                     ;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor   (defaultValue   )                 {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty()          {\n  return index === -1;\n}\n\nfunction pop   (cursor                , fiber       )       {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push   (cursor                , value   , fiber       )       {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n                                                   \n\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nimport {createCursor, push, pop} from './ReactFiberStack';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = ({}                     );\n}\n\nexport const emptyContextObject     = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor                      =\n  createCursor(emptyContextObject);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor                       = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext         = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress       ,\n  Component          ,\n  didPushOwnContextIfProvider         ,\n)         {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress       ,\n  unmaskedContext        ,\n  maskedContext        ,\n)       {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress       ,\n  unmaskedContext        ,\n)         {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context                         = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged()          {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type          )          {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber       )       {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber       )       {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber       ,\n  context        ,\n  didChange         ,\n)       {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw new Error(\n        'Unexpected context found on stack. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber       ,\n  type     ,\n  parentContext        ,\n)         {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error(\n          `${\n            getComponentNameFromFiber(fiber) || 'Unknown'\n          }.getChildContext(): key \"${contextKey}\" is not defined in childContextTypes.`,\n        );\n      }\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress       )          {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress       ,\n  type     ,\n  didChange         ,\n)       {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw new Error(\n        'Expected to have an instance by this point. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber       )         {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    let node        = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      // $FlowFixMe[incompatible-type] we bail out when we get a null\n      node = node.return;\n    } while (node !== null);\n\n    throw new Error(\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                               \n                                            \n                                                                 \n                                                               \n                                                                              \n                                                              \n\n                                                                            \n\n                                 \n                                     \n                           \n  \n\n                              \n                                                                              \n                                                                            \n                                         \n    \n                                                                     \n                                                      \n                                     \n                           \n  \n\n// We use the existence of the state object as an indicator that the component\n// is hidden.\n                              \n                                                                                \n                                                                           \n                                   \n                   \n                                     \n  \n\n                              \n                                        \n                                                       \n                                \n  \n\n                                  \n\nexport const OffscreenVisible = /*                     */ 0b001;\nexport const OffscreenPassiveEffectsConnected = /*     */ 0b010;\n\n                                 \n                                   \n                                                     \n                                       \n                                                        \n  \n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\n\nexport const clz32                        = Math.clz32\n  ? Math.clz32\n  : clz32Fallback;\n\n// Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(x        )         {\n  const asUint = x >>> 0;\n  if (asUint === 0) {\n    return 32;\n  }\n  return (31 - ((log(asUint) / LN2) | 0)) | 0;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                           \n                                                               \n                                                                    \n\n// TODO: Ideally these types would be opaque but that doesn't work well with\n// our reconciler fork infra, since these leak into non-reconciler packages.\n\n                           \n                          \n                                  \n\nimport {\n  enableRetryLaneExpiration,\n  enableSchedulingProfiler,\n  enableTransitionTracing,\n  enableUpdaterTracking,\n  syncLaneExpirationMs,\n  transitionLaneExpirationMs,\n  retryLaneExpirationMs,\n  disableLegacyMode,\n  enableDefaultTransitionIndicator,\n} from 'shared/ReactFeatureFlags';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook';\nimport {clz32} from './clz32';\nimport {LegacyRoot} from './ReactRootTags';\n\n// Lane values below should be kept in sync with getLabelForLane(), used by react-devtools-timeline.\n// If those values are changed that package should be rebuilt and redeployed.\n\nexport const TotalLanes = 31;\n\nexport const NoLanes        = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane       = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncHydrationLane       = /*               */ 0b0000000000000000000000000000001;\nexport const SyncLane       = /*                        */ 0b0000000000000000000000000000010;\nexport const SyncLaneIndex         = 1;\n\nexport const InputContinuousHydrationLane       = /*    */ 0b0000000000000000000000000000100;\nexport const InputContinuousLane       = /*             */ 0b0000000000000000000000000001000;\n\nexport const DefaultHydrationLane       = /*            */ 0b0000000000000000000000000010000;\nexport const DefaultLane       = /*                     */ 0b0000000000000000000000000100000;\n\nexport const SyncUpdateLanes       =\n  SyncLane | InputContinuousLane | DefaultLane;\n\nexport const GestureLane       = /*                     */ 0b0000000000000000000000001000000;\n\nconst TransitionHydrationLane       = /*                */ 0b0000000000000000000000010000000;\nconst TransitionLanes        = /*                       */ 0b0000000001111111111111100000000;\nconst TransitionLane1       = /*                        */ 0b0000000000000000000000100000000;\nconst TransitionLane2       = /*                        */ 0b0000000000000000000001000000000;\nconst TransitionLane3       = /*                        */ 0b0000000000000000000010000000000;\nconst TransitionLane4       = /*                        */ 0b0000000000000000000100000000000;\nconst TransitionLane5       = /*                        */ 0b0000000000000000001000000000000;\nconst TransitionLane6       = /*                        */ 0b0000000000000000010000000000000;\nconst TransitionLane7       = /*                        */ 0b0000000000000000100000000000000;\nconst TransitionLane8       = /*                        */ 0b0000000000000001000000000000000;\nconst TransitionLane9       = /*                        */ 0b0000000000000010000000000000000;\nconst TransitionLane10       = /*                       */ 0b0000000000000100000000000000000;\nconst TransitionLane11       = /*                       */ 0b0000000000001000000000000000000;\nconst TransitionLane12       = /*                       */ 0b0000000000010000000000000000000;\nconst TransitionLane13       = /*                       */ 0b0000000000100000000000000000000;\nconst TransitionLane14       = /*                       */ 0b0000000001000000000000000000000;\n\nconst RetryLanes        = /*                            */ 0b0000011110000000000000000000000;\nconst RetryLane1       = /*                             */ 0b0000000010000000000000000000000;\nconst RetryLane2       = /*                             */ 0b0000000100000000000000000000000;\nconst RetryLane3       = /*                             */ 0b0000001000000000000000000000000;\nconst RetryLane4       = /*                             */ 0b0000010000000000000000000000000;\n\nexport const SomeRetryLane       = RetryLane1;\n\nexport const SelectiveHydrationLane       = /*          */ 0b0000100000000000000000000000000;\n\nconst NonIdleLanes        = /*                          */ 0b0000111111111111111111111111111;\n\nexport const IdleHydrationLane       = /*               */ 0b0001000000000000000000000000000;\nexport const IdleLane       = /*                        */ 0b0010000000000000000000000000000;\n\nexport const OffscreenLane       = /*                   */ 0b0100000000000000000000000000000;\nexport const DeferredLane       = /*                    */ 0b1000000000000000000000000000000;\n\n// Any lane that might schedule an update. This is used to detect infinite\n// update loops, so it doesn't include hydration lanes or retries.\nexport const UpdateLanes        =\n  SyncLane | InputContinuousLane | DefaultLane | TransitionLanes;\n\nexport const HydrationLanes =\n  SyncHydrationLane |\n  InputContinuousHydrationLane |\n  DefaultHydrationLane |\n  TransitionHydrationLane |\n  SelectiveHydrationLane |\n  IdleHydrationLane;\n\n// This function is used for the experimental timeline (react-devtools-timeline)\n// It should be kept in sync with the Lanes values above.\nexport function getLabelForLane(lane      )                {\n  if (enableSchedulingProfiler) {\n    if (lane & SyncHydrationLane) {\n      return 'SyncHydrationLane';\n    }\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n    if (lane & DeferredLane) {\n      return 'Deferred';\n    }\n  }\n}\n\nexport const NoTimestamp = -1;\n\nlet nextTransitionLane       = TransitionLane1;\nlet nextRetryLane       = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes              )        {\n  const pendingSyncLanes = lanes & SyncUpdateLanes;\n  if (pendingSyncLanes !== 0) {\n    return pendingSyncLanes;\n  }\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncHydrationLane:\n      return SyncHydrationLane;\n    case SyncLane:\n      return SyncLane;\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n    case InputContinuousLane:\n      return InputContinuousLane;\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n    case DefaultLane:\n      return DefaultLane;\n    case GestureLane:\n      return GestureLane;\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n      return lanes & TransitionLanes;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n      return lanes & RetryLanes;\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n    case IdleLane:\n      return IdleLane;\n    case OffscreenLane:\n      return OffscreenLane;\n    case DeferredLane:\n      // This shouldn't be reachable because deferred work is always entangled\n      // with something else.\n      return NoLanes;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n      return lanes;\n  }\n}\n\nexport function getNextLanes(\n  root           ,\n  wipLanes       ,\n  rootHasPendingCommit         ,\n)        {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  let nextLanes        = NoLanes;\n\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const warmLanes = root.warmLanes;\n\n  // finishedLanes represents a completed tree that is ready to commit.\n  //\n  // It's not worth doing discarding the completed tree in favor of performing\n  // speculative work. So always check this before deciding to warm up\n  // the siblings.\n  //\n  // Note that this is not set in a \"suspend indefinitely\" scenario, like when\n  // suspending outside of a Suspense boundary, or in the shell during a\n  // transition \u2014 only in cases where we are very likely to commit the tree in\n  // a brief amount of time (i.e. below the \"Just Noticeable Difference\"\n  // threshold).\n  //\n\n  // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n  const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n  if (nonIdlePendingLanes !== NoLanes) {\n    // First check for fresh updates.\n    const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      // No fresh updates. Check if suspended work has been pinged.\n      const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      } else {\n        // Nothing has been pinged. Check for lanes that need to be prewarmed.\n        if (!rootHasPendingCommit) {\n          const lanesToPrewarm = nonIdlePendingLanes & ~warmLanes;\n          if (lanesToPrewarm !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(lanesToPrewarm);\n          }\n        }\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    // TODO: Idle isn't really used anywhere, and the thinking around\n    // speculative rendering has evolved since this was implemented. Consider\n    // removing until we've thought about this again.\n\n    // First check for fresh updates.\n    const unblockedLanes = pendingLanes & ~suspendedLanes;\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      // No fresh updates. Check if suspended work has been pinged.\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      } else {\n        // Nothing has been pinged. Check for lanes that need to be prewarmed.\n        if (!rootHasPendingCommit) {\n          const lanesToPrewarm = pendingLanes & ~warmLanes;\n          if (lanesToPrewarm !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(lanesToPrewarm);\n          }\n        }\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    const nextLane = getHighestPriorityLane(nextLanes);\n    const wipLane = getHighestPriorityLane(wipLanes);\n    if (\n      // Tests whether the next lane is equal or lower priority than the wip\n      // one. This works because the bits decrease in priority as you go left.\n      nextLane >= wipLane ||\n      // Default priority updates should not interrupt transition updates. The\n      // only difference between default updates and transition updates is that\n      // default updates do not support refresh transitions.\n      (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\n    ) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getNextLanesToFlushSync(\n  root           ,\n  extraLanesToForceSync              ,\n)        {\n  // Similar to getNextLanes, except instead of choosing the next lanes to work\n  // on based on their priority, it selects all the lanes that have equal or\n  // higher priority than those are given. That way they can be synchronously\n  // rendered in a single batch.\n  //\n  // The main use case is updates scheduled by popstate events, which are\n  // flushed synchronously even though they are transitions.\n  // Note that we intentionally treat this as a sync flush to include any\n  // sync updates in a single pass but also intentionally disables View Transitions\n  // inside popstate. Because they can start synchronously before scroll restoration\n  // happens.\n  const lanesToFlush = SyncUpdateLanes | extraLanesToForceSync;\n\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Remove lanes that are suspended (but not pinged)\n  const unblockedLanes = pendingLanes & ~(suspendedLanes & ~pingedLanes);\n  const unblockedLanesWithMatchingPriority =\n    unblockedLanes & getLanesOfEqualOrHigherPriority(lanesToFlush);\n\n  // If there are matching hydration lanes, we should do those by themselves.\n  // Hydration lanes must never include updates.\n  if (unblockedLanesWithMatchingPriority & HydrationLanes) {\n    return (\n      (unblockedLanesWithMatchingPriority & HydrationLanes) | SyncHydrationLane\n    );\n  }\n\n  if (unblockedLanesWithMatchingPriority) {\n    // Always include the SyncLane as part of the result, even if there's no\n    // pending sync work, to indicate the priority of the entire batch of work\n    // is considered Sync.\n    return unblockedLanesWithMatchingPriority | SyncLane;\n  }\n\n  return NoLanes;\n}\n\nexport function checkIfRootIsPrerendering(\n  root           ,\n  renderLanes       ,\n)          {\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  // Remove lanes that are suspended (but not pinged)\n  const unblockedLanes = pendingLanes & ~(suspendedLanes & ~pingedLanes);\n\n  // If there are no unsuspended or pinged lanes, that implies that we're\n  // performing a prerender.\n  return (unblockedLanes & renderLanes) === 0;\n}\n\nexport function getEntangledLanes(root           , renderLanes       )        {\n  let entangledLanes = renderLanes;\n\n  if ((entangledLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    entangledLanes |= entangledLanes & DefaultLane;\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important,\n  // we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const allEntangledLanes = root.entangledLanes;\n  if (allEntangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = entangledLanes & allEntangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      entangledLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return entangledLanes;\n}\n\nfunction computeExpirationTime(lane      , currentTime        ) {\n  switch (lane) {\n    case SyncHydrationLane:\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n    case GestureLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + syncLaneExpirationMs;\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n      return currentTime + transitionLaneExpirationMs;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return enableRetryLaneExpiration\n        ? currentTime + retryLaneExpirationMs\n        : NoTimestamp;\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n    case DeferredLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root           ,\n  currentTime        ,\n)       {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  // TODO: We should be able to replace this with upgradePendingLanesToSync\n  //\n  // We exclude retry lanes because those must always be time sliced, in order\n  // to unwrap uncached promises.\n  // TODO: Write a test for this\n  let lanes = enableRetryLaneExpiration\n    ? pendingLanes\n    : pendingLanes & ~RetryLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root           )        {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(\n  root           ,\n  originallyAttemptedLanes       ,\n)        {\n  if (root.errorRecoveryDisabledLanes & originallyAttemptedLanes) {\n    // The error recovery mechanism is disabled until these lanes are cleared.\n    return NoLanes;\n  }\n\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function includesSyncLane(lanes       )          {\n  return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;\n}\n\nexport function isSyncLane(lanes       )          {\n  return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;\n}\n\nexport function includesNonIdleWork(lanes       )          {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes       )          {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyNonUrgentLanes(lanes       )          {\n  // TODO: Should hydration lanes be included here? This function is only\n  // used in `updateDeferredValueImpl`.\n  const UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n  return (lanes & UrgentLanes) === NoLanes;\n}\nexport function includesOnlyTransitions(lanes       )          {\n  return (lanes & TransitionLanes) === lanes;\n}\n\nexport function includesTransitionLane(lanes       )          {\n  return (lanes & TransitionLanes) !== NoLanes;\n}\n\nexport function includesOnlyHydrationLanes(lanes       )          {\n  return (lanes & HydrationLanes) === lanes;\n}\n\nexport function includesOnlyOffscreenLanes(lanes       )          {\n  return (lanes & OffscreenLane) === lanes;\n}\n\nexport function includesOnlyHydrationOrOffscreenLanes(lanes       )          {\n  return (lanes & (HydrationLanes | OffscreenLane)) === lanes;\n}\n\nexport function includesOnlyViewTransitionEligibleLanes(lanes       )          {\n  return (lanes & (TransitionLanes | RetryLanes | IdleLane)) === lanes;\n}\n\nexport function includesOnlySuspenseyCommitEligibleLanes(\n  lanes       ,\n)          {\n  return (\n    (lanes & (TransitionLanes | RetryLanes | IdleLane | GestureLane)) === lanes\n  );\n}\n\nexport function includesLoadingIndicatorLanes(lanes       )          {\n  return (lanes & (SyncLane | DefaultLane)) !== NoLanes;\n}\n\nexport function includesBlockingLane(lanes       )          {\n  const SyncDefaultLanes =\n    InputContinuousHydrationLane |\n    InputContinuousLane |\n    DefaultHydrationLane |\n    DefaultLane |\n    GestureLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\n\nexport function includesExpiredLane(root           , lanes       )          {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\n\nexport function isBlockingLane(lane      )          {\n  const SyncDefaultLanes =\n    InputContinuousHydrationLane |\n    InputContinuousLane |\n    DefaultHydrationLane |\n    DefaultLane;\n  return (lane & SyncDefaultLanes) !== NoLanes;\n}\n\nexport function isTransitionLane(lane      )          {\n  return (lane & TransitionLanes) !== NoLanes;\n}\n\nexport function isGestureRender(lanes       )          {\n  // This should render only the one lane.\n  return lanes === GestureLane;\n}\n\nexport function claimNextTransitionLane()       {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  const lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n    nextTransitionLane = TransitionLane1;\n  }\n  return lane;\n}\n\nexport function claimNextRetryLane()       {\n  const lane = nextRetryLane;\n  nextRetryLane <<= 1;\n  if ((nextRetryLane & RetryLanes) === NoLanes) {\n    nextRetryLane = RetryLane1;\n  }\n  return lane;\n}\n\nexport function getHighestPriorityLane(lanes       )       {\n  return lanes & -lanes;\n}\n\nfunction getLanesOfEqualOrHigherPriority(lanes              )        {\n  // Create a mask with all bits to the right or same as the highest bit.\n  // So if lanes is 0b100, the result would be 0b111.\n  // If lanes is 0b101, the result would be 0b111.\n  const lowestPriorityLaneIndex = 31 - clz32(lanes);\n  return (1 << (lowestPriorityLaneIndex + 1)) - 1;\n}\n\nexport function pickArbitraryLane(lanes       )       {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes       ) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane      ) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a              , b              )          {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set       , subset              )          {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a              , b              )        {\n  return a | b;\n}\n\nexport function removeLanes(set       , subset              )        {\n  return set & ~subset;\n}\n\nexport function intersectLanes(a              , b              )        {\n  return a & b;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane      )        {\n  return lane;\n}\n\nexport function higherPriorityLane(a      , b      )       {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function createLaneMap   (initial   )             {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n  return laneMap;\n}\n\nexport function markRootUpdated(root           , updateLane      ) {\n  root.pendingLanes |= updateLane;\n  if (enableDefaultTransitionIndicator) {\n    // Mark that this lane might need a loading indicator to be shown.\n    root.indicatorLanes |= updateLane & TransitionLanes;\n  }\n\n  // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n    root.warmLanes = NoLanes;\n  }\n}\n\nexport function markRootSuspended(\n  root           ,\n  suspendedLanes       ,\n  spawnedLane      ,\n  didAttemptEntireTree         ,\n) {\n  // TODO: Split this into separate functions for marking the root at the end of\n  // a render attempt versus suspending while the root is still in progress.\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  if (didAttemptEntireTree) {\n    // Mark these lanes as warm so we know there's nothing else to work on.\n    root.warmLanes |= suspendedLanes;\n  } else {\n    // Render unwound without attempting all the siblings. Do no mark the lanes\n    // as warm. This will cause a prewarm render to be scheduled.\n  }\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n\n  if (spawnedLane !== NoLane) {\n    markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);\n  }\n}\n\nexport function markRootPinged(root           , pingedLanes       ) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n  // The data that just resolved could have unblocked additional children, which\n  // will also need to be prewarmed if something suspends again.\n  root.warmLanes &= ~pingedLanes;\n}\n\nexport function markRootFinished(\n  root           ,\n  finishedLanes       ,\n  remainingLanes       ,\n  spawnedLane      ,\n  updatedLanes       ,\n  suspendedRetryLanes       ,\n) {\n  const previouslyPendingLanes = root.pendingLanes;\n  const noLongerPendingLanes = previouslyPendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = NoLanes;\n  root.pingedLanes = NoLanes;\n  root.warmLanes = NoLanes;\n\n  if (enableDefaultTransitionIndicator) {\n    root.indicatorLanes &= remainingLanes;\n  }\n\n  root.expiredLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  root.errorRecoveryDisabledLanes &= remainingLanes;\n  root.shellSuspendCounter = 0;\n\n  const entanglements = root.entanglements;\n  const expirationTimes = root.expirationTimes;\n  const hiddenUpdates = root.hiddenUpdates;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    expirationTimes[index] = NoTimestamp;\n\n    const hiddenUpdatesForLane = hiddenUpdates[index];\n    if (hiddenUpdatesForLane !== null) {\n      hiddenUpdates[index] = null;\n      // \"Hidden\" updates are updates that were made to a hidden component. They\n      // have special logic associated with them because they may be entangled\n      // with updates that occur outside that tree. But once the outer tree\n      // commits, they behave like regular updates.\n      for (let i = 0; i < hiddenUpdatesForLane.length; i++) {\n        const update = hiddenUpdatesForLane[i];\n        if (update !== null) {\n          update.lane &= ~OffscreenLane;\n        }\n      }\n    }\n\n    lanes &= ~lane;\n  }\n\n  if (spawnedLane !== NoLane) {\n    markSpawnedDeferredLane(\n      root,\n      spawnedLane,\n      // This render finished successfully without suspending, so we don't need\n      // to entangle the spawned task with the parent task.\n      NoLanes,\n    );\n  }\n\n  // suspendedRetryLanes represents the retry lanes spawned by new Suspense\n  // boundaries during this render that were not later pinged.\n  //\n  // These lanes were marked as pending on their associated Suspense boundary\n  // fiber during the render phase so that we could start rendering them\n  // before new data streams in. As soon as the fallback commits, we can try\n  // to render them again.\n  //\n  // But since we know they're still suspended, we can skip straight to the\n  // \"prerender\" mode (i.e. don't skip over siblings after something\n  // suspended) instead of the regular mode (i.e. unwind and skip the siblings\n  // as soon as something suspends to unblock the rest of the update).\n  if (\n    suspendedRetryLanes !== NoLanes &&\n    // Note that we only do this if there were no updates since we started\n    // rendering. This mirrors the logic in markRootUpdated \u2014 whenever we\n    // receive an update, we reset all the suspended and pinged lanes.\n    updatedLanes === NoLanes &&\n    !(disableLegacyMode && root.tag === LegacyRoot)\n  ) {\n    // We also need to avoid marking a retry lane as suspended if it was already\n    // pending before this render. We can't say these are now suspended if they\n    // weren't included in our attempt.\n    const freshlySpawnedRetryLanes =\n      suspendedRetryLanes &\n      // Remove any retry lane that was already pending before our just-finished\n      // attempt, and also wasn't included in that attempt.\n      ~(previouslyPendingLanes & ~finishedLanes);\n    root.suspendedLanes |= freshlySpawnedRetryLanes;\n  }\n}\n\nfunction markSpawnedDeferredLane(\n  root           ,\n  spawnedLane      ,\n  entangledLanes       ,\n) {\n  // This render spawned a deferred task. Mark it as pending.\n  root.pendingLanes |= spawnedLane;\n  root.suspendedLanes &= ~spawnedLane;\n\n  // Entangle the spawned lane with the DeferredLane bit so that we know it\n  // was the result of another render. This lets us avoid a useDeferredValue\n  // waterfall \u2014 only the first level will defer.\n  const spawnedLaneIndex = laneToIndex(spawnedLane);\n  root.entangledLanes |= spawnedLane;\n  root.entanglements[spawnedLaneIndex] |=\n    DeferredLane |\n    // If the parent render task suspended, we must also entangle those lanes\n    // with the spawned task, so that the deferred task includes all the same\n    // updates that the parent task did. We can exclude any lane that is not\n    // used for updates (e.g. Offscreen).\n    (entangledLanes & UpdateLanes);\n}\n\nexport function markRootEntangled(root           , entangledLanes       ) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n\n  const rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n  const entanglements = root.entanglements;\n  let lanes = rootEntangledLanes;\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    if (\n      // Is this one of the newly entangled lanes?\n      (lane & entangledLanes) |\n      // Is this lane transitively entangled with the newly entangled lanes?\n      (entanglements[index] & entangledLanes)\n    ) {\n      entanglements[index] |= entangledLanes;\n    }\n    lanes &= ~lane;\n  }\n}\n\nexport function upgradePendingLanesToSync(\n  root           ,\n  lanesToUpgrade       ,\n) {\n  // Same as upgradePendingLaneToSync but accepts multiple lanes, so it's a\n  // bit slower.\n  root.pendingLanes |= SyncLane;\n  root.entangledLanes |= SyncLane;\n  let lanes = lanesToUpgrade;\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    root.entanglements[SyncLaneIndex] |= lane;\n    lanes &= ~lane;\n  }\n}\n\nexport function markHiddenUpdate(\n  root           ,\n  update                  ,\n  lane      ,\n) {\n  const index = laneToIndex(lane);\n  const hiddenUpdates = root.hiddenUpdates;\n  const hiddenUpdatesForLane = hiddenUpdates[index];\n  if (hiddenUpdatesForLane === null) {\n    hiddenUpdates[index] = [update];\n  } else {\n    hiddenUpdatesForLane.push(update);\n  }\n  update.lane = lane | OffscreenLane;\n}\n\nexport function getBumpedLaneForHydration(\n  root           ,\n  renderLanes       ,\n)       {\n  const renderLane = getHighestPriorityLane(renderLanes);\n  const bumpedLane =\n    (renderLane & SyncUpdateLanes) !== NoLane\n      ? // Unify sync lanes. We don't do this inside getBumpedLaneForHydrationByLane\n        // because that causes things to flush synchronously when they shouldn't.\n        // TODO: This is not coherent but that's beacuse the unification is not coherent.\n        // We need to get merge these into an actual single lane.\n        SyncHydrationLane\n      : getBumpedLaneForHydrationByLane(renderLane);\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  // TODO: This should move into the caller to decide whether giving up is valid.\n  if ((bumpedLane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n  return bumpedLane;\n}\n\nexport function getBumpedLaneForHydrationByLane(lane      )       {\n  switch (lane) {\n    case SyncLane:\n      lane = SyncHydrationLane;\n      break;\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n      lane = TransitionHydrationLane;\n      break;\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  }\n  return lane;\n}\n\nexport function addFiberToLanesMap(\n  root           ,\n  fiber       ,\n  lanes              ,\n) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n\n    lanes &= ~lane;\n  }\n}\n\nexport function movePendingFibersToMemoized(root           , lanes       ) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  const memoizedUpdaters = root.memoizedUpdaters;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    if (updaters.size > 0) {\n      updaters.forEach(fiber => {\n        const alternate = fiber.alternate;\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nexport function addTransitionToLanesMap(\n  root           ,\n  transition            ,\n  lane      ,\n) {\n  if (enableTransitionTracing) {\n    const transitionLanesMap = root.transitionLanes;\n    const index = laneToIndex(lane);\n    let transitions = transitionLanesMap[index];\n    if (transitions === null) {\n      transitions = new Set();\n    }\n    transitions.add(transition);\n\n    transitionLanesMap[index] = transitions;\n  }\n}\n\nexport function getTransitionsForLanes(\n  root           ,\n  lanes              ,\n)                           {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  const transitionsForLanes = [];\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      transitions.forEach(transition => {\n        transitionsForLanes.push(transition);\n      });\n    }\n\n    lanes &= ~lane;\n  }\n\n  if (transitionsForLanes.length === 0) {\n    return null;\n  }\n\n  return transitionsForLanes;\n}\n\nexport function clearTransitionsForLanes(root           , lanes              ) {\n  if (!enableTransitionTracing) {\n    return;\n  }\n\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      root.transitionLanes[index] = null;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// Used to name the Performance Track\nexport function getGroupNameOfHighestPriorityLane(lanes       )         {\n  if (\n    lanes &\n    (SyncHydrationLane |\n      SyncLane |\n      InputContinuousHydrationLane |\n      InputContinuousLane |\n      DefaultHydrationLane |\n      DefaultLane |\n      GestureLane)\n  ) {\n    return 'Blocking';\n  }\n  if (lanes & (TransitionHydrationLane | TransitionLanes)) {\n    return 'Transition';\n  }\n  if (lanes & RetryLanes) {\n    return 'Suspense';\n  }\n  if (\n    lanes &\n    (SelectiveHydrationLane |\n      IdleHydrationLane |\n      IdleLane |\n      OffscreenLane |\n      DeferredLane)\n  ) {\n    return 'Idle';\n  }\n  return 'Other';\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                  \n\nimport {\n  NoLane,\n  SyncLane,\n  InputContinuousLane,\n  DefaultLane,\n  IdleLane,\n  getHighestPriorityLane,\n  includesNonIdleWork,\n} from './ReactFiberLane';\n\n                                        \n\nexport const NoEventPriority                = NoLane;\nexport const DiscreteEventPriority                = SyncLane;\nexport const ContinuousEventPriority                = InputContinuousLane;\nexport const DefaultEventPriority                = DefaultLane;\nexport const IdleEventPriority                = IdleLane;\n\nexport function higherEventPriority(\n  a               ,\n  b               ,\n)                {\n  return a !== 0 && a < b ? a : b;\n}\n\nexport function lowerEventPriority(\n  a               ,\n  b               ,\n)                {\n  return a === 0 || a > b ? a : b;\n}\n\nexport function isHigherEventPriority(\n  a               ,\n  b               ,\n)          {\n  return a !== 0 && a < b;\n}\n\nexport function eventPriorityToLane(updatePriority               )       {\n  return updatePriority;\n}\n\nexport function lanesToEventPriority(lanes       )                {\n  const lane = getHighestPriorityLane(lanes);\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n  return IdleEventPriority;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n// This module only exists as an ESM wrapper around the external CommonJS\n// Scheduler dependency. Notice that we're intentionally not using named imports\n// because Rollup would use dynamic dispatch for CommonJS interop named imports.\n// When we switch to ESM, we can delete this module.\nimport * as Scheduler from 'scheduler';\n\nexport const scheduleCallback = Scheduler.unstable_scheduleCallback;\nexport const cancelCallback = Scheduler.unstable_cancelCallback;\nexport const shouldYield = Scheduler.unstable_shouldYield;\nexport const requestPaint = Scheduler.unstable_requestPaint;\nexport const now = Scheduler.unstable_now;\nexport const getCurrentPriorityLevel =\n  Scheduler.unstable_getCurrentPriorityLevel;\nexport const ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nexport const UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nexport const NormalPriority = Scheduler.unstable_NormalPriority;\nexport const LowPriority = Scheduler.unstable_LowPriority;\nexport const IdlePriority = Scheduler.unstable_IdlePriority;\n                                                                              \n\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nexport const log = Scheduler.log;\nexport const unstable_setDisableYieldValue =\n  Scheduler.unstable_setDisableYieldValue;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                  \n                                                           \n                                                               \n                                                          \n// import type {DevToolsProfilingHooks} from 'react-devtools-shared/src/backend/types';\n// TODO: This import doesn't work because the DevTools depend on the DOM version of React\n// and to properly type check against DOM React we can't also type check again non-DOM\n// React which this hook might be in.\n                                  \n\nimport {DidCapture} from './ReactFiberFlags';\nimport {\n  enableProfilerTimer,\n  enableSchedulingProfiler,\n} from 'shared/ReactFeatureFlags';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n} from './ReactEventPriorities';\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n  log,\n  unstable_setDisableYieldValue,\n} from './Scheduler';\n\n                                                            \n\nlet rendererID = null;\nlet injectedHook = null;\nlet injectedProfilingHooks                                = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals        )          {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://react.dev/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    rendererID = hook.inject(internals);\n\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\n\nexport function onScheduleRoot(root           , children               ) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(root           , eventPriority               ) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        let schedulerPriority;\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediateSchedulerPriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingSchedulerPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriority = IdleSchedulerPriority;\n            break;\n          default:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n        }\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          schedulerPriority,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onPostCommitRoot(root           ) {\n  if (\n    injectedHook &&\n    typeof injectedHook.onPostCommitFiberRoot === 'function'\n  ) {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber       ) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function setIsStrictModeForDevtools(newIsStrictMode         ) {\n  if (typeof log === 'function') {\n    // We're in a test because Scheduler.log only exists\n    // in SchedulerMock. To reduce the noise in strict mode tests,\n    // suppress warnings and disable scheduler yielding during the double render\n    unstable_setDisableYieldValue(newIsStrictMode);\n  }\n\n  if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n    try {\n      injectedHook.setStrictMode(rendererID, newIsStrictMode);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\n// Profiler API hooks\n\nexport function injectProfilingHooks(\n  profilingHooks                        ,\n)       {\n  injectedProfilingHooks = profilingHooks;\n}\n\nexport function markCommitStarted(lanes       )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStarted === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStarted(lanes);\n    }\n  }\n}\n\nexport function markCommitStopped()       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStopped === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStopped();\n    }\n  }\n}\n\nexport function markComponentRenderStarted(fiber       )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentRenderStopped()       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStarted(fiber       )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStopped()       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStarted(fiber       )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStopped()       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStarted(fiber       )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStopped()       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStarted(fiber       )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStopped()       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentErrored(\n  fiber       ,\n  thrownValue       ,\n  lanes       ,\n)       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentErrored === 'function'\n    ) {\n      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n    }\n  }\n}\n\nexport function markComponentSuspended(\n  fiber       ,\n  wakeable          ,\n  lanes       ,\n)       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentSuspended === 'function'\n    ) {\n      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStarted(lanes       )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStopped()       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStopped();\n    }\n  }\n}\n\nexport function markPassiveEffectsStarted(lanes       )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markPassiveEffectsStopped()       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStopped();\n    }\n  }\n}\n\nexport function markRenderStarted(lanes       )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStarted(lanes);\n    }\n  }\n}\n\nexport function markRenderYielded()       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderYielded === 'function'\n    ) {\n      injectedProfilingHooks.markRenderYielded();\n    }\n  }\n}\n\nexport function markRenderStopped()       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStopped();\n    }\n  }\n}\n\nexport function markRenderScheduled(lane      )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markRenderScheduled(lane);\n    }\n  }\n}\n\nexport function markForceUpdateScheduled(fiber       , lane      )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markForceUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n    }\n  }\n}\n\nexport function markStateUpdateScheduled(fiber       , lane      )       {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markStateUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                                \n                                                    \n                                                                         \n\nimport {\n  getCommittingRoot,\n  getPendingTransitionTypes,\n} from './ReactFiberWorkLoop';\n\n                                   \n                                                                                                   \n                                                                                                                               \n                                                                                                                \n                                                                                                                        \n  \n\nlet globalClientIdCounter         = 0;\n\nexport function getViewTransitionName(\n  props                     ,\n  instance                     ,\n)         {\n  if (props.name != null && props.name !== 'auto') {\n    return props.name;\n  }\n  if (instance.autoName !== null) {\n    return instance.autoName;\n  }\n\n  // We assume we always call this in the commit phase.\n  const root = ((getCommittingRoot()     )           );\n  const identifierPrefix = root.identifierPrefix;\n  const globalClientId = globalClientIdCounter++;\n  const name =\n    '\\u00AB' + identifierPrefix + 't' + globalClientId.toString(32) + '\\u00BB';\n  instance.autoName = name;\n  return name;\n}\n\nfunction getClassNameByType(classByType                      )          {\n  if (classByType == null || typeof classByType === 'string') {\n    return classByType;\n  }\n  let className          = null;\n  const activeTypes = getPendingTransitionTypes();\n  if (activeTypes !== null) {\n    for (let i = 0; i < activeTypes.length; i++) {\n      const match = classByType[activeTypes[i]];\n      if (match != null) {\n        if (match === 'none') {\n          // If anything matches \"none\" that takes precedence over any other\n          // type that also matches.\n          return 'none';\n        }\n        if (className == null) {\n          className = match;\n        } else {\n          className += ' ' + match;\n        }\n      }\n    }\n  }\n  if (className == null) {\n    // We had no other matches. Match the default for this configuration.\n    return classByType.default;\n  }\n  return className;\n}\n\nexport function getViewTransitionClassName(\n  defaultClass                      ,\n  eventClass                      ,\n)          {\n  const className          = getClassNameByType(defaultClass);\n  const eventClassName          = getClassNameByType(eventClass);\n  if (eventClassName == null) {\n    return className === 'auto' ? null : className;\n  }\n  if (eventClassName === 'auto') {\n    return null;\n  }\n  return eventClassName;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nlet lastResetTime = 0;\n\nlet getCurrentTime                                    ;\nconst hasPerformanceNow =\n  // $FlowFixMe[method-unbinding]\n  typeof performance === 'object' && typeof performance.now === 'function';\n\nif (hasPerformanceNow) {\n  const localPerformance = performance;\n  getCurrentTime = () => localPerformance.now();\n} else {\n  const localDate = Date;\n  getCurrentTime = () => localDate.now();\n}\n\nexport function resetOwnerStackLimit() {\n  if (__DEV__) {\n    const now = getCurrentTime();\n    const timeSinceLastReset = now - lastResetTime;\n    if (timeSinceLastReset > 1000) {\n      ReactSharedInternals.recentlyCreatedOwnerStacks = 0;\n      lastResetTime = now;\n    }\n  } else {\n    // These errors should never make it into a build so we don't need to encode them in codes.json\n    // eslint-disable-next-line react-internal/prod-error-codes\n    throw new Error(\n      'resetOwnerStackLimit should never be called in production mode. This is a bug in React.',\n    );\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x     , y     ) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs                              =\n  // $FlowFixMe[method-unbinding]\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n/* eslint-disable react-internal/no-production-logging */\n\n                                                \n\n                                            \n\n                                                        \n\nimport {SuspenseComponent} from './ReactWorkTags';\n\nimport getComponentNameFromFiber from './getComponentNameFromFiber';\n\nimport {\n  getGroupNameOfHighestPriorityLane,\n  includesOnlyHydrationLanes,\n  includesOnlyOffscreenLanes,\n  includesOnlyHydrationOrOffscreenLanes,\n} from './ReactFiberLane';\n\nimport {enableProfilerTimer} from 'shared/ReactFeatureFlags';\n\nconst supportsUserTiming =\n  enableProfilerTimer &&\n  typeof console !== 'undefined' &&\n  typeof console.timeStamp === 'function';\n\nconst COMPONENTS_TRACK = 'Components \u269B';\nconst LANES_TRACK_GROUP = 'Scheduler \u269B';\n\nlet currentTrack         = 'Blocking'; // Lane\n\nconst reusableLaneDevToolDetails = {\n  color: 'primary',\n  track: 'Blocking', // Lane\n  trackGroup: LANES_TRACK_GROUP,\n};\nconst reusableLaneOptions = {\n  start: -0,\n  end: -0,\n  detail: {\n    devtools: reusableLaneDevToolDetails,\n  },\n};\n\nexport function setCurrentTrackFromLanes(lanes       )       {\n  currentTrack = getGroupNameOfHighestPriorityLane(lanes);\n}\n\nexport function markAllLanesInOrder() {\n  if (supportsUserTiming) {\n    // Ensure we create all tracks in priority order. Currently performance.mark() are in\n    // first insertion order but performance.measure() are in the reverse order. We can\n    // always add the 0 time slot even if it's in the past. That's still considered for\n    // ordering.\n    console.timeStamp(\n      'Blocking Track',\n      0.003,\n      0.003,\n      'Blocking',\n      LANES_TRACK_GROUP,\n      'primary-light',\n    );\n    console.timeStamp(\n      'Transition Track',\n      0.003,\n      0.003,\n      'Transition',\n      LANES_TRACK_GROUP,\n      'primary-light',\n    );\n    console.timeStamp(\n      'Suspense Track',\n      0.003,\n      0.003,\n      'Suspense',\n      LANES_TRACK_GROUP,\n      'primary-light',\n    );\n    console.timeStamp(\n      'Idle Track',\n      0.003,\n      0.003,\n      'Idle',\n      LANES_TRACK_GROUP,\n      'primary-light',\n    );\n  }\n}\n\nfunction logComponentTrigger(\n  fiber       ,\n  startTime        ,\n  endTime        ,\n  trigger        ,\n) {\n  if (supportsUserTiming) {\n    const debugTask = fiber._debugTask;\n    if (__DEV__ && debugTask) {\n      debugTask.run(\n        console.timeStamp.bind(\n          console,\n          trigger,\n          startTime,\n          endTime,\n          COMPONENTS_TRACK,\n          undefined,\n          'warning',\n        ),\n      );\n    } else {\n      console.timeStamp(\n        trigger,\n        startTime,\n        endTime,\n        COMPONENTS_TRACK,\n        undefined,\n        'warning',\n      );\n    }\n  }\n}\n\nexport function logComponentMount(\n  fiber       ,\n  startTime        ,\n  endTime        ,\n)       {\n  logComponentTrigger(fiber, startTime, endTime, 'Mount');\n}\n\nexport function logComponentUnmount(\n  fiber       ,\n  startTime        ,\n  endTime        ,\n)       {\n  logComponentTrigger(fiber, startTime, endTime, 'Unmount');\n}\n\nexport function logComponentReappeared(\n  fiber       ,\n  startTime        ,\n  endTime        ,\n)       {\n  logComponentTrigger(fiber, startTime, endTime, 'Reconnect');\n}\n\nexport function logComponentDisappeared(\n  fiber       ,\n  startTime        ,\n  endTime        ,\n)       {\n  logComponentTrigger(fiber, startTime, endTime, 'Disconnect');\n}\n\nexport function logComponentRender(\n  fiber       ,\n  startTime        ,\n  endTime        ,\n  wasHydrated         ,\n)       {\n  const name = getComponentNameFromFiber(fiber);\n  if (name === null) {\n    // Skip\n    return;\n  }\n  if (supportsUserTiming) {\n    let selfTime         = (fiber.actualDuration     );\n    if (fiber.alternate === null || fiber.alternate.child !== fiber.child) {\n      for (let child = fiber.child; child !== null; child = child.sibling) {\n        selfTime -= (child.actualDuration     );\n      }\n    }\n    const color =\n      selfTime < 0.5\n        ? wasHydrated\n          ? 'tertiary-light'\n          : 'primary-light'\n        : selfTime < 10\n          ? wasHydrated\n            ? 'tertiary'\n            : 'primary'\n          : selfTime < 100\n            ? wasHydrated\n              ? 'tertiary-dark'\n              : 'primary-dark'\n            : 'error';\n    const debugTask = fiber._debugTask;\n    if (__DEV__ && debugTask) {\n      debugTask.run(\n        // $FlowFixMe[method-unbinding]\n        console.timeStamp.bind(\n          console,\n          name,\n          startTime,\n          endTime,\n          COMPONENTS_TRACK,\n          undefined,\n          color,\n        ),\n      );\n    } else {\n      console.timeStamp(\n        name,\n        startTime,\n        endTime,\n        COMPONENTS_TRACK,\n        undefined,\n        color,\n      );\n    }\n  }\n}\n\nexport function logComponentErrored(\n  fiber       ,\n  startTime        ,\n  endTime        ,\n  errors                             ,\n)       {\n  if (supportsUserTiming) {\n    const name = getComponentNameFromFiber(fiber);\n    if (name === null) {\n      // Skip\n      return;\n    }\n    if (\n      __DEV__ &&\n      typeof performance !== 'undefined' &&\n      // $FlowFixMe[method-unbinding]\n      typeof performance.measure === 'function'\n    ) {\n      let debugTask               = null;\n      const properties = [];\n      for (let i = 0; i < errors.length; i++) {\n        const capturedValue = errors[i];\n        if (debugTask == null && capturedValue.source !== null) {\n          // If the captured value has a source Fiber, use its debugTask for\n          // the stack instead of the error boundary's stack. So you can find\n          // which component errored since we don't show the errored render tree.\n          // TODO: Ideally we should instead, store the failed fibers and log the\n          // whole subtree including the component that errored.\n          debugTask = capturedValue.source._debugTask;\n        }\n        const error = capturedValue.value;\n        const message =\n          typeof error === 'object' &&\n          error !== null &&\n          typeof error.message === 'string'\n            ? // eslint-disable-next-line react-internal/safe-string-coercion\n              String(error.message)\n            : // eslint-disable-next-line react-internal/safe-string-coercion\n              String(error);\n        properties.push(['Error', message]);\n      }\n      if (debugTask == null) {\n        // If the captured values don't have a debug task, fallback to the\n        // error boundary itself.\n        debugTask = fiber._debugTask;\n      }\n      const options = {\n        start: startTime,\n        end: endTime,\n        detail: {\n          devtools: {\n            color: 'error',\n            track: COMPONENTS_TRACK,\n            tooltipText:\n              fiber.tag === SuspenseComponent\n                ? 'Hydration failed'\n                : 'Error boundary caught an error',\n            properties,\n          },\n        },\n      };\n      if (__DEV__ && debugTask) {\n        debugTask.run(\n          // $FlowFixMe[method-unbinding]\n          performance.measure.bind(performance, name, options),\n        );\n      } else {\n        performance.measure(name, options);\n      }\n    } else {\n      console.timeStamp(\n        name,\n        startTime,\n        endTime,\n        COMPONENTS_TRACK,\n        undefined,\n        'error',\n      );\n    }\n  }\n}\n\nfunction logComponentEffectErrored(\n  fiber       ,\n  startTime        ,\n  endTime        ,\n  errors                             ,\n)       {\n  if (supportsUserTiming) {\n    const name = getComponentNameFromFiber(fiber);\n    if (name === null) {\n      // Skip\n      return;\n    }\n    if (\n      __DEV__ &&\n      typeof performance !== 'undefined' &&\n      // $FlowFixMe[method-unbinding]\n      typeof performance.measure === 'function'\n    ) {\n      const properties = [];\n      for (let i = 0; i < errors.length; i++) {\n        const capturedValue = errors[i];\n        const error = capturedValue.value;\n        const message =\n          typeof error === 'object' &&\n          error !== null &&\n          typeof error.message === 'string'\n            ? // eslint-disable-next-line react-internal/safe-string-coercion\n              String(error.message)\n            : // eslint-disable-next-line react-internal/safe-string-coercion\n              String(error);\n        properties.push(['Error', message]);\n      }\n      const options = {\n        start: startTime,\n        end: endTime,\n        detail: {\n          devtools: {\n            color: 'error',\n            track: COMPONENTS_TRACK,\n            tooltipText: 'A lifecycle or effect errored',\n            properties,\n          },\n        },\n      };\n      const debugTask = fiber._debugTask;\n      if (debugTask) {\n        debugTask.run(\n          // $FlowFixMe[method-unbinding]\n          performance.measure.bind(performance, name, options),\n        );\n      } else {\n        performance.measure(name, options);\n      }\n    } else {\n      console.timeStamp(\n        name,\n        startTime,\n        endTime,\n        COMPONENTS_TRACK,\n        undefined,\n        'error',\n      );\n    }\n  }\n}\n\nexport function logComponentEffect(\n  fiber       ,\n  startTime        ,\n  endTime        ,\n  selfTime        ,\n  errors                                    ,\n)       {\n  if (errors !== null) {\n    logComponentEffectErrored(fiber, startTime, endTime, errors);\n    return;\n  }\n  const name = getComponentNameFromFiber(fiber);\n  if (name === null) {\n    // Skip\n    return;\n  }\n  if (supportsUserTiming) {\n    const color =\n      selfTime < 1\n        ? 'secondary-light'\n        : selfTime < 100\n          ? 'secondary'\n          : selfTime < 500\n            ? 'secondary-dark'\n            : 'error';\n    const debugTask = fiber._debugTask;\n    if (__DEV__ && debugTask) {\n      debugTask.run(\n        // $FlowFixMe[method-unbinding]\n        console.timeStamp.bind(\n          console,\n          name,\n          startTime,\n          endTime,\n          COMPONENTS_TRACK,\n          undefined,\n          color,\n        ),\n      );\n    } else {\n      console.timeStamp(\n        name,\n        startTime,\n        endTime,\n        COMPONENTS_TRACK,\n        undefined,\n        color,\n      );\n    }\n  }\n}\n\nexport function logYieldTime(startTime        , endTime        )       {\n  if (supportsUserTiming) {\n    const yieldDuration = endTime - startTime;\n    if (yieldDuration < 3) {\n      // Skip sub-millisecond yields. This happens all the time and is not interesting.\n      return;\n    }\n    // Being blocked on CPU is potentially bad so we color it by how long it took.\n    const color =\n      yieldDuration < 5\n        ? 'primary-light'\n        : yieldDuration < 10\n          ? 'primary'\n          : yieldDuration < 100\n            ? 'primary-dark'\n            : 'error';\n    // This get logged in the components track if we don't commit which leaves them\n    // hanging by themselves without context. It's a useful indicator for why something\n    // might be starving this render though.\n    // TODO: Considering adding these to a queue and only logging them if we commit.\n    console.timeStamp(\n      'Blocked',\n      startTime,\n      endTime,\n      COMPONENTS_TRACK,\n      undefined,\n      color,\n    );\n  }\n}\n\nexport function logSuspendedYieldTime(\n  startTime        ,\n  endTime        ,\n  suspendedFiber       ,\n)       {\n  if (supportsUserTiming) {\n    const debugTask = suspendedFiber._debugTask;\n    if (__DEV__ && debugTask) {\n      debugTask.run(\n        // $FlowFixMe[method-unbinding]\n        console.timeStamp.bind(\n          console,\n          'Suspended',\n          startTime,\n          endTime,\n          COMPONENTS_TRACK,\n          undefined,\n          'primary-light',\n        ),\n      );\n    } else {\n      console.timeStamp(\n        'Suspended',\n        startTime,\n        endTime,\n        COMPONENTS_TRACK,\n        undefined,\n        'primary-light',\n      );\n    }\n  }\n}\n\nexport function logActionYieldTime(\n  startTime        ,\n  endTime        ,\n  suspendedFiber       ,\n)       {\n  if (supportsUserTiming) {\n    const debugTask = suspendedFiber._debugTask;\n    if (__DEV__ && debugTask) {\n      debugTask.run(\n        // $FlowFixMe[method-unbinding]\n        console.timeStamp.bind(\n          console,\n          'Action',\n          startTime,\n          endTime,\n          COMPONENTS_TRACK,\n          undefined,\n          'primary-light',\n        ),\n      );\n    } else {\n      console.timeStamp(\n        'Action',\n        startTime,\n        endTime,\n        COMPONENTS_TRACK,\n        undefined,\n        'primary-light',\n      );\n    }\n  }\n}\n\nexport function logBlockingStart(\n  updateTime        ,\n  eventTime        ,\n  eventType               ,\n  eventIsRepeat         ,\n  isSpawnedUpdate         ,\n  renderStartTime        ,\n  lanes       ,\n  debugTask                    , // DEV-only\n)       {\n  if (supportsUserTiming) {\n    currentTrack = 'Blocking';\n    // If a blocking update was spawned within render or an effect, that's considered a cascading render.\n    // If you have a second blocking update within the same event, that suggests multiple flushSync or\n    // setState in a microtask which is also considered a cascade.\n    if (eventTime > 0 && eventType !== null) {\n      // Log the time from the event timeStamp until we called setState.\n      const color = eventIsRepeat ? 'secondary-light' : 'warning';\n      if (__DEV__ && debugTask) {\n        debugTask.run(\n          // $FlowFixMe[method-unbinding]\n          console.timeStamp.bind(\n            console,\n            eventIsRepeat ? '' : 'Event: ' + eventType,\n            eventTime,\n            updateTime > 0 ? updateTime : renderStartTime,\n            currentTrack,\n            LANES_TRACK_GROUP,\n            color,\n          ),\n        );\n      } else {\n        console.timeStamp(\n          eventIsRepeat ? '' : 'Event: ' + eventType,\n          eventTime,\n          updateTime > 0 ? updateTime : renderStartTime,\n          currentTrack,\n          LANES_TRACK_GROUP,\n          color,\n        );\n      }\n    }\n    if (updateTime > 0) {\n      // Log the time from when we called setState until we started rendering.\n      const color = isSpawnedUpdate\n        ? 'error'\n        : includesOnlyHydrationOrOffscreenLanes(lanes)\n          ? 'tertiary-light'\n          : 'primary-light';\n      if (__DEV__ && debugTask) {\n        debugTask.run(\n          // $FlowFixMe[method-unbinding]\n          console.timeStamp.bind(\n            console,\n            isSpawnedUpdate\n              ? 'Cascading Update'\n              : renderStartTime - updateTime > 5\n                ? 'Update Blocked'\n                : 'Update',\n            updateTime,\n            renderStartTime,\n            currentTrack,\n            LANES_TRACK_GROUP,\n            color,\n          ),\n        );\n      } else {\n        console.timeStamp(\n          isSpawnedUpdate\n            ? 'Cascading Update'\n            : renderStartTime - updateTime > 5\n              ? 'Update Blocked'\n              : 'Update',\n          updateTime,\n          renderStartTime,\n          currentTrack,\n          LANES_TRACK_GROUP,\n          color,\n        );\n      }\n    }\n  }\n}\n\nexport function logTransitionStart(\n  startTime        ,\n  updateTime        ,\n  eventTime        ,\n  eventType               ,\n  eventIsRepeat         ,\n  renderStartTime        ,\n  debugTask                    , // DEV-only\n)       {\n  if (supportsUserTiming) {\n    currentTrack = 'Transition';\n    if (eventTime > 0 && eventType !== null) {\n      // Log the time from the event timeStamp until we started a transition.\n      const color = eventIsRepeat ? 'secondary-light' : 'warning';\n      const endTime =\n        startTime > 0\n          ? startTime\n          : updateTime > 0\n            ? updateTime\n            : renderStartTime;\n      if (__DEV__ && debugTask) {\n        debugTask.run(\n          // $FlowFixMe[method-unbinding]\n          console.timeStamp.bind(\n            console,\n            eventIsRepeat ? '' : 'Event: ' + eventType,\n            eventTime,\n            endTime,\n            currentTrack,\n            LANES_TRACK_GROUP,\n            color,\n          ),\n        );\n      } else {\n        console.timeStamp(\n          eventIsRepeat ? '' : 'Event: ' + eventType,\n          eventTime,\n          endTime,\n          currentTrack,\n          LANES_TRACK_GROUP,\n          color,\n        );\n      }\n    }\n    if (startTime > 0) {\n      // Log the time from when we started an async transition until we called setState or started rendering.\n      // TODO: Ideally this would use the debugTask of the startTransition call perhaps.\n      if (__DEV__ && debugTask) {\n        debugTask.run(\n          // $FlowFixMe[method-unbinding]\n          console.timeStamp.bind(\n            console,\n            'Action',\n            startTime,\n            updateTime > 0 ? updateTime : renderStartTime,\n            currentTrack,\n            LANES_TRACK_GROUP,\n            'primary-dark',\n          ),\n        );\n      } else {\n        console.timeStamp(\n          'Action',\n          startTime,\n          updateTime > 0 ? updateTime : renderStartTime,\n          currentTrack,\n          LANES_TRACK_GROUP,\n          'primary-dark',\n        );\n      }\n    }\n    if (updateTime > 0) {\n      // Log the time from when we called setState until we started rendering.\n      if (__DEV__ && debugTask) {\n        debugTask.run(\n          // $FlowFixMe[method-unbinding]\n          console.timeStamp.bind(\n            console,\n            renderStartTime - updateTime > 5 ? 'Update Blocked' : 'Update',\n            updateTime,\n            renderStartTime,\n            currentTrack,\n            LANES_TRACK_GROUP,\n            'primary-light',\n          ),\n        );\n      } else {\n        console.timeStamp(\n          renderStartTime - updateTime > 5 ? 'Update Blocked' : 'Update',\n          updateTime,\n          renderStartTime,\n          currentTrack,\n          LANES_TRACK_GROUP,\n          'primary-light',\n        );\n      }\n    }\n  }\n}\n\nexport function logRenderPhase(\n  startTime        ,\n  endTime        ,\n  lanes       ,\n)       {\n  if (supportsUserTiming) {\n    const color = includesOnlyHydrationOrOffscreenLanes(lanes)\n      ? 'tertiary-dark'\n      : 'primary-dark';\n    console.timeStamp(\n      includesOnlyOffscreenLanes(lanes)\n        ? 'Prepared'\n        : includesOnlyHydrationLanes(lanes)\n          ? 'Hydrated'\n          : 'Render',\n      startTime,\n      endTime,\n      currentTrack,\n      LANES_TRACK_GROUP,\n      color,\n    );\n  }\n}\n\nexport function logInterruptedRenderPhase(\n  startTime        ,\n  endTime        ,\n  lanes       ,\n)       {\n  if (supportsUserTiming) {\n    const color = includesOnlyHydrationOrOffscreenLanes(lanes)\n      ? 'tertiary-dark'\n      : 'primary-dark';\n    console.timeStamp(\n      includesOnlyOffscreenLanes(lanes)\n        ? 'Prewarm'\n        : includesOnlyHydrationLanes(lanes)\n          ? 'Interrupted Hydration'\n          : 'Interrupted Render',\n      startTime,\n      endTime,\n      currentTrack,\n      LANES_TRACK_GROUP,\n      color,\n    );\n  }\n}\n\nexport function logSuspendedRenderPhase(\n  startTime        ,\n  endTime        ,\n  lanes       ,\n)       {\n  if (supportsUserTiming) {\n    const color = includesOnlyHydrationOrOffscreenLanes(lanes)\n      ? 'tertiary-dark'\n      : 'primary-dark';\n    console.timeStamp(\n      'Prewarm',\n      startTime,\n      endTime,\n      currentTrack,\n      LANES_TRACK_GROUP,\n      color,\n    );\n  }\n}\n\nexport function logSuspendedWithDelayPhase(\n  startTime        ,\n  endTime        ,\n  lanes       ,\n)       {\n  // This means the render was suspended and cannot commit until it gets unblocked.\n  if (supportsUserTiming) {\n    const color = includesOnlyHydrationOrOffscreenLanes(lanes)\n      ? 'tertiary-dark'\n      : 'primary-dark';\n    console.timeStamp(\n      'Suspended',\n      startTime,\n      endTime,\n      currentTrack,\n      LANES_TRACK_GROUP,\n      color,\n    );\n  }\n}\n\nexport function logRecoveredRenderPhase(\n  startTime        ,\n  endTime        ,\n  lanes       ,\n  recoverableErrors                             ,\n  hydrationFailed         ,\n)       {\n  if (supportsUserTiming) {\n    if (\n      __DEV__ &&\n      typeof performance !== 'undefined' &&\n      // $FlowFixMe[method-unbinding]\n      typeof performance.measure === 'function'\n    ) {\n      const properties = [];\n      for (let i = 0; i < recoverableErrors.length; i++) {\n        const capturedValue = recoverableErrors[i];\n        const error = capturedValue.value;\n        const message =\n          typeof error === 'object' &&\n          error !== null &&\n          typeof error.message === 'string'\n            ? // eslint-disable-next-line react-internal/safe-string-coercion\n              String(error.message)\n            : // eslint-disable-next-line react-internal/safe-string-coercion\n              String(error);\n        properties.push(['Recoverable Error', message]);\n      }\n      performance.measure('Recovered', {\n        start: startTime,\n        end: endTime,\n        detail: {\n          devtools: {\n            color: 'primary-dark',\n            track: currentTrack,\n            trackGroup: LANES_TRACK_GROUP,\n            tooltipText: hydrationFailed\n              ? 'Hydration Failed'\n              : 'Recovered after Error',\n            properties,\n          },\n        },\n      });\n    } else {\n      console.timeStamp(\n        'Recovered',\n        startTime,\n        endTime,\n        currentTrack,\n        LANES_TRACK_GROUP,\n        'error',\n      );\n    }\n  }\n}\n\nexport function logErroredRenderPhase(\n  startTime        ,\n  endTime        ,\n  lanes       ,\n)       {\n  if (supportsUserTiming) {\n    console.timeStamp(\n      'Errored',\n      startTime,\n      endTime,\n      currentTrack,\n      LANES_TRACK_GROUP,\n      'error',\n    );\n  }\n}\n\nexport function logInconsistentRender(\n  startTime        ,\n  endTime        ,\n)       {\n  if (supportsUserTiming) {\n    console.timeStamp(\n      'Teared Render',\n      startTime,\n      endTime,\n      currentTrack,\n      LANES_TRACK_GROUP,\n      'error',\n    );\n  }\n}\n\nexport function logSuspenseThrottlePhase(\n  startTime        ,\n  endTime        ,\n)       {\n  // This was inside a throttled Suspense boundary commit.\n  if (supportsUserTiming) {\n    console.timeStamp(\n      'Throttled',\n      startTime,\n      endTime,\n      currentTrack,\n      LANES_TRACK_GROUP,\n      'secondary-light',\n    );\n  }\n}\n\nexport function logSuspendedCommitPhase(\n  startTime        ,\n  endTime        ,\n)       {\n  // This means the commit was suspended on CSS or images.\n  if (supportsUserTiming) {\n    // TODO: Include the exact reason and URLs of what resources suspended.\n    // TODO: This might also be Suspended while waiting on a View Transition.\n    console.timeStamp(\n      'Suspended on CSS or Images',\n      startTime,\n      endTime,\n      currentTrack,\n      LANES_TRACK_GROUP,\n      'secondary-light',\n    );\n  }\n}\n\nexport function logCommitErrored(\n  startTime        ,\n  endTime        ,\n  errors                             ,\n  passive         ,\n)       {\n  if (supportsUserTiming) {\n    if (\n      __DEV__ &&\n      typeof performance !== 'undefined' &&\n      // $FlowFixMe[method-unbinding]\n      typeof performance.measure === 'function'\n    ) {\n      const properties = [];\n      for (let i = 0; i < errors.length; i++) {\n        const capturedValue = errors[i];\n        const error = capturedValue.value;\n        const message =\n          typeof error === 'object' &&\n          error !== null &&\n          typeof error.message === 'string'\n            ? // eslint-disable-next-line react-internal/safe-string-coercion\n              String(error.message)\n            : // eslint-disable-next-line react-internal/safe-string-coercion\n              String(error);\n        properties.push(['Error', message]);\n      }\n      performance.measure('Errored', {\n        start: startTime,\n        end: endTime,\n        detail: {\n          devtools: {\n            color: 'error',\n            track: currentTrack,\n            trackGroup: LANES_TRACK_GROUP,\n            tooltipText: passive\n              ? 'Remaining Effects Errored'\n              : 'Commit Errored',\n            properties,\n          },\n        },\n      });\n    } else {\n      console.timeStamp(\n        'Errored',\n        startTime,\n        endTime,\n        currentTrack,\n        LANES_TRACK_GROUP,\n        'error',\n      );\n    }\n  }\n}\n\nexport function logCommitPhase(\n  startTime        ,\n  endTime        ,\n  errors                                    ,\n)       {\n  if (errors !== null) {\n    logCommitErrored(startTime, endTime, errors, false);\n    return;\n  }\n  if (supportsUserTiming) {\n    reusableLaneOptions.start = startTime;\n    reusableLaneOptions.end = endTime;\n    console.timeStamp(\n      'Commit',\n      startTime,\n      endTime,\n      currentTrack,\n      LANES_TRACK_GROUP,\n      'secondary-dark',\n    );\n  }\n}\n\nexport function logPaintYieldPhase(\n  startTime        ,\n  endTime        ,\n  delayedUntilPaint         ,\n)       {\n  if (supportsUserTiming) {\n    console.timeStamp(\n      delayedUntilPaint ? 'Waiting for Paint' : '',\n      startTime,\n      endTime,\n      currentTrack,\n      LANES_TRACK_GROUP,\n      'secondary-light',\n    );\n  }\n}\n\nexport function logPassiveCommitPhase(\n  startTime        ,\n  endTime        ,\n  errors                                    ,\n)       {\n  if (errors !== null) {\n    logCommitErrored(startTime, endTime, errors, true);\n    return;\n  }\n  if (supportsUserTiming) {\n    console.timeStamp(\n      'Remaining Effects',\n      startTime,\n      endTime,\n      currentTrack,\n      LANES_TRACK_GROUP,\n      'secondary-dark',\n    );\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                    \n                                                \n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nexport function isRootDehydrated(root           )          {\n  const currentState            = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\n\nlet disabledDepth = 0;\nlet prevLog;\nlet prevInfo;\nlet prevWarn;\nlet prevError;\nlet prevGroup;\nlet prevGroupCollapsed;\nlet prevGroupEnd;\n\nfunction disabledLog() {}\ndisabledLog.__reactDisabledLog = true;\n\nexport function disableLogs()       {\n  if (__DEV__) {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd;\n      // https://github.com/facebook/react/issues/19099\n      const props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true,\n      };\n      // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props,\n      });\n    }\n    disabledDepth++;\n  }\n}\n\nexport function reenableLogs()       {\n  if (__DEV__) {\n    disabledDepth--;\n    if (disabledDepth === 0) {\n      const props = {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n      };\n      // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n      Object.defineProperties(console, {\n        log: {...props, value: prevLog},\n        info: {...props, value: prevInfo},\n        warn: {...props, value: prevWarn},\n        error: {...props, value: prevError},\n        group: {...props, value: prevGroup},\n        groupCollapsed: {...props, value: prevGroupCollapsed},\n        groupEnd: {...props, value: prevGroupEnd},\n      });\n    }\n    if (disabledDepth < 0) {\n      console.error(\n        'disabledDepth fell below zero. ' +\n          'This is a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n// This is forked in server builds where the default stack frame may be source mapped.\n\nexport default ((undefined     )                               );\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nimport DefaultPrepareStackTrace from 'shared/DefaultPrepareStackTrace';\n\nlet prefix;\nlet suffix;\nexport function describeBuiltInComponentFrame(name        )         {\n  if (prefix === undefined) {\n    // Extract the VM specific prefix used by each line.\n    try {\n      throw Error();\n    } catch (x) {\n      const match = x.stack.trim().match(/\\n( *(at )?)/);\n      prefix = (match && match[1]) || '';\n      suffix =\n        x.stack.indexOf('\\n    at') > -1\n          ? // V8\n            ' (<anonymous>)'\n          : // JSC/Spidermonkey\n            x.stack.indexOf('@') > -1\n            ? '@unknown:0:0'\n            : // Other\n              '';\n    }\n  }\n  // We use the prefix to ensure our stacks line up with native stack frames.\n  return '\\n' + prefix + name + suffix;\n}\n\nexport function describeDebugInfoFrame(name        , env         )         {\n  return describeBuiltInComponentFrame(name + (env ? ' [' + env + ']' : ''));\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap                  ();\n}\n\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\nexport function describeNativeComponentFrame(\n  fn          ,\n  construct         ,\n)         {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  Error.prepareStackTrace = DefaultPrepareStackTrace;\n  let previousDispatcher = null;\n\n  if (__DEV__) {\n    previousDispatcher = ReactSharedInternals.H;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactSharedInternals.H = null;\n    disableLogs();\n  }\n  try {\n    /**\n     * Finding a common stack frame between sample and control errors can be\n     * tricky given the different types and levels of stack trace truncation from\n     * different JS VMs. So instead we'll attempt to control what that common\n     * frame should be through this object method:\n     * Having both the sample and control errors be in the function under the\n     * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n     * `displayName` properties of the function ensures that a stack\n     * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n     * it for both control and sample stacks.\n     */\n    const RunInRootFrame = {\n      DetermineComponentFrameRoot()                     {\n        let control;\n        try {\n          // This should throw.\n          if (construct) {\n            // Something should be setting the props in the constructor.\n            const Fake = function () {\n              throw Error();\n            };\n            // $FlowFixMe[prop-missing]\n            Object.defineProperty(Fake.prototype, 'props', {\n              set: function () {\n                // We use a throwing setter instead of frozen or non-writable props\n                // because that won't throw in a non-strict mode function.\n                throw Error();\n              },\n            });\n            if (typeof Reflect === 'object' && Reflect.construct) {\n              // We construct a different control for this case to include any extra\n              // frames added by the construct call.\n              try {\n                Reflect.construct(Fake, []);\n              } catch (x) {\n                control = x;\n              }\n              Reflect.construct(fn, [], Fake);\n            } else {\n              try {\n                Fake.call();\n              } catch (x) {\n                control = x;\n              }\n              // $FlowFixMe[prop-missing] found when upgrading Flow\n              fn.call(Fake.prototype);\n            }\n          } else {\n            try {\n              throw Error();\n            } catch (x) {\n              control = x;\n            }\n            // TODO(luna): This will currently only throw if the function component\n            // tries to access React/ReactDOM/props. We should probably make this throw\n            // in simple components too\n            const maybePromise = fn();\n\n            // If the function component returns a promise, it's likely an async\n            // component, which we don't yet support. Attach a noop catch handler to\n            // silence the error.\n            // TODO: Implement component stacks for async client components?\n            if (maybePromise && typeof maybePromise.catch === 'function') {\n              maybePromise.catch(() => {});\n            }\n          }\n        } catch (sample) {\n          // This is inlined manually because closure doesn't do it for us.\n          if (sample && control && typeof sample.stack === 'string') {\n            return [sample.stack, control.stack];\n          }\n        }\n        return [null, null];\n      },\n    };\n    // $FlowFixMe[prop-missing]\n    RunInRootFrame.DetermineComponentFrameRoot.displayName =\n      'DetermineComponentFrameRoot';\n    const namePropDescriptor = Object.getOwnPropertyDescriptor(\n      RunInRootFrame.DetermineComponentFrameRoot,\n      'name',\n    );\n    // Before ES6, the `name` property was not configurable.\n    if (namePropDescriptor && namePropDescriptor.configurable) {\n      // V8 utilizes a function's `name` property when generating a stack trace.\n      Object.defineProperty(\n        RunInRootFrame.DetermineComponentFrameRoot,\n        // Configurable properties can be updated even if its writable descriptor\n        // is set to `false`.\n        // $FlowFixMe[cannot-write]\n        'name',\n        {value: 'DetermineComponentFrameRoot'},\n      );\n    }\n\n    const [sampleStack, controlStack] =\n      RunInRootFrame.DetermineComponentFrameRoot();\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sampleStack.split('\\n');\n      const controlLines = controlStack.split('\\n');\n      let s = 0;\n      let c = 0;\n      while (\n        s < sampleLines.length &&\n        !sampleLines[s].includes('DetermineComponentFrameRoot')\n      ) {\n        s++;\n      }\n      while (\n        c < controlLines.length &&\n        !controlLines[c].includes('DetermineComponentFrameRoot')\n      ) {\n        c++;\n      }\n      // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                let frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n                if (fn.displayName && frame.includes('<anonymous>')) {\n                  frame = frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactSharedInternals.H = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nexport function describeClassComponentFrame(ctor          )         {\n  return describeNativeComponentFrame(ctor, true);\n}\n\nexport function describeFunctionComponentFrame(fn          )         {\n  return describeNativeComponentFrame(fn, false);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {enableViewTransition} from 'shared/ReactFeatureFlags';\n                                                \n                                                          \n\nimport {\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  ClassComponent,\n  HostText,\n  ViewTransitionComponent,\n  ActivityComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n  describeDebugInfoFrame,\n} from 'shared/ReactComponentStackFrame';\nimport {formatOwnerStack} from 'shared/ReactOwnerStackFrames';\n\nfunction describeFiber(fiber       )         {\n  switch (fiber.tag) {\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type);\n    case LazyComponent:\n      // TODO: When we support Thenables as component types we should rename this.\n      return describeBuiltInComponentFrame('Lazy');\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense');\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList');\n    case FunctionComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type);\n    case ActivityComponent:\n      return describeBuiltInComponentFrame('Activity');\n    case ViewTransitionComponent:\n      if (enableViewTransition) {\n        return describeBuiltInComponentFrame('ViewTransition');\n      }\n    // Fallthrough\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress       )         {\n  try {\n    let info = '';\n    let node        = workInProgress;\n    do {\n      info += describeFiber(node);\n      if (__DEV__) {\n        // Add any Server Component stack frames in reverse order.\n        const debugInfo = node._debugInfo;\n        if (debugInfo) {\n          for (let i = debugInfo.length - 1; i >= 0; i--) {\n            const entry = debugInfo[i];\n            if (typeof entry.name === 'string') {\n              info += describeDebugInfoFrame(entry.name, entry.env);\n            }\n          }\n        }\n      }\n      // $FlowFixMe[incompatible-type] we bail out when we get a null\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n\nfunction describeFunctionComponentFrameWithoutLineNumber(fn          )         {\n  // We use this because we don't actually want to describe the line of the component\n  // but just the component name.\n  const name = fn ? fn.displayName || fn.name : '';\n  return name ? describeBuiltInComponentFrame(name) : '';\n}\n\nexport function getOwnerStackByFiberInDev(workInProgress       )         {\n  if (!__DEV__) {\n    return '';\n  }\n  try {\n    let info = '';\n\n    if (workInProgress.tag === HostText) {\n      // Text nodes never have an owner/stack because they're not created through JSX.\n      // We use the parent since text nodes are always created through a host parent.\n      workInProgress = (workInProgress.return     );\n    }\n\n    // The owner stack of the current fiber will be where it was created, i.e. inside its owner.\n    // There's no actual name of the currently executing component. Instead, that is available\n    // on the regular stack that's currently executing. However, for built-ins there is no such\n    // named stack frame and it would be ignored as being internal anyway. Therefore we add\n    // add one extra frame just to describe the \"current\" built-in component by name.\n    // Similarly, if there is no owner at all, then there's no stack frame so we add the name\n    // of the root component to the stack to know which component is currently executing.\n    switch (workInProgress.tag) {\n      case HostHoistable:\n      case HostSingleton:\n      case HostComponent:\n        info += describeBuiltInComponentFrame(workInProgress.type);\n        break;\n      case SuspenseComponent:\n        info += describeBuiltInComponentFrame('Suspense');\n        break;\n      case SuspenseListComponent:\n        info += describeBuiltInComponentFrame('SuspenseList');\n        break;\n      case ActivityComponent:\n        info += describeBuiltInComponentFrame('Activity');\n        break;\n      case ViewTransitionComponent:\n        if (enableViewTransition) {\n          info += describeBuiltInComponentFrame('ViewTransition');\n          break;\n        }\n      // Fallthrough\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        if (!workInProgress._debugOwner && info === '') {\n          // Only if we have no other data about the callsite do we add\n          // the component name as the single stack frame.\n          info += describeFunctionComponentFrameWithoutLineNumber(\n            workInProgress.type,\n          );\n        }\n        break;\n      case ForwardRef:\n        if (!workInProgress._debugOwner && info === '') {\n          info += describeFunctionComponentFrameWithoutLineNumber(\n            workInProgress.type.render,\n          );\n        }\n        break;\n    }\n\n    let owner                                           = workInProgress;\n\n    while (owner) {\n      if (typeof owner.tag === 'number') {\n        const fiber        = (owner     );\n        owner = fiber._debugOwner;\n        let debugStack = fiber._debugStack;\n        // If we don't actually print the stack if there is no owner of this JSX element.\n        // In a real app it's typically not useful since the root app is always controlled\n        // by the framework. These also tend to have noisy stacks because they're not rooted\n        // in a React render but in some imperative bootstrapping code. It could be useful\n        // if the element was created in module scope. E.g. hoisted. We could add a a single\n        // stack frame for context for example but it doesn't say much if that's a wrapper.\n        if (owner && debugStack) {\n          if (typeof debugStack !== 'string') {\n            // Stash the formatted stack so that we can avoid redoing the filtering.\n            fiber._debugStack = debugStack = formatOwnerStack(debugStack);\n          }\n          if (debugStack !== '') {\n            info += '\\n' + debugStack;\n          }\n        }\n      } else if (owner.debugStack != null) {\n        // Server Component\n        const ownerStack        = owner.debugStack;\n        owner = owner.owner;\n        if (owner && ownerStack) {\n          // TODO: Should we stash this somewhere for caching purposes?\n          info += '\\n' + formatOwnerStack(ownerStack);\n        }\n      } else {\n        break;\n      }\n    }\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nconst CapturedStacks                                   = new WeakMap();\n\n                                 \n            \n                       \n                       \n  \n\nexport function createCapturedValueAtFiber   (\n  value   ,\n  source       ,\n)                   {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  if (typeof value === 'object' && value !== null) {\n    const existing = CapturedStacks.get(value);\n    if (existing !== undefined) {\n      return existing;\n    }\n    const captured = {\n      value,\n      source,\n      stack: getStackByFiberInDevAndProd(source),\n    };\n    CapturedStacks.set(value, captured);\n    return captured;\n  } else {\n    return {\n      value,\n      source,\n      stack: getStackByFiberInDevAndProd(source),\n    };\n  }\n}\n\nexport function createCapturedValueFromError(\n  value       ,\n  stack               ,\n)                       {\n  const captured = {\n    value,\n    source: null,\n    stack: stack,\n  };\n  if (typeof stack === 'string') {\n    CapturedStacks.set(value, captured);\n  }\n  return captured;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n// Ids are base 32 strings whose binary representation corresponds to the\n// position of a node in a tree.\n\n// Every time the tree forks into multiple children, we add additional bits to\n// the left of the sequence that represent the position of the child within the\n// current level of children.\n//\n//      00101       00010001011010101\n//      \u2570\u2500\u252C\u2500\u256F       \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256F\n//   Fork 5 of 20       Parent id\n//\n// The leading 0s are important. In the above example, you only need 3 bits to\n// represent slot 5. However, you need 5 bits to represent all the forks at\n// the current level, so we must account for the empty bits at the end.\n//\n// For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n// the zeroth id at a level would be indistinguishable from its parent.\n//\n// If a node has only one child, and does not materialize an id (i.e. does not\n// contain a useId hook), then we don't need to allocate any space in the\n// sequence. It's treated as a transparent indirection. For example, these two\n// trees produce the same ids:\n//\n// <>                          <>\n//   <Indirection>               <A />\n//     <A />                     <B />\n//   </Indirection>            </>\n//   <B />\n// </>\n//\n// However, we cannot skip any node that materializes an id. Otherwise, a parent\n// id that does not fork would be indistinguishable from its child id. For\n// example, this tree does not fork, but the parent and child must have\n// different ids.\n//\n// <Parent>\n//   <Child />\n// </Parent>\n//\n// To handle this scenario, every time we materialize an id, we allocate a\n// new level with a single slot. You can think of this as a fork with only one\n// prong, or an array of children with length 1.\n//\n// It's possible for the size of the sequence to exceed 32 bits, the max\n// size for bitwise operations. When this happens, we make more room by\n// converting the right part of the id to a string and storing it in an overflow\n// variable. We use a base 32 string representation, because 32 is the largest\n// power of 2 that is supported by toString(). We want the base to be large so\n// that the resulting ids are compact, and we want the base to be a power of 2\n// because every log2(base) bits corresponds to a single character, i.e. every\n// log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n// affecting the final result.\n\n                                                                   \n\nimport {getIsHydrating} from './ReactFiberHydrationContext';\nimport {clz32} from './clz32';\nimport {Forked, NoFlags} from './ReactFiberFlags';\n\n                           \n             \n                   \n  \n\n// TODO: Use the unified fiber stack module instead of this local one?\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\nconst forkStack             = [];\nlet forkStackIndex         = 0;\nlet treeForkProvider               = null;\nlet treeForkCount         = 0;\n\nconst idStack             = [];\nlet idStackIndex         = 0;\nlet treeContextProvider               = null;\nlet treeContextId         = 1;\nlet treeContextOverflow         = '';\n\nexport function isForkedChild(workInProgress       )          {\n  warnIfNotHydrating();\n  return (workInProgress.flags & Forked) !== NoFlags;\n}\n\nexport function getForksAtLevel(workInProgress       )         {\n  warnIfNotHydrating();\n  return treeForkCount;\n}\n\nexport function getTreeId()         {\n  const overflow = treeContextOverflow;\n  const idWithLeadingBit = treeContextId;\n  const id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\n\nexport function pushTreeFork(\n  workInProgress       ,\n  totalChildren        ,\n)       {\n  // This is called right after we reconcile an array (or iterator) of child\n  // fibers, because that's the only place where we know how many children in\n  // the whole set without doing extra work later, or storing addtional\n  // information on the fiber.\n  //\n  // That's why this function is separate from pushTreeId \u2014 it's called during\n  // the render phase of the fork parent, not the child, which is where we push\n  // the other context values.\n  //\n  // In the Fizz implementation this is much simpler because the child is\n  // rendered in the same callstack as the parent.\n  //\n  // It might be better to just add a `forks` field to the Fiber type. It would\n  // make this module simpler.\n\n  warnIfNotHydrating();\n\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\n\nexport function pushTreeId(\n  workInProgress       ,\n  totalChildren        ,\n  index        ,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextProvider = workInProgress;\n\n  const baseIdWithLeadingBit = treeContextId;\n  const baseOverflow = treeContextOverflow;\n\n  // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n  const baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  const baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n\n  const slot = index + 1;\n  const length = getBitLength(totalChildren) + baseLength;\n\n  // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    const numberOfOverflowBits = baseLength - (baseLength % 5);\n\n    // Then create a bitmask that selects only those bits.\n    const newOverflowBits = (1 << numberOfOverflowBits) - 1;\n\n    // Select the bits, and convert them to a base 32 string.\n    const newOverflow = (baseId & newOverflowBits).toString(32);\n\n    // Now we can remove those bits from the base id.\n    const restOfBaseId = baseId >> numberOfOverflowBits;\n    const restOfBaseLength = baseLength - numberOfOverflowBits;\n\n    // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n    const restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    const restOfNewBits = slot << restOfBaseLength;\n    const id = restOfNewBits | restOfBaseId;\n    const overflow = newOverflow + baseOverflow;\n\n    treeContextId = (1 << restOfLength) | id;\n    treeContextOverflow = overflow;\n  } else {\n    // Normal path\n    const newBits = slot << baseLength;\n    const id = newBits | baseId;\n    const overflow = baseOverflow;\n\n    treeContextId = (1 << length) | id;\n    treeContextOverflow = overflow;\n  }\n}\n\nexport function pushMaterializedTreeId(workInProgress       ) {\n  warnIfNotHydrating();\n\n  // This component materialized an id. This will affect any ids that appear\n  // in its children.\n  const returnFiber = workInProgress.return;\n  if (returnFiber !== null) {\n    const numberOfForks = 1;\n    const slotIndex = 0;\n    pushTreeFork(workInProgress, numberOfForks);\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\n  }\n}\n\nfunction getBitLength(number        )         {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id        ) {\n  return 1 << (getBitLength(id) - 1);\n}\n\nexport function popTreeContext(workInProgress       ) {\n  // Restore the previous values.\n\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\n\nexport function getSuspendedTreeContext()                     {\n  warnIfNotHydrating();\n  if (treeContextProvider !== null) {\n    return {\n      id: treeContextId,\n      overflow: treeContextOverflow,\n    };\n  } else {\n    return null;\n  }\n}\n\nexport function restoreSuspendedTreeContext(\n  workInProgress       ,\n  suspendedContext             ,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextId = suspendedContext.id;\n  treeContextOverflow = suspendedContext.overflow;\n  treeContextProvider = workInProgress;\n}\n\nfunction warnIfNotHydrating() {\n  if (__DEV__) {\n    if (!getIsHydrating()) {\n      console.error(\n        'Expected to be hydrating. This is a bug in React. Please file ' +\n          'an issue.',\n      );\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n                                                   \n                                                               \n                                            \n\nimport {\n  getChildHostContext,\n  getRootHostContext,\n  HostTransitionContext,\n  NotPendingTransition,\n  isPrimaryRenderer,\n} from './ReactFiberConfig';\nimport {createCursor, push, pop} from './ReactFiberStack';\n\nconst contextStackCursor                                  = createCursor(null);\nconst contextFiberStackCursor                            = createCursor(null);\nconst rootInstanceStackCursor                                =\n  createCursor(null);\n\n// Represents the nearest host transition provider (in React DOM, a <form />)\n// NOTE: Since forms cannot be nested, and this feature is only implemented by\n// React DOM, we don't technically need this to be a stack. It could be a single\n// module variable instead.\nconst hostTransitionProviderCursor                            =\n  createCursor(null);\n\nfunction requiredContext       (c              )        {\n  if (__DEV__) {\n    if (c === null) {\n      console.error(\n        'Expected host context to exist. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n    }\n  }\n  return (c     );\n}\n\nfunction getCurrentRootHostContainer()                   {\n  return rootInstanceStackCursor.current;\n}\n\nfunction getRootHostContainer()            {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nexport function getHostTransitionProvider()               {\n  return hostTransitionProviderCursor.current;\n}\n\nfunction pushHostContainer(fiber       , nextRootInstance           )       {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, null, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber       ) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext()              {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber       )       {\n  const stateHook              = fiber.memoizedState;\n  if (stateHook !== null) {\n    // Only provide context if this fiber has been upgraded by a host\n    // transition. We use the same optimization for regular host context below.\n    push(hostTransitionProviderCursor, fiber, fiber);\n  }\n\n  const context              = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context !== nextContext) {\n    // Track the context and the Fiber that provided it.\n    // This enables us to pop only Fibers that provide unique contexts.\n    push(contextFiberStackCursor, fiber, fiber);\n    push(contextStackCursor, nextContext, fiber);\n  }\n}\n\nfunction popHostContext(fiber       )       {\n  if (contextFiberStackCursor.current === fiber) {\n    // Do not pop unless this Fiber provided the current context.\n    // pushHostContext() only pushes Fibers that provide unique contexts.\n    pop(contextStackCursor, fiber);\n    pop(contextFiberStackCursor, fiber);\n  }\n\n  if (hostTransitionProviderCursor.current === fiber) {\n    // Do not pop unless this Fiber provided the current context. This is mostly\n    // a performance optimization, but conveniently it also prevents a potential\n    // data race where a host provider is upgraded (i.e. memoizedState becomes\n    // non-null) during a concurrent event. This is a bit of a flaw in the way\n    // we upgrade host components, but because we're accounting for it here, it\n    // should be fine.\n    pop(hostTransitionProviderCursor, fiber);\n\n    // When popping the transition provider, we reset the context value back\n    // to `NotPendingTransition`. We can do this because you're not allowed to nest forms. If\n    // we allowed for multiple nested host transition providers, then we'd\n    // need to reset this to the parent provider's status.\n    if (isPrimaryRenderer) {\n      HostTransitionContext._currentValue = NotPendingTransition;\n    } else {\n      HostTransitionContext._currentValue2 = NotPendingTransition;\n    }\n  }\n}\n\nexport {\n  getHostContext,\n  getCurrentRootHostContainer,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n             \n           \n               \n                     \n                   \n                   \n            \n              \n                            \n                                                                 \n                                                                 \n                                                         \n                                                        \n                                                                  \n\nimport {\n  HostComponent,\n  HostSingleton,\n  HostRoot,\n  SuspenseComponent,\n  ActivityComponent,\n} from './ReactWorkTags';\nimport {favorSafetyOverHydrationPerf} from 'shared/ReactFeatureFlags';\n\nimport {createCapturedValueAtFiber} from './ReactCapturedValue';\n\nimport {createFiberFromDehydratedFragment} from './ReactFiber';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  supportsSingletons,\n  getNextHydratableSibling,\n  getNextHydratableSiblingAfterSingleton,\n  getFirstHydratableChild,\n  getFirstHydratableChildWithinContainer,\n  getFirstHydratableChildWithinActivityInstance,\n  getFirstHydratableChildWithinSuspenseInstance,\n  getFirstHydratableChildWithinSingleton,\n  hydrateInstance,\n  diffHydratedPropsForDevWarnings,\n  describeHydratableInstanceForDevWarnings,\n  hydrateTextInstance,\n  diffHydratedTextForDevWarnings,\n  hydrateActivityInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterActivityInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  shouldDeleteUnhydratedTailInstances,\n  resolveSingletonInstance,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateActivityInstance,\n  canHydrateSuspenseInstance,\n  canHydrateFormStateMarker,\n  isFormStateMarkerMatching,\n  validateHydratableInstance,\n  validateHydratableTextInstance,\n} from './ReactFiberConfig';\nimport {OffscreenLane} from './ReactFiberLane';\nimport {\n  getSuspendedTreeContext,\n  restoreSuspendedTreeContext,\n} from './ReactFiberTreeContext';\nimport {queueRecoverableErrors} from './ReactFiberWorkLoop';\nimport {getRootHostContainer, getHostContext} from './ReactFiberHostContext';\nimport {describeDiff} from './ReactFiberHydrationDiffs';\nimport {runWithFiberInDEV} from './ReactCurrentFiber';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber               = null;\nlet nextHydratableInstance                            = null;\nlet isHydrating          = false;\n\n// This flag allows for warning supression when we expect there to be mismatches\n// due to earlier mismatches or a suspended fiber.\nlet didSuspendOrErrorDEV          = false;\n\n// Hydration differences found that haven't yet been logged.\nlet hydrationDiffRootDEV                           = null;\n\n// Hydration errors that were thrown inside this boundary\nlet hydrationErrors                                     = null;\n\nlet rootOrSingletonContext = false;\n\n// Builds a common ancestor tree from the root down for collecting diffs.\nfunction buildHydrationDiffNode(\n  fiber       ,\n  distanceFromLeaf        ,\n)                    {\n  if (fiber.return === null) {\n    // We're at the root.\n    if (hydrationDiffRootDEV === null) {\n      hydrationDiffRootDEV = {\n        fiber: fiber,\n        children: [],\n        serverProps: undefined,\n        serverTail: [],\n        distanceFromLeaf: distanceFromLeaf,\n      };\n    } else if (hydrationDiffRootDEV.fiber !== fiber) {\n      throw new Error(\n        'Saw multiple hydration diff roots in a pass. This is a bug in React.',\n      );\n    } else if (hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf) {\n      hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf;\n    }\n    return hydrationDiffRootDEV;\n  }\n  const siblings = buildHydrationDiffNode(\n    fiber.return,\n    distanceFromLeaf + 1,\n  ).children;\n  // The same node may already exist in the parent. Since we currently always render depth first\n  // and rerender if we suspend or terminate early, if a shared ancestor was added we should still\n  // be inside of that shared ancestor which means it was the last one to be added. If this changes\n  // we may have to scan the whole set.\n  if (siblings.length > 0 && siblings[siblings.length - 1].fiber === fiber) {\n    const existing = siblings[siblings.length - 1];\n    if (existing.distanceFromLeaf > distanceFromLeaf) {\n      existing.distanceFromLeaf = distanceFromLeaf;\n    }\n    return existing;\n  }\n  const newNode                    = {\n    fiber: fiber,\n    children: [],\n    serverProps: undefined,\n    serverTail: [],\n    distanceFromLeaf: distanceFromLeaf,\n  };\n  siblings.push(newNode);\n  return newNode;\n}\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nexport function markDidThrowWhileHydratingDEV() {\n  if (__DEV__) {\n    didSuspendOrErrorDEV = true;\n  }\n}\n\nfunction enterHydrationState(fiber       )          {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance            = fiber.stateNode.containerInfo;\n  nextHydratableInstance =\n    getFirstHydratableChildWithinContainer(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  hydrationDiffRootDEV = null;\n  rootOrSingletonContext = true;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedActivityInstance(\n  fiber       ,\n  activityInstance                  ,\n  treeContext                    ,\n)          {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance =\n    getFirstHydratableChildWithinActivityInstance(activityInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  hydrationDiffRootDEV = null;\n  rootOrSingletonContext = false;\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber       ,\n  suspenseInstance                  ,\n  treeContext                    ,\n)          {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance =\n    getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  hydrationDiffRootDEV = null;\n  rootOrSingletonContext = false;\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n  return true;\n}\n\nfunction warnNonHydratedInstance(\n  fiber       ,\n  rejectedCandidate                           ,\n) {\n  if (__DEV__) {\n    if (didSuspendOrErrorDEV) {\n      // Inside a boundary that already suspended. We're currently rendering the\n      // siblings of a suspended node. The mismatch may be due to the missing\n      // data, so it's probably a false positive.\n      return;\n    }\n\n    // Add this fiber to the diff tree.\n    const diffNode = buildHydrationDiffNode(fiber, 0);\n    // We use null as a signal that there was no node to match.\n    diffNode.serverProps = null;\n    if (rejectedCandidate !== null) {\n      const description =\n        describeHydratableInstanceForDevWarnings(rejectedCandidate);\n      diffNode.serverTail.push(description);\n    }\n  }\n}\n\nfunction tryHydrateInstance(\n  fiber       ,\n  nextInstance     ,\n  hostContext             ,\n) {\n  // fiber is a HostComponent Fiber\n  const instance = canHydrateInstance(\n    nextInstance,\n    fiber.type,\n    fiber.pendingProps,\n    rootOrSingletonContext,\n  );\n  if (instance !== null) {\n    fiber.stateNode = (instance          );\n\n    if (__DEV__) {\n      if (!didSuspendOrErrorDEV) {\n        const differences = diffHydratedPropsForDevWarnings(\n          instance,\n          fiber.type,\n          fiber.pendingProps,\n          hostContext,\n        );\n        if (differences !== null) {\n          const diffNode = buildHydrationDiffNode(fiber, 0);\n          diffNode.serverProps = differences;\n        }\n      }\n    }\n\n    hydrationParentFiber = fiber;\n    nextHydratableInstance = getFirstHydratableChild(instance);\n    rootOrSingletonContext = false;\n    return true;\n  }\n  return false;\n}\n\nfunction tryHydrateText(fiber       , nextInstance     ) {\n  // fiber is a HostText Fiber\n  const text = fiber.pendingProps;\n  const textInstance = canHydrateTextInstance(\n    nextInstance,\n    text,\n    rootOrSingletonContext,\n  );\n  if (textInstance !== null) {\n    fiber.stateNode = (textInstance              );\n    hydrationParentFiber = fiber;\n    // Text Instances don't have children so there's nothing to hydrate.\n    nextHydratableInstance = null;\n    return true;\n  }\n  return false;\n}\n\nfunction tryHydrateActivity(\n  fiber       ,\n  nextInstance     ,\n)                          {\n  // fiber is a ActivityComponent Fiber\n  const activityInstance = canHydrateActivityInstance(\n    nextInstance,\n    rootOrSingletonContext,\n  );\n  if (activityInstance !== null) {\n    const activityState                = {\n      dehydrated: activityInstance,\n      treeContext: getSuspendedTreeContext(),\n      retryLane: OffscreenLane,\n      hydrationErrors: null,\n    };\n    fiber.memoizedState = activityState;\n    // Store the dehydrated fragment as a child fiber.\n    // This simplifies the code for getHostSibling and deleting nodes,\n    // since it doesn't have to consider all Suspense boundaries and\n    // check if they're dehydrated ones or not.\n    const dehydratedFragment =\n      createFiberFromDehydratedFragment(activityInstance);\n    dehydratedFragment.return = fiber;\n    fiber.child = dehydratedFragment;\n    hydrationParentFiber = fiber;\n    // While an Activity Instance does have children, we won't step into\n    // it during the first pass. Instead, we'll reenter it later.\n    nextHydratableInstance = null;\n  }\n  return activityInstance;\n}\n\nfunction tryHydrateSuspense(\n  fiber       ,\n  nextInstance     ,\n)                          {\n  // fiber is a SuspenseComponent Fiber\n  const suspenseInstance = canHydrateSuspenseInstance(\n    nextInstance,\n    rootOrSingletonContext,\n  );\n  if (suspenseInstance !== null) {\n    const suspenseState                = {\n      dehydrated: suspenseInstance,\n      treeContext: getSuspendedTreeContext(),\n      retryLane: OffscreenLane,\n      hydrationErrors: null,\n    };\n    fiber.memoizedState = suspenseState;\n    // Store the dehydrated fragment as a child fiber.\n    // This simplifies the code for getHostSibling and deleting nodes,\n    // since it doesn't have to consider all Suspense boundaries and\n    // check if they're dehydrated ones or not.\n    const dehydratedFragment =\n      createFiberFromDehydratedFragment(suspenseInstance);\n    dehydratedFragment.return = fiber;\n    fiber.child = dehydratedFragment;\n    hydrationParentFiber = fiber;\n    // While a Suspense Instance does have children, we won't step into\n    // it during the first pass. Instead, we'll reenter it later.\n    nextHydratableInstance = null;\n  }\n  return suspenseInstance;\n}\n\nexport const HydrationMismatchException        = new Error(\n  'Hydration Mismatch Exception: This is not a real error, and should not leak into ' +\n    \"userspace. If you're seeing this, it's likely a bug in React.\",\n);\n\nfunction throwOnHydrationMismatch(fiber       , fromText          = false) {\n  let diff = '';\n  if (__DEV__) {\n    // Consume the diff root for this mismatch.\n    // Any other errors will get their own diffs.\n    const diffRoot = hydrationDiffRootDEV;\n    if (diffRoot !== null) {\n      hydrationDiffRootDEV = null;\n      diff = describeDiff(diffRoot);\n    }\n  }\n  const error = new Error(\n    `Hydration failed because the server rendered ${fromText ? 'text' : 'HTML'} didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n` +\n      '\\n' +\n      \"- A server/client branch `if (typeof window !== 'undefined')`.\\n\" +\n      \"- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\\n\" +\n      \"- Date formatting in a user's locale which doesn't match the server.\\n\" +\n      '- External changing data without sending a snapshot of it along with the HTML.\\n' +\n      '- Invalid HTML tag nesting.\\n' +\n      '\\n' +\n      'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\\n' +\n      '\\n' +\n      'https://react.dev/link/hydration-mismatch' +\n      diff,\n  );\n  queueHydrationError(createCapturedValueAtFiber(error, fiber));\n  throw HydrationMismatchException;\n}\n\nfunction claimHydratableSingleton(fiber       )       {\n  if (supportsSingletons) {\n    if (!isHydrating) {\n      return;\n    }\n    const currentRootContainer = getRootHostContainer();\n    const currentHostContext = getHostContext();\n    const instance = (fiber.stateNode = resolveSingletonInstance(\n      fiber.type,\n      fiber.pendingProps,\n      currentRootContainer,\n      currentHostContext,\n      false,\n    ));\n\n    if (__DEV__) {\n      if (!didSuspendOrErrorDEV) {\n        const differences = diffHydratedPropsForDevWarnings(\n          instance,\n          fiber.type,\n          fiber.pendingProps,\n          currentHostContext,\n        );\n        if (differences !== null) {\n          const diffNode = buildHydrationDiffNode(fiber, 0);\n          diffNode.serverProps = differences;\n        }\n      }\n    }\n\n    hydrationParentFiber = fiber;\n    rootOrSingletonContext = true;\n    nextHydratableInstance = getFirstHydratableChildWithinSingleton(\n      fiber.type,\n      instance,\n      nextHydratableInstance,\n    );\n  }\n}\n\nfunction tryToClaimNextHydratableInstance(fiber       )       {\n  if (!isHydrating) {\n    return;\n  }\n\n  // Validate that this is ok to render here before any mismatches.\n  const currentHostContext = getHostContext();\n  const shouldKeepWarning = validateHydratableInstance(\n    fiber.type,\n    fiber.pendingProps,\n    currentHostContext,\n  );\n\n  const nextInstance = nextHydratableInstance;\n  if (\n    !nextInstance ||\n    !tryHydrateInstance(fiber, nextInstance, currentHostContext)\n  ) {\n    if (shouldKeepWarning) {\n      warnNonHydratedInstance(fiber, nextInstance);\n    }\n    throwOnHydrationMismatch(fiber);\n  }\n}\n\nfunction tryToClaimNextHydratableTextInstance(fiber       )       {\n  if (!isHydrating) {\n    return;\n  }\n  const text = fiber.pendingProps;\n\n  let shouldKeepWarning = true;\n  // Validate that this is ok to render here before any mismatches.\n  const currentHostContext = getHostContext();\n  shouldKeepWarning = validateHydratableTextInstance(text, currentHostContext);\n\n  const nextInstance = nextHydratableInstance;\n  if (!nextInstance || !tryHydrateText(fiber, nextInstance)) {\n    if (shouldKeepWarning) {\n      warnNonHydratedInstance(fiber, nextInstance);\n    }\n    throwOnHydrationMismatch(fiber);\n  }\n}\n\nfunction claimNextHydratableActivityInstance(fiber       )                   {\n  const nextInstance = nextHydratableInstance;\n  const activityInstance = nextInstance\n    ? tryHydrateActivity(fiber, nextInstance)\n    : null;\n  if (activityInstance === null) {\n    warnNonHydratedInstance(fiber, nextInstance);\n    throw throwOnHydrationMismatch(fiber);\n  }\n  return activityInstance;\n}\n\nfunction claimNextHydratableSuspenseInstance(fiber       )                   {\n  const nextInstance = nextHydratableInstance;\n  const suspenseInstance = nextInstance\n    ? tryHydrateSuspense(fiber, nextInstance)\n    : null;\n  if (suspenseInstance === null) {\n    warnNonHydratedInstance(fiber, nextInstance);\n    throw throwOnHydrationMismatch(fiber);\n  }\n  return suspenseInstance;\n}\n\nexport function tryToClaimNextHydratableFormMarkerInstance(\n  fiber       ,\n)          {\n  if (!isHydrating) {\n    return false;\n  }\n  if (nextHydratableInstance) {\n    const markerInstance = canHydrateFormStateMarker(\n      nextHydratableInstance,\n      rootOrSingletonContext,\n    );\n    if (markerInstance) {\n      // Found the marker instance.\n      nextHydratableInstance = getNextHydratableSibling(markerInstance);\n      // Return true if this marker instance should use the state passed\n      // to hydrateRoot.\n      // TODO: As an optimization, Fizz should only emit these markers if form\n      // state is passed at the root.\n      return isFormStateMarkerMatching(markerInstance);\n    }\n  }\n  // Should have found a marker instance. Throw an error to trigger client\n  // rendering. We don't bother to check if we're in a concurrent root because\n  // useActionState is a new API, so backwards compat is not an issue.\n  throwOnHydrationMismatch(fiber);\n  return false;\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber       ,\n  hostContext             ,\n)       {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance           = fiber.stateNode;\n  const didHydrate = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    hostContext,\n    fiber,\n  );\n  if (!didHydrate && favorSafetyOverHydrationPerf) {\n    throwOnHydrationMismatch(fiber, true);\n  }\n}\n\nfunction prepareToHydrateHostTextInstance(fiber       )       {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance               = fiber.stateNode;\n  const textContent         = fiber.memoizedProps;\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  let parentProps = null;\n  // We assume that prepareToHydrateHostTextInstance is called in a context where the\n  // hydration parent is the parent host component of this host text.\n  const returnFiber = hydrationParentFiber;\n  if (returnFiber !== null) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        if (__DEV__) {\n          if (shouldWarnIfMismatchDev) {\n            const difference = diffHydratedTextForDevWarnings(\n              textInstance,\n              textContent,\n              parentProps,\n            );\n            if (difference !== null) {\n              const diffNode = buildHydrationDiffNode(fiber, 0);\n              diffNode.serverProps = difference;\n            }\n          }\n        }\n        break;\n      }\n      case HostSingleton:\n      case HostComponent: {\n        parentProps = returnFiber.memoizedProps;\n        if (__DEV__) {\n          if (shouldWarnIfMismatchDev) {\n            const difference = diffHydratedTextForDevWarnings(\n              textInstance,\n              textContent,\n              parentProps,\n            );\n            if (difference !== null) {\n              const diffNode = buildHydrationDiffNode(fiber, 0);\n              diffNode.serverProps = difference;\n            }\n          }\n        }\n        break;\n      }\n    }\n    // TODO: What if it's a SuspenseInstance?\n  }\n\n  const didHydrate = hydrateTextInstance(\n    textInstance,\n    textContent,\n    fiber,\n    parentProps,\n  );\n  if (!didHydrate && favorSafetyOverHydrationPerf) {\n    throwOnHydrationMismatch(fiber, true);\n  }\n}\n\nfunction prepareToHydrateHostActivityInstance(fiber       )       {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostActivityInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const activityState                       = fiber.memoizedState;\n  const activityInstance                          =\n    activityState !== null ? activityState.dehydrated : null;\n\n  if (!activityInstance) {\n    throw new Error(\n      'Expected to have a hydrated activity instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  hydrateActivityInstance(activityInstance, fiber);\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber       )       {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState                       = fiber.memoizedState;\n  const suspenseInstance                          =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedActivityInstance(\n  fiber       ,\n)                            {\n  const activityState                       = fiber.memoizedState;\n  const activityInstance                          =\n    activityState !== null ? activityState.dehydrated : null;\n\n  if (!activityInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  return getNextHydratableInstanceAfterActivityInstance(activityInstance);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber       ,\n)                            {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState                       = fiber.memoizedState;\n  const suspenseInstance                          =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber       )       {\n  hydrationParentFiber = fiber.return;\n  while (hydrationParentFiber) {\n    switch (hydrationParentFiber.tag) {\n      case HostComponent:\n      case ActivityComponent:\n      case SuspenseComponent:\n        rootOrSingletonContext = false;\n        return;\n      case HostSingleton:\n      case HostRoot:\n        rootOrSingletonContext = true;\n        return;\n      default:\n        hydrationParentFiber = hydrationParentFiber.return;\n    }\n  }\n}\n\nfunction popHydrationState(fiber       )          {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  const tag = fiber.tag;\n\n  if (supportsSingletons) {\n    // With float we never clear the Root, or Singleton instances. We also do not clear Instances\n    // that have singleton text content\n    if (\n      tag !== HostRoot &&\n      tag !== HostSingleton &&\n      !(\n        tag === HostComponent &&\n        (!shouldDeleteUnhydratedTailInstances(fiber.type) ||\n          shouldSetTextContent(fiber.type, fiber.memoizedProps))\n      )\n    ) {\n      const nextInstance = nextHydratableInstance;\n      if (nextInstance) {\n        warnIfUnhydratedTailNodes(fiber);\n        throwOnHydrationMismatch(fiber);\n      }\n    }\n  } else {\n    // If we have any remaining hydratable nodes, we need to delete them now.\n    // We only do this deeper than head and body since they tend to have random\n    // other nodes in them. We also ignore components with pure text content in\n    // side of them. We also don't delete anything inside the root container.\n    if (\n      tag !== HostRoot &&\n      (tag !== HostComponent ||\n        (shouldDeleteUnhydratedTailInstances(fiber.type) &&\n          !shouldSetTextContent(fiber.type, fiber.memoizedProps)))\n    ) {\n      const nextInstance = nextHydratableInstance;\n      if (nextInstance) {\n        warnIfUnhydratedTailNodes(fiber);\n        throwOnHydrationMismatch(fiber);\n      }\n    }\n  }\n  popToNextHostParent(fiber);\n  if (tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else if (tag === ActivityComponent) {\n    nextHydratableInstance = skipPastDehydratedActivityInstance(fiber);\n  } else if (supportsSingletons && tag === HostSingleton) {\n    nextHydratableInstance = getNextHydratableSiblingAfterSingleton(\n      fiber.type,\n      nextHydratableInstance,\n    );\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction warnIfUnhydratedTailNodes(fiber       ) {\n  if (__DEV__) {\n    let nextInstance = nextHydratableInstance;\n    while (nextInstance) {\n      const diffNode = buildHydrationDiffNode(fiber, 0);\n      const description =\n        describeHydratableInstanceForDevWarnings(nextInstance);\n      diffNode.serverTail.push(description);\n      if (description.type === 'Suspense') {\n        const suspenseInstance                   = (nextInstance     );\n        nextInstance =\n          getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n      } else {\n        nextInstance = getNextHydratableSibling(nextInstance);\n      }\n    }\n  }\n}\n\nfunction resetHydrationState()       {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n  didSuspendOrErrorDEV = false;\n}\n\nexport function upgradeHydrationErrorsToRecoverable()        \n                       \n         {\n  const queuedErrors = hydrationErrors;\n  if (queuedErrors !== null) {\n    // Successfully completed a forced client render. The errors that occurred\n    // during the hydration attempt are now recovered. We will log them in\n    // commit phase, once the entire tree has finished.\n    queueRecoverableErrors(queuedErrors);\n    hydrationErrors = null;\n  }\n  return queuedErrors;\n}\n\nfunction getIsHydrating()          {\n  return isHydrating;\n}\n\nexport function queueHydrationError(error                      )       {\n  if (hydrationErrors === null) {\n    hydrationErrors = [error];\n  } else {\n    hydrationErrors.push(error);\n  }\n}\n\nexport function emitPendingHydrationWarnings() {\n  if (__DEV__) {\n    // If we haven't yet thrown any hydration errors by the time we reach the end we've successfully\n    // hydrated, however, we might still have DEV-only mismatches that we log now.\n    const diffRoot = hydrationDiffRootDEV;\n    if (diffRoot !== null) {\n      hydrationDiffRootDEV = null;\n      const diff = describeDiff(diffRoot);\n\n      // Just pick the DFS-first leaf as the owner.\n      // Should be good enough since most warnings only have a single error.\n      let diffOwner                    = diffRoot;\n      while (diffOwner.children.length > 0) {\n        diffOwner = diffOwner.children[0];\n      }\n\n      runWithFiberInDEV(diffOwner.fiber, () => {\n        console.error(\n          \"A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. \" +\n            'This can happen if a SSR-ed Client Component used:\\n' +\n            '\\n' +\n            \"- A server/client branch `if (typeof window !== 'undefined')`.\\n\" +\n            \"- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\\n\" +\n            \"- Date formatting in a user's locale which doesn't match the server.\\n\" +\n            '- External changing data without sending a snapshot of it along with the HTML.\\n' +\n            '- Invalid HTML tag nesting.\\n' +\n            '\\n' +\n            'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\\n' +\n            '\\n' +\n            '%s%s',\n          'https://react.dev/link/hydration-mismatch',\n          diff,\n        );\n      });\n    }\n  }\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedActivityInstance,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  claimHydratableSingleton,\n  tryToClaimNextHydratableInstance,\n  tryToClaimNextHydratableTextInstance,\n  claimNextHydratableActivityInstance,\n  claimNextHydratableSuspenseInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostActivityInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                \n\nexport const NoMode = /*                         */ 0b0000000;\n// TODO: Remove ConcurrentMode by reading from the root tag instead\nexport const ConcurrentMode = /*                 */ 0b0000001;\nexport const ProfileMode = /*                    */ 0b0000010;\n//export const DebugTracingMode = /*             */ 0b0000100; // Removed\nexport const StrictLegacyMode = /*               */ 0b0001000;\nexport const StrictEffectsMode = /*              */ 0b0010000;\nexport const NoStrictPassiveEffectsMode = /*     */ 0b1000000;\n// Keep track of if we're in a SuspenseyImages eligible subtree.\n// TODO: Remove this when enableSuspenseyImages ship where it's always on.\nexport const SuspenseyImagesMode = /*            */ 0b0100000;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                    \n             \n        \n                    \n               \n                              \n                                                   \n                                            \n                                                         \n                                            \n\nimport {isPrimaryRenderer, HostTransitionContext} from './ReactFiberConfig';\nimport {createCursor, push, pop} from './ReactFiberStack';\nimport {ContextProvider, DehydratedFragment} from './ReactWorkTags';\nimport {NoLanes, isSubsetOfLanes, mergeLanes} from './ReactFiberLane';\nimport {\n  NoFlags,\n  DidPropagateContext,\n  NeedsPropagation,\n} from './ReactFiberFlags';\n\nimport is from 'shared/objectIs';\nimport {enableRenderableContext} from 'shared/ReactFeatureFlags';\nimport {getHostTransitionProvider} from './ReactFiberHostContext';\n\nconst valueCursor                     = createCursor(null);\n\nlet rendererCursorDEV                            ;\nif (__DEV__) {\n  rendererCursorDEV = createCursor(null);\n}\nlet renderer2CursorDEV                            ;\nif (__DEV__) {\n  renderer2CursorDEV = createCursor(null);\n}\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber               = null;\nlet lastContextDependency                                  = null;\n\nlet isDisallowedContextReadInDEV          = false;\n\nexport function resetContextDependencies()       {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV()       {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV()       {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider   (\n  providerFiber       ,\n  context                 ,\n  nextValue   ,\n)       {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      push(rendererCursorDEV, context._currentRenderer, providerFiber);\n\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      push(renderer2CursorDEV, context._currentRenderer2, providerFiber);\n\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(\n  context                   ,\n  providerFiber       ,\n)       {\n  const currentValue = valueCursor.current;\n\n  if (isPrimaryRenderer) {\n    context._currentValue = currentValue;\n    if (__DEV__) {\n      const currentRenderer = rendererCursorDEV.current;\n      pop(rendererCursorDEV, providerFiber);\n      context._currentRenderer = currentRenderer;\n    }\n  } else {\n    context._currentValue2 = currentValue;\n    if (__DEV__) {\n      const currentRenderer2 = renderer2CursorDEV.current;\n      pop(renderer2CursorDEV, providerFiber);\n      context._currentRenderer2 = currentRenderer2;\n    }\n  }\n\n  pop(valueCursor, providerFiber);\n}\n\nexport function scheduleContextWorkOnParentPath(\n  parent              ,\n  renderLanes       ,\n  propagationRoot       ,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated.\n      // Normally, this would mean that the rest of the\n      // ancestor path already has sufficient priority.\n      // However, this is not necessarily true inside offscreen\n      // or fallback trees because childLanes may be inconsistent\n      // with the surroundings. This is why we continue the loop.\n    }\n    if (node === propagationRoot) {\n      break;\n    }\n    node = node.return;\n  }\n  if (__DEV__) {\n    if (node !== propagationRoot) {\n      console.error(\n        'Expected to find the propagation root when scheduling context work. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n\nexport function propagateContextChange   (\n  workInProgress       ,\n  context                 ,\n  renderLanes       ,\n)       {\n  // TODO: This path is only used by Cache components. Update\n  // lazilyPropagateParentContextChanges to look for Cache components so they\n  // can take advantage of lazy propagation.\n  const forcePropagateEntireTree = true;\n  propagateContextChanges(\n    workInProgress,\n    [context],\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\nfunction propagateContextChanges   (\n  workInProgress       ,\n  contexts            ,\n  renderLanes       ,\n  forcePropagateEntireTree         ,\n)       {\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dep = list.firstContext;\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context                  = contexts[i];\n          // Check if the context matches.\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleContextWorkOnParentPath(\n              consumer.return,\n              renderLanes,\n              workInProgress,\n            );\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            }\n\n            // Since we already found a match, we can stop traversing the\n            // dependency list.\n            break findChangedDep;\n          }\n        }\n        dep = dependency.next;\n      }\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(\n  current       ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\nexport function propagateParentContextChangesToDeferredTree(\n  current       ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\nfunction propagateParentContextChanges(\n  current       ,\n  workInProgress       ,\n  renderLanes       ,\n  forcePropagateEntireTree         ,\n) {\n  // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n  let contexts = null;\n  let parent               = workInProgress;\n  let isInsidePropagationBailout = false;\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n\n      if (currentParent === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      const oldProps = currentParent.memoizedProps;\n      if (oldProps !== null) {\n        let context                   ;\n        if (enableRenderableContext) {\n          context = parent.type;\n        } else {\n          context = parent.type._context;\n        }\n\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    } else if (parent === getHostTransitionProvider()) {\n      // During a host transition, a host component can act like a context\n      // provider. E.g. in React DOM, this would be a <form />.\n      const currentParent = parent.alternate;\n      if (currentParent === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      const oldStateHook       = currentParent.memoizedState;\n      const oldState                   = oldStateHook.memoizedState;\n\n      const newStateHook       = parent.memoizedState;\n      const newState                   = newStateHook.memoizedState;\n\n      // This uses regular equality instead of Object.is because we assume that\n      // host transition state doesn't include NaN as a valid type.\n      if (oldState !== newState) {\n        if (contexts !== null) {\n          contexts.push(HostTransitionContext);\n        } else {\n          contexts = [HostTransitionContext];\n        }\n      }\n    }\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(\n      workInProgress,\n      contexts,\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  }\n\n  // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them \u2014\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred \u2014 that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(\n  currentDependencies              ,\n)          {\n  // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n  let dependency = currentDependencies.firstContext;\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer\n      ? context._currentValue\n      : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n    dependency = dependency.next;\n  }\n  return false;\n}\n\nexport function prepareToReadContext(\n  workInProgress       ,\n  renderLanes       ,\n)       {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    // Reset the work-in-progress list\n    dependencies.firstContext = null;\n  }\n}\n\nexport function readContext   (context                 )    {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n  return readContextForConsumer(currentlyRenderingFiber, context);\n}\n\nexport function readContextDuringReconciliation   (\n  consumer       ,\n  context                 ,\n  renderLanes       ,\n)    {\n  if (currentlyRenderingFiber === null) {\n    prepareToReadContext(consumer, renderLanes);\n  }\n  return readContextForConsumer(consumer, context);\n}\n\nfunction readContextForConsumer   (\n  consumer              ,\n  context                 ,\n)    {\n  const value = isPrimaryRenderer\n    ? context._currentValue\n    : context._currentValue2;\n\n  const contextItem = {\n    context: ((context     )                     ),\n    memoizedValue: value,\n    next: null,\n  };\n\n  if (lastContextDependency === null) {\n    if (consumer === null) {\n      throw new Error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n\n    // This is the first dependency for this component. Create a new list.\n    lastContextDependency = contextItem;\n    consumer.dependencies = __DEV__\n      ? {\n          lanes: NoLanes,\n          firstContext: contextItem,\n          _debugThenableState: null,\n        }\n      : {\n          lanes: NoLanes,\n          firstContext: contextItem,\n        };\n    consumer.flags |= NeedsPropagation;\n  } else {\n    // Append a new context item.\n    lastContextDependency = lastContextDependency.next = contextItem;\n  }\n  return value;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                    \n                                                                   \n\nimport {REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\n\nimport {pushProvider, popProvider} from './ReactFiberNewContext';\nimport * as Scheduler from 'scheduler';\n\n// In environments without AbortController (e.g. tests)\n// replace it with a lightweight shim that only has the features we use.\nconst AbortControllerLocal                         =\n  typeof AbortController !== 'undefined'\n    ? AbortController\n    : // $FlowFixMe[missing-this-annot]\n      // $FlowFixMe[prop-missing]\n      function AbortControllerShim() {\n        const listeners = [];\n        const signal = (this.signal = {\n          aborted: false,\n          addEventListener: (type, listener) => {\n            listeners.push(listener);\n          },\n        });\n\n        this.abort = () => {\n          signal.aborted = true;\n          listeners.forEach(listener => listener());\n        };\n      };\n\n                     \n                              \n                                \n                   \n  \n\n                                   \n                 \n                \n  \n\n                                \n                 \n               \n  \n\n// Intentionally not named imports because Rollup would\n// use dynamic dispatch for CommonJS interop named imports.\nconst {\n  unstable_scheduleCallback: scheduleCallback,\n  unstable_NormalPriority: NormalPriority,\n} = Scheduler;\n\nexport const CacheContext                      = {\n  $$typeof: REACT_CONTEXT_TYPE,\n  // We don't use Consumer/Provider for Cache components. So we'll cheat.\n  Consumer: (null     ),\n  Provider: (null     ),\n  // We'll initialize these at the root.\n  _currentValue: (null     ),\n  _currentValue2: (null     ),\n  _threadCount: 0,\n};\n\nif (__DEV__) {\n  CacheContext._currentRenderer = null;\n  CacheContext._currentRenderer2 = null;\n}\n\n// Creates a new empty Cache instance with a ref-count of 0. The caller is responsible\n// for retaining the cache once it is in use (retainCache), and releasing the cache\n// once it is no longer needed (releaseCache).\nexport function createCache()        {\n  return {\n    controller: new AbortControllerLocal(),\n    data: new Map(),\n    refCount: 0,\n  };\n}\n\nexport function retainCache(cache       ) {\n  if (__DEV__) {\n    if (cache.controller.signal.aborted) {\n      console.warn(\n        'A cache instance was retained after it was already freed. ' +\n          'This likely indicates a bug in React.',\n      );\n    }\n  }\n  cache.refCount++;\n}\n\n// Cleanup a cache instance, potentially freeing it if there are no more references\nexport function releaseCache(cache       ) {\n  cache.refCount--;\n  if (__DEV__) {\n    if (cache.refCount < 0) {\n      console.warn(\n        'A cache instance was released after it was already freed. ' +\n          'This likely indicates a bug in React.',\n      );\n    }\n  }\n  if (cache.refCount === 0) {\n    scheduleCallback(NormalPriority, () => {\n      cache.controller.abort();\n    });\n  }\n}\n\nexport function pushCacheProvider(workInProgress       , cache       ) {\n  pushProvider(workInProgress, CacheContext, cache);\n}\n\nexport function popCacheProvider(workInProgress       , cache       ) {\n  popProvider(CacheContext, workInProgress);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                    \n                                                                   \n\nimport {enableViewTransition} from 'shared/ReactFeatureFlags';\nimport {includesTransitionLane} from './ReactFiberLane';\n\nexport function queueTransitionTypes(\n  root           ,\n  transitionTypes                 ,\n)       {\n  if (enableViewTransition) {\n    // TODO: We should really store transitionTypes per lane in a LaneMap on\n    // the root. Then merge it when we commit. We currently assume that all\n    // Transitions are entangled.\n    if (includesTransitionLane(root.pendingLanes)) {\n      let queued = root.transitionTypes;\n      if (queued === null) {\n        queued = root.transitionTypes = [];\n      }\n      for (let i = 0; i < transitionTypes.length; i++) {\n        const transitionType = transitionTypes[i];\n        if (queued.indexOf(transitionType) === -1) {\n          queued.push(transitionType);\n        }\n      }\n    }\n  }\n}\n\n// Store all types while we're entangled with an async Transition.\nexport let entangledTransitionTypes                         = null;\n\nexport function entangleAsyncTransitionTypes(\n  transitionTypes                 ,\n)       {\n  if (enableViewTransition) {\n    let queued = entangledTransitionTypes;\n    if (queued === null) {\n      queued = entangledTransitionTypes = [];\n    }\n    for (let i = 0; i < transitionTypes.length; i++) {\n      const transitionType = transitionTypes[i];\n      if (queued.indexOf(transitionType) === -1) {\n        queued.push(transitionType);\n      }\n    }\n  }\n}\n\nexport function clearEntangledAsyncTransitionTypes() {\n  // Called when all Async Actions are done.\n  entangledTransitionTypes = null;\n}\n\nexport function claimQueuedTransitionTypes(\n  root           ,\n)                         {\n  const claimed = root.transitionTypes;\n  root.transitionTypes = null;\n  return claimed;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n\n                                                          \n\n                                                  \n\n                                                        \n\nimport {\n  isTransitionLane,\n  isBlockingLane,\n  isSyncLane,\n  includesTransitionLane,\n  includesBlockingLane,\n  includesSyncLane,\n} from './ReactFiberLane';\n\nimport {resolveEventType, resolveEventTimeStamp} from './ReactFiberConfig';\n\nimport {\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerTimer,\n  enableComponentPerformanceTrack,\n} from 'shared/ReactFeatureFlags';\n\nimport {isAlreadyRendering} from './ReactFiberWorkLoop';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nconst createTask =\n  // eslint-disable-next-line react-internal/no-production-logging\n  __DEV__ && console.createTask\n    ? // eslint-disable-next-line react-internal/no-production-logging\n      console.createTask\n    : (name        ) => null;\n\nexport let renderStartTime         = -0;\nexport let commitStartTime         = -0;\nexport let commitEndTime         = -0;\nexport let commitErrors                                     = null;\nexport let profilerStartTime         = -1.1;\nexport let profilerEffectDuration         = -0;\nexport let componentEffectDuration         = -0;\nexport let componentEffectStartTime         = -1.1;\nexport let componentEffectEndTime         = -1.1;\nexport let componentEffectErrors                                     = null;\n\nexport let blockingClampTime         = -0;\nexport let blockingUpdateTime         = -1.1; // First sync setState scheduled.\nexport let blockingUpdateTask                     = null; // First sync setState's stack trace.\nexport let blockingEventTime         = -1.1; // Event timeStamp of the first setState.\nexport let blockingEventType                = null; // Event type of the first setState.\nexport let blockingEventIsRepeat          = false;\nexport let blockingSpawnedUpdate          = false;\nexport let blockingSuspendedTime         = -1.1;\n// TODO: This should really be one per Transition lane.\nexport let transitionClampTime         = -0;\nexport let transitionStartTime         = -1.1; // First startTransition call before setState.\nexport let transitionUpdateTime         = -1.1; // First transition setState scheduled.\nexport let transitionUpdateTask                     = null; // First transition setState's stack trace.\nexport let transitionEventTime         = -1.1; // Event timeStamp of the first transition.\nexport let transitionEventType                = null; // Event type of the first transition.\nexport let transitionEventIsRepeat          = false;\nexport let transitionSuspendedTime         = -1.1;\n\nexport let yieldReason                  = (0     );\nexport let yieldStartTime         = -1.1; // The time when we yielded to the event loop\n\nexport function startYieldTimer(reason                 ) {\n  if (!enableProfilerTimer || !enableComponentPerformanceTrack) {\n    return;\n  }\n  yieldStartTime = now();\n  yieldReason = reason;\n}\n\nexport function startUpdateTimerByLane(lane      , method        )       {\n  if (!enableProfilerTimer || !enableComponentPerformanceTrack) {\n    return;\n  }\n  if (isSyncLane(lane) || isBlockingLane(lane)) {\n    if (blockingUpdateTime < 0) {\n      blockingUpdateTime = now();\n      blockingUpdateTask = createTask(method);\n      if (isAlreadyRendering()) {\n        blockingSpawnedUpdate = true;\n      }\n      const newEventTime = resolveEventTimeStamp();\n      const newEventType = resolveEventType();\n      if (\n        newEventTime !== blockingEventTime ||\n        newEventType !== blockingEventType\n      ) {\n        blockingEventIsRepeat = false;\n      } else if (newEventType !== null) {\n        // If this is a second update in the same event, we treat it as a spawned update.\n        // This might be a microtask spawned from useEffect, multiple flushSync or\n        // a setState in a microtask spawned after the first setState. Regardless it's bad.\n        blockingSpawnedUpdate = true;\n      }\n      blockingEventTime = newEventTime;\n      blockingEventType = newEventType;\n    }\n  } else if (isTransitionLane(lane)) {\n    if (transitionUpdateTime < 0) {\n      transitionUpdateTime = now();\n      transitionUpdateTask = createTask(method);\n      if (transitionStartTime < 0) {\n        const newEventTime = resolveEventTimeStamp();\n        const newEventType = resolveEventType();\n        if (\n          newEventTime !== transitionEventTime ||\n          newEventType !== transitionEventType\n        ) {\n          transitionEventIsRepeat = false;\n        }\n        transitionEventTime = newEventTime;\n        transitionEventType = newEventType;\n      }\n    }\n  }\n}\n\nexport function startPingTimerByLanes(lanes       )       {\n  if (!enableProfilerTimer || !enableComponentPerformanceTrack) {\n    return;\n  }\n  // Mark the update time and clamp anything before it because we don't want\n  // to show the event time for pings but we also don't want to clear it\n  // because we still need to track if this was a repeat.\n  if (includesSyncLane(lanes) || includesBlockingLane(lanes)) {\n    if (blockingUpdateTime < 0) {\n      blockingClampTime = blockingUpdateTime = now();\n    }\n  } else if (includesTransitionLane(lanes)) {\n    if (transitionUpdateTime < 0) {\n      transitionClampTime = transitionUpdateTime = now();\n    }\n  }\n}\n\nexport function trackSuspendedTime(lanes       , renderEndTime        ) {\n  if (!enableProfilerTimer || !enableComponentPerformanceTrack) {\n    return;\n  }\n  if (includesSyncLane(lanes) || includesBlockingLane(lanes)) {\n    blockingSuspendedTime = renderEndTime;\n  } else if (includesTransitionLane(lanes)) {\n    transitionSuspendedTime = renderEndTime;\n  }\n}\n\nexport function clearBlockingTimers()       {\n  blockingUpdateTime = -1.1;\n  blockingUpdateTask = null;\n  blockingSuspendedTime = -1.1;\n  blockingEventIsRepeat = true;\n  blockingSpawnedUpdate = false;\n}\n\nexport function startAsyncTransitionTimer()       {\n  if (!enableProfilerTimer || !enableComponentPerformanceTrack) {\n    return;\n  }\n  if (transitionStartTime < 0 && transitionUpdateTime < 0) {\n    transitionStartTime = now();\n    const newEventTime = resolveEventTimeStamp();\n    const newEventType = resolveEventType();\n    if (\n      newEventTime !== transitionEventTime ||\n      newEventType !== transitionEventType\n    ) {\n      transitionEventIsRepeat = false;\n    }\n    transitionEventTime = newEventTime;\n    transitionEventType = newEventType;\n  }\n}\n\nexport function hasScheduledTransitionWork()          {\n  // If we have setState on a transition or scheduled useActionState update.\n  return transitionUpdateTime > -1;\n}\n\n// We use this marker to indicate that we have scheduled a render to be performed\n// but it's not an explicit state update.\nconst ACTION_STATE_MARKER = -0.5;\n\nexport function startActionStateUpdate()       {\n  if (!enableProfilerTimer || !enableComponentPerformanceTrack) {\n    return;\n  }\n  if (transitionUpdateTime < 0) {\n    transitionUpdateTime = ACTION_STATE_MARKER;\n    transitionUpdateTask = null;\n  }\n}\n\nexport function clearAsyncTransitionTimer()       {\n  transitionStartTime = -1.1;\n}\n\nexport function clearTransitionTimers()       {\n  transitionStartTime = -1.1;\n  transitionUpdateTime = -1.1;\n  transitionUpdateTask = null;\n  transitionSuspendedTime = -1.1;\n  transitionEventIsRepeat = true;\n}\n\nexport function clampBlockingTimers(finalTime        )       {\n  if (!enableProfilerTimer || !enableComponentPerformanceTrack) {\n    return;\n  }\n  // If we had new updates come in while we were still rendering or committing, we don't want\n  // those update times to create overlapping tracks in the performance timeline so we clamp\n  // them to the end of the commit phase.\n  blockingClampTime = finalTime;\n}\n\nexport function clampTransitionTimers(finalTime        )       {\n  if (!enableProfilerTimer || !enableComponentPerformanceTrack) {\n    return;\n  }\n  // If we had new updates come in while we were still rendering or committing, we don't want\n  // those update times to create overlapping tracks in the performance timeline so we clamp\n  // them to the end of the commit phase.\n  transitionClampTime = finalTime;\n}\n\nexport function pushNestedEffectDurations()         {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return 0;\n  }\n  const prevEffectDuration = profilerEffectDuration;\n  profilerEffectDuration = 0; // Reset counter.\n  return prevEffectDuration;\n}\n\nexport function popNestedEffectDurations(prevEffectDuration        )         {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return 0;\n  }\n  const elapsedTime = profilerEffectDuration;\n  profilerEffectDuration = prevEffectDuration;\n  return elapsedTime;\n}\n\n// Like pop but it also adds the current elapsed time to the parent scope.\nexport function bubbleNestedEffectDurations(\n  prevEffectDuration        ,\n)         {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return 0;\n  }\n  const elapsedTime = profilerEffectDuration;\n  profilerEffectDuration += prevEffectDuration;\n  return elapsedTime;\n}\n\nexport function resetComponentEffectTimers()       {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  componentEffectStartTime = -1.1;\n  componentEffectEndTime = -1.1;\n}\n\nexport function pushComponentEffectStart()         {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return 0;\n  }\n  const prevEffectStart = componentEffectStartTime;\n  componentEffectStartTime = -1.1; // Track the next start.\n  return prevEffectStart;\n}\n\nexport function popComponentEffectStart(prevEffectStart        )       {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  // If the parent component didn't have a start time, we let this current time persist.\n  if (prevEffectStart >= 0) {\n    // Otherwise, we restore the previous parent's start time.\n    componentEffectStartTime = prevEffectStart;\n  }\n}\n\nexport function pushComponentEffectDuration()         {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return 0;\n  }\n  const prevEffectDuration = componentEffectDuration;\n  componentEffectDuration = -0; // Reset component level duration.\n  return prevEffectDuration;\n}\n\nexport function popComponentEffectDuration(prevEffectDuration        )       {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  // If the parent component didn't have a start time, we let this current time persist.\n  if (prevEffectDuration >= 0) {\n    // Otherwise, we restore the previous parent's start time.\n    componentEffectDuration = prevEffectDuration;\n  }\n}\n\nexport function pushComponentEffectErrors()               \n                       \n  {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return null;\n  }\n  const prevErrors = componentEffectErrors;\n  componentEffectErrors = null;\n  return prevErrors;\n}\n\nexport function popComponentEffectErrors(\n  prevErrors                                    ,\n)       {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  componentEffectErrors = prevErrors;\n}\n\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\nlet currentUpdateIsNested          = false;\nlet nestedUpdateScheduled          = false;\n\nexport function isCurrentUpdateNested()          {\n  return currentUpdateIsNested;\n}\n\nexport function markNestedUpdateScheduled()       {\n  if (enableProfilerNestedUpdatePhase) {\n    nestedUpdateScheduled = true;\n  }\n}\n\nexport function resetNestedUpdateFlag()       {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nexport function syncNestedUpdateFlag()       {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nexport function recordRenderTime()       {\n  if (!enableProfilerTimer || !enableComponentPerformanceTrack) {\n    return;\n  }\n  renderStartTime = now();\n}\n\nexport function recordCommitTime()       {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitStartTime = now();\n}\n\nexport function recordCommitEndTime()       {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitEndTime = now();\n}\n\nexport function startProfilerTimer(fiber       )       {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime     )        ) < 0) {\n    fiber.actualStartTime = profilerStartTime;\n  }\n}\n\nexport function stopProfilerTimerIfRunning(fiber       )       {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nexport function stopProfilerTimerIfRunningAndRecordDuration(\n  fiber       ,\n)       {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    fiber.selfBaseDuration = elapsedTime;\n    profilerStartTime = -1;\n  }\n}\n\nexport function stopProfilerTimerIfRunningAndRecordIncompleteDuration(\n  fiber       ,\n)       {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    // We don't update the selfBaseDuration here because we errored.\n    profilerStartTime = -1;\n  }\n}\n\nexport function recordEffectDuration(fiber       )       {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const endTime = now();\n    const elapsedTime = endTime - profilerStartTime;\n\n    profilerStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    profilerEffectDuration += elapsedTime;\n    componentEffectDuration += elapsedTime;\n\n    // Keep track of the last end time of the effects.\n    componentEffectEndTime = endTime;\n  }\n}\n\nexport function recordEffectError(errorInfo                      )       {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  if (componentEffectErrors === null) {\n    componentEffectErrors = [];\n  }\n  componentEffectErrors.push(errorInfo);\n  if (commitErrors === null) {\n    commitErrors = [];\n  }\n  commitErrors.push(errorInfo);\n}\n\nexport function resetCommitErrors()       {\n  commitErrors = null;\n}\n\nexport function startEffectTimer()       {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  profilerStartTime = now();\n  if (componentEffectStartTime < 0) {\n    // Keep track of the first time we start an effect as the component's effect start time.\n    componentEffectStartTime = profilerStartTime;\n  }\n}\n\nexport function transferActualDuration(fiber       )       {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                    \n                                                  \n                                                                     \n                                                               \n\nimport {\n  disableLegacyMode,\n  disableSchedulerTimeoutInWorkLoop,\n  enableProfilerTimer,\n  enableProfilerNestedUpdatePhase,\n  enableComponentPerformanceTrack,\n  enableYieldingBeforePassive,\n  enableGestureTransition,\n  enableDefaultTransitionIndicator,\n} from 'shared/ReactFeatureFlags';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  DefaultLane,\n  getHighestPriorityLane,\n  getNextLanes,\n  includesSyncLane,\n  markStarvedLanesAsExpired,\n  claimNextTransitionLane,\n  getNextLanesToFlushSync,\n  checkIfRootIsPrerendering,\n  isGestureRender,\n} from './ReactFiberLane';\nimport {\n  CommitContext,\n  NoContext,\n  RenderContext,\n  flushPendingEffects,\n  getExecutionContext,\n  getWorkInProgressRoot,\n  getWorkInProgressRootRenderLanes,\n  getRootWithPendingPassiveEffects,\n  getPendingPassiveEffectsLanes,\n  hasPendingCommitEffects,\n  isWorkLoopSuspendedOnData,\n  performWorkOnRoot,\n} from './ReactFiberWorkLoop';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n  cancelCallback as Scheduler_cancelCallback,\n  scheduleCallback as Scheduler_scheduleCallback,\n  now,\n} from './Scheduler';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n  lanesToEventPriority,\n} from './ReactEventPriorities';\nimport {\n  supportsMicrotasks,\n  scheduleMicrotask,\n  shouldAttemptEagerTransition,\n  trackSchedulerEvent,\n  noTimeout,\n} from './ReactFiberConfig';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  resetNestedUpdateFlag,\n  syncNestedUpdateFlag,\n} from './ReactProfilerTimer';\nimport {peekEntangledActionLane} from './ReactFiberAsyncAction';\n\nimport noop from 'shared/noop';\nimport reportGlobalError from 'shared/reportGlobalError';\n\nimport {\n  startIsomorphicDefaultIndicatorIfNeeded,\n  hasOngoingIsomorphicIndicator,\n  retainIsomorphicIndicator,\n  markIsomorphicIndicatorHandled,\n} from './ReactFiberAsyncAction';\n\n// A linked list of all the roots with pending work. In an idiomatic app,\n// there's only a single root, but we do support multi root apps, hence this\n// extra complexity. But this module is optimized for the single root case.\nexport let firstScheduledRoot                   = null;\nlet lastScheduledRoot                   = null;\n\n// Used to prevent redundant mircotasks from being scheduled.\nlet didScheduleMicrotask          = false;\n// `act` \"microtasks\" are scheduled on the `act` queue instead of an actual\n// microtask, so we have to dedupe those separately. This wouldn't be an issue\n// if we required all `act` calls to be awaited, which we might in the future.\nlet didScheduleMicrotask_act          = false;\n\n// Used to quickly bail out of flushSync if there's no sync work to do.\nlet mightHavePendingSyncWork          = false;\n\nlet isFlushingWork          = false;\n\nlet currentEventTransitionLane       = NoLane;\n\nexport function ensureRootIsScheduled(root           )       {\n  // This function is called whenever a root receives an update. It does two\n  // things 1) it ensures the root is in the root schedule, and 2) it ensures\n  // there's a pending microtask to process the root schedule.\n  //\n  // Most of the actual scheduling logic does not happen until\n  // `scheduleTaskForRootDuringMicrotask` runs.\n\n  // Add the root to the schedule\n  if (root === lastScheduledRoot || root.next !== null) {\n    // Fast path. This root is already scheduled.\n  } else {\n    if (lastScheduledRoot === null) {\n      firstScheduledRoot = lastScheduledRoot = root;\n    } else {\n      lastScheduledRoot.next = root;\n      lastScheduledRoot = root;\n    }\n  }\n\n  // Any time a root received an update, we set this to true until the next time\n  // we process the schedule. If it's false, then we can quickly exit flushSync\n  // without consulting the schedule.\n  mightHavePendingSyncWork = true;\n\n  ensureScheduleIsScheduled();\n\n  if (\n    __DEV__ &&\n    !disableLegacyMode &&\n    ReactSharedInternals.isBatchingLegacy &&\n    root.tag === LegacyRoot\n  ) {\n    // Special `act` case: Record whenever a legacy update is scheduled.\n    ReactSharedInternals.didScheduleLegacyUpdate = true;\n  }\n}\n\nexport function ensureScheduleIsScheduled()       {\n  // At the end of the current event, go through each of the roots and ensure\n  // there's a task scheduled for each one at the correct priority.\n  if (__DEV__ && ReactSharedInternals.actQueue !== null) {\n    // We're inside an `act` scope.\n    if (!didScheduleMicrotask_act) {\n      didScheduleMicrotask_act = true;\n      scheduleImmediateRootScheduleTask();\n    }\n  } else {\n    if (!didScheduleMicrotask) {\n      didScheduleMicrotask = true;\n      scheduleImmediateRootScheduleTask();\n    }\n  }\n}\n\nexport function flushSyncWorkOnAllRoots() {\n  // This is allowed to be called synchronously, but the caller should check\n  // the execution context first.\n  flushSyncWorkAcrossRoots_impl(NoLanes, false);\n}\n\nexport function flushSyncWorkOnLegacyRootsOnly() {\n  // This is allowed to be called synchronously, but the caller should check\n  // the execution context first.\n  if (!disableLegacyMode) {\n    flushSyncWorkAcrossRoots_impl(NoLanes, true);\n  }\n}\n\nfunction flushSyncWorkAcrossRoots_impl(\n  syncTransitionLanes              ,\n  onlyLegacy         ,\n) {\n  if (isFlushingWork) {\n    // Prevent reentrancy.\n    // TODO: Is this overly defensive? The callers must check the execution\n    // context first regardless.\n    return;\n  }\n\n  if (!mightHavePendingSyncWork) {\n    // Fast path. There's no sync work to do.\n    return;\n  }\n\n  // There may or may not be synchronous work scheduled. Let's check.\n  let didPerformSomeWork;\n  isFlushingWork = true;\n  do {\n    didPerformSomeWork = false;\n    let root = firstScheduledRoot;\n    while (root !== null) {\n      if (onlyLegacy && (disableLegacyMode || root.tag !== LegacyRoot)) {\n        // Skip non-legacy roots.\n      } else {\n        if (syncTransitionLanes !== NoLanes) {\n          const nextLanes = getNextLanesToFlushSync(root, syncTransitionLanes);\n          if (nextLanes !== NoLanes) {\n            // This root has pending sync work. Flush it now.\n            didPerformSomeWork = true;\n            performSyncWorkOnRoot(root, nextLanes);\n          }\n        } else {\n          const workInProgressRoot = getWorkInProgressRoot();\n          const workInProgressRootRenderLanes =\n            getWorkInProgressRootRenderLanes();\n          const rootHasPendingCommit =\n            root.cancelPendingCommit !== null ||\n            root.timeoutHandle !== noTimeout;\n          const nextLanes = getNextLanes(\n            root,\n            root === workInProgressRoot\n              ? workInProgressRootRenderLanes\n              : NoLanes,\n            rootHasPendingCommit,\n          );\n          if (\n            (includesSyncLane(nextLanes) ||\n              (enableGestureTransition && isGestureRender(nextLanes))) &&\n            !checkIfRootIsPrerendering(root, nextLanes)\n          ) {\n            // This root has pending sync work. Flush it now.\n            didPerformSomeWork = true;\n            performSyncWorkOnRoot(root, nextLanes);\n          }\n        }\n      }\n      root = root.next;\n    }\n  } while (didPerformSomeWork);\n  isFlushingWork = false;\n}\n\nfunction processRootScheduleInImmediateTask() {\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    // Track the currently executing event if there is one so we can ignore this\n    // event when logging events.\n    trackSchedulerEvent();\n  }\n\n  processRootScheduleInMicrotask();\n}\n\nfunction processRootScheduleInMicrotask() {\n  // This function is always called inside a microtask. It should never be\n  // called synchronously.\n  didScheduleMicrotask = false;\n  if (__DEV__) {\n    didScheduleMicrotask_act = false;\n  }\n\n  // We'll recompute this as we iterate through all the roots and schedule them.\n  mightHavePendingSyncWork = false;\n\n  let syncTransitionLanes = NoLanes;\n  if (currentEventTransitionLane !== NoLane) {\n    if (shouldAttemptEagerTransition()) {\n      // A transition was scheduled during an event, but we're going to try to\n      // render it synchronously anyway. We do this during a popstate event to\n      // preserve the scroll position of the previous page.\n      syncTransitionLanes = currentEventTransitionLane;\n    } else if (enableDefaultTransitionIndicator) {\n      // If we have a Transition scheduled by this event it might be paired\n      // with Default lane scheduled loading indicators. To unbatch it from\n      // other events later on, flush it early to determine whether it\n      // rendered an indicator. This ensures that setState in default priority\n      // event doesn't trigger onDefaultTransitionIndicator.\n      syncTransitionLanes = DefaultLane;\n    }\n  }\n\n  const currentTime = now();\n\n  let prev = null;\n  let root = firstScheduledRoot;\n  while (root !== null) {\n    const next = root.next;\n    const nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);\n    if (nextLanes === NoLane) {\n      // This root has no more pending work. Remove it from the schedule. To\n      // guard against subtle reentrancy bugs, this microtask is the only place\n      // we do this \u2014 you can add roots to the schedule whenever, but you can\n      // only remove them here.\n\n      // Null this out so we know it's been removed from the schedule.\n      root.next = null;\n      if (prev === null) {\n        // This is the new head of the list\n        firstScheduledRoot = next;\n      } else {\n        prev.next = next;\n      }\n      if (next === null) {\n        // This is the new tail of the list\n        lastScheduledRoot = prev;\n      }\n    } else {\n      // This root still has work. Keep it in the list.\n      prev = root;\n\n      // This is a fast-path optimization to early exit from\n      // flushSyncWorkOnAllRoots if we can be certain that there is no remaining\n      // synchronous work to perform. Set this to true if there might be sync\n      // work left.\n      if (\n        // Skip the optimization if syncTransitionLanes is set\n        syncTransitionLanes !== NoLanes ||\n        // Common case: we're not treating any extra lanes as synchronous, so we\n        // can just check if the next lanes are sync.\n        includesSyncLane(nextLanes) ||\n        (enableGestureTransition && isGestureRender(nextLanes))\n      ) {\n        mightHavePendingSyncWork = true;\n      }\n    }\n    root = next;\n  }\n\n  // At the end of the microtask, flush any pending synchronous work. This has\n  // to come at the end, because it does actual rendering work that might throw.\n  // If we're in the middle of a View Transition async sequence, we don't want to\n  // interrupt that sequence. Instead, we'll flush any remaining work when it\n  // completes.\n  if (!hasPendingCommitEffects()) {\n    flushSyncWorkAcrossRoots_impl(syncTransitionLanes, false);\n  }\n\n  if (currentEventTransitionLane !== NoLane) {\n    // Reset Event Transition Lane so that we allocate a new one next time.\n    currentEventTransitionLane = NoLane;\n    startDefaultTransitionIndicatorIfNeeded();\n  }\n}\n\nfunction startDefaultTransitionIndicatorIfNeeded() {\n  if (!enableDefaultTransitionIndicator) {\n    return;\n  }\n  // Check if we need to start an isomorphic indicator like if an async action\n  // was started.\n  startIsomorphicDefaultIndicatorIfNeeded();\n  // Check all the roots if there are any new indicators needed.\n  let root = firstScheduledRoot;\n  while (root !== null) {\n    if (root.indicatorLanes !== NoLanes && root.pendingIndicator === null) {\n      // We have new indicator lanes that requires a loading state. Start the\n      // default transition indicator.\n      if (hasOngoingIsomorphicIndicator()) {\n        // We already have an isomorphic indicator going which means it has to\n        // also apply to this root since it implies all roots have the same one.\n        // We retain this indicator so that it keeps going until we commit this\n        // root.\n        root.pendingIndicator = retainIsomorphicIndicator();\n      } else {\n        try {\n          const onDefaultTransitionIndicator =\n            root.onDefaultTransitionIndicator;\n          root.pendingIndicator = onDefaultTransitionIndicator() || noop;\n        } catch (x) {\n          root.pendingIndicator = noop;\n          reportGlobalError(x);\n        }\n      }\n    }\n    root = root.next;\n  }\n}\n\nfunction scheduleTaskForRootDuringMicrotask(\n  root           ,\n  currentTime        ,\n)       {\n  // This function is always called inside a microtask, or at the very end of a\n  // rendering task right before we yield to the main thread. It should never be\n  // called synchronously.\n\n  // This function also never performs React work synchronously; it should\n  // only schedule work to be performed later, in a separate task or microtask.\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const rootWithPendingPassiveEffects = getRootWithPendingPassiveEffects();\n  const pendingPassiveEffectsLanes = getPendingPassiveEffectsLanes();\n  const workInProgressRoot = getWorkInProgressRoot();\n  const workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n  const rootHasPendingCommit =\n    root.cancelPendingCommit !== null || root.timeoutHandle !== noTimeout;\n  const nextLanes =\n    enableYieldingBeforePassive && root === rootWithPendingPassiveEffects\n      ? // This will schedule the callback at the priority of the lane but we used to\n        // always schedule it at NormalPriority. Discrete will flush it sync anyway.\n        // So the only difference is Idle and it doesn't seem necessarily right for that\n        // to get upgraded beyond something important just because we're past commit.\n        pendingPassiveEffectsLanes\n      : getNextLanes(\n          root,\n          root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n          rootHasPendingCommit,\n        );\n\n  const existingCallbackNode = root.callbackNode;\n  if (\n    // Check if there's nothing to work on\n    nextLanes === NoLanes ||\n    // If this root is currently suspended and waiting for data to resolve, don't\n    // schedule a task to render it. We'll either wait for a ping, or wait to\n    // receive an update.\n    //\n    // Suspended render phase\n    (root === workInProgressRoot && isWorkLoopSuspendedOnData()) ||\n    // Suspended commit phase\n    root.cancelPendingCommit !== null\n  ) {\n    // Fast path: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return NoLane;\n  }\n\n  // Schedule a new callback in the host environment.\n  if (\n    includesSyncLane(nextLanes) &&\n    // If we're prerendering, then we should use the concurrent work loop\n    // even if the lanes are synchronous, so that prerendering never blocks\n    // the main thread.\n    !checkIfRootIsPrerendering(root, nextLanes)\n  ) {\n    // Synchronous work is always flushed at the end of the microtask, so we\n    // don't need to schedule an additional task.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n    root.callbackPriority = SyncLane;\n    root.callbackNode = null;\n    return SyncLane;\n  } else {\n    // We use the highest priority lane to represent the priority of the callback.\n    const existingCallbackPriority = root.callbackPriority;\n    const newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n    if (\n      newCallbackPriority === existingCallbackPriority &&\n      // Special case related to `act`. If the currently scheduled task is a\n      // Scheduler task, rather than an `act` task, cancel it and re-schedule\n      // on the `act` queue.\n      !(\n        __DEV__ &&\n        ReactSharedInternals.actQueue !== null &&\n        existingCallbackNode !== fakeActCallbackNode\n      )\n    ) {\n      // The priority hasn't changed. We can reuse the existing task.\n      return newCallbackPriority;\n    } else {\n      // Cancel the existing callback. We'll schedule a new one below.\n      cancelCallback(existingCallbackNode);\n    }\n\n    let schedulerPriorityLevel;\n    switch (lanesToEventPriority(nextLanes)) {\n      // Scheduler does have an \"ImmediatePriority\", but now that we use\n      // microtasks for sync work we no longer use that. Any sync work that\n      // reaches this path is meant to be time sliced.\n      case DiscreteEventPriority:\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingSchedulerPriority;\n        break;\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdleSchedulerPriority;\n        break;\n      default:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n    }\n\n    const newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performWorkOnRootViaSchedulerTask.bind(null, root),\n    );\n\n    root.callbackPriority = newCallbackPriority;\n    root.callbackNode = newCallbackNode;\n    return newCallbackPriority;\n  }\n}\n\n                                                                 \n\nfunction performWorkOnRootViaSchedulerTask(\n  root           ,\n  didTimeout         ,\n)                      {\n  // This is the entry point for concurrent tasks scheduled via Scheduler (and\n  // postTask, in the future).\n\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    resetNestedUpdateFlag();\n  }\n\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    // Track the currently executing event if there is one so we can ignore this\n    // event when logging events.\n    trackSchedulerEvent();\n  }\n\n  if (hasPendingCommitEffects()) {\n    // We are currently in the middle of an async committing (such as a View Transition).\n    // We could force these to flush eagerly but it's better to defer any work until\n    // it finishes. This may not be the same root as we're waiting on.\n    // TODO: This relies on the commit eventually calling ensureRootIsScheduled which\n    // always calls processRootScheduleInMicrotask which in turn always loops through\n    // all the roots to figure out. This is all a bit inefficient and if optimized\n    // it'll need to consider rescheduling a task for any skipped roots.\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return null;\n  }\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPendingEffects(true);\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next lanes to work on, using the fields stored on the root.\n  // TODO: We already called getNextLanes when we scheduled the callback; we\n  // should be able to avoid calling it again by stashing the result on the\n  // root object. However, because we always schedule the callback during\n  // a microtask (scheduleTaskForRootDuringMicrotask), it's possible that\n  // an update was scheduled earlier during this same browser task (and\n  // therefore before the microtasks have run). That's because Scheduler batches\n  // together multiple callbacks into a single browser macrotask, without\n  // yielding to microtasks in between. We should probably change this to align\n  // with the postTask behavior (and literally use postTask when\n  // it's available).\n  const workInProgressRoot = getWorkInProgressRoot();\n  const workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n  const rootHasPendingCommit =\n    root.cancelPendingCommit !== null || root.timeoutHandle !== noTimeout;\n  const lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n    rootHasPendingCommit,\n  );\n  if (lanes === NoLanes) {\n    // No more work on this root.\n    return null;\n  }\n\n  // Enter the work loop.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n  const forceSync = !disableSchedulerTimeoutInWorkLoop && didTimeout;\n  performWorkOnRoot(root, lanes, forceSync);\n\n  // The work loop yielded, but there may or may not be work left at the current\n  // priority. Need to determine whether we need to schedule a continuation.\n  // Usually `scheduleTaskForRootDuringMicrotask` only runs inside a microtask;\n  // however, since most of the logic for determining if we need a continuation\n  // versus a new task is the same, we cheat a bit and call it here. This is\n  // only safe to do because we know we're at the end of the browser task.\n  // So although it's not an actual microtask, it might as well be.\n  scheduleTaskForRootDuringMicrotask(root, now());\n  if (root.callbackNode != null && root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performWorkOnRootViaSchedulerTask.bind(null, root);\n  }\n  return null;\n}\n\nfunction performSyncWorkOnRoot(root           , lanes       ) {\n  // This is the entry point for synchronous tasks that don't go\n  // through Scheduler.\n  const didFlushPassiveEffects = flushPendingEffects();\n  if (didFlushPassiveEffects) {\n    // If passive effects were flushed, exit to the outer work loop in the root\n    // scheduler, so we can recompute the priority.\n    return null;\n  }\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    syncNestedUpdateFlag();\n  }\n  const forceSync = true;\n  performWorkOnRoot(root, lanes, forceSync);\n}\n\nconst fakeActCallbackNode = {};\n\nfunction scheduleCallback(\n  priorityLevel               ,\n  callback              ,\n) {\n  if (__DEV__ && ReactSharedInternals.actQueue !== null) {\n    // Special case: We're inside an `act` scope (a testing utility).\n    // Instead of scheduling work in the host environment, add it to a\n    // fake internal queue that's managed by the `act` implementation.\n    ReactSharedInternals.actQueue.push(callback);\n    return fakeActCallbackNode;\n  } else {\n    return Scheduler_scheduleCallback(priorityLevel, callback);\n  }\n}\n\nfunction cancelCallback(callbackNode       ) {\n  if (__DEV__ && callbackNode === fakeActCallbackNode) {\n    // Special `act` case: check if this is the fake callback node used by\n    // the `act` implementation.\n  } else if (callbackNode !== null) {\n    Scheduler_cancelCallback(callbackNode);\n  }\n}\n\nfunction scheduleImmediateRootScheduleTask() {\n  if (__DEV__ && ReactSharedInternals.actQueue !== null) {\n    // Special case: Inside an `act` scope, we push microtasks to the fake `act`\n    // callback queue. This is because we currently support calling `act`\n    // without awaiting the result. The plan is to deprecate that, and require\n    // that you always await the result so that the microtasks have a chance to\n    // run. But it hasn't happened yet.\n    ReactSharedInternals.actQueue.push(() => {\n      processRootScheduleInMicrotask();\n      return null;\n    });\n  }\n\n  // TODO: Can we land supportsMicrotasks? Which environments don't support it?\n  // Alternatively, can we move this check to the host config?\n  if (supportsMicrotasks) {\n    scheduleMicrotask(() => {\n      // In Safari, appending an iframe forces microtasks to run.\n      // https://github.com/facebook/react/issues/22459\n      // We don't support running callbacks in the middle of render\n      // or commit so we need to check against that.\n      const executionContext = getExecutionContext();\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        // Note that this would still prematurely flush the callbacks\n        // if this happens outside render or commit phase (e.g. in an event).\n\n        // Intentionally using a macrotask instead of a microtask here. This is\n        // wrong semantically but it prevents an infinite loop. The bug is\n        // Safari's, not ours, so we just do our best to not crash even though\n        // the behavior isn't completely correct.\n        Scheduler_scheduleCallback(\n          ImmediateSchedulerPriority,\n          processRootScheduleInImmediateTask,\n        );\n        return;\n      }\n      processRootScheduleInMicrotask();\n    });\n  } else {\n    // If microtasks are not supported, use Scheduler.\n    Scheduler_scheduleCallback(\n      ImmediateSchedulerPriority,\n      processRootScheduleInImmediateTask,\n    );\n  }\n}\n\nexport function requestTransitionLane(\n  // This argument isn't used, it's only here to encourage the caller to\n  // check that it's inside a transition before calling this function.\n  // TODO: Make this non-nullable. Requires a tweak to useOptimistic.\n  transition                   ,\n)       {\n  // The algorithm for assigning an update to a lane should be stable for all\n  // updates at the same priority within the same event. To do this, the\n  // inputs to the algorithm must be the same.\n  //\n  // The trick we use is to cache the first of each of these inputs within an\n  // event. Then reset the cached values once we can be sure the event is\n  // over. Our heuristic for that is whenever we enter a concurrent work loop.\n  if (currentEventTransitionLane === NoLane) {\n    // All transitions within the same event are assigned the same lane.\n    const actionScopeLane = peekEntangledActionLane();\n    currentEventTransitionLane =\n      actionScopeLane !== NoLane\n        ? // We're inside an async action scope. Reuse the same lane.\n          actionScopeLane\n        : // We may or may not be inside an async action scope. If we are, this\n          // is the first update in that scope. Either way, we need to get a\n          // fresh transition lane.\n          claimNextTransitionLane();\n  }\n  return currentEventTransitionLane;\n}\n\nexport function didCurrentEventScheduleTransition()          {\n  return currentEventTransitionLane !== NoLane;\n}\n\nexport function markIndicatorHandled(root           )       {\n  if (enableDefaultTransitionIndicator) {\n    // The current transition event rendered a synchronous loading state.\n    // Clear it from the indicator lanes. We don't need to show a separate\n    // loading state for this lane.\n    root.indicatorLanes &= ~currentEventTransitionLane;\n    markIsomorphicIndicatorHandled();\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n             \n           \n                    \n                   \n                           \n                                           \n                                                               \n\nimport {\n  requestTransitionLane,\n  ensureScheduleIsScheduled,\n} from './ReactFiberRootScheduler';\nimport {NoLane} from './ReactFiberLane';\nimport {\n  hasScheduledTransitionWork,\n  clearAsyncTransitionTimer,\n} from './ReactProfilerTimer';\nimport {\n  enableComponentPerformanceTrack,\n  enableProfilerTimer,\n  enableDefaultTransitionIndicator,\n} from 'shared/ReactFeatureFlags';\nimport {clearEntangledAsyncTransitionTypes} from './ReactFiberTransitionTypes';\n\nimport noop from 'shared/noop';\nimport reportGlobalError from 'shared/reportGlobalError';\n\n// If there are multiple, concurrent async actions, they are entangled. All\n// transition updates that occur while the async action is still in progress\n// are treated as part of the action.\n//\n// The ideal behavior would be to treat each async function as an independent\n// action. However, without a mechanism like AsyncContext, we can't tell which\n// action an update corresponds to. So instead, we entangle them all into one.\n\n// The listeners to notify once the entangled scope completes.\nlet currentEntangledListeners                            = null;\n// The number of pending async actions in the entangled scope.\nlet currentEntangledPendingCount         = 0;\n// The transition lane shared by all updates in the entangled scope.\nlet currentEntangledLane       = NoLane;\n// A thenable that resolves when the entangled scope completes. It does not\n// resolve to a particular value because it's only used for suspending the UI\n// until the async action scope has completed.\nlet currentEntangledActionThenable                        = null;\n\n// Track the default indicator for every root. undefined means we haven't\n// had any roots registered yet. null means there's more than one callback.\n// If there's more than one callback we bailout to not supporting isomorphic\n// default indicators.\nlet isomorphicDefaultTransitionIndicator \n        \n        \n                                = undefined;\n// The clean up function for the currently running indicator.\nlet pendingIsomorphicIndicator                      = null;\n// The number of roots that have pending Transitions that depend on the\n// started isomorphic indicator.\nlet pendingEntangledRoots         = 0;\nlet needsIsomorphicIndicator          = false;\n\nexport function entangleAsyncAction   (\n  transition            ,\n  thenable             ,\n)              {\n  // `thenable` is the return value of the async action scope function. Create\n  // a combined thenable that resolves once every entangled scope function\n  // has finished.\n  if (currentEntangledListeners === null) {\n    // There's no outer async action scope. Create a new one.\n    const entangledListeners = (currentEntangledListeners = []);\n    currentEntangledPendingCount = 0;\n    currentEntangledLane = requestTransitionLane(transition);\n    const entangledThenable                 = {\n      status: 'pending',\n      value: undefined,\n      then(resolve               ) {\n        entangledListeners.push(resolve);\n      },\n    };\n    currentEntangledActionThenable = entangledThenable;\n    if (enableDefaultTransitionIndicator) {\n      needsIsomorphicIndicator = true;\n      // We'll check if we need a default indicator in a microtask. Ensure\n      // we have this scheduled even if no root is scheduled.\n      ensureScheduleIsScheduled();\n    }\n  }\n  currentEntangledPendingCount++;\n  thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);\n  return thenable;\n}\n\nfunction pingEngtangledActionScope() {\n  if (--currentEntangledPendingCount === 0) {\n    if (enableProfilerTimer && enableComponentPerformanceTrack) {\n      if (!hasScheduledTransitionWork()) {\n        // If we have received no updates since we started the entangled Actions\n        // that means it didn't lead to a Transition being rendered. We need to\n        // clear the timer so that if we start another entangled sequence we use\n        // the next start timer instead of appearing like we were blocked the\n        // whole time. We currently don't log a track for Actions that don't\n        // render a Transition.\n        clearAsyncTransitionTimer();\n      }\n    }\n    clearEntangledAsyncTransitionTypes();\n    if (pendingEntangledRoots === 0) {\n      stopIsomorphicDefaultIndicator();\n    }\n    if (currentEntangledListeners !== null) {\n      // All the actions have finished. Close the entangled async action scope\n      // and notify all the listeners.\n      if (currentEntangledActionThenable !== null) {\n        const fulfilledThenable                          =\n          (currentEntangledActionThenable     );\n        fulfilledThenable.status = 'fulfilled';\n      }\n      const listeners = currentEntangledListeners;\n      currentEntangledListeners = null;\n      currentEntangledLane = NoLane;\n      currentEntangledActionThenable = null;\n      needsIsomorphicIndicator = false;\n      for (let i = 0; i < listeners.length; i++) {\n        const listener = listeners[i];\n        listener();\n      }\n    }\n  }\n}\n\nexport function chainThenableValue   (\n  thenable             ,\n  result   ,\n)              {\n  // Equivalent to: Promise.resolve(thenable).then(() => result), except we can\n  // cheat a bit since we know that that this thenable is only ever consumed\n  // by React.\n  //\n  // We don't technically require promise support on the client yet, hence this\n  // extra code.\n  const listeners = [];\n  const thenableWithOverride              = {\n    status: 'pending',\n    value: null,\n    reason: null,\n    then(resolve            ) {\n      listeners.push(resolve);\n    },\n  };\n  thenable.then(\n    (value   ) => {\n      const fulfilledThenable                       =\n        (thenableWithOverride     );\n      fulfilledThenable.status = 'fulfilled';\n      fulfilledThenable.value = result;\n      for (let i = 0; i < listeners.length; i++) {\n        const listener = listeners[i];\n        listener(result);\n      }\n    },\n    error => {\n      const rejectedThenable                      = (thenableWithOverride     );\n      rejectedThenable.status = 'rejected';\n      rejectedThenable.reason = error;\n      for (let i = 0; i < listeners.length; i++) {\n        const listener = listeners[i];\n        // This is a perf hack where we call the `onFulfill` ping function\n        // instead of `onReject`, because we know that React is the only\n        // consumer of these promises, and it passes the same listener to both.\n        // We also know that it will read the error directly off the\n        // `.reason` field.\n        listener((undefined     ));\n      }\n    },\n  );\n  return thenableWithOverride;\n}\n\nexport function peekEntangledActionLane()       {\n  return currentEntangledLane;\n}\n\nexport function peekEntangledActionThenable()                        {\n  return currentEntangledActionThenable;\n}\n\nexport function registerDefaultIndicator(\n  onDefaultTransitionIndicator                           ,\n)       {\n  if (!enableDefaultTransitionIndicator) {\n    return;\n  }\n  if (isomorphicDefaultTransitionIndicator === undefined) {\n    isomorphicDefaultTransitionIndicator = onDefaultTransitionIndicator;\n  } else if (\n    isomorphicDefaultTransitionIndicator !== onDefaultTransitionIndicator\n  ) {\n    isomorphicDefaultTransitionIndicator = null;\n    // Stop any on-going indicator since it's now ambiguous.\n    stopIsomorphicDefaultIndicator();\n  }\n}\n\nexport function startIsomorphicDefaultIndicatorIfNeeded() {\n  if (!enableDefaultTransitionIndicator) {\n    return;\n  }\n  if (!needsIsomorphicIndicator) {\n    return;\n  }\n  if (\n    isomorphicDefaultTransitionIndicator != null &&\n    pendingIsomorphicIndicator === null\n  ) {\n    try {\n      pendingIsomorphicIndicator =\n        isomorphicDefaultTransitionIndicator() || noop;\n    } catch (x) {\n      pendingIsomorphicIndicator = noop;\n      reportGlobalError(x);\n    }\n  }\n}\n\nfunction stopIsomorphicDefaultIndicator() {\n  if (!enableDefaultTransitionIndicator) {\n    return;\n  }\n  if (pendingIsomorphicIndicator !== null) {\n    const cleanup = pendingIsomorphicIndicator;\n    pendingIsomorphicIndicator = null;\n    cleanup();\n  }\n}\n\nfunction releaseIsomorphicIndicator() {\n  if (--pendingEntangledRoots === 0) {\n    stopIsomorphicDefaultIndicator();\n  }\n}\n\nexport function hasOngoingIsomorphicIndicator()          {\n  return pendingIsomorphicIndicator !== null;\n}\n\nexport function retainIsomorphicIndicator()             {\n  pendingEntangledRoots++;\n  return releaseIsomorphicIndicator;\n}\n\nexport function markIsomorphicIndicatorHandled()       {\n  needsIsomorphicIndicator = false;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                    \n                                                      \n                                                                               \n                                                                   \n\nimport {\n  GestureLane,\n  includesBlockingLane,\n  includesTransitionLane,\n} from './ReactFiberLane';\nimport {ensureRootIsScheduled} from './ReactFiberRootScheduler';\nimport {getCurrentGestureOffset, stopViewTransition} from './ReactFiberConfig';\n\n// This type keeps track of any scheduled or active gestures.\n                                \n                            \n                                                                            \n                                                                                            \n                                                                                                  \n                                                                                                  \n                                                                                                   \n                                                                                              \n                                                                                          \n  \n\nexport function scheduleGesture(\n  root           ,\n  provider                 ,\n)                   {\n  let prev = root.pendingGestures;\n  while (prev !== null) {\n    if (prev.provider === provider) {\n      // Existing instance found.\n      return prev;\n    }\n    const next = prev.next;\n    if (next === null) {\n      break;\n    }\n    prev = next;\n  }\n  const gesture                   = {\n    provider: provider,\n    count: 0,\n    rangeStart: 0, // Uninitialized\n    rangeEnd: 100, // Uninitialized\n    types: null,\n    running: null,\n    prev: prev,\n    next: null,\n  };\n  if (prev === null) {\n    root.pendingGestures = gesture;\n  } else {\n    prev.next = gesture;\n  }\n  ensureRootIsScheduled(root);\n  return gesture;\n}\n\nexport function startScheduledGesture(\n  root           ,\n  gestureTimeline                 ,\n  gestureOptions                 ,\n  transitionTypes                        ,\n)                          {\n  const rangeStart =\n    gestureOptions && gestureOptions.rangeStart != null\n      ? gestureOptions.rangeStart\n      : getCurrentGestureOffset(gestureTimeline);\n  const rangeEnd =\n    gestureOptions && gestureOptions.rangeEnd != null\n      ? gestureOptions.rangeEnd\n      : rangeStart < 50\n        ? 100\n        : 0;\n  let prev = root.pendingGestures;\n  while (prev !== null) {\n    if (prev.provider === gestureTimeline) {\n      // Existing instance found.\n      prev.count++;\n      // Update the options.\n      prev.rangeStart = rangeStart;\n      prev.rangeEnd = rangeEnd;\n      if (transitionTypes !== null) {\n        let scheduledTypes = prev.types;\n        if (scheduledTypes === null) {\n          scheduledTypes = prev.types = [];\n        }\n        for (let i = 0; i < transitionTypes.length; i++) {\n          const transitionType = transitionTypes[i];\n          if (scheduledTypes.indexOf(transitionType) === -1) {\n            scheduledTypes.push(transitionType);\n          }\n        }\n      }\n      return prev;\n    }\n    const next = prev.next;\n    if (next === null) {\n      break;\n    }\n    prev = next;\n  }\n  // No scheduled gestures. It must mean nothing for this renderer updated but\n  // some other renderer might have updated.\n  return null;\n}\n\nexport function cancelScheduledGesture(\n  root           ,\n  gesture                  ,\n)       {\n  gesture.count--;\n  if (gesture.count === 0) {\n    // Delete the scheduled gesture from the pending queue.\n    deleteScheduledGesture(root, gesture);\n    // TODO: If we're currently rendering this gesture, we need to restart the render\n    // on a different gesture or cancel the render..\n    // TODO: We might want to pause the View Transition at this point since you should\n    // no longer be able to update the position of anything but it might be better to\n    // just commit the gesture state.\n    const runningTransition = gesture.running;\n    if (runningTransition !== null) {\n      const pendingLanesExcludingGestureLane = root.pendingLanes & ~GestureLane;\n      if (\n        includesBlockingLane(pendingLanesExcludingGestureLane) ||\n        includesTransitionLane(pendingLanesExcludingGestureLane)\n      ) {\n        // If we have pending work we schedule the gesture to be stopped at the next commit.\n        // This ensures that we don't snap back to the previous state until we have\n        // had a chance to commit any resulting updates.\n        const existing = root.stoppingGestures;\n        if (existing !== null) {\n          gesture.next = existing;\n          existing.prev = gesture;\n        }\n        root.stoppingGestures = gesture;\n      } else {\n        gesture.running = null;\n        // If there's no work scheduled so we can stop the View Transition right away.\n        stopViewTransition(runningTransition);\n      }\n    }\n  }\n}\n\nexport function deleteScheduledGesture(\n  root           ,\n  gesture                  ,\n)       {\n  if (gesture.prev === null) {\n    if (root.pendingGestures === gesture) {\n      root.pendingGestures = gesture.next;\n      if (root.pendingGestures === null) {\n        // Gestures don't clear their lanes while the gesture is still active but it\n        // might not be scheduled to do any more renders and so we shouldn't schedule\n        // any more gesture lane work until a new gesture is scheduled.\n        root.pendingLanes &= ~GestureLane;\n      }\n    }\n    if (root.stoppingGestures === gesture) {\n      // This should not really happen the way we use it now but just in case we start.\n      root.stoppingGestures = gesture.next;\n    }\n  } else {\n    gesture.prev.next = gesture.next;\n    if (gesture.next !== null) {\n      gesture.next.prev = gesture.prev;\n    }\n    gesture.prev = null;\n    gesture.next = null;\n  }\n}\n\nexport function stopCompletedGestures(root           ) {\n  let gesture = root.stoppingGestures;\n  root.stoppingGestures = null;\n  while (gesture !== null) {\n    if (gesture.running !== null) {\n      stopViewTransition(gesture.running);\n      gesture.running = null;\n    }\n    const nextGesture = gesture.next;\n    gesture.next = null;\n    gesture.prev = null;\n    gesture = nextGesture;\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n                                                           \n             \n           \n                  \n                 \n                           \nimport {NoLane,           } from './ReactFiberLane';\n                                                   \n                                                                        \n                                                               \n                                                                   \n\nimport {\n  enableTransitionTracing,\n  enableViewTransition,\n  enableGestureTransition,\n} from 'shared/ReactFeatureFlags';\nimport {isPrimaryRenderer} from './ReactFiberConfig';\nimport {createCursor, push, pop} from './ReactFiberStack';\nimport {\n  getWorkInProgressRoot,\n  getWorkInProgressTransitions,\n} from './ReactFiberWorkLoop';\nimport {\n  createCache,\n  retainCache,\n  CacheContext,\n} from './ReactFiberCacheComponent';\nimport {\n  queueTransitionTypes,\n  entangleAsyncTransitionTypes,\n  entangledTransitionTypes,\n} from './ReactFiberTransitionTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  entangleAsyncAction,\n  peekEntangledActionLane,\n} from './ReactFiberAsyncAction';\nimport {startAsyncTransitionTimer} from './ReactProfilerTimer';\nimport {firstScheduledRoot} from './ReactFiberRootScheduler';\nimport {\n  startScheduledGesture,\n  cancelScheduledGesture,\n} from './ReactFiberGestureScheduler';\n\nexport const NoTransition = null;\n\n// Attach this reconciler instance's onStartTransitionFinish implementation to\n// the shared internals object. This is used by the isomorphic implementation of\n// startTransition to compose all the startTransitions together.\n//\n//   function startTransition(fn) {\n//     return startTransitionDOM(() => {\n//       return startTransitionART(() => {\n//         return startTransitionThreeFiber(() => {\n//           // and so on...\n//           return fn();\n//         });\n//       });\n//     });\n//   }\n//\n// Currently we only compose together the code that runs at the end of each\n// startTransition, because for now that's sufficient \u2014 the part that sets\n// isTransition=true on the stack uses a separate shared internal field. But\n// really we should delete the shared field and track isTransition per\n// reconciler. Leaving this for a future PR.\nconst prevOnStartTransitionFinish = ReactSharedInternals.S;\nReactSharedInternals.S = function onStartTransitionFinishForReconciler(\n  transition            ,\n  returnValue       ,\n) {\n  if (\n    typeof returnValue === 'object' &&\n    returnValue !== null &&\n    typeof returnValue.then === 'function'\n  ) {\n    // If we're going to wait on some async work before scheduling an update.\n    // We mark the time so we can later log how long we were blocked on the Action.\n    // Ideally, we'd include the sync part of the action too but since that starts\n    // in isomorphic code it currently leads to tricky layering. We'd have to pass\n    // in performance.now() to this callback but we sometimes use a polyfill.\n    startAsyncTransitionTimer();\n\n    // This is an async action\n    const thenable                  = (returnValue     );\n    entangleAsyncAction(transition, thenable);\n  }\n  if (enableViewTransition) {\n    if (entangledTransitionTypes !== null) {\n      // If we scheduled work on any new roots, we need to add any entangled async\n      // transition types to those roots too.\n      let root = firstScheduledRoot;\n      while (root !== null) {\n        queueTransitionTypes(root, entangledTransitionTypes);\n        root = root.next;\n      }\n    }\n    const transitionTypes = transition.types;\n    if (transitionTypes !== null) {\n      // Within this Transition we should've now scheduled any roots we have updates\n      // to work on. If there are no updates on a root, then the Transition type won't\n      // be applied to that root.\n      let root = firstScheduledRoot;\n      while (root !== null) {\n        queueTransitionTypes(root, transitionTypes);\n        root = root.next;\n      }\n      if (peekEntangledActionLane() !== NoLane) {\n        // If we have entangled, async actions going on, the update associated with\n        // these types might come later. We need to save them for later.\n        entangleAsyncTransitionTypes(transitionTypes);\n      }\n    }\n  }\n  if (prevOnStartTransitionFinish !== null) {\n    prevOnStartTransitionFinish(transition, returnValue);\n  }\n};\n\nfunction chainGestureCancellation(\n  root           ,\n  scheduledGesture                  ,\n  prevCancel                     ,\n)             {\n  return function cancelGesture()       {\n    if (scheduledGesture !== null) {\n      cancelScheduledGesture(root, scheduledGesture);\n    }\n    if (prevCancel !== null) {\n      prevCancel();\n    }\n  };\n}\n\nif (enableGestureTransition) {\n  const prevOnStartGestureTransitionFinish = ReactSharedInternals.G;\n  ReactSharedInternals.G = function onStartGestureTransitionFinishForReconciler(\n    transition            ,\n    provider                 ,\n    options                 ,\n  )             {\n    let cancel = null;\n    if (prevOnStartGestureTransitionFinish !== null) {\n      cancel = prevOnStartGestureTransitionFinish(\n        transition,\n        provider,\n        options,\n      );\n    }\n    // For every root that has work scheduled, check if there's a ScheduledGesture\n    // matching this provider and if so, increase its ref count so its retained by\n    // this cancellation callback. We could add the roots to a temporary array as\n    // we schedule them inside the callback to keep track of them. There's a slight\n    // nuance here which is that if there's more than one root scheduled with the\n    // same provider, but it doesn't update in this callback, then we still update\n    // its options and retain it until this cancellation releases. The idea being\n    // that it's conceptually started globally.\n    let root = firstScheduledRoot;\n    while (root !== null) {\n      const scheduledGesture = startScheduledGesture(\n        root,\n        provider,\n        options,\n        transition.types,\n      );\n      if (scheduledGesture !== null) {\n        cancel = chainGestureCancellation(root, scheduledGesture, cancel);\n      }\n      root = root.next;\n    }\n    if (cancel !== null) {\n      return cancel;\n    }\n    return function cancelGesture()       {\n      // Nothing was scheduled but it could've been scheduled by another renderer.\n    };\n  };\n}\n\nexport function requestCurrentTransition()                    {\n  return ReactSharedInternals.T;\n}\n\n// When retrying a Suspense/Offscreen boundary, we restore the cache that was\n// used during the previous render by placing it here, on the stack.\nconst resumedCache                            = createCursor(null);\n\n// During the render/synchronous commit phase, we don't actually process the\n// transitions. Therefore, we want to lazily combine transitions. Instead of\n// comparing the arrays of transitions when we combine them and storing them\n// and filtering out the duplicates, we will instead store the unprocessed transitions\n// in an array and actually filter them in the passive phase.\nconst transitionStack                                        =\n  createCursor(null);\n\nfunction peekCacheFromPool()               {\n  // Check if the cache pool already has a cache we can use.\n\n  // If we're rendering inside a Suspense boundary that is currently hidden,\n  // we should use the same cache that we used during the previous render, if\n  // one exists.\n  const cacheResumedFromPreviousRender = resumedCache.current;\n  if (cacheResumedFromPreviousRender !== null) {\n    return cacheResumedFromPreviousRender;\n  }\n\n  // Otherwise, check the root's cache pool.\n  const root = (getWorkInProgressRoot()     );\n  const cacheFromRootCachePool = root.pooledCache;\n\n  return cacheFromRootCachePool;\n}\n\nexport function requestCacheFromPool(renderLanes       )        {\n  // Similar to previous function, except if there's not already a cache in the\n  // pool, we allocate a new one.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool !== null) {\n    return cacheFromPool;\n  }\n\n  // Create a fresh cache and add it to the root cache pool. A cache can have\n  // multiple owners:\n  // - A cache pool that lives on the FiberRoot. This is where all fresh caches\n  //   are originally created (TODO: except during refreshes, until we implement\n  //   this correctly). The root takes ownership immediately when the cache is\n  //   created. Conceptually, root.pooledCache is an Option<Arc<Cache>> (owned),\n  //   and the return value of this function is a &Arc<Cache> (borrowed).\n  // - One of several fiber types: host root, cache boundary, suspense\n  //   component. These retain and release in the commit phase.\n\n  const root = (getWorkInProgressRoot()     );\n  const freshCache = createCache();\n  root.pooledCache = freshCache;\n  retainCache(freshCache);\n  if (freshCache !== null) {\n    root.pooledCacheLanes |= renderLanes;\n  }\n  return freshCache;\n}\n\nexport function pushRootTransition(\n  workInProgress       ,\n  root           ,\n  renderLanes       ,\n) {\n  if (enableTransitionTracing) {\n    const rootTransitions = getWorkInProgressTransitions();\n    push(transitionStack, rootTransitions, workInProgress);\n  }\n}\n\nexport function popRootTransition(\n  workInProgress       ,\n  root           ,\n  renderLanes       ,\n) {\n  if (enableTransitionTracing) {\n    pop(transitionStack, workInProgress);\n  }\n}\n\nexport function pushTransition(\n  offscreenWorkInProgress       ,\n  prevCachePool                         ,\n  newTransitions                          ,\n)       {\n  if (prevCachePool === null) {\n    push(resumedCache, resumedCache.current, offscreenWorkInProgress);\n  } else {\n    push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);\n  }\n\n  if (enableTransitionTracing) {\n    if (transitionStack.current === null) {\n      push(transitionStack, newTransitions, offscreenWorkInProgress);\n    } else if (newTransitions === null) {\n      push(transitionStack, transitionStack.current, offscreenWorkInProgress);\n    } else {\n      push(\n        transitionStack,\n        transitionStack.current.concat(newTransitions),\n        offscreenWorkInProgress,\n      );\n    }\n  }\n}\n\nexport function popTransition(workInProgress       , current              ) {\n  if (current !== null) {\n    if (enableTransitionTracing) {\n      pop(transitionStack, workInProgress);\n    }\n\n    pop(resumedCache, workInProgress);\n  }\n}\n\nexport function getPendingTransitions()                           {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  return transitionStack.current;\n}\n\nexport function getSuspendedCache()                          {\n  // This function is called when a Suspense boundary suspends. It returns the\n  // cache that would have been used to render fresh data during this render,\n  // if there was any, so that we can resume rendering with the same cache when\n  // we receive more data.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also save the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n\nexport function getOffscreenDeferredCache()                          {\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also store the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport is from './objectIs';\nimport hasOwnProperty from './hasOwnProperty';\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA       , objB       )          {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    const currentKey = keysA[i];\n    if (\n      !hasOwnProperty.call(objB, currentKey) ||\n      // $FlowFixMe[incompatible-use] lost refinement of `objB`\n      !is(objA[currentKey], objB[currentKey])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n\nimport {runWithFiberInDEV} from './ReactCurrentFiber';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\n\n                               \n                                                        \n\nconst ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings: (fiber       , instance     )       => {},\n  flushPendingUnsafeLifecycleWarnings: ()       => {},\n  recordLegacyContextWarning: (fiber       , instance     )       => {},\n  flushLegacyContextWarning: ()       => {},\n  discardPendingWarnings: ()       => {},\n};\n\nif (__DEV__) {\n  const findStrictRoot = (fiber       )               => {\n    let maybeStrictRoot = null;\n\n    let node               = fiber;\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  const setToSortedString = (set             ) => {\n    const array = [];\n    set.forEach(value => {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  let pendingComponentWillMountWarnings               = [];\n  let pendingUNSAFE_ComponentWillMountWarnings               = [];\n  let pendingComponentWillReceivePropsWarnings               = [];\n  let pendingUNSAFE_ComponentWillReceivePropsWarnings               = [];\n  let pendingComponentWillUpdateWarnings               = [];\n  let pendingUNSAFE_ComponentWillUpdateWarnings               = [];\n\n  // Tracks components we have already warned about.\n  const didWarnAboutUnsafeLifecycles = new Set       ();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = (\n    fiber       ,\n    instance     ,\n  ) => {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (\n      typeof instance.componentWillMount === 'function' &&\n      // Don't warn about react-lifecycles-compat polyfilled components.\n      instance.componentWillMount.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillMount === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillReceiveProps === 'function' &&\n      instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillUpdate === 'function' &&\n      instance.componentWillUpdate.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillUpdate === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = () => {\n    // We do an initial pass to gather component names\n    const componentWillMountUniqueNames = new Set        ();\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(fiber => {\n        componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    const UNSAFE_componentWillMountUniqueNames = new Set        ();\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(fiber => {\n        UNSAFE_componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    const componentWillReceivePropsUniqueNames = new Set        ();\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(fiber => {\n        componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    const UNSAFE_componentWillReceivePropsUniqueNames = new Set        ();\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(fiber => {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    const componentWillUpdateUniqueNames = new Set        ();\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(fiber => {\n        componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    const UNSAFE_componentWillUpdateUniqueNames = new Set        ();\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(fiber => {\n        UNSAFE_componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    }\n\n    // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillMountUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +\n          'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillReceivePropsUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, \" +\n          'refactor your code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillUpdateUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillMountUniqueNames);\n\n      console.warn(\n        'componentWillMount has been renamed, and is not recommended for use. ' +\n          'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        componentWillReceivePropsUniqueNames,\n      );\n\n      console.warn(\n        'componentWillReceiveProps has been renamed, and is not recommended for use. ' +\n          'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, refactor your \" +\n          'code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\\n' +\n          '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillUpdateUniqueNames);\n\n      console.warn(\n        'componentWillUpdate has been renamed, and is not recommended for use. ' +\n          'See https://react.dev/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n  };\n\n  let pendingLegacyContextWarning                            = new Map();\n\n  // Tracks components we have already warned about.\n  const didWarnAboutLegacyContext = new Set       ();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = (\n    fiber       ,\n    instance     ,\n  ) => {\n    const strictRoot = findStrictRoot(fiber);\n    if (strictRoot === null) {\n      console.error(\n        'Expected to find a StrictMode component in a strict mode tree. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n      return;\n    }\n\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    let warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (\n      fiber.type.contextTypes != null ||\n      fiber.type.childContextTypes != null ||\n      (instance !== null && typeof instance.getChildContext === 'function')\n    ) {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = () => {\n    ((pendingLegacyContextWarning     )                           ).forEach(\n      (fiberArray            , strictRoot) => {\n        if (fiberArray.length === 0) {\n          return;\n        }\n        const firstFiber = fiberArray[0];\n\n        const uniqueNames = new Set        ();\n        fiberArray.forEach(fiber => {\n          uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n          didWarnAboutLegacyContext.add(fiber.type);\n        });\n\n        const sortedNames = setToSortedString(uniqueNames);\n\n        runWithFiberInDEV(firstFiber, () => {\n          console.error(\n            'Legacy context API has been detected within a strict-mode tree.' +\n              '\\n\\nThe old API will be supported in all 16.x releases, but applications ' +\n              'using it should migrate to the new version.' +\n              '\\n\\nPlease update the following components: %s' +\n              '\\n\\nLearn more about this warning here: https://react.dev/link/legacy-context',\n            sortedNames,\n          );\n        });\n      },\n    );\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = () => {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\nexport default ReactStrictModeWarnings;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n             \n           \n                  \n                    \n                   \n                           \n\nimport {getWorkInProgressRoot} from './ReactFiberWorkLoop';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nimport noop from 'shared/noop';\n\n                                \n                                       \n                                  \n  \n\n                                                     \n\n                                                                        \n\nfunction getThenablesFromState(state               )                       {\n  if (__DEV__) {\n    const devState                   = (state     );\n    return devState.thenables;\n  } else {\n    const prodState = (state     );\n    return prodState;\n  }\n}\n\n// An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n// detect this is caught by userspace, we'll log a warning in development.\nexport const SuspenseException        = new Error(\n  \"Suspense Exception: This is not a real error! It's an implementation \" +\n    'detail of `use` to interrupt the current render. You must either ' +\n    'rethrow it immediately, or move the `use` call outside of the ' +\n    '`try/catch` block. Capturing without rethrowing will lead to ' +\n    'unexpected behavior.\\n\\n' +\n    'To handle async errors, wrap your component in an error boundary, or ' +\n    \"call the promise's `.catch` method and pass the result to `use`.\",\n);\n\nexport const SuspenseyCommitException        = new Error(\n  'Suspense Exception: This is not a real error, and should not leak into ' +\n    \"userspace. If you're seeing this, it's likely a bug in React.\",\n);\n\nexport const SuspenseActionException        = new Error(\n  \"Suspense Exception: This is not a real error! It's an implementation \" +\n    'detail of `useActionState` to interrupt the current render. You must either ' +\n    'rethrow it immediately, or move the `useActionState` call outside of the ' +\n    '`try/catch` block. Capturing without rethrowing will lead to ' +\n    'unexpected behavior.\\n\\n' +\n    'To handle async errors, wrap your component in an error boundary.',\n);\n// This is a noop thenable that we use to trigger a fallback in throwException.\n// TODO: It would be better to refactor throwException into multiple functions\n// so we can trigger a fallback directly without having to check the type. But\n// for now this will do.\nexport const noopSuspenseyCommitThenable = {\n  then() {\n    if (__DEV__) {\n      console.error(\n        'Internal React error: A listener was unexpectedly attached to a ' +\n          '\"noop\" thenable. This is a bug in React. Please file an issue.',\n      );\n    }\n  },\n};\n\nexport function createThenableState()                {\n  // The ThenableState is created the first time a component suspends. If it\n  // suspends again, we'll reuse the same state.\n  if (__DEV__) {\n    return {\n      didWarnAboutUncachedPromise: false,\n      thenables: [],\n    };\n  } else {\n    return [];\n  }\n}\n\nexport function isThenableResolved(thenable                 )          {\n  const status = thenable.status;\n  return status === 'fulfilled' || status === 'rejected';\n}\n\nexport function trackUsedThenable   (\n  thenableState               ,\n  thenable             ,\n  index        ,\n)    {\n  if (__DEV__ && ReactSharedInternals.actQueue !== null) {\n    ReactSharedInternals.didUsePromise = true;\n  }\n  const trackedThenables = getThenablesFromState(thenableState);\n  const previous = trackedThenables[index];\n  if (previous === undefined) {\n    trackedThenables.push(thenable);\n  } else {\n    if (previous !== thenable) {\n      // Reuse the previous thenable, and drop the new one. We can assume\n      // they represent the same value, because components are idempotent.\n\n      if (__DEV__) {\n        const thenableStateDev                   = (thenableState     );\n        if (!thenableStateDev.didWarnAboutUncachedPromise) {\n          // We should only warn the first time an uncached thenable is\n          // discovered per component, because if there are multiple, the\n          // subsequent ones are likely derived from the first.\n          //\n          // We track this on the thenableState instead of deduping using the\n          // component name like we usually do, because in the case of a\n          // promise-as-React-node, the owner component is likely different from\n          // the parent that's currently being reconciled. We'd have to track\n          // the owner using state, which we're trying to move away from. Though\n          // since this is dev-only, maybe that'd be OK.\n          //\n          // However, another benefit of doing it this way is we might\n          // eventually have a thenableState per memo/Forget boundary instead\n          // of per component, so this would allow us to have more\n          // granular warnings.\n          thenableStateDev.didWarnAboutUncachedPromise = true;\n\n          // TODO: This warning should link to a corresponding docs page.\n          console.error(\n            'A component was suspended by an uncached promise. Creating ' +\n              'promises inside a Client Component or hook is not yet ' +\n              'supported, except via a Suspense-compatible library or framework.',\n          );\n        }\n      }\n\n      // Avoid an unhandled rejection errors for the Promises that we'll\n      // intentionally ignore.\n      thenable.then(noop, noop);\n      thenable = previous;\n    }\n  }\n\n  // We use an expando to track the status and result of a thenable so that we\n  // can synchronously unwrap the value. Think of this as an extension of the\n  // Promise API, or a custom interface that is a superset of Thenable.\n  //\n  // If the thenable doesn't have a status, set it to \"pending\" and attach\n  // a listener that will update its status and result when it resolves.\n  switch (thenable.status) {\n    case 'fulfilled': {\n      const fulfilledValue    = thenable.value;\n      return fulfilledValue;\n    }\n    case 'rejected': {\n      const rejectedError = thenable.reason;\n      checkIfUseWrappedInAsyncCatch(rejectedError);\n      throw rejectedError;\n    }\n    default: {\n      if (typeof thenable.status === 'string') {\n        // Only instrument the thenable if the status if not defined. If\n        // it's defined, but an unknown value, assume it's been instrumented by\n        // some custom userspace implementation. We treat it as \"pending\".\n        // Attach a dummy listener, to ensure that any lazy initialization can\n        // happen. Flight lazily parses JSON when the value is actually awaited.\n        thenable.then(noop, noop);\n      } else {\n        // This is an uncached thenable that we haven't seen before.\n\n        // Detect infinite ping loops caused by uncached promises.\n        const root = getWorkInProgressRoot();\n        if (root !== null && root.shellSuspendCounter > 100) {\n          // This root has suspended repeatedly in the shell without making any\n          // progress (i.e. committing something). This is highly suggestive of\n          // an infinite ping loop, often caused by an accidental Async Client\n          // Component.\n          //\n          // During a transition, we can suspend the work loop until the promise\n          // to resolve, but this is a sync render, so that's not an option. We\n          // also can't show a fallback, because none was provided. So our last\n          // resort is to throw an error.\n          //\n          // TODO: Remove this error in a future release. Other ways of handling\n          // this case include forcing a concurrent render, or putting the whole\n          // root into offscreen mode.\n          throw new Error(\n            'An unknown Component is an async Client Component. ' +\n              'Only Server Components can be async at the moment. ' +\n              'This error is often caused by accidentally ' +\n              \"adding `'use client'` to a module that was originally written \" +\n              'for the server.',\n          );\n        }\n\n        const pendingThenable                     = (thenable     );\n        pendingThenable.status = 'pending';\n        pendingThenable.then(\n          fulfilledValue => {\n            if (thenable.status === 'pending') {\n              const fulfilledThenable                       = (thenable     );\n              fulfilledThenable.status = 'fulfilled';\n              fulfilledThenable.value = fulfilledValue;\n            }\n          },\n          (error       ) => {\n            if (thenable.status === 'pending') {\n              const rejectedThenable                      = (thenable     );\n              rejectedThenable.status = 'rejected';\n              rejectedThenable.reason = error;\n            }\n          },\n        );\n      }\n\n      // Check one more time in case the thenable resolved synchronously.\n      switch ((thenable             ).status) {\n        case 'fulfilled': {\n          const fulfilledThenable                       = (thenable     );\n          return fulfilledThenable.value;\n        }\n        case 'rejected': {\n          const rejectedThenable                      = (thenable     );\n          const rejectedError = rejectedThenable.reason;\n          checkIfUseWrappedInAsyncCatch(rejectedError);\n          throw rejectedError;\n        }\n      }\n\n      // Suspend.\n      //\n      // Throwing here is an implementation detail that allows us to unwind the\n      // call stack. But we shouldn't allow it to leak into userspace. Throw an\n      // opaque placeholder value instead of the actual thenable. If it doesn't\n      // get captured by the work loop, log a warning, because that means\n      // something in userspace must have caught it.\n      suspendedThenable = thenable;\n      if (__DEV__) {\n        needsToResetSuspendedThenableDEV = true;\n      }\n      throw SuspenseException;\n    }\n  }\n}\n\nexport function suspendCommit()       {\n  // This extra indirection only exists so it can handle passing\n  // noopSuspenseyCommitThenable through to throwException.\n  // TODO: Factor the thenable check out of throwException\n  suspendedThenable = noopSuspenseyCommitThenable;\n  throw SuspenseyCommitException;\n}\n\n// This is used to track the actual thenable that suspended so it can be\n// passed to the rest of the Suspense implementation \u2014 which, for historical\n// reasons, expects to receive a thenable.\nlet suspendedThenable                       = null;\nlet needsToResetSuspendedThenableDEV = false;\nexport function getSuspendedThenable()                  {\n  // This is called right after `use` suspends by throwing an exception. `use`\n  // throws an opaque value instead of the thenable itself so that it can't be\n  // caught in userspace. Then the work loop accesses the actual thenable using\n  // this function.\n  if (suspendedThenable === null) {\n    throw new Error(\n      'Expected a suspended thenable. This is a bug in React. Please file ' +\n        'an issue.',\n    );\n  }\n  const thenable = suspendedThenable;\n  suspendedThenable = null;\n  if (__DEV__) {\n    needsToResetSuspendedThenableDEV = false;\n  }\n  return thenable;\n}\n\nexport function checkIfUseWrappedInTryCatch()          {\n  if (__DEV__) {\n    // This was set right before SuspenseException was thrown, and it should\n    // have been cleared when the exception was handled. If it wasn't,\n    // it must have been caught by userspace.\n    if (needsToResetSuspendedThenableDEV) {\n      needsToResetSuspendedThenableDEV = false;\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function checkIfUseWrappedInAsyncCatch(rejectedReason     ) {\n  // This check runs in prod, too, because it prevents a more confusing\n  // downstream error, where SuspenseException is caught by a promise and\n  // thrown asynchronously.\n  // TODO: Another way to prevent SuspenseException from leaking into an async\n  // execution context is to check the dispatcher every time `use` is called,\n  // or some equivalent. That might be preferable for other reasons, too, since\n  // it matches how we prevent similar mistakes for other hooks.\n  if (\n    rejectedReason === SuspenseException ||\n    rejectedReason === SuspenseActionException\n  ) {\n    throw new Error(\n      'Hooks are not supported inside an async component. This ' +\n        \"error is often caused by accidentally adding `'use client'` \" +\n        'to a module that was originally written for the server.',\n    );\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n                                                       \n                                              \n                                                        \n\nimport {isRendering, setIsRendering} from './ReactCurrentFiber';\nimport {captureCommitPhaseError} from './ReactFiberWorkLoop';\n\n// These indirections exists so we can exclude its stack frame in DEV (and anything below it).\n// TODO: Consider marking the whole bundle instead of these boundaries.\n\nconst callComponent = {\n  'react-stack-bottom-frame': function                (\n    Component                           ,\n    props       ,\n    secondArg     ,\n  )    {\n    const wasRendering = isRendering;\n    setIsRendering(true);\n    try {\n      const result = Component(props, secondArg);\n      return result;\n    } finally {\n      setIsRendering(wasRendering);\n    }\n  },\n};\n\nexport const callComponentInDEV                  \n                                       \n               \n                 \n       = __DEV__\n  ? // We use this technique to trick minifiers to preserve the function name.\n    (callComponent['react-stack-bottom-frame'].bind(callComponent)     )\n  : (null     );\n\n                            \n              \n                            \n                     \n                      \n                      \n                    \n          \n                                                                             \n                               \n \n\nconst callRender = {\n  'react-stack-bottom-frame': function    (instance                  )    {\n    const wasRendering = isRendering;\n    setIsRendering(true);\n    try {\n      const result = instance.render();\n      return result;\n    } finally {\n      setIsRendering(wasRendering);\n    }\n  },\n};\n\nexport const callRenderInDEV                                            =\n  __DEV__\n    ? // We use this technique to trick minifiers to preserve the function name.\n      (callRender['react-stack-bottom-frame'].bind(callRender)     )\n    : (null     );\n\nconst callComponentDidMount = {\n  'react-stack-bottom-frame': function (\n    finishedWork       ,\n    instance                    ,\n  )       {\n    try {\n      instance.componentDidMount();\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  },\n};\n\nexport const callComponentDidMountInDEV   \n                      \n                               \n          = __DEV__\n  ? // We use this technique to trick minifiers to preserve the function name.\n    (callComponentDidMount['react-stack-bottom-frame'].bind(\n      callComponentDidMount,\n    )     )\n  : (null     );\n\nconst callComponentDidUpdate = {\n  'react-stack-bottom-frame': function (\n    finishedWork       ,\n    instance                    ,\n    prevProps        ,\n    prevState        ,\n    snapshot        ,\n  )       {\n    try {\n      instance.componentDidUpdate(prevProps, prevState, snapshot);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  },\n};\n\nexport const callComponentDidUpdateInDEV   \n                      \n                               \n                    \n                    \n                  \n          = __DEV__\n  ? // We use this technique to trick minifiers to preserve the function name.\n    (callComponentDidUpdate['react-stack-bottom-frame'].bind(\n      callComponentDidUpdate,\n    )     )\n  : (null     );\n\nconst callComponentDidCatch = {\n  'react-stack-bottom-frame': function (\n    instance                    ,\n    errorInfo                      ,\n  )       {\n    const error = errorInfo.value;\n    const stack = errorInfo.stack;\n    instance.componentDidCatch(error, {\n      componentStack: stack !== null ? stack : '',\n    });\n  },\n};\n\nexport const callComponentDidCatchInDEV   \n                               \n                                  \n          = __DEV__\n  ? // We use this technique to trick minifiers to preserve the function name.\n    (callComponentDidCatch['react-stack-bottom-frame'].bind(\n      callComponentDidCatch,\n    )     )\n  : (null     );\n\nconst callComponentWillUnmount = {\n  'react-stack-bottom-frame': function (\n    current       ,\n    nearestMountedAncestor              ,\n    instance                    ,\n  )       {\n    try {\n      instance.componentWillUnmount();\n    } catch (error) {\n      captureCommitPhaseError(current, nearestMountedAncestor, error);\n    }\n  },\n};\n\nexport const callComponentWillUnmountInDEV   \n                 \n                                       \n                               \n          = __DEV__\n  ? // We use this technique to trick minifiers to preserve the function name.\n    (callComponentWillUnmount['react-stack-bottom-frame'].bind(\n      callComponentWillUnmount,\n    )     )\n  : (null     );\n\nconst callCreate = {\n  'react-stack-bottom-frame': function (\n    effect        ,\n  )                                     {\n    const create = effect.create;\n    const inst = effect.inst;\n    const destroy = create();\n    inst.destroy = destroy;\n    return destroy;\n  },\n};\n\nexport const callCreateInDEV                                          = __DEV__\n  ? // We use this technique to trick minifiers to preserve the function name.\n    (callCreate['react-stack-bottom-frame'].bind(callCreate)     )\n  : (null     );\n\nconst callDestroy = {\n  'react-stack-bottom-frame': function (\n    current       ,\n    nearestMountedAncestor              ,\n    destroy            ,\n  )       {\n    try {\n      destroy();\n    } catch (error) {\n      captureCommitPhaseError(current, nearestMountedAncestor, error);\n    }\n  },\n};\n\nexport const callDestroyInDEV   \n                 \n                                       \n                                            \n          = __DEV__\n  ? // We use this technique to trick minifiers to preserve the function name.\n    (callDestroy['react-stack-bottom-frame'].bind(callDestroy)     )\n  : (null     );\n\nconst callLazyInit = {\n  'react-stack-bottom-frame': function (lazy                         )      {\n    const payload = lazy._payload;\n    const init = lazy._init;\n    return init(payload);\n  },\n};\n\nexport const callLazyInitInDEV                                         = __DEV__\n  ? // We use this technique to trick minifiers to preserve the function name.\n    (callLazyInit['react-stack-bottom-frame'].bind(callLazyInit)     )\n  : (null     );\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                          \n             \n              \n           \n               \n                 \n                           \n                                                \n                                            \n                                                        \n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  Placement,\n  ChildDeletion,\n  Forked,\n  PlacementDEV,\n} from './ReactFiberFlags';\nimport {NoMode, ConcurrentMode} from './ReactTypeOfMode';\nimport {\n  getIteratorFn,\n  ASYNC_ITERATOR,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_LEGACY_ELEMENT_TYPE,\n} from 'shared/ReactSymbols';\nimport {\n  HostRoot,\n  HostText,\n  HostPortal,\n  Fragment,\n  FunctionComponent,\n} from './ReactWorkTags';\nimport isArray from 'shared/isArray';\nimport {\n  enableAsyncIterableChildren,\n  disableLegacyMode,\n  enableFragmentRefs,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n  createFiberFromThrow,\n} from './ReactFiber';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading';\nimport {getIsHydrating} from './ReactFiberHydrationContext';\nimport {pushTreeFork} from './ReactFiberTreeContext';\nimport {\n  SuspenseException,\n  SuspenseActionException,\n  createThenableState,\n  trackUsedThenable,\n} from './ReactFiberThenable';\nimport {readContextDuringReconciliation} from './ReactFiberNewContext';\nimport {callLazyInitInDEV} from './ReactFiberCallUserSpace';\n\nimport {runWithFiberInDEV} from './ReactCurrentFiber';\n\n// This tracks the thenables that are unwrapped during reconcilation.\nlet thenableState                       = null;\nlet thenableIndexCounter         = 0;\n\n// Server Components Meta Data\nlet currentDebugInfo                        = null;\n\nfunction pushDebugInfo(\n  debugInfo                       ,\n)                        {\n  if (!__DEV__) {\n    return null;\n  }\n  const previousDebugInfo = currentDebugInfo;\n  if (debugInfo == null) {\n    // Leave inplace\n  } else if (previousDebugInfo === null) {\n    currentDebugInfo = debugInfo;\n  } else {\n    // If we have two debugInfo, we need to create a new one. This makes the array no longer\n    // live so we'll miss any future updates if we received more so ideally we should always\n    // do this after both have fully resolved/unsuspended.\n    currentDebugInfo = previousDebugInfo.concat(debugInfo);\n  }\n  return previousDebugInfo;\n}\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet ownerHasSymbolTypeWarning;\nlet warnForMissingKey = (\n  returnFiber       ,\n  workInProgress       ,\n  child       ,\n) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = ({}                     );\n  ownerHasFunctionTypeWarning = ({}                     );\n  ownerHasSymbolTypeWarning = ({}                     );\n\n  warnForMissingKey = (\n    returnFiber       ,\n    workInProgress       ,\n    child       ,\n  ) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (\n      !child._store ||\n      ((child._store.validated || child.key != null) &&\n        child._store.validated !== 2)\n    ) {\n      return;\n    }\n\n    if (typeof child._store !== 'object') {\n      throw new Error(\n        'React Component in warnForMissingKey should have a _store. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    // $FlowFixMe[cannot-write] unable to narrow type from mixed to writable object\n    child._store.validated = 1;\n\n    const componentName = getComponentNameFromFiber(returnFiber);\n\n    const componentKey = componentName || 'null';\n    if (ownerHasKeyUseWarning[componentKey]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentKey] = true;\n\n    const childOwner = child._owner;\n    const parentOwner = returnFiber._debugOwner;\n\n    let currentComponentErrorInfo = '';\n    if (parentOwner && typeof parentOwner.tag === 'number') {\n      const name = getComponentNameFromFiber((parentOwner     ));\n      if (name) {\n        currentComponentErrorInfo =\n          '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n    if (!currentComponentErrorInfo) {\n      if (componentName) {\n        currentComponentErrorInfo = `\\n\\nCheck the top-level render call using <${componentName}>.`;\n      }\n    }\n\n    // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n    let childOwnerAppendix = '';\n    if (childOwner != null && parentOwner !== childOwner) {\n      let ownerName = null;\n      if (typeof childOwner.tag === 'number') {\n        ownerName = getComponentNameFromFiber((childOwner     ));\n      } else if (typeof childOwner.name === 'string') {\n        ownerName = childOwner.name;\n      }\n      if (ownerName) {\n        // Give the component that originally created this child.\n        childOwnerAppendix = ` It was passed a child from ${ownerName}.`;\n      }\n    }\n\n    runWithFiberInDEV(workInProgress, () => {\n      console.error(\n        'Each child in a list should have a unique \"key\" prop.' +\n          '%s%s See https://react.dev/link/warning-keys for more information.',\n        currentComponentErrorInfo,\n        childOwnerAppendix,\n      );\n    });\n  };\n}\n\n// Given a fragment, validate that it can only be provided with fragment props\n// We do this here instead of BeginWork because the Fragment fiber doesn't have\n// the whole props object, only the children and is shared with arrays.\nfunction validateFragmentProps(\n  element              ,\n  fiber              ,\n  returnFiber       ,\n) {\n  if (__DEV__) {\n    const keys = Object.keys(element.props);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (\n        key !== 'children' &&\n        key !== 'key' &&\n        (enableFragmentRefs ? key !== 'ref' : true)\n      ) {\n        if (fiber === null) {\n          // For unkeyed root fragments without refs (enableFragmentRefs),\n          // there's no Fiber. We create a fake one just for error stack handling.\n          fiber = createFiberFromElement(element, returnFiber.mode, 0);\n          if (__DEV__) {\n            fiber._debugInfo = currentDebugInfo;\n          }\n          fiber.return = returnFiber;\n        }\n        runWithFiberInDEV(\n          fiber,\n          erroredKey => {\n            if (enableFragmentRefs) {\n              console.error(\n                'Invalid prop `%s` supplied to `React.Fragment`. ' +\n                  'React.Fragment can only have `key`, `ref`, and `children` props.',\n                erroredKey,\n              );\n            } else {\n              console.error(\n                'Invalid prop `%s` supplied to `React.Fragment`. ' +\n                  'React.Fragment can only have `key` and `children` props.',\n                erroredKey,\n              );\n            }\n          },\n          key,\n        );\n        break;\n      }\n    }\n  }\n}\n\nfunction unwrapThenable   (thenable             )    {\n  const index = thenableIndexCounter;\n  thenableIndexCounter += 1;\n  if (thenableState === null) {\n    thenableState = createThenableState();\n  }\n  return trackUsedThenable(thenableState, thenable, index);\n}\n\nfunction coerceRef(workInProgress       , element              )       {\n  // TODO: This is a temporary, intermediate step. Now that enableRefAsProp is on,\n  // we should resolve the `ref` prop during the begin phase of the component\n  // it's attached to (HostComponent, ClassComponent, etc).\n  const refProp = element.props.ref;\n  // TODO: With enableRefAsProp now rolled out, we shouldn't use the `ref` field. We\n  // should always read the ref from the prop.\n  workInProgress.ref = refProp !== undefined ? refProp : null;\n}\n\nfunction throwOnInvalidObjectType(returnFiber       , newChild        ) {\n  if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE) {\n    throw new Error(\n      'A React Element from an older version of React was rendered. ' +\n        'This is not supported. It can happen if:\\n' +\n        '- Multiple copies of the \"react\" package is used.\\n' +\n        '- A library pre-bundled an old copy of \"react\" or \"react/jsx-runtime\".\\n' +\n        '- A compiler tries to \"inline\" JSX instead of using the runtime.',\n    );\n  }\n\n  // $FlowFixMe[method-unbinding]\n  const childString = Object.prototype.toString.call(newChild);\n\n  throw new Error(\n    `Objects are not valid as a React child (found: ${\n      childString === '[object Object]'\n        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n        : childString\n    }). ` +\n      'If you meant to render a collection of children, use an array ' +\n      'instead.',\n  );\n}\n\nfunction warnOnFunctionType(returnFiber       , invalidChild          ) {\n  if (__DEV__) {\n    const parentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[parentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[parentName] = true;\n\n    const name = invalidChild.displayName || invalidChild.name || 'Component';\n\n    if (returnFiber.tag === HostRoot) {\n      console.error(\n        'Functions are not valid as a React child. This may happen if ' +\n          'you return %s instead of <%s /> from render. ' +\n          'Or maybe you meant to call this function rather than return it.\\n' +\n          '  root.render(%s)',\n        name,\n        name,\n        name,\n      );\n    } else {\n      console.error(\n        'Functions are not valid as a React child. This may happen if ' +\n          'you return %s instead of <%s /> from render. ' +\n          'Or maybe you meant to call this function rather than return it.\\n' +\n          '  <%s>{%s}</%s>',\n        name,\n        name,\n        parentName,\n        name,\n        parentName,\n      );\n    }\n  }\n}\n\nfunction warnOnSymbolType(returnFiber       , invalidChild        ) {\n  if (__DEV__) {\n    const parentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasSymbolTypeWarning[parentName]) {\n      return;\n    }\n    ownerHasSymbolTypeWarning[parentName] = true;\n\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    const name = String(invalidChild);\n\n    if (returnFiber.tag === HostRoot) {\n      console.error(\n        'Symbols are not valid as a React child.\\n' + '  root.render(%s)',\n        name,\n      );\n    } else {\n      console.error(\n        'Symbols are not valid as a React child.\\n' + '  <%s>%s</%s>',\n        parentName,\n        name,\n        parentName,\n      );\n    }\n  }\n}\n\nfunction resolveLazy(lazyType     ) {\n  if (__DEV__) {\n    return callLazyInitInDEV(lazyType);\n  }\n  const payload = lazyType._payload;\n  const init = lazyType._init;\n  return init(payload);\n}\n\n                        \n                     \n                                  \n                \n               \n                  \n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction createChildReconciler(\n  shouldTrackSideEffects         ,\n)                  {\n  function deleteChild(returnFiber       , childToDelete       )       {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(\n    returnFiber       ,\n    currentFirstChild              ,\n  )       {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    currentFirstChild       ,\n  )                              {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren                              = new Map();\n\n    let existingChild               = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber       , pendingProps       )        {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber       ,\n    lastPlacedIndex        ,\n    newIndex        ,\n  )         {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement | PlacementDEV;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement | PlacementDEV;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber       )        {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement | PlacementDEV;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber       ,\n    current              ,\n    textContent        ,\n    lanes       ,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      if (__DEV__) {\n        // We treat the parent as the owner for stack purposes.\n        created._debugOwner = returnFiber;\n        created._debugTask = returnFiber._debugTask;\n        created._debugInfo = currentDebugInfo;\n      }\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      if (__DEV__) {\n        existing._debugInfo = currentDebugInfo;\n      }\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber       ,\n    current              ,\n    element              ,\n    lanes       ,\n  )        {\n    const elementType = element.type;\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      const updated = updateFragment(\n        returnFiber,\n        current,\n        element.props.children,\n        lanes,\n        element.key,\n      );\n      if (enableFragmentRefs) {\n        coerceRef(updated, element);\n      }\n      validateFragmentProps(element, updated, returnFiber);\n      return updated;\n    }\n    if (current !== null) {\n      if (\n        current.elementType === elementType ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__\n          ? isCompatibleFamilyForHotReloading(current, element)\n          : false) ||\n        // Lazy types should reconcile their resolved type.\n        // We need to do this after the Hot Reloading check above,\n        // because hot reloading has different semantics than prod because\n        // it doesn't resuspend. So we can't let the call below suspend.\n        (typeof elementType === 'object' &&\n          elementType !== null &&\n          elementType.$$typeof === REACT_LAZY_TYPE &&\n          resolveLazy(elementType) === current.type)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        coerceRef(existing, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugOwner = element._owner;\n          existing._debugInfo = currentDebugInfo;\n        }\n        return existing;\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    coerceRef(created, element);\n    created.return = returnFiber;\n    if (__DEV__) {\n      created._debugInfo = currentDebugInfo;\n    }\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber       ,\n    current              ,\n    portal             ,\n    lanes       ,\n  )        {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      if (__DEV__) {\n        created._debugInfo = currentDebugInfo;\n      }\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      if (__DEV__) {\n        existing._debugInfo = currentDebugInfo;\n      }\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber       ,\n    current              ,\n    fragment                      ,\n    lanes       ,\n    key               ,\n  )        {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      if (__DEV__) {\n        // We treat the parent as the owner for stack purposes.\n        created._debugOwner = returnFiber;\n        created._debugTask = returnFiber._debugTask;\n        created._debugInfo = currentDebugInfo;\n      }\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      if (__DEV__) {\n        existing._debugInfo = currentDebugInfo;\n      }\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber       ,\n    newChild     ,\n    lanes       ,\n  )               {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number' ||\n      typeof newChild === 'bigint'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      if (__DEV__) {\n        // We treat the parent as the owner for stack purposes.\n        created._debugOwner = returnFiber;\n        created._debugTask = returnFiber._debugTask;\n        created._debugInfo = currentDebugInfo;\n      }\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          coerceRef(created, newChild);\n          created.return = returnFiber;\n          if (__DEV__) {\n            const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n            created._debugInfo = currentDebugInfo;\n            currentDebugInfo = prevDebugInfo;\n          }\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          if (__DEV__) {\n            created._debugInfo = currentDebugInfo;\n          }\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n          let resolvedChild;\n          if (__DEV__) {\n            resolvedChild = callLazyInitInDEV(newChild);\n          } else {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            resolvedChild = init(payload);\n          }\n          const created = createChild(returnFiber, resolvedChild, lanes);\n          currentDebugInfo = prevDebugInfo;\n          return created;\n        }\n      }\n\n      if (\n        isArray(newChild) ||\n        getIteratorFn(newChild) ||\n        (enableAsyncIterableChildren &&\n          typeof newChild[ASYNC_ITERATOR] === 'function')\n      ) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        if (__DEV__) {\n          // We treat the parent as the owner for stack purposes.\n          created._debugOwner = returnFiber;\n          created._debugTask = returnFiber._debugTask;\n          const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n          created._debugInfo = currentDebugInfo;\n          currentDebugInfo = prevDebugInfo;\n        }\n        return created;\n      }\n\n      // Usable node types\n      //\n      // Unwrap the inner value and recursively call this function again.\n      if (typeof newChild.then === 'function') {\n        const thenable                = (newChild     );\n        const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n        const created = createChild(\n          returnFiber,\n          unwrapThenable(thenable),\n          lanes,\n        );\n        currentDebugInfo = prevDebugInfo;\n        return created;\n      }\n\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n        const context                      = (newChild     );\n        return createChild(\n          returnFiber,\n          readContextDuringReconciliation(returnFiber, context, lanes),\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber, newChild);\n      }\n      if (typeof newChild === 'symbol') {\n        warnOnSymbolType(returnFiber, newChild);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber       ,\n    oldFiber              ,\n    newChild     ,\n    lanes       ,\n  )               {\n    // Update the fiber if the keys match, otherwise return null.\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number' ||\n      typeof newChild === 'bigint'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(\n        returnFiber,\n        oldFiber,\n        // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n        '' + newChild,\n        lanes,\n      );\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n            const updated = updateElement(\n              returnFiber,\n              oldFiber,\n              newChild,\n              lanes,\n            );\n            currentDebugInfo = prevDebugInfo;\n            return updated;\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n          let resolvedChild;\n          if (__DEV__) {\n            resolvedChild = callLazyInitInDEV(newChild);\n          } else {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            resolvedChild = init(payload);\n          }\n          const updated = updateSlot(\n            returnFiber,\n            oldFiber,\n            resolvedChild,\n            lanes,\n          );\n          currentDebugInfo = prevDebugInfo;\n          return updated;\n        }\n      }\n\n      if (\n        isArray(newChild) ||\n        getIteratorFn(newChild) ||\n        (enableAsyncIterableChildren &&\n          typeof newChild[ASYNC_ITERATOR] === 'function')\n      ) {\n        if (key !== null) {\n          return null;\n        }\n\n        const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n        const updated = updateFragment(\n          returnFiber,\n          oldFiber,\n          newChild,\n          lanes,\n          null,\n        );\n        currentDebugInfo = prevDebugInfo;\n        return updated;\n      }\n\n      // Usable node types\n      //\n      // Unwrap the inner value and recursively call this function again.\n      if (typeof newChild.then === 'function') {\n        const thenable                = (newChild     );\n        const prevDebugInfo = pushDebugInfo((thenable     )._debugInfo);\n        const updated = updateSlot(\n          returnFiber,\n          oldFiber,\n          unwrapThenable(thenable),\n          lanes,\n        );\n        currentDebugInfo = prevDebugInfo;\n        return updated;\n      }\n\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n        const context                      = (newChild     );\n        return updateSlot(\n          returnFiber,\n          oldFiber,\n          readContextDuringReconciliation(returnFiber, context, lanes),\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber, newChild);\n      }\n      if (typeof newChild === 'symbol') {\n        warnOnSymbolType(returnFiber, newChild);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren                             ,\n    returnFiber       ,\n    newIdx        ,\n    newChild     ,\n    lanes       ,\n  )               {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number' ||\n      typeof newChild === 'bigint'\n    ) {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(\n        returnFiber,\n        matchedFiber,\n        // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n        '' + newChild,\n        lanes,\n      );\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n          const updated = updateElement(\n            returnFiber,\n            matchedFiber,\n            newChild,\n            lanes,\n          );\n          currentDebugInfo = prevDebugInfo;\n          return updated;\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE: {\n          const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n          let resolvedChild;\n          if (__DEV__) {\n            resolvedChild = callLazyInitInDEV(newChild);\n          } else {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            resolvedChild = init(payload);\n          }\n          const updated = updateFromMap(\n            existingChildren,\n            returnFiber,\n            newIdx,\n            resolvedChild,\n            lanes,\n          );\n          currentDebugInfo = prevDebugInfo;\n          return updated;\n        }\n      }\n\n      if (\n        isArray(newChild) ||\n        getIteratorFn(newChild) ||\n        (enableAsyncIterableChildren &&\n          typeof newChild[ASYNC_ITERATOR] === 'function')\n      ) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n        const updated = updateFragment(\n          returnFiber,\n          matchedFiber,\n          newChild,\n          lanes,\n          null,\n        );\n        currentDebugInfo = prevDebugInfo;\n        return updated;\n      }\n\n      // Usable node types\n      //\n      // Unwrap the inner value and recursively call this function again.\n      if (typeof newChild.then === 'function') {\n        const thenable                = (newChild     );\n        const prevDebugInfo = pushDebugInfo((thenable     )._debugInfo);\n        const updated = updateFromMap(\n          existingChildren,\n          returnFiber,\n          newIdx,\n          unwrapThenable(thenable),\n          lanes,\n        );\n        currentDebugInfo = prevDebugInfo;\n        return updated;\n      }\n\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n        const context                      = (newChild     );\n        return updateFromMap(\n          existingChildren,\n          returnFiber,\n          newIdx,\n          readContextDuringReconciliation(returnFiber, context, lanes),\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber, newChild);\n      }\n      if (typeof newChild === 'symbol') {\n        warnOnSymbolType(returnFiber, newChild);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    returnFiber       ,\n    workInProgress       ,\n    child       ,\n    knownKeys                    ,\n  )                     {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(returnFiber, workInProgress, child);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          runWithFiberInDEV(workInProgress, () => {\n            console.error(\n              'Encountered two children with the same key, `%s`. ' +\n                'Keys should be unique so that components maintain their identity ' +\n                'across updates. Non-unique keys may cause children to be ' +\n                'duplicated and/or omitted \u2014 the behavior is unsupported and ' +\n                'could change in a future version.',\n              key,\n            );\n          });\n          break;\n        case REACT_LAZY_TYPE: {\n          let resolvedChild;\n          if (__DEV__) {\n            resolvedChild = callLazyInitInDEV((child     ));\n          } else {\n            const payload = child._payload;\n            const init = (child._init     );\n            resolvedChild = init(payload);\n          }\n          warnOnInvalidKey(\n            returnFiber,\n            workInProgress,\n            resolvedChild,\n            knownKeys,\n          );\n          break;\n        }\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber       ,\n    currentFirstChild              ,\n    newChildren            ,\n    lanes       ,\n  )               {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    let knownKeys                     = null;\n\n    let resultingFirstChild               = null;\n    let previousNewFiber               = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n\n      if (__DEV__) {\n        knownKeys = warnOnInvalidKey(\n          returnFiber,\n          newFiber,\n          newChildren[newIdx],\n          knownKeys,\n        );\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        if (__DEV__) {\n          knownKeys = warnOnInvalidKey(\n            returnFiber,\n            newFiber,\n            newChildren[newIdx],\n            knownKeys,\n          );\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (__DEV__) {\n          knownKeys = warnOnInvalidKey(\n            returnFiber,\n            newFiber,\n            newChildren[newIdx],\n            knownKeys,\n          );\n        }\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIteratable(\n    returnFiber       ,\n    currentFirstChild              ,\n    newChildrenIterable                 ,\n    lanes       ,\n  )               {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw new Error(\n        'An object is not an iterable. This error is likely caused by a bug in ' +\n          'React. Please file an issue.',\n      );\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (__DEV__) {\n      if (newChildren === newChildrenIterable) {\n        // We don't support rendering Generators as props because it's a mutation.\n        // See https://github.com/facebook/react/issues/12995\n        // We do support generators if they were created by a GeneratorFunction component\n        // as its direct child since we can recreate those by rerendering the component\n        // as needed.\n        const isGeneratorComponent =\n          returnFiber.tag === FunctionComponent &&\n          // $FlowFixMe[method-unbinding]\n          Object.prototype.toString.call(returnFiber.type) ===\n            '[object GeneratorFunction]' &&\n          // $FlowFixMe[method-unbinding]\n          Object.prototype.toString.call(newChildren) === '[object Generator]';\n        if (!isGeneratorComponent) {\n          if (!didWarnAboutGenerators) {\n            console.error(\n              'Using Iterators as children is unsupported and will likely yield ' +\n                'unexpected results because enumerating a generator mutates it. ' +\n                'You may convert it to an array with `Array.from()` or the ' +\n                '`[...spread]` operator before rendering. You can also use an ' +\n                'Iterable that can iterate multiple times over the same items.',\n            );\n          }\n          didWarnAboutGenerators = true;\n        }\n      } else if ((newChildrenIterable     ).entries === iteratorFn) {\n        // Warn about using Maps as children\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n          didWarnAboutMaps = true;\n        }\n      }\n    }\n\n    return reconcileChildrenIterator(\n      returnFiber,\n      currentFirstChild,\n      newChildren,\n      lanes,\n    );\n  }\n\n  function reconcileChildrenAsyncIteratable(\n    returnFiber       ,\n    currentFirstChild              ,\n    newChildrenIterable                      ,\n    lanes       ,\n  )               {\n    const newChildren = newChildrenIterable[ASYNC_ITERATOR]();\n\n    if (__DEV__) {\n      if (newChildren === newChildrenIterable) {\n        // We don't support rendering AsyncGenerators as props because it's a mutation.\n        // We do support generators if they were created by a AsyncGeneratorFunction component\n        // as its direct child since we can recreate those by rerendering the component\n        // as needed.\n        const isGeneratorComponent =\n          returnFiber.tag === FunctionComponent &&\n          // $FlowFixMe[method-unbinding]\n          Object.prototype.toString.call(returnFiber.type) ===\n            '[object AsyncGeneratorFunction]' &&\n          // $FlowFixMe[method-unbinding]\n          Object.prototype.toString.call(newChildren) ===\n            '[object AsyncGenerator]';\n        if (!isGeneratorComponent) {\n          if (!didWarnAboutGenerators) {\n            console.error(\n              'Using AsyncIterators as children is unsupported and will likely yield ' +\n                'unexpected results because enumerating a generator mutates it. ' +\n                'You can use an AsyncIterable that can iterate multiple times over ' +\n                'the same items.',\n            );\n          }\n          didWarnAboutGenerators = true;\n        }\n      }\n    }\n\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    // To save bytes, we reuse the logic by creating a synchronous Iterable and\n    // reusing that code path.\n    const iterator                  = ({\n      next()                              {\n        return unwrapThenable(newChildren.next());\n      },\n    }     );\n\n    return reconcileChildrenIterator(\n      returnFiber,\n      currentFirstChild,\n      iterator,\n      lanes,\n    );\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber       ,\n    currentFirstChild              ,\n    newChildren                  ,\n    lanes       ,\n  )               {\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    let resultingFirstChild               = null;\n    let previousNewFiber               = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let knownKeys                     = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n\n      if (__DEV__) {\n        knownKeys = warnOnInvalidKey(\n          returnFiber,\n          newFiber,\n          step.value,\n          knownKeys,\n        );\n      }\n\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        if (__DEV__) {\n          knownKeys = warnOnInvalidKey(\n            returnFiber,\n            newFiber,\n            step.value,\n            knownKeys,\n          );\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (__DEV__) {\n          knownKeys = warnOnInvalidKey(\n            returnFiber,\n            newFiber,\n            step.value,\n            knownKeys,\n          );\n        }\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber       ,\n    currentFirstChild              ,\n    textContent        ,\n    lanes       ,\n  )        {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    if (__DEV__) {\n      // We treat the parent as the owner for stack purposes.\n      created._debugOwner = returnFiber;\n      created._debugTask = returnFiber._debugTask;\n      created._debugInfo = currentDebugInfo;\n    }\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber       ,\n    currentFirstChild              ,\n    element              ,\n    lanes       ,\n  )        {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        const elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props.children);\n            if (enableFragmentRefs) {\n              coerceRef(existing, element);\n            }\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugOwner = element._owner;\n              existing._debugInfo = currentDebugInfo;\n            }\n            validateFragmentProps(element, existing, returnFiber);\n            return existing;\n          }\n        } else {\n          if (\n            child.elementType === elementType ||\n            // Keep this check inline so it only runs on the false path:\n            (__DEV__\n              ? isCompatibleFamilyForHotReloading(child, element)\n              : false) ||\n            // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            (typeof elementType === 'object' &&\n              elementType !== null &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              resolveLazy(elementType) === child.type)\n          ) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props);\n            coerceRef(existing, element);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugOwner = element._owner;\n              existing._debugInfo = currentDebugInfo;\n            }\n            return existing;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      if (enableFragmentRefs) {\n        coerceRef(created, element);\n      }\n      created.return = returnFiber;\n      if (__DEV__) {\n        // We treat the parent as the owner for stack purposes.\n        created._debugOwner = returnFiber;\n        created._debugTask = returnFiber._debugTask;\n        created._debugInfo = currentDebugInfo;\n      }\n      validateFragmentProps(element, created, returnFiber);\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      coerceRef(created, element);\n      created.return = returnFiber;\n      if (__DEV__) {\n        created._debugInfo = currentDebugInfo;\n      }\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber       ,\n    currentFirstChild              ,\n    portal             ,\n    lanes       ,\n  )        {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibersImpl(\n    returnFiber       ,\n    currentFirstChild              ,\n    newChild     ,\n    lanes       ,\n  )               {\n    // This function is only recursive for Usables/Lazy and not nested arrays.\n    // That's so that using a Lazy wrapper is unobservable to the Fragment\n    // convention.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments without refs (enableFragmentRefs)\n    // as if they were arrays. This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    // We don't use recursion here because a fragment inside a fragment\n    // is no longer considered \"top level\" for these purposes.\n    const isUnkeyedUnrefedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null &&\n      (enableFragmentRefs ? newChild.props.ref === undefined : true);\n\n    if (isUnkeyedUnrefedTopLevelFragment) {\n      validateFragmentProps(newChild, null, returnFiber);\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n          const firstChild = placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n          currentDebugInfo = prevDebugInfo;\n          return firstChild;\n        }\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE: {\n          const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n          let result;\n          if (__DEV__) {\n            result = callLazyInitInDEV(newChild);\n          } else {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            result = init(payload);\n          }\n          const firstChild = reconcileChildFibersImpl(\n            returnFiber,\n            currentFirstChild,\n            result,\n            lanes,\n          );\n          currentDebugInfo = prevDebugInfo;\n          return firstChild;\n        }\n      }\n\n      if (isArray(newChild)) {\n        const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n        const firstChild = reconcileChildrenArray(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n        currentDebugInfo = prevDebugInfo;\n        return firstChild;\n      }\n\n      if (getIteratorFn(newChild)) {\n        const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n        const firstChild = reconcileChildrenIteratable(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n        currentDebugInfo = prevDebugInfo;\n        return firstChild;\n      }\n\n      if (\n        enableAsyncIterableChildren &&\n        typeof newChild[ASYNC_ITERATOR] === 'function'\n      ) {\n        const prevDebugInfo = pushDebugInfo(newChild._debugInfo);\n        const firstChild = reconcileChildrenAsyncIteratable(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n        currentDebugInfo = prevDebugInfo;\n        return firstChild;\n      }\n\n      // Usables are a valid React node type. When React encounters a Usable in\n      // a child position, it unwraps it using the same algorithm as `use`. For\n      // example, for promises, React will throw an exception to unwind the\n      // stack, then replay the component once the promise resolves.\n      //\n      // A difference from `use` is that React will keep unwrapping the value\n      // until it reaches a non-Usable type.\n      //\n      // e.g. Usable<Usable<Usable<T>>> should resolve to T\n      //\n      // The structure is a bit unfortunate. Ideally, we shouldn't need to\n      // replay the entire begin phase of the parent fiber in order to reconcile\n      // the children again. This would require a somewhat significant refactor,\n      // because reconcilation happens deep within the begin phase, and\n      // depending on the type of work, not always at the end. We should\n      // consider as an future improvement.\n      if (typeof newChild.then === 'function') {\n        const thenable                = (newChild     );\n        const prevDebugInfo = pushDebugInfo((thenable     )._debugInfo);\n        const firstChild = reconcileChildFibersImpl(\n          returnFiber,\n          currentFirstChild,\n          unwrapThenable(thenable),\n          lanes,\n        );\n        currentDebugInfo = prevDebugInfo;\n        return firstChild;\n      }\n\n      if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n        const context                      = (newChild     );\n        return reconcileChildFibersImpl(\n          returnFiber,\n          currentFirstChild,\n          readContextDuringReconciliation(returnFiber, context, lanes),\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number' ||\n      typeof newChild === 'bigint'\n    ) {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber, newChild);\n      }\n      if (typeof newChild === 'symbol') {\n        warnOnSymbolType(returnFiber, newChild);\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  function reconcileChildFibers(\n    returnFiber       ,\n    currentFirstChild              ,\n    newChild     ,\n    lanes       ,\n  )               {\n    const prevDebugInfo = currentDebugInfo;\n    currentDebugInfo = null;\n    try {\n      // This indirection only exists so we can reset `thenableState` at the end.\n      // It should get inlined by Closure.\n      thenableIndexCounter = 0;\n      const firstChildFiber = reconcileChildFibersImpl(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes,\n      );\n      thenableState = null;\n      // Don't bother to reset `thenableIndexCounter` to 0 because it always gets\n      // set at the beginning.\n      return firstChildFiber;\n    } catch (x) {\n      if (\n        x === SuspenseException ||\n        x === SuspenseActionException ||\n        (!disableLegacyMode &&\n          (returnFiber.mode & ConcurrentMode) === NoMode &&\n          typeof x === 'object' &&\n          x !== null &&\n          typeof x.then === 'function')\n      ) {\n        // Suspense exceptions need to read the current suspended state before\n        // yielding and replay it using the same sequence so this trick doesn't\n        // work here.\n        // Suspending in legacy mode actually mounts so if we let the child\n        // mount then we delete its state in an update.\n        throw x;\n      }\n      // Something errored during reconciliation but it's conceptually a child that\n      // errored and not the current component itself so we create a virtual child\n      // that throws in its begin phase. That way the current component can handle\n      // the error or suspending if needed.\n      const throwFiber = createFiberFromThrow(x, returnFiber.mode, lanes);\n      throwFiber.return = returnFiber;\n      if (__DEV__) {\n        const debugInfo = (throwFiber._debugInfo = currentDebugInfo);\n        // Conceptually the error's owner/task should ideally be captured when the\n        // Error constructor is called but neither console.createTask does this,\n        // nor do we override them to capture our `owner`. So instead, we use the\n        // nearest parent as the owner/task of the error. This is usually the same\n        // thing when it's thrown from the same async component but not if you await\n        // a promise started from a different component/task.\n        throwFiber._debugOwner = returnFiber._debugOwner;\n        throwFiber._debugTask = returnFiber._debugTask;\n        if (debugInfo != null) {\n          for (let i = debugInfo.length - 1; i >= 0; i--) {\n            if (typeof debugInfo[i].stack === 'string') {\n              throwFiber._debugOwner = (debugInfo[i]     );\n              throwFiber._debugTask = debugInfo[i].debugTask;\n              break;\n            }\n          }\n        }\n      }\n      return throwFiber;\n    } finally {\n      currentDebugInfo = prevDebugInfo;\n    }\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers                  =\n  createChildReconciler(true);\nexport const mountChildFibers                  = createChildReconciler(false);\n\nexport function resetChildReconcilerOnUnwind()       {\n  // On unwind, clear any pending thenables that were used.\n  thenableState = null;\n  thenableIndexCounter = 0;\n}\n\nexport function cloneChildFibers(\n  current              ,\n  workInProgress       ,\n)       {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw new Error('Resuming work not yet implemented.');\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress       , lanes       )       {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                           \n             \n                           \n                       \n                           \n             \n                            \n                        \n                                      \n                                                  \n                                                                      \n\nimport {\n  warnAboutUpdateOnNotYetMountedFiberInDEV,\n  throwIfInfiniteUpdateLoopDetected,\n  getWorkInProgressRoot,\n} from './ReactFiberWorkLoop';\nimport {NoLane, NoLanes, mergeLanes, markHiddenUpdate} from './ReactFiberLane';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\nimport {HostRoot, OffscreenComponent} from './ReactWorkTags';\nimport {OffscreenVisible} from './ReactFiberOffscreenComponent';\n\n                                \n                         \n             \n  \n\n                        \n                                   \n  \n\n// If a render is in progress, and we receive an update from a concurrent event,\n// we wait until the current render is over (either finished or interrupted)\n// before adding it to the fiber/hook queue. Push to this array so we can\n// access the queue, fiber, update, et al later.\nconst concurrentQueues             = [];\nlet concurrentQueuesIndex = 0;\n\nlet concurrentlyUpdatedLanes        = NoLanes;\n\nexport function finishQueueingConcurrentUpdates()       {\n  const endIndex = concurrentQueuesIndex;\n  concurrentQueuesIndex = 0;\n\n  concurrentlyUpdatedLanes = NoLanes;\n\n  let i = 0;\n  while (i < endIndex) {\n    const fiber        = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const queue                  = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const update                   = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n    const lane       = concurrentQueues[i];\n    concurrentQueues[i++] = null;\n\n    if (queue !== null && update !== null) {\n      const pending = queue.pending;\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n      queue.pending = update;\n    }\n\n    if (lane !== NoLane) {\n      markUpdateLaneFromFiberToRoot(fiber, update, lane);\n    }\n  }\n}\n\nexport function getConcurrentlyUpdatedLanes()        {\n  return concurrentlyUpdatedLanes;\n}\n\nfunction enqueueUpdate(\n  fiber       ,\n  queue                        ,\n  update                         ,\n  lane      ,\n) {\n  // Don't update the `childLanes` on the return path yet. If we already in\n  // the middle of rendering, wait until after it has completed.\n  concurrentQueues[concurrentQueuesIndex++] = fiber;\n  concurrentQueues[concurrentQueuesIndex++] = queue;\n  concurrentQueues[concurrentQueuesIndex++] = update;\n  concurrentQueues[concurrentQueuesIndex++] = lane;\n\n  concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane);\n\n  // The fiber's `lane` field is used in some places to check if any work is\n  // scheduled, to perform an eager bailout, so we need to update it immediately.\n  // TODO: We should probably move this to the \"shared\" queue instead.\n  fiber.lanes = mergeLanes(fiber.lanes, lane);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n}\n\nexport function enqueueConcurrentHookUpdate      (\n  fiber       ,\n  queue                 ,\n  update                  ,\n  lane      ,\n)                   {\n  const concurrentQueue                  = (queue     );\n  const concurrentUpdate                   = (update     );\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\n  return getRootForUpdatedFiber(fiber);\n}\n\nexport function enqueueConcurrentHookUpdateAndEagerlyBailout      (\n  fiber       ,\n  queue                 ,\n  update                  ,\n)       {\n  // This function is used to queue an update that doesn't need a rerender. The\n  // only reason we queue it is in case there's a subsequent higher priority\n  // update that causes it to be rebased.\n  const lane = NoLane;\n  const concurrentQueue                  = (queue     );\n  const concurrentUpdate                   = (update     );\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\n\n  // Usually we can rely on the upcoming render phase to process the concurrent\n  // queue. However, since this is a bail out, we're not scheduling any work\n  // here. So the update we just queued will leak until something else happens\n  // to schedule work (if ever).\n  //\n  // Check if we're currently in the middle of rendering a tree, and if not,\n  // process the queue immediately to prevent a leak.\n  const isConcurrentlyRendering = getWorkInProgressRoot() !== null;\n  if (!isConcurrentlyRendering) {\n    finishQueueingConcurrentUpdates();\n  }\n}\n\nexport function enqueueConcurrentClassUpdate       (\n  fiber       ,\n  queue                   ,\n  update                    ,\n  lane      ,\n)                   {\n  const concurrentQueue                  = (queue     );\n  const concurrentUpdate                   = (update     );\n  enqueueUpdate(fiber, concurrentQueue, concurrentUpdate, lane);\n  return getRootForUpdatedFiber(fiber);\n}\n\nexport function enqueueConcurrentRenderForLane(\n  fiber       ,\n  lane      ,\n)                   {\n  enqueueUpdate(fiber, null, null, lane);\n  return getRootForUpdatedFiber(fiber);\n}\n\n// Calling this function outside this module should only be done for backwards\n// compatibility and should always be accompanied by a warning.\nexport function unsafe_markUpdateLaneFromFiberToRoot(\n  sourceFiber       ,\n  lane      ,\n)                   {\n  // NOTE: For Hyrum's Law reasons, if an infinite update loop is detected, it\n  // should throw before `markUpdateLaneFromFiberToRoot` is called. But this is\n  // undefined behavior and we can change it if we need to; it just so happens\n  // that, at the time of this writing, there's an internal product test that\n  // happens to rely on this.\n  const root = getRootForUpdatedFiber(sourceFiber);\n  markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);\n  return root;\n}\n\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber       ,\n  update                         ,\n  lane      ,\n)                   {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  // Walk the parent path to the root and update the child lanes.\n  let isHidden = false;\n  let parent = sourceFiber.return;\n  let node = sourceFiber;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    }\n\n    if (parent.tag === OffscreenComponent) {\n      // Check if this offscreen boundary is currently hidden.\n      //\n      // The instance may be null if the Offscreen parent was unmounted. Usually\n      // the parent wouldn't be reachable in that case because we disconnect\n      // fibers from the tree when they are deleted. However, there's a weird\n      // edge case where setState is called on a fiber that was interrupted\n      // before it ever mounted. Because it never mounts, it also never gets\n      // deleted. Because it never gets deleted, its return pointer never gets\n      // disconnected. Which means it may be attached to a deleted Offscreen\n      // parent node. (This discovery suggests it may be better for memory usage\n      // if we don't attach the `return` pointer until the commit phase, though\n      // in order to do that we'd need some other way to track the return\n      // pointer during the initial render, like on the stack.)\n      //\n      // This case is always accompanied by a warning, but we still need to\n      // account for it. (There may be other cases that we haven't discovered,\n      // too.)\n      const offscreenInstance                           = parent.stateNode;\n      if (\n        offscreenInstance !== null &&\n        !(offscreenInstance._visibility & OffscreenVisible)\n      ) {\n        isHidden = true;\n      }\n    }\n\n    node = parent;\n    parent = parent.return;\n  }\n\n  if (node.tag === HostRoot) {\n    const root            = node.stateNode;\n    if (isHidden && update !== null) {\n      markHiddenUpdate(root, update, lane);\n    }\n    return root;\n  }\n  return null;\n}\n\nfunction getRootForUpdatedFiber(sourceFiber       )                   {\n  // TODO: We will detect and infinite update loop and throw even if this fiber\n  // has already unmounted. This isn't really necessary but it happens to be the\n  // current behavior we've used for several release cycles. Consider not\n  // performing this check if the updated fiber already unmounted, since it's\n  // not possible for that to cause an infinite update loop.\n  throwIfInfiniteUpdateLoopDetected();\n\n  // When a setState happens, we must ensure the root is scheduled. Because\n  // update queues do not have a backpointer to the root, the only way to do\n  // this currently is to walk up the return path. This used to not be a big\n  // deal because we would have to walk up the return path to set\n  // the `childLanes`, anyway, but now those two traversals happen at\n  // different times.\n  // TODO: Consider adding a `root` backpointer on the update queue.\n  detectUpdateOnUnmountedFiber(sourceFiber, sourceFiber);\n  let node = sourceFiber;\n  let parent = node.return;\n  while (parent !== null) {\n    detectUpdateOnUnmountedFiber(sourceFiber, node);\n    node = parent;\n    parent = node.return;\n  }\n  return node.tag === HostRoot ? (node.stateNode           ) : null;\n}\n\nfunction detectUpdateOnUnmountedFiber(sourceFiber       , parent       ) {\n  if (__DEV__) {\n    const alternate = parent.alternate;\n    if (\n      alternate === null &&\n      (parent.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed \u2014 a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\n                                                           \n                                                  \n\nimport {\n  NoLane,\n  NoLanes,\n  OffscreenLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  isTransitionLane,\n  intersectLanes,\n  markRootEntangled,\n} from './ReactFiberLane';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext';\nimport {\n  Callback,\n  Visibility,\n  ShouldCapture,\n  DidCapture,\n} from './ReactFiberFlags';\nimport getComponentNameFromFiber from './getComponentNameFromFiber';\n\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  markSkippedUpdateLanes,\n  isUnsafeClassRenderPhaseUpdate,\n  getWorkInProgressRootRenderLanes,\n} from './ReactFiberWorkLoop';\nimport {\n  enqueueConcurrentClassUpdate,\n  unsafe_markUpdateLaneFromFiberToRoot,\n} from './ReactFiberConcurrentUpdates';\nimport {setIsStrictModeForDevtools} from './ReactFiberDevToolsHook';\n\nimport assign from 'shared/assign';\nimport {\n  peekEntangledActionLane,\n  peekEntangledActionThenable,\n} from './ReactFiberAsyncAction';\n\n                             \n             \n\n                     \n               \n                                 \n\n                             \n  \n\n                                  \n                                \n               \n                                             \n  \n\n                                  \n                   \n                                        \n                                       \n                             \n                                       \n  \n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue                          ;\nexport let resetCurrentlyProcessingQueue            ;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue       (fiber       )       {\n  const queue                     = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      lanes: NoLanes,\n      hiddenCallbacks: null,\n    },\n    callbacks: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue       (\n  current       ,\n  workInProgress       ,\n)       {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue                     = (workInProgress.updateQueue     );\n  const currentQueue                     = (current.updateQueue     );\n  if (queue === currentQueue) {\n    const clone                     = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      callbacks: null,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(lane      )                {\n  const update                = {\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate       (\n  fiber       ,\n  update               ,\n  lane      ,\n)                   {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return null;\n  }\n\n  const sharedQueue                     = (updateQueue     ).shared;\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      const componentName = getComponentNameFromFiber(fiber);\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.\\n\\nPlease update the following component: %s',\n        componentName,\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n\n  if (isUnsafeClassRenderPhaseUpdate(fiber)) {\n    // This is an unsafe render phase update. Add directly to the update\n    // queue so we can process it immediately during the current render.\n    const pending = sharedQueue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    sharedQueue.pending = update;\n\n    // Update the childLanes even though we're most likely already rendering\n    // this fiber. This is for backwards compatibility in the case where you\n    // update a different component during render phase than the one that is\n    // currently renderings (a pattern that is accompanied by a warning).\n    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n  } else {\n    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n  }\n}\n\nexport function entangleTransitions(root           , fiber       , lane      ) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue                     = (updateQueue     ).shared;\n  if (isTransitionLane(lane)) {\n    let queueLanes = sharedQueue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nexport function enqueueCapturedUpdate       (\n  workInProgress       ,\n  capturedUpdate               ,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue                     = (workInProgress.updateQueue     );\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue                     = (current.updateQueue     );\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update                = firstBaseUpdate;\n        do {\n          const clone                = {\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            // When this update is rebased, we should not fire its\n            // callback again.\n            callback: null,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          // $FlowFixMe[incompatible-type] we bail out when we get a null\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        callbacks: currentQueue.callbacks,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate       (\n  workInProgress       ,\n  queue                    ,\n  update               ,\n  prevState       ,\n  nextProps     ,\n  instance     ,\n)      {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nlet didReadFromEntangledAsyncAction          = false;\n\n// Each call to processUpdateQueue should be accompanied by a call to this. It's\n// only in a separate function because in updateHostRoot, it must happen after\n// all the context stacks have been pushed to, to prevent a stack mismatch. A\n// bit unfortunate.\nexport function suspendIfUpdateReadFromEntangledAsyncAction() {\n  // Check if this update is part of a pending async action. If so, we'll\n  // need to suspend until the action has finished, so that it's batched\n  // together with future updates in the same action.\n  // TODO: Once we support hooks inside useMemo (or an equivalent\n  // memoization boundary like Forget), hoist this logic so that it only\n  // suspends if the memo boundary produces a new value.\n  if (didReadFromEntangledAsyncAction) {\n    const entangledActionThenable = peekEntangledActionThenable();\n    if (entangledActionThenable !== null) {\n      // TODO: Instead of the throwing the thenable directly, throw a\n      // special object like `use` does so we can detect if it's captured\n      // by userspace.\n      throw entangledActionThenable;\n    }\n  }\n}\n\nexport function processUpdateQueue       (\n  workInProgress       ,\n  props     ,\n  instance     ,\n  renderLanes       ,\n)       {\n  didReadFromEntangledAsyncAction = false;\n\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue                     = (workInProgress.updateQueue     );\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue                     = (current.updateQueue     );\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes        = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate                       = null;\n\n    let update                = firstBaseUpdate;\n    do {\n      // An extra OffscreenLane bit is added to updates that were made to\n      // a hidden tree, so that we can distinguish them from updates that were\n      // already there when the tree was hidden.\n      const updateLane = removeLanes(update.lane, OffscreenLane);\n      const isHiddenUpdate = updateLane !== update.lane;\n\n      // Check if this update was made while the tree was hidden. If so, then\n      // it's not a \"base\" update and we should disregard the extra base lanes\n      // that were added to renderLanes when we entered the Offscreen tree.\n      const shouldSkipUpdate = isHiddenUpdate\n        ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\n        : !isSubsetOfLanes(renderLanes, updateLane);\n\n      if (shouldSkipUpdate) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone                = {\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        // Check if this update is part of a pending async action. If so,\n        // we'll need to suspend until the action has finished, so that it's\n        // batched together with future updates in the same action.\n        if (updateLane !== NoLane && updateLane === peekEntangledActionLane()) {\n          didReadFromEntangledAsyncAction = true;\n        }\n\n        if (newLastBaseUpdate !== null) {\n          const clone                = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n\n            // When this update is rebased, we should not fire its\n            // callback again.\n            callback: null,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (callback !== null) {\n          workInProgress.flags |= Callback;\n          if (isHiddenUpdate) {\n            workInProgress.flags |= Visibility;\n          }\n          const callbacks = queue.callbacks;\n          if (callbacks === null) {\n            queue.callbacks = [callback];\n          } else {\n            callbacks.push(callback);\n          }\n        }\n      }\n      // $FlowFixMe[incompatible-type] we bail out when we get a null\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate =\n            ((lastPendingUpdate.next     )               );\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState     )       );\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    }\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback             , context     ) {\n  if (typeof callback !== 'function') {\n    throw new Error(\n      'Invalid argument passed as callback. Expected a function. Instead ' +\n        `received: ${callback}`,\n    );\n  }\n\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing()          {\n  return hasForceUpdate;\n}\n\nexport function deferHiddenCallbacks       (\n  updateQueue                    ,\n)       {\n  // When an update finishes on a hidden component, its callback should not\n  // be fired until/unless the component is made visible again. Stash the\n  // callback on the shared queue object so it can be fired later.\n  const newHiddenCallbacks = updateQueue.callbacks;\n  if (newHiddenCallbacks !== null) {\n    const existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n    if (existingHiddenCallbacks === null) {\n      updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;\n    } else {\n      updateQueue.shared.hiddenCallbacks =\n        existingHiddenCallbacks.concat(newHiddenCallbacks);\n    }\n  }\n}\n\nexport function commitHiddenCallbacks       (\n  updateQueue                    ,\n  context     ,\n)       {\n  // This component is switching from hidden -> visible. Commit any callbacks\n  // that were previously deferred.\n  const hiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n  if (hiddenCallbacks !== null) {\n    updateQueue.shared.hiddenCallbacks = null;\n    for (let i = 0; i < hiddenCallbacks.length; i++) {\n      const callback = hiddenCallbacks[i];\n      callCallback(callback, context);\n    }\n  }\n}\n\nexport function commitCallbacks       (\n  updateQueue                    ,\n  context     ,\n)       {\n  const callbacks = updateQueue.callbacks;\n  if (callbacks !== null) {\n    updateQueue.callbacks = null;\n    for (let i = 0; i < callbacks.length; i++) {\n      const callback = callbacks[i];\n      callCallback(callback, context);\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n                                                   \n                                            \n\nimport {createCursor, push, pop} from './ReactFiberStack';\n\nimport {\n  getEntangledRenderLanes,\n  setEntangledRenderLanes,\n} from './ReactFiberWorkLoop';\nimport {NoLanes, mergeLanes} from './ReactFiberLane';\n\n// TODO: Remove `renderLanes` context in favor of hidden context\n                      \n                                                                          \n                                        \n                                                                             \n                    \n     \n  \n\n// TODO: This isn't being used yet, but it's intended to replace the\n// InvisibleParentContext that is currently managed by SuspenseContext.\nexport const currentTreeHiddenStackCursor                                    =\n  createCursor(null);\nexport const prevEntangledRenderLanesCursor                     =\n  createCursor(NoLanes);\n\nexport function pushHiddenContext(fiber       , context               )       {\n  const prevEntangledRenderLanes = getEntangledRenderLanes();\n  push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);\n  push(currentTreeHiddenStackCursor, context, fiber);\n\n  // When rendering a subtree that's currently hidden, we must include all\n  // lanes that would have rendered if the hidden subtree hadn't been deferred.\n  // That is, in order to reveal content from hidden -> visible, we must commit\n  // all the updates that we skipped when we originally hid the tree.\n  setEntangledRenderLanes(\n    mergeLanes(prevEntangledRenderLanes, context.baseLanes),\n  );\n}\n\nexport function reuseHiddenContextOnStack(fiber       )       {\n  // This subtree is not currently hidden, so we don't need to add any lanes\n  // to the render lanes. But we still need to push something to avoid a\n  // context mismatch. Reuse the existing context on the stack.\n  push(prevEntangledRenderLanesCursor, getEntangledRenderLanes(), fiber);\n  push(\n    currentTreeHiddenStackCursor,\n    currentTreeHiddenStackCursor.current,\n    fiber,\n  );\n}\n\nexport function popHiddenContext(fiber       )       {\n  // Restore the previous render lanes from the stack\n  setEntangledRenderLanes(prevEntangledRenderLanesCursor.current);\n\n  pop(currentTreeHiddenStackCursor, fiber);\n  pop(prevEntangledRenderLanesCursor, fiber);\n}\n\nexport function isCurrentTreeHidden()          {\n  return currentTreeHiddenStackCursor.current !== null;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                     \n                                                \n                                                   \n                                                                 \n\nimport {enableSuspenseAvoidThisFallback} from 'shared/ReactFeatureFlags';\nimport {createCursor, push, pop} from './ReactFiberStack';\nimport {isCurrentTreeHidden} from './ReactFiberHiddenContext';\nimport {OffscreenComponent} from './ReactWorkTags';\n\n// The Suspense handler is the boundary that should capture if something\n// suspends, i.e. it's the nearest `catch` block on the stack.\nconst suspenseHandlerStackCursor                            =\n  createCursor(null);\n\n// Represents the outermost boundary that is not visible in the current tree.\n// Everything above this is the \"shell\". When this is null, it means we're\n// rendering in the shell of the app. If it's non-null, it means we're rendering\n// deeper than the shell, inside a new tree that wasn't already visible.\n//\n// The main way we use this concept is to determine whether showing a fallback\n// would result in a desirable or undesirable loading state. Activing a fallback\n// in the shell is considered an undersirable loading state, because it would\n// mean hiding visible (albeit stale) content in the current tree \u2014 we prefer to\n// show the stale content, rather than switch to a fallback. But showing a\n// fallback in a new tree is fine, because there's no stale content to\n// prefer instead.\nlet shellBoundary               = null;\n\nexport function getShellBoundary()               {\n  return shellBoundary;\n}\n\nexport function pushPrimaryTreeSuspenseHandler(handler       )       {\n  // TODO: Pass as argument\n  const current = handler.alternate;\n  const props                = handler.pendingProps;\n\n  // Shallow Suspense context fields, like ForceSuspenseFallback, should only be\n  // propagated a single level. For example, when ForceSuspenseFallback is set,\n  // it should only force the nearest Suspense boundary into fallback mode.\n  pushSuspenseListContext(\n    handler,\n    setDefaultShallowSuspenseListContext(suspenseStackCursor.current),\n  );\n\n  // Experimental feature: Some Suspense boundaries are marked as having an\n  // undesirable fallback state. These have special behavior where we only\n  // activate the fallback if there's no other boundary on the stack that we can\n  // use instead.\n  if (\n    enableSuspenseAvoidThisFallback &&\n    props.unstable_avoidThisFallback === true &&\n    // If an avoided boundary is already visible, it behaves identically to\n    // a regular Suspense boundary.\n    (current === null || isCurrentTreeHidden())\n  ) {\n    if (shellBoundary === null) {\n      // We're rendering in the shell. There's no parent Suspense boundary that\n      // can provide a desirable fallback state. We'll use this boundary.\n      push(suspenseHandlerStackCursor, handler, handler);\n\n      // However, because this is not a desirable fallback, the children are\n      // still considered part of the shell. So we intentionally don't assign\n      // to `shellBoundary`.\n    } else {\n      // There's already a parent Suspense boundary that can provide a desirable\n      // fallback state. Prefer that one.\n      const handlerOnStack = suspenseHandlerStackCursor.current;\n      push(suspenseHandlerStackCursor, handlerOnStack, handler);\n    }\n    return;\n  }\n\n  // TODO: If the parent Suspense handler already suspended, there's no reason\n  // to push a nested Suspense handler, because it will get replaced by the\n  // outer fallback, anyway. Consider this as a future optimization.\n  push(suspenseHandlerStackCursor, handler, handler);\n  if (shellBoundary === null) {\n    if (current === null || isCurrentTreeHidden()) {\n      // This boundary is not visible in the current UI.\n      shellBoundary = handler;\n    } else {\n      const prevState                = current.memoizedState;\n      if (prevState !== null) {\n        // This boundary is showing a fallback in the current UI.\n        shellBoundary = handler;\n      }\n    }\n  }\n}\n\nexport function pushFallbackTreeSuspenseHandler(fiber       )       {\n  // We're about to render the fallback. If something in the fallback suspends,\n  // it's akin to throwing inside of a `catch` block. This boundary should not\n  // capture. Reuse the existing handler on the stack.\n  reuseSuspenseHandlerOnStack(fiber);\n}\n\nexport function pushDehydratedActivitySuspenseHandler(fiber       )       {\n  // This is called when hydrating an Activity boundary. We can just leave it\n  // dehydrated if it suspends.\n  // A SuspenseList context is only pushed here to avoid a push/pop mismatch.\n  // Reuse the current value on the stack.\n  // TODO: We can avoid needing to push here by by forking popSuspenseHandler\n  // into separate functions for Activity, Suspense and Offscreen.\n  pushSuspenseListContext(fiber, suspenseStackCursor.current);\n  push(suspenseHandlerStackCursor, fiber, fiber);\n  if (shellBoundary === null) {\n    // We can contain any suspense inside the Activity boundary.\n    shellBoundary = fiber;\n  }\n}\n\nexport function pushOffscreenSuspenseHandler(fiber       )       {\n  if (fiber.tag === OffscreenComponent) {\n    // A SuspenseList context is only pushed here to avoid a push/pop mismatch.\n    // Reuse the current value on the stack.\n    // TODO: We can avoid needing to push here by by forking popSuspenseHandler\n    // into separate functions for Activity, Suspense and Offscreen.\n    pushSuspenseListContext(fiber, suspenseStackCursor.current);\n    push(suspenseHandlerStackCursor, fiber, fiber);\n    if (shellBoundary === null) {\n      // We're rendering hidden content. If it suspends, we can handle it by\n      // just not committing the offscreen boundary.\n      shellBoundary = fiber;\n    }\n  } else {\n    // This is a LegacyHidden component.\n    reuseSuspenseHandlerOnStack(fiber);\n  }\n}\n\nexport function reuseSuspenseHandlerOnStack(fiber       ) {\n  pushSuspenseListContext(fiber, suspenseStackCursor.current);\n  push(suspenseHandlerStackCursor, getSuspenseHandler(), fiber);\n}\n\nexport function getSuspenseHandler()               {\n  return suspenseHandlerStackCursor.current;\n}\n\nexport function popSuspenseHandler(fiber       )       {\n  pop(suspenseHandlerStackCursor, fiber);\n  if (shellBoundary === fiber) {\n    // Popping back into the shell.\n    shellBoundary = null;\n  }\n  popSuspenseListContext(fiber);\n}\n\n// SuspenseList context\n// TODO: Move to a separate module? We may change the SuspenseList\n// implementation to hide/show in the commit phase, anyway.\n                                            \n                                                                    \n                                                                    \n\nconst DefaultSuspenseContext                  = 0b00;\n\nconst SubtreeSuspenseContextMask                  = 0b01;\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback                         = 0b10;\n\nexport const suspenseStackCursor                               = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseListContext(\n  parentContext                 ,\n  flag                 ,\n)          {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseListContext(\n  parentContext                 ,\n)                  {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseListContext(\n  parentContext                 ,\n  shallowContext                        ,\n)                  {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function pushSuspenseListContext(\n  fiber       ,\n  newContext                 ,\n)       {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseListContext(fiber       )       {\n  pop(suspenseStackCursor, fiber);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                      \n                                                \n                                                         \n                                           \n                                                         \n                                                        \n\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberConfig';\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\n                             \n                                                                        \n                                                                       \n                                                    \n                                      \n                                  \n                                                                               \n                                                            \n                                                                                \n                  \n                                                                            \n                                                      \n  \n\n                                       \n                       \n                                      \n                          \n                                                                          \n                             \n                                               \n                     \n                                            \n                     \n                             \n                                 \n  \n\n                                       \n\nexport function findFirstSuspended(row       )               {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state                       = node.memoizedState;\n      if (state !== null) {\n        const dehydrated                          = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                               \n\nexport const NoFlags = /*   */ 0b0000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b0001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Insertion = /* */ 0b0010;\nexport const Layout = /*    */ 0b0100;\nexport const Passive = /*   */ 0b1000;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n             \n               \n                         \n         \n           \n                   \n          \n                           \n             \n        \n            \n             \n           \n            \n                              \n                                                  \n                                                     \n                                             \n                                                         \n                                                                   \n\nimport {\n  HostTransitionContext,\n  NotPendingTransition as NoPendingHostTransition,\n  setCurrentUpdatePriority,\n  getCurrentUpdatePriority,\n} from './ReactFiberConfig';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableSchedulingProfiler,\n  enableTransitionTracing,\n  enableUseEffectEventHook,\n  enableLegacyCache,\n  disableLegacyMode,\n  enableNoCloningMemoCache,\n  enableViewTransition,\n  enableGestureTransition,\n} from 'shared/ReactFeatureFlags';\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_MEMO_CACHE_SENTINEL,\n} from 'shared/ReactSymbols';\n\nimport {\n  NoMode,\n  ConcurrentMode,\n  StrictEffectsMode,\n  StrictLegacyMode,\n  NoStrictPassiveEffectsMode,\n} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  SyncLane,\n  OffscreenLane,\n  DeferredLane,\n  NoLanes,\n  isSubsetOfLanes,\n  includesBlockingLane,\n  includesOnlyNonUrgentLanes,\n  mergeLanes,\n  removeLanes,\n  intersectLanes,\n  isTransitionLane,\n  markRootEntangled,\n  includesSomeLane,\n  isGestureRender,\n  GestureLane,\n} from './ReactFiberLane';\nimport {\n  ContinuousEventPriority,\n  higherEventPriority,\n} from './ReactEventPriorities';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext';\nimport {HostRoot, CacheComponent, HostComponent} from './ReactWorkTags';\nimport {\n  LayoutStatic as LayoutStaticEffect,\n  Passive as PassiveEffect,\n  PassiveStatic as PassiveStaticEffect,\n  StaticMask as StaticMaskEffect,\n  Update as UpdateEffect,\n  StoreConsistency,\n  MountLayoutDev as MountLayoutDevEffect,\n  MountPassiveDev as MountPassiveDevEffect,\n  FormReset,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n  Insertion as HookInsertion,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  getWorkInProgressRootRenderLanes,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestDeferredLane,\n  markSkippedUpdateLanes,\n  isInvalidExecutionContextForEventFunction,\n} from './ReactFiberWorkLoop';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport is from 'shared/objectIs';\nimport isArray from 'shared/isArray';\nimport {\n  markWorkInProgressReceivedUpdate,\n  checkIfWorkInProgressReceivedUpdate,\n} from './ReactFiberBeginWork';\nimport {\n  getIsHydrating,\n  tryToClaimNextHydratableFormMarkerInstance,\n} from './ReactFiberHydrationContext';\nimport {\n  markStateUpdateScheduled,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook';\nimport {startUpdateTimerByLane} from './ReactProfilerTimer';\nimport {createCache} from './ReactFiberCacheComponent';\nimport {\n  createUpdate as createLegacyQueueUpdate,\n  enqueueUpdate as enqueueLegacyQueueUpdate,\n  entangleTransitions as entangleLegacyQueueTransitions,\n} from './ReactFiberClassUpdateQueue';\nimport {\n  enqueueConcurrentHookUpdate,\n  enqueueConcurrentHookUpdateAndEagerlyBailout,\n  enqueueConcurrentRenderForLane,\n} from './ReactFiberConcurrentUpdates';\nimport {getTreeId} from './ReactFiberTreeContext';\nimport {now} from './Scheduler';\nimport {\n  trackUsedThenable,\n  checkIfUseWrappedInTryCatch,\n  createThenableState,\n  SuspenseException,\n  SuspenseActionException,\n} from './ReactFiberThenable';\n                                                        \n                                                               \nimport {\n  peekEntangledActionLane,\n  peekEntangledActionThenable,\n  chainThenableValue,\n} from './ReactFiberAsyncAction';\nimport {requestTransitionLane} from './ReactFiberRootScheduler';\nimport {isCurrentTreeHidden} from './ReactFiberHiddenContext';\nimport {requestCurrentTransition} from './ReactFiberTransition';\n\nimport {callComponentInDEV} from './ReactFiberCallUserSpace';\n\nimport {scheduleGesture} from './ReactFiberGestureScheduler';\n\n                            \n             \n                   \n            \n                         \n                       \n                     \n                                                              \n  \n\n                                 \n                               \n               \n                                \n                                            \n                              \n  \n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnUncachedGetSnapshot             ;\nlet didWarnAboutUseWrappedInTryCatch;\nlet didWarnAboutAsyncClientComponent;\nlet didWarnAboutUseFormState;\nif (__DEV__) {\n  didWarnAboutMismatchedHooksForComponent = new Set               ();\n  didWarnAboutUseWrappedInTryCatch = new Set               ();\n  didWarnAboutAsyncClientComponent = new Set               ();\n  didWarnAboutUseFormState = new Set               ();\n}\n\n                    \n                     \n                 \n                                     \n             \n                    \n  \n\n// The effect \"instance\" is a shared object that remains the same for the entire\n// lifetime of an effect. In Rust terms, a RefCell. We use it to store the\n// \"destroy\" function that is returned from an effect, because that is stateful.\n// The field is `undefined` if the effect is unmounted, or if the effect ran\n// but is not stateful. We don't explicitly track whether the effect is mounted\n// or unmounted because that can be inferred by the hiddenness of the fiber in\n// the tree, i.e. whether there is a hidden Offscreen fiber above it.\n//\n// It's unfortunate that this is stored on a separate object, because it adds\n// more memory per effect instance, but it's conceptually sound. I think there's\n// likely a better data structure we could use for effects; perhaps just one\n// array of effect instances per fiber. But I think this is OK for now despite\n// the additional memory and we can follow up with performance\n// optimizations later.\n                       \n                               \n  \n\n                      \n                 \n                       \n                                    \n                                   \n               \n  \n\n                         \n           \n                       \n  \n\n                                 \n           \n                       \n  \n\n                                                                          \n        \n               \n            \n    \n              \n  \n\n                                            \n                            \n                                                            \n                                                   \n                              \n  \n\n                                        \n\n                             \n\n// These are set right before calling the component.\nlet renderLanes        = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber        = (null     );\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook              = null;\nlet workInProgressHook              = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate          = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass          = false;\nlet shouldDoubleInvokeUserFnsInHooksDEV          = false;\n// Counts the number of useId hooks in this component.\nlet localIdCounter         = 0;\n// Counts number of `use`-d thenables\nlet thenableIndexCounter         = 0;\nlet thenableState                       = null;\n\n// Used for ids that are generated completely client-side (i.e. not during\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\nlet globalClientIdCounter         = 0;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev            = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev                         = null;\nlet hookTypesUpdateIndexDev         = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies          = false;\n\nfunction mountHookTypesDev()       {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev     )          );\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev()       {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev     )          );\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps       )       {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName          )       {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev     )        ); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev     )        )\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction warnOnUseFormStateInDev()       {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\n    if (!didWarnAboutUseFormState.has(componentName)) {\n      didWarnAboutUseFormState.add(componentName);\n\n      console.error(\n        'ReactDOM.useFormState has been renamed to React.useActionState. ' +\n          'Please update %s to use React.useActionState.',\n        componentName,\n      );\n    }\n  }\n}\n\nfunction warnIfAsyncClientComponent(Component          ) {\n  if (__DEV__) {\n    // This dev-only check only works for detecting native async functions,\n    // not transpiled ones. There's also a prod check that we use to prevent\n    // async client components from crashing the app; the prod one works even\n    // for transpiled async functions. Neither mechanism is completely\n    // bulletproof but together they cover the most common cases.\n    const isAsyncFunction =\n      // $FlowIgnore[method-unbinding]\n      Object.prototype.toString.call(Component) === '[object AsyncFunction]' ||\n      // $FlowIgnore[method-unbinding]\n      Object.prototype.toString.call(Component) ===\n        '[object AsyncGeneratorFunction]';\n    if (isAsyncFunction) {\n      // Encountered an async Client Component. This is not yet supported.\n      const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\n      if (!didWarnAboutAsyncClientComponent.has(componentName)) {\n        didWarnAboutAsyncClientComponent.add(componentName);\n        console.error(\n          '%s is an async Client Component. ' +\n            'Only Server Components can be async at the moment. This error is often caused by accidentally ' +\n            \"adding `'use client'` to a module that was originally written \" +\n            'for the server.',\n          componentName === null\n            ? 'An unknown Component'\n            : `<${componentName}>`,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  throw new Error(\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps              ,\n  prevDeps                     ,\n)          {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  // $FlowFixMe[incompatible-use] found when upgrading Flow\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks                  (\n  current              ,\n  workInProgress       ,\n  Component                                   ,\n  props       ,\n  secondArg           ,\n  nextRenderLanes       ,\n)      {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes     )                 )\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n\n    warnIfAsyncClientComponent(Component);\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n  // thenableIndexCounter = 0;\n  // thenableState = null;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactSharedInternals.H = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactSharedInternals.H = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactSharedInternals.H = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactSharedInternals.H =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  // In Strict Mode, during development, user functions are double invoked to\n  // help detect side effects. The logic for how this is implemented for in\n  // hook components is a bit complex so let's break it down.\n  //\n  // We will invoke the entire component function twice. However, during the\n  // second invocation of the component, the hook state from the first\n  // invocation will be reused. That means things like `useMemo` functions won't\n  // run again, because the deps will match and the memoized result will\n  // be reused.\n  //\n  // We want memoized functions to run twice, too, so account for this, user\n  // functions are double invoked during the *first* invocation of the component\n  // function, and are *not* double invoked during the second incovation:\n  //\n  // - First execution of component function: user functions are double invoked\n  // - Second execution of component function (in Strict Mode, during\n  //   development): user functions are not double invoked.\n  //\n  // This is intentional for a few reasons; most importantly, it's because of\n  // how `use` works when something suspends: it reuses the promise that was\n  // passed during the first attempt. This is itself a form of memoization.\n  // We need to be able to memoize the reactive inputs to the `use` call using\n  // a hook (i.e. `useMemo`), which means, the reactive inputs to `use` must\n  // come from the same component invocation as the output.\n  //\n  // There are plenty of tests to ensure this behavior is correct.\n  const shouldDoubleRenderDEV =\n    __DEV__ && (workInProgress.mode & StrictLegacyMode) !== NoMode;\n\n  shouldDoubleInvokeUserFnsInHooksDEV = shouldDoubleRenderDEV;\n  let children = __DEV__\n    ? callComponentInDEV(Component, props, secondArg)\n    : Component(props, secondArg);\n  shouldDoubleInvokeUserFnsInHooksDEV = false;\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering until the component stabilizes (there are no more render\n    // phase updates).\n    children = renderWithHooksAgain(\n      workInProgress,\n      Component,\n      props,\n      secondArg,\n    );\n  }\n\n  if (shouldDoubleRenderDEV) {\n    // In development, components are invoked twice to help detect side effects.\n    setIsStrictModeForDevtools(true);\n    try {\n      children = renderWithHooksAgain(\n        workInProgress,\n        Component,\n        props,\n        secondArg,\n      );\n    } finally {\n      setIsStrictModeForDevtools(false);\n    }\n  }\n\n  finishRenderingHooks(current, workInProgress, Component);\n\n  return children;\n}\n\nfunction finishRenderingHooks                  (\n  current              ,\n  workInProgress       ,\n  Component                                   ,\n)       {\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n    // Stash the thenable state for use by DevTools.\n    if (workInProgress.dependencies === null) {\n      if (thenableState !== null) {\n        workInProgress.dependencies = {\n          lanes: NoLanes,\n          firstContext: null,\n          _debugThenableState: thenableState,\n        };\n      }\n    } else {\n      workInProgress.dependencies._debugThenableState = thenableState;\n    }\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactSharedInternals.H = ContextOnlyDispatcher;\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null     );\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n    if (\n      current !== null &&\n      (current.flags & StaticMaskEffect) !==\n        (workInProgress.flags & StaticMaskEffect) &&\n      // Disable this warning in legacy mode, because legacy Suspense is weird\n      // and creates false positives. To make this work in legacy mode, we'd\n      // need to mark fibers that commit in an incomplete state, somehow. For\n      // now I'll disable the warning that most of the bugs that would trigger\n      // it are either exclusive to concurrent mode or exist in both.\n      (disableLegacyMode || (current.mode & ConcurrentMode) !== NoMode)\n    ) {\n      console.error(\n        'Internal React error: Expected static flag was missing. Please ' +\n          'notify the React team.',\n      );\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n  // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  thenableIndexCounter = 0;\n  thenableState = null;\n\n  if (didRenderTooFewHooks) {\n    throw new Error(\n      'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n        'early return statement.',\n    );\n  }\n\n  if (current !== null) {\n    if (!checkIfWorkInProgressReceivedUpdate()) {\n      // If there were no changes to props or state, we need to check if there\n      // was a context change. We didn't already do this because there's no\n      // 1:1 correspondence between dependencies and hooks. Although, because\n      // there almost always is in the common case (`readContext` is an\n      // internal API), we could compare in there. OTOH, we only hit this case\n      // if everything else bails out, so on the whole it might be better to\n      // keep the comparison out of the common path.\n      const currentDependencies = current.dependencies;\n      if (\n        currentDependencies !== null &&\n        checkIfContextChanged(currentDependencies)\n      ) {\n        markWorkInProgressReceivedUpdate();\n      }\n    }\n  }\n\n  if (__DEV__) {\n    if (checkIfUseWrappedInTryCatch()) {\n      const componentName =\n        getComponentNameFromFiber(workInProgress) || 'Unknown';\n      if (\n        !didWarnAboutUseWrappedInTryCatch.has(componentName) &&\n        // This warning also fires if you suspend with `use` inside an\n        // async component. Since we warn for that above, we'll silence this\n        // second warning by checking here.\n        !didWarnAboutAsyncClientComponent.has(componentName)\n      ) {\n        didWarnAboutUseWrappedInTryCatch.add(componentName);\n        console.error(\n          '`use` was called from inside a try/catch block. This is not allowed ' +\n            'and can lead to unexpected behavior. To handle errors triggered ' +\n            'by `use`, wrap your component in a error boundary.',\n        );\n      }\n    }\n  }\n}\n\nexport function replaySuspendedComponentWithHooks                  (\n  current              ,\n  workInProgress       ,\n  Component                                   ,\n  props       ,\n  secondArg           ,\n)      {\n  // This function is used to replay a component that previously suspended,\n  // after its data resolves.\n  //\n  // It's a simplified version of renderWithHooks, but it doesn't need to do\n  // most of the set up work because they weren't reset when we suspended; they\n  // only get reset when the component either completes (finishRenderingHooks)\n  // or unwinds (resetHooksOnUnwind).\n  if (__DEV__) {\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n  // renderWithHooks only resets the updateQueue but does not clear it, since\n  // it needs to work for both this case (suspense replay) as well as for double\n  // renders in dev and setState-in-render. However, for the suspense replay case\n  // we need to reset the updateQueue to correctly handle unmount effects, so we\n  // clear the queue here\n  workInProgress.updateQueue = null;\n  const children = renderWithHooksAgain(\n    workInProgress,\n    Component,\n    props,\n    secondArg,\n  );\n  finishRenderingHooks(current, workInProgress, Component);\n  return children;\n}\n\nfunction renderWithHooksAgain                  (\n  workInProgress       ,\n  Component                                   ,\n  props       ,\n  secondArg           ,\n)      {\n  // This is used to perform another render pass. It's used when setState is\n  // called during render, and for double invoking components in Strict Mode\n  // during development.\n  //\n  // The state from the previous pass is reused whenever possible. So, state\n  // updates that were already processed are not processed again, and memoized\n  // functions (`useMemo`) are not invoked again.\n  //\n  // Keep rendering in a loop for as long as render phase updates continue to\n  // be scheduled. Use a counter to prevent infinite loops.\n\n  currentlyRenderingFiber = workInProgress;\n\n  let numberOfReRenders         = 0;\n  let children;\n  do {\n    if (didScheduleRenderPhaseUpdateDuringThisPass) {\n      // It's possible that a use() value depended on a state that was updated in\n      // this rerender, so we need to watch for different thenables this time.\n      thenableState = null;\n    }\n    thenableIndexCounter = 0;\n    didScheduleRenderPhaseUpdateDuringThisPass = false;\n\n    if (numberOfReRenders >= RE_RENDER_LIMIT) {\n      throw new Error(\n        'Too many re-renders. React limits the number of renders to prevent ' +\n          'an infinite loop.',\n      );\n    }\n\n    numberOfReRenders += 1;\n    if (__DEV__) {\n      // Even when hot reloading, allow dependencies to stabilize\n      // after first render to prevent infinite render phase updates.\n      ignorePreviousDependencies = false;\n    }\n\n    // Start over from the beginning of the list\n    currentHook = null;\n    workInProgressHook = null;\n\n    if (workInProgress.updateQueue != null) {\n      resetFunctionComponentUpdateQueue((workInProgress.updateQueue     ));\n    }\n\n    if (__DEV__) {\n      // Also validate hook order for cascading updates.\n      hookTypesUpdateIndexDev = -1;\n    }\n\n    ReactSharedInternals.H = __DEV__\n      ? HooksDispatcherOnRerenderInDEV\n      : HooksDispatcherOnRerender;\n\n    children = __DEV__\n      ? callComponentInDEV(Component, props, secondArg)\n      : Component(props, secondArg);\n  } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  return children;\n}\n\nexport function renderTransitionAwareHostComponentWithHooks(\n  current              ,\n  workInProgress       ,\n  lanes       ,\n)                   {\n  return renderWithHooks(\n    current,\n    workInProgress,\n    TransitionAwareHostComponent,\n    null,\n    null,\n    lanes,\n  );\n}\n\nexport function TransitionAwareHostComponent()                   {\n  const dispatcher      = ReactSharedInternals.H;\n  const [maybeThenable] = dispatcher.useState();\n  let nextState;\n  if (typeof maybeThenable.then === 'function') {\n    const thenable                             = (maybeThenable     );\n    nextState = useThenable(thenable);\n  } else {\n    const status                   = maybeThenable;\n    nextState = status;\n  }\n\n  // The \"reset state\" is an object. If it changes, that means something\n  // requested that we reset the form.\n  const [nextResetState] = dispatcher.useState();\n  const prevResetState =\n    currentHook !== null ? currentHook.memoizedState : null;\n  if (prevResetState !== nextResetState) {\n    // Schedule a form reset\n    currentlyRenderingFiber.flags |= FormReset;\n  }\n\n  return nextState;\n}\n\nexport function checkDidRenderIdHook()          {\n  // This should be called immediately after every renderWithHooks call.\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n  // separate function to avoid using an array tuple.\n  const didRenderIdHook = localIdCounter !== 0;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\n\nexport function bailoutHooks(\n  current       ,\n  workInProgress       ,\n  lanes       ,\n)       {\n  workInProgress.updateQueue = current.updateQueue;\n  // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n  if (__DEV__ && (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n    workInProgress.flags &= ~(\n      MountPassiveDevEffect |\n      MountLayoutDevEffect |\n      PassiveEffect |\n      UpdateEffect\n    );\n  } else {\n    workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  }\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow()       {\n  // This is called immediaetly after a throw. It shouldn't reset the entire\n  // module state, because the work loop might decide to replay the component\n  // again without rewinding.\n  //\n  // It should only reset things like the current dispatcher, to prevent hooks\n  // from being called outside of a component.\n  currentlyRenderingFiber = (null     );\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactSharedInternals.H = ContextOnlyDispatcher;\n}\n\nexport function resetHooksOnUnwind(workInProgress       )       {\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook              = workInProgress.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null     );\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n  localIdCounter = 0;\n  thenableIndexCounter = 0;\n  thenableState = null;\n}\n\nfunction mountWorkInProgressHook()       {\n  const hook       = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook()       {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base.\n  let nextCurrentHook             ;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook             ;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    if (nextCurrentHook === null) {\n      const currentFiber = currentlyRenderingFiber.alternate;\n      if (currentFiber === null) {\n        // This is the initial render. This branch is reached when the component\n        // suspends, resumes, then renders an additional hook.\n        // Should never be reached because we should switch to the mount dispatcher first.\n        throw new Error(\n          'Update hook called on initial render. This is likely a bug in React. Please file an issue.',\n        );\n      } else {\n        // This is an update. We should always have a current hook.\n        throw new Error('Rendered more hooks than during the previous render.');\n      }\n    }\n\n    currentHook = nextCurrentHook;\n\n    const newHook       = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue()                               {\n  return {\n    lastEffect: null,\n    events: null,\n    stores: null,\n    memoCache: null,\n  };\n}\n\nfunction resetFunctionComponentUpdateQueue(\n  updateQueue                              ,\n)       {\n  updateQueue.lastEffect = null;\n  updateQueue.events = null;\n  updateQueue.stores = null;\n  if (updateQueue.memoCache != null) {\n    // NOTE: this function intentionally does not reset memoCache data. We reuse updateQueue for the memo\n    // cache to avoid increasing the size of fibers that don't need a cache, but we don't want to reset\n    // the cache when other properties are reset.\n    updateQueue.memoCache.index = 0;\n  }\n}\n\nfunction useThenable   (thenable             )    {\n  // Track the position of the thenable within this fiber.\n  const index = thenableIndexCounter;\n  thenableIndexCounter += 1;\n  if (thenableState === null) {\n    thenableState = createThenableState();\n  }\n  const result = trackUsedThenable(thenableState, thenable, index);\n\n  // When something suspends with `use`, we replay the component with the\n  // \"re-render\" dispatcher instead of the \"mount\" or \"update\" dispatcher.\n  //\n  // But if there are additional hooks that occur after the `use` invocation\n  // that suspended, they wouldn't have been processed during the previous\n  // attempt. So after we invoke `use` again, we may need to switch from the\n  // \"re-render\" dispatcher back to the \"mount\" or \"update\" dispatcher. That's\n  // what the following logic accounts for.\n  //\n  // TODO: Theoretically this logic only needs to go into the rerender\n  // dispatcher. Could optimize, but probably not be worth it.\n\n  // This is the same logic as in updateWorkInProgressHook.\n  const workInProgressFiber = currentlyRenderingFiber;\n  const nextWorkInProgressHook =\n    workInProgressHook === null\n      ? // We're at the beginning of the list, so read from the first hook from\n        // the fiber.\n        workInProgressFiber.memoizedState\n      : workInProgressHook.next;\n\n  if (nextWorkInProgressHook !== null) {\n    // There are still hooks remaining from the previous attempt.\n  } else {\n    // There are no remaining hooks from the previous attempt. We're no longer\n    // in \"re-render\" mode. Switch to the normal mount or update dispatcher.\n    //\n    // This is the same as the logic in renderWithHooks, except we don't bother\n    // to track the hook types debug information in this case (sufficient to\n    // only do that when nothing suspends).\n    const currentFiber = workInProgressFiber.alternate;\n    if (__DEV__) {\n      if (currentFiber !== null && currentFiber.memoizedState !== null) {\n        ReactSharedInternals.H = HooksDispatcherOnUpdateInDEV;\n      } else {\n        ReactSharedInternals.H = HooksDispatcherOnMountInDEV;\n      }\n    } else {\n      ReactSharedInternals.H =\n        currentFiber === null || currentFiber.memoizedState === null\n          ? HooksDispatcherOnMount\n          : HooksDispatcherOnUpdate;\n    }\n  }\n  return result;\n}\n\nfunction use   (usable           )    {\n  if (usable !== null && typeof usable === 'object') {\n    // $FlowFixMe[method-unbinding]\n    if (typeof usable.then === 'function') {\n      // This is a thenable.\n      const thenable              = (usable     );\n      return useThenable(thenable);\n    } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {\n      const context                  = (usable     );\n      return readContext(context);\n    }\n  }\n\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  throw new Error('An unsupported type was passed to use(): ' + String(usable));\n}\n\nfunction useMemoCache(size        )               {\n  let memoCache = null;\n  // Fast-path, load memo cache from wip fiber if already prepared\n  let updateQueue                                      =\n    (currentlyRenderingFiber.updateQueue     );\n  if (updateQueue !== null) {\n    memoCache = updateQueue.memoCache;\n  }\n  // Otherwise clone from the current fiber\n  if (memoCache == null) {\n    const current               = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      const currentUpdateQueue                                      =\n        (current.updateQueue     );\n      if (currentUpdateQueue !== null) {\n        const currentMemoCache             = currentUpdateQueue.memoCache;\n        if (currentMemoCache != null) {\n          memoCache = {\n            // When enableNoCloningMemoCache is enabled, instead of treating the\n            // cache as copy-on-write, like we do with fibers, we share the same\n            // cache instance across all render attempts, even if the component\n            // is interrupted before it commits.\n            //\n            // If an update is interrupted, either because it suspended or\n            // because of another update, we can reuse the memoized computations\n            // from the previous attempt. We can do this because the React\n            // Compiler performs atomic writes to the memo cache, i.e. it will\n            // not record the inputs to a memoization without also recording its\n            // output.\n            //\n            // This gives us a form of \"resuming\" within components and hooks.\n            //\n            // This only works when updating a component that already mounted.\n            // It has no impact during initial render, because the memo cache is\n            // stored on the fiber, and since we have not implemented resuming\n            // for fibers, it's always a fresh memo cache, anyway.\n            //\n            // However, this alone is pretty useful \u2014 it happens whenever you\n            // update the UI with fresh data after a mutation/action, which is\n            // extremely common in a Suspense-driven (e.g. RSC or Relay) app.\n            data: enableNoCloningMemoCache\n              ? currentMemoCache.data\n              : // Clone the memo cache before each render (copy-on-write)\n                currentMemoCache.data.map(array => array.slice()),\n            index: 0,\n          };\n        }\n      }\n    }\n  }\n  // Finally fall back to allocating a fresh instance of the cache\n  if (memoCache == null) {\n    memoCache = {\n      data: [],\n      index: 0,\n    };\n  }\n  if (updateQueue === null) {\n    updateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = updateQueue;\n  }\n  updateQueue.memoCache = memoCache;\n\n  let data = memoCache.data[memoCache.index];\n  if (data === undefined || (__DEV__ && ignorePreviousDependencies)) {\n    data = memoCache.data[memoCache.index] = new Array(size);\n    for (let i = 0; i < size; i++) {\n      data[i] = REACT_MEMO_CACHE_SENTINEL;\n    }\n  } else if (data.length !== size) {\n    // TODO: consider warning or throwing here\n    if (__DEV__) {\n      console.error(\n        'Expected a constant size argument for each invocation of useMemoCache. ' +\n          'The previous cache was allocated with size %s but size %s was requested.',\n        data.length,\n        size,\n      );\n    }\n  }\n  memoCache.index++;\n  return data;\n}\n\nfunction basicStateReducer   (state   , action                     )    {\n  // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer         (\n  reducer             ,\n  initialArg   ,\n  init         ,\n)                   {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n    if (shouldDoubleInvokeUserFnsInHooksDEV) {\n      setIsStrictModeForDevtools(true);\n      try {\n        init(initialArg);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  } else {\n    initialState = ((initialArg     )   );\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue                    = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState     ),\n  };\n  hook.queue = queue;\n  const dispatch              = (queue.dispatch = (dispatchReducerAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  )     ));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer         (\n  reducer             ,\n  initialArg   ,\n  init         ,\n)                   {\n  const hook = updateWorkInProgressHook();\n  return updateReducerImpl(hook, ((currentHook     )      ), reducer);\n}\n\nfunction updateReducerImpl      (\n  hook      ,\n  current      ,\n  reducer             ,\n)                   {\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. You are likely calling Hooks conditionally, ' +\n        'which is not allowed. (https://react.dev/link/invalid-hook-call)',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = hook.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  const baseState = hook.baseState;\n  if (baseQueue === null) {\n    // If there are no pending updates, then the memoized state should be the\n    // same as the base state. Currently these only diverge in the case of\n    // useOptimistic, because useOptimistic accepts a new baseState on\n    // every render.\n    hook.memoizedState = baseState;\n    // We don't need to call markWorkInProgressReceivedUpdate because\n    // baseState is derived from other reactive values.\n  } else {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast                      = null;\n    let update = first;\n    let didReadFromEntangledAsyncAction = false;\n    do {\n      // An extra OffscreenLane bit is added to updates that were made to\n      // a hidden tree, so that we can distinguish them from updates that were\n      // already there when the tree was hidden.\n      const updateLane = removeLanes(update.lane, OffscreenLane);\n      const isHiddenUpdate = updateLane !== update.lane;\n\n      // Check if this update was made while the tree was hidden. If so, then\n      // it's not a \"base\" update and we should disregard the extra base lanes\n      // that were added to renderLanes when we entered the Offscreen tree.\n      let shouldSkipUpdate = isHiddenUpdate\n        ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\n        : !isSubsetOfLanes(renderLanes, updateLane);\n\n      if (enableGestureTransition && updateLane === GestureLane) {\n        // This is a gesture optimistic update. It should only be considered as part of the\n        // rendered state while rendering the gesture lane and if the rendering the associated\n        // ScheduledGesture.\n        const scheduledGesture = update.gesture;\n        if (scheduledGesture !== null) {\n          if (scheduledGesture.count === 0) {\n            // This gesture has already been cancelled. We can clean up this update.\n            update = update.next;\n            continue;\n          } else if (!isGestureRender(renderLanes)) {\n            shouldSkipUpdate = true;\n          } else {\n            const root                   = getWorkInProgressRoot();\n            if (root === null) {\n              throw new Error(\n                'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n              );\n            }\n            // We assume that the currently rendering gesture is the one first in the queue.\n            shouldSkipUpdate = root.pendingGestures !== scheduledGesture;\n          }\n        }\n      }\n\n      if (shouldSkipUpdate) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone               = {\n          lane: updateLane,\n          revertLane: update.revertLane,\n          gesture: update.gesture,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: (null     ),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        // Check if this is an optimistic update.\n        const revertLane = update.revertLane;\n        if (revertLane === NoLane) {\n          // This is not an optimistic update, and we're going to apply it now.\n          // But, if there were earlier updates that were skipped, we need to\n          // leave this update in the queue so it can be rebased later.\n          if (newBaseQueueLast !== null) {\n            const clone               = {\n              // This update is going to be committed so we never want uncommit\n              // it. Using NoLane works because 0 is a subset of all bitmasks, so\n              // this will never be skipped by the check above.\n              lane: NoLane,\n              revertLane: NoLane,\n              gesture: null,\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: (null     ),\n            };\n            newBaseQueueLast = newBaseQueueLast.next = clone;\n          }\n\n          // Check if this update is part of a pending async action. If so,\n          // we'll need to suspend until the action has finished, so that it's\n          // batched together with future updates in the same action.\n          if (updateLane === peekEntangledActionLane()) {\n            didReadFromEntangledAsyncAction = true;\n          }\n        } else {\n          // This is an optimistic update. If the \"revert\" priority is\n          // sufficient, don't apply the update. Otherwise, apply the update,\n          // but leave it in the queue so it can be either reverted or\n          // rebased in a subsequent render.\n          if (isSubsetOfLanes(renderLanes, revertLane)) {\n            // The transition that this optimistic update is associated with\n            // has finished. Pretend the update doesn't exist by skipping\n            // over it.\n            update = update.next;\n\n            // Check if this update is part of a pending async action. If so,\n            // we'll need to suspend until the action has finished, so that it's\n            // batched together with future updates in the same action.\n            if (revertLane === peekEntangledActionLane()) {\n              didReadFromEntangledAsyncAction = true;\n            }\n            continue;\n          } else {\n            const clone               = {\n              // Once we commit an optimistic update, we shouldn't uncommit it\n              // until the transition it is associated with has finished\n              // (represented by revertLane). Using NoLane here works because 0\n              // is a subset of all bitmasks, so this will never be skipped by\n              // the check above.\n              lane: NoLane,\n              // Reuse the same revertLane so we know when the transition\n              // has finished.\n              revertLane: update.revertLane,\n              gesture: null, // If it commits, it's no longer a gesture update.\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: (null     ),\n            };\n            if (newBaseQueueLast === null) {\n              newBaseQueueFirst = newBaseQueueLast = clone;\n              newBaseState = newState;\n            } else {\n              newBaseQueueLast = newBaseQueueLast.next = clone;\n            }\n            // Update the remaining priority in the queue.\n            // TODO: Don't need to accumulate this. Instead, we can remove\n            // renderLanes from the original lanes.\n            currentlyRenderingFiber.lanes = mergeLanes(\n              currentlyRenderingFiber.lanes,\n              revertLane,\n            );\n            markSkippedUpdateLanes(revertLane);\n          }\n        }\n\n        // Process this update.\n        const action = update.action;\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          reducer(newState, action);\n        }\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = ((update.eagerState     )   );\n        } else {\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst     );\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n\n      // Check if this update is part of a pending async action. If so, we'll\n      // need to suspend until the action has finished, so that it's batched\n      // together with future updates in the same action.\n      // TODO: Once we support hooks inside useMemo (or an equivalent\n      // memoization boundary like Forget), hoist this logic so that it only\n      // suspends if the memo boundary produces a new value.\n      if (didReadFromEntangledAsyncAction) {\n        const entangledActionThenable = peekEntangledActionThenable();\n        if (entangledActionThenable !== null) {\n          // TODO: Instead of the throwing the thenable directly, throw a\n          // special object like `use` does so we can detect if it's captured\n          // by userspace.\n          throw entangledActionThenable;\n        }\n      }\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  const dispatch              = (queue.dispatch     );\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer         (\n  reducer             ,\n  initialArg   ,\n  init         ,\n)                   {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. You are likely calling Hooks conditionally, ' +\n        'which is not allowed. (https://react.dev/link/invalid-hook-call)',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch              = (queue.dispatch     );\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\nfunction mountSyncExternalStore   (\n  subscribe                            ,\n  getSnapshot         ,\n  getServerSnapshot          ,\n)    {\n  const fiber = currentlyRenderingFiber;\n  const hook = mountWorkInProgressHook();\n\n  let nextSnapshot;\n  const isHydrating = getIsHydrating();\n  if (isHydrating) {\n    if (getServerSnapshot === undefined) {\n      throw new Error(\n        'Missing getServerSnapshot, which is required for ' +\n          'server-rendered content. Will revert to client rendering.',\n      );\n    }\n    nextSnapshot = getServerSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        if (nextSnapshot !== getServerSnapshot()) {\n          console.error(\n            'The result of getServerSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n  } else {\n    nextSnapshot = getSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        const cachedSnapshot = getSnapshot();\n        if (!is(nextSnapshot, cachedSnapshot)) {\n          console.error(\n            'The result of getSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n    const root                   = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    const rootRenderLanes = getWorkInProgressRootRenderLanes();\n    if (!includesBlockingLane(rootRenderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  hook.memoizedState = nextSnapshot;\n  const inst                   = {\n    value: nextSnapshot,\n    getSnapshot,\n  };\n  hook.queue = inst;\n\n  // Schedule an effect to subscribe to the store.\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\n\n  // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n  fiber.flags |= PassiveEffect;\n  pushSimpleEffect(\n    HookHasEffect | HookPassive,\n    createEffectInstance(),\n    updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n    null,\n  );\n\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore   (\n  subscribe                            ,\n  getSnapshot         ,\n  getServerSnapshot          ,\n)    {\n  const fiber = currentlyRenderingFiber;\n  const hook = updateWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  let nextSnapshot;\n  const isHydrating = getIsHydrating();\n  if (isHydrating) {\n    // Needed for strict mode double render\n    if (getServerSnapshot === undefined) {\n      throw new Error(\n        'Missing getServerSnapshot, which is required for ' +\n          'server-rendered content. Will revert to client rendering.',\n      );\n    }\n    nextSnapshot = getServerSnapshot();\n  } else {\n    nextSnapshot = getSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        const cachedSnapshot = getSnapshot();\n        if (!is(nextSnapshot, cachedSnapshot)) {\n          console.error(\n            'The result of getSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n  }\n  const prevSnapshot = (currentHook || hook).memoizedState;\n  const snapshotChanged = !is(prevSnapshot, nextSnapshot);\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n  const inst = hook.queue;\n\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n    subscribe,\n  ]);\n\n  // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n  if (\n    inst.getSnapshot !== getSnapshot ||\n    snapshotChanged ||\n    // Check if the subscribe function changed. We can save some memory by\n    // checking whether we scheduled a subscription effect above.\n    (workInProgressHook !== null &&\n      workInProgressHook.memoizedState.tag & HookHasEffect)\n  ) {\n    fiber.flags |= PassiveEffect;\n    pushSimpleEffect(\n      HookHasEffect | HookPassive,\n      createEffectInstance(),\n      updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n      null,\n    );\n\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    const root                   = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    if (!isHydrating && !includesBlockingLane(renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck   (\n  fiber       ,\n  getSnapshot         ,\n  renderedSnapshot   ,\n)       {\n  fiber.flags |= StoreConsistency;\n  const check                           = {\n    getSnapshot,\n    value: renderedSnapshot,\n  };\n  let componentUpdateQueue                                      =\n    (currentlyRenderingFiber.updateQueue     );\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue     );\n    componentUpdateQueue.stores = [check];\n  } else {\n    const stores = componentUpdateQueue.stores;\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance   (\n  fiber       ,\n  inst                  ,\n  nextSnapshot   ,\n  getSnapshot         ,\n)       {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot;\n\n  // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    // We intentionally don't log update times and stacks here because this\n    // was not an external trigger but rather an internal one.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore   (\n  fiber       ,\n  inst                  ,\n  subscribe                            ,\n)      {\n  const handleStoreChange = () => {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      startUpdateTimerByLane(SyncLane, 'updateSyncExternalStore()');\n      forceStoreRerender(fiber);\n    }\n  };\n  // Subscribe to the store and return a clean-up function.\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged   (inst                  )          {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber       ) {\n  const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, SyncLane);\n  }\n}\n\nfunction mountStateImpl   (initialState               )       {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    const initialStateInitializer = initialState;\n    // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n    initialState = initialStateInitializer();\n    if (shouldDoubleInvokeUserFnsInHooksDEV) {\n      setIsStrictModeForDevtools(true);\n      try {\n        // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n        initialStateInitializer();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue                                      = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState     ),\n  };\n  hook.queue = queue;\n  return hook;\n}\n\nfunction mountState   (\n  initialState               ,\n)                                     {\n  const hook = mountStateImpl(initialState);\n  const queue = hook.queue;\n  const dispatch                                = (dispatchSetState.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  )     );\n  queue.dispatch = dispatch;\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState   (\n  initialState               ,\n)                                     {\n  return updateReducer(basicStateReducer, initialState);\n}\n\nfunction rerenderState   (\n  initialState               ,\n)                                     {\n  return rerenderReducer(basicStateReducer, initialState);\n}\n\nfunction mountOptimistic      (\n  passthrough   ,\n  reducer              ,\n)                   {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = hook.baseState = passthrough;\n  const queue                    = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: null,\n    // Optimistic state does not use the eager update optimization.\n    lastRenderedReducer: null,\n    lastRenderedState: null,\n  };\n  hook.queue = queue;\n  // This is different than the normal setState function.\n  const dispatch            = (dispatchOptimisticSetState.bind(\n    null,\n    currentlyRenderingFiber,\n    true,\n    queue,\n  )     );\n  queue.dispatch = dispatch;\n  return [passthrough, dispatch];\n}\n\nfunction updateOptimistic      (\n  passthrough   ,\n  reducer              ,\n)                   {\n  const hook = updateWorkInProgressHook();\n  return updateOptimisticImpl(\n    hook,\n    ((currentHook     )      ),\n    passthrough,\n    reducer,\n  );\n}\n\nfunction updateOptimisticImpl      (\n  hook      ,\n  current             ,\n  passthrough   ,\n  reducer              ,\n)                   {\n  // Optimistic updates are always rebased on top of the latest value passed in\n  // as an argument. It's called a passthrough because if there are no pending\n  // updates, it will be returned as-is.\n  //\n  // Reset the base state to the passthrough. Future updates will be applied\n  // on top of this.\n  hook.baseState = passthrough;\n\n  // If a reducer is not provided, default to the same one used by useState.\n  const resolvedReducer              =\n    typeof reducer === 'function' ? reducer : (basicStateReducer     );\n\n  return updateReducerImpl(hook, ((currentHook     )      ), resolvedReducer);\n}\n\nfunction rerenderOptimistic      (\n  passthrough   ,\n  reducer              ,\n)                   {\n  // Unlike useState, useOptimistic doesn't support render phase updates.\n  // Also unlike useState, we need to replay all pending updates again in case\n  // the passthrough value changed.\n  //\n  // So instead of a forked re-render implementation that knows how to handle\n  // render phase udpates, we can use the same implementation as during a\n  // regular mount or update.\n  const hook = updateWorkInProgressHook();\n\n  if (currentHook !== null) {\n    // This is an update. Process the update queue.\n    return updateOptimisticImpl(\n      hook,\n      ((currentHook     )      ),\n      passthrough,\n      reducer,\n    );\n  }\n\n  // This is a mount. No updates to process.\n\n  // Reset the base state to the passthrough. Future updates will be applied\n  // on top of this.\n  hook.baseState = passthrough;\n  const dispatch = hook.queue.dispatch;\n  return [passthrough, dispatch];\n}\n\n// useActionState actions run sequentially, because each action receives the\n// previous state as an argument. We store pending actions on a queue.\n                               \n                                                                           \n                                         \n                    \n                                                  \n                        \n                                                                            \n                             \n                                                                           \n                    \n                                        \n                                                                              \n                                      \n                                             \n  \n\n                                   \n             \n                                                                     \n                               \n                                                                    \n                                   \n\n                                                                             \n                                                                               \n                                                                          \n                                                                              \n                        \n\n                                                                             \n              \n                                       \n                                               \n             \n              \n                               \n  \n\nfunction dispatchActionState      (\n  fiber       ,\n  actionQueue                        ,\n  setPendingState                 ,\n  setState                                      ,\n  payload   ,\n)       {\n  if (isRenderPhaseUpdate(fiber)) {\n    throw new Error('Cannot update form state while rendering.');\n  }\n\n  const currentAction = actionQueue.action;\n  if (currentAction === null) {\n    // An earlier action errored. Subsequent actions should not run.\n    return;\n  }\n\n  const actionNode                             = {\n    payload,\n    action: currentAction,\n    next: (null     ), // circular\n\n    isTransition: true,\n\n    status: 'pending',\n    value: null,\n    reason: null,\n    listeners: [],\n    then(listener) {\n      // We know the only thing that subscribes to these promises is `use` so\n      // this implementation is simpler than a generic thenable. E.g. we don't\n      // bother to check if the thenable is still pending because `use` already\n      // does that.\n      actionNode.listeners.push(listener);\n    },\n  };\n\n  // Check if we're inside a transition. If so, we'll need to restore the\n  // transition context when the action is run.\n  const prevTransition = ReactSharedInternals.T;\n  if (prevTransition !== null) {\n    // Optimistically update the pending state, similar to useTransition.\n    // This will be reverted automatically when all actions are finished.\n    setPendingState(true);\n    // `actionNode` is a thenable that resolves to the return value of\n    // the action.\n    setState(actionNode);\n  } else {\n    // This is not a transition.\n    actionNode.isTransition = false;\n    setState(actionNode);\n  }\n\n  const last = actionQueue.pending;\n  if (last === null) {\n    // There are no pending actions; this is the first one. We can run\n    // it immediately.\n    actionNode.next = actionQueue.pending = actionNode;\n    runActionStateAction(actionQueue, actionNode);\n  } else {\n    // There's already an action running. Add to the queue.\n    const first = last.next;\n    actionNode.next = first;\n    actionQueue.pending = last.next = actionNode;\n  }\n}\n\nfunction runActionStateAction      (\n  actionQueue                        ,\n  node                            ,\n) {\n  // `node.action` represents the action function at the time it was dispatched.\n  // If this action was queued, it might be stale, i.e. it's not necessarily the\n  // most current implementation of the action, stored on `actionQueue`. This is\n  // intentional. The conceptual model for queued actions is that they are\n  // queued in a remote worker; the dispatch happens immediately, only the\n  // execution is delayed.\n  const action = node.action;\n  const payload = node.payload;\n  const prevState = actionQueue.state;\n\n  if (node.isTransition) {\n    // The original dispatch was part of a transition. We restore its\n    // transition context here.\n\n    // This is a fork of startTransition\n    const prevTransition = ReactSharedInternals.T;\n    const currentTransition             = ({}     );\n    if (enableViewTransition) {\n      currentTransition.types =\n        prevTransition !== null\n          ? // If we're a nested transition, we should use the same set as the parent\n            // since we're conceptually always joined into the same entangled transition.\n            // In practice, this only matters if we add transition types in the inner\n            // without setting state. In that case, the inner transition can finish\n            // without waiting for the outer.\n            prevTransition.types\n          : null;\n    }\n    if (enableGestureTransition) {\n      currentTransition.gesture = null;\n    }\n    if (enableTransitionTracing) {\n      currentTransition.name = null;\n      currentTransition.startTime = -1;\n    }\n    if (__DEV__) {\n      currentTransition._updatedFibers = new Set();\n    }\n    ReactSharedInternals.T = currentTransition;\n    try {\n      const returnValue = action(prevState, payload);\n      const onStartTransitionFinish = ReactSharedInternals.S;\n      if (onStartTransitionFinish !== null) {\n        onStartTransitionFinish(currentTransition, returnValue);\n      }\n      handleActionReturnValue(actionQueue, node, returnValue);\n    } catch (error) {\n      onActionError(actionQueue, node, error);\n    } finally {\n      if (prevTransition !== null && currentTransition.types !== null) {\n        // If we created a new types set in the inner transition, we transfer it to the parent\n        // since they should share the same set. They're conceptually entangled.\n        if (__DEV__) {\n          if (\n            prevTransition.types !== null &&\n            prevTransition.types !== currentTransition.types\n          ) {\n            // Just assert that assumption holds that we're not overriding anything.\n            console.error(\n              'We expected inner Transitions to have transferred the outer types set and ' +\n                'that you cannot add to the outer Transition while inside the inner.' +\n                'This is a bug in React.',\n            );\n          }\n        }\n        prevTransition.types = currentTransition.types;\n      }\n      ReactSharedInternals.T = prevTransition;\n\n      if (__DEV__) {\n        if (prevTransition === null && currentTransition._updatedFibers) {\n          const updatedFibersCount = currentTransition._updatedFibers.size;\n          currentTransition._updatedFibers.clear();\n          if (updatedFibersCount > 10) {\n            console.warn(\n              'Detected a large number of updates inside startTransition. ' +\n                'If this is due to a subscription please re-write it to use React provided hooks. ' +\n                'Otherwise concurrent mode guarantees are off the table.',\n            );\n          }\n        }\n      }\n    }\n  } else {\n    // The original dispatch was not part of a transition.\n    try {\n      const returnValue = action(prevState, payload);\n      handleActionReturnValue(actionQueue, node, returnValue);\n    } catch (error) {\n      onActionError(actionQueue, node, error);\n    }\n  }\n}\n\nfunction handleActionReturnValue      (\n  actionQueue                        ,\n  node                            ,\n  returnValue       ,\n) {\n  if (\n    returnValue !== null &&\n    typeof returnValue === 'object' &&\n    // $FlowFixMe[method-unbinding]\n    typeof returnValue.then === 'function'\n  ) {\n    const thenable = ((returnValue     )                      );\n    if (__DEV__) {\n      // Keep track of the number of async transitions still running so we can warn.\n      ReactSharedInternals.asyncTransitions++;\n      thenable.then(releaseAsyncTransition, releaseAsyncTransition);\n    }\n    // Attach a listener to read the return state of the action. As soon as\n    // this resolves, we can run the next action in the sequence.\n    thenable.then(\n      (nextState            ) => {\n        onActionSuccess(actionQueue, node, nextState);\n      },\n      (error       ) => onActionError(actionQueue, node, error),\n    );\n\n    if (__DEV__) {\n      if (!node.isTransition) {\n        console.error(\n          'An async function with useActionState was called outside of a transition. ' +\n            'This is likely not what you intended (for example, isPending will not update ' +\n            'correctly). Either call the returned function inside startTransition, or pass it ' +\n            'to an `action` or `formAction` prop.',\n        );\n      }\n    }\n  } else {\n    const nextState = ((returnValue     )            );\n    onActionSuccess(actionQueue, node, nextState);\n  }\n}\n\nfunction onActionSuccess      (\n  actionQueue                        ,\n  actionNode                            ,\n  nextState            ,\n) {\n  // The action finished running.\n  actionNode.status = 'fulfilled';\n  actionNode.value = nextState;\n  notifyActionListeners(actionNode);\n\n  actionQueue.state = nextState;\n\n  // Pop the action from the queue and run the next pending action, if there\n  // are any.\n  const last = actionQueue.pending;\n  if (last !== null) {\n    const first = last.next;\n    if (first === last) {\n      // This was the last action in the queue.\n      actionQueue.pending = null;\n    } else {\n      // Remove the first node from the circular queue.\n      const next = first.next;\n      last.next = next;\n\n      // Run the next action.\n      runActionStateAction(actionQueue, next);\n    }\n  }\n}\n\nfunction onActionError      (\n  actionQueue                        ,\n  actionNode                            ,\n  error       ,\n) {\n  // Mark all the following actions as rejected.\n  const last = actionQueue.pending;\n  actionQueue.pending = null;\n  if (last !== null) {\n    const first = last.next;\n    do {\n      actionNode.status = 'rejected';\n      actionNode.reason = error;\n      notifyActionListeners(actionNode);\n      actionNode = actionNode.next;\n    } while (actionNode !== first);\n  }\n\n  // Prevent subsequent actions from being dispatched.\n  actionQueue.action = null;\n}\n\nfunction notifyActionListeners      (actionNode                            ) {\n  // Notify React that the action has finished.\n  const listeners = actionNode.listeners;\n  for (let i = 0; i < listeners.length; i++) {\n    // This is always a React internal listener, so we don't need to worry\n    // about it throwing.\n    const listener = listeners[i];\n    listener();\n  }\n}\n\nfunction actionStateReducer   (oldState   , newState   )    {\n  return newState;\n}\n\nfunction mountActionState      (\n  action                      ,\n  initialStateProp            ,\n  permalink         ,\n)                                     {\n  let initialState             = initialStateProp;\n  if (getIsHydrating()) {\n    const root            = (getWorkInProgressRoot()     );\n    const ssrFormState = root.formState;\n    // If a formState option was passed to the root, there are form state\n    // markers that we need to hydrate. These indicate whether the form state\n    // matches this hook instance.\n    if (ssrFormState !== null) {\n      const isMatching = tryToClaimNextHydratableFormMarkerInstance(\n        currentlyRenderingFiber,\n      );\n      if (isMatching) {\n        initialState = ssrFormState[0];\n      }\n    }\n  }\n\n  // State hook. The state is stored in a thenable which is then unwrapped by\n  // the `use` algorithm during render.\n  const stateHook = mountWorkInProgressHook();\n  stateHook.memoizedState = stateHook.baseState = initialState;\n  // TODO: Typing this \"correctly\" results in recursion limit errors\n  // const stateQueue: UpdateQueue<S | Awaited<S>, S | Awaited<S>> = {\n  const stateQueue = {\n    pending: null,\n    lanes: NoLanes,\n    dispatch: (null     ),\n    lastRenderedReducer: actionStateReducer,\n    lastRenderedState: initialState,\n  };\n  stateHook.queue = stateQueue;\n  const setState                           = (dispatchSetState.bind(\n    null,\n    currentlyRenderingFiber,\n    ((stateQueue     )                                             ),\n  )     );\n  stateQueue.dispatch = setState;\n\n  // Pending state. This is used to store the pending state of the action.\n  // Tracked optimistically, like a transition pending state.\n  const pendingStateHook = mountStateImpl((false                             ));\n  const setPendingState                  = (dispatchOptimisticSetState.bind(\n    null,\n    currentlyRenderingFiber,\n    false,\n    ((pendingStateHook.queue     )              \n                     \n                     \n     ),\n  )     );\n\n  // Action queue hook. This is used to queue pending actions. The queue is\n  // shared between all instances of the hook. Similar to a regular state queue,\n  // but different because the actions are run sequentially, and they run in\n  // an event instead of during render.\n  const actionQueueHook = mountWorkInProgressHook();\n  const actionQueue                         = {\n    state: initialState,\n    dispatch: (null     ), // circular\n    action,\n    pending: null,\n  };\n  actionQueueHook.queue = actionQueue;\n  const dispatch = (dispatchActionState     ).bind(\n    null,\n    currentlyRenderingFiber,\n    actionQueue,\n    setPendingState,\n    setState,\n  );\n  actionQueue.dispatch = dispatch;\n\n  // Stash the action function on the memoized state of the hook. We'll use this\n  // to detect when the action function changes so we can update it in\n  // an effect.\n  actionQueueHook.memoizedState = action;\n\n  return [initialState, dispatch, false];\n}\n\nfunction updateActionState      (\n  action                      ,\n  initialState            ,\n  permalink         ,\n)                                     {\n  const stateHook = updateWorkInProgressHook();\n  const currentStateHook = ((currentHook     )      );\n  return updateActionStateImpl(\n    stateHook,\n    currentStateHook,\n    action,\n    initialState,\n    permalink,\n  );\n}\n\nfunction updateActionStateImpl      (\n  stateHook      ,\n  currentStateHook      ,\n  action                      ,\n  initialState            ,\n  permalink         ,\n)                                     {\n  const [actionResult] = updateReducerImpl                                  (\n    stateHook,\n    currentStateHook,\n    actionStateReducer,\n  );\n\n  const [isPending] = updateState(false);\n\n  // This will suspend until the action finishes.\n  let state            ;\n  if (\n    typeof actionResult === 'object' &&\n    actionResult !== null &&\n    // $FlowFixMe[method-unbinding]\n    typeof actionResult.then === 'function'\n  ) {\n    try {\n      state = useThenable(((actionResult     )                      ));\n    } catch (x) {\n      if (x === SuspenseException) {\n        // If we Suspend here, mark this separately so that we can track this\n        // as an Action in Profiling tools.\n        throw SuspenseActionException;\n      } else {\n        throw x;\n      }\n    }\n  } else {\n    state = (actionResult     );\n  }\n\n  const actionQueueHook = updateWorkInProgressHook();\n  const actionQueue = actionQueueHook.queue;\n  const dispatch = actionQueue.dispatch;\n\n  // Check if a new action was passed. If so, update it in an effect.\n  const prevAction = actionQueueHook.memoizedState;\n  if (action !== prevAction) {\n    currentlyRenderingFiber.flags |= PassiveEffect;\n    pushSimpleEffect(\n      HookHasEffect | HookPassive,\n      createEffectInstance(),\n      actionStateActionEffect.bind(null, actionQueue, action),\n      null,\n    );\n  }\n\n  return [state, dispatch, isPending];\n}\n\nfunction actionStateActionEffect      (\n  actionQueue                        ,\n  action                      ,\n)       {\n  actionQueue.action = action;\n}\n\nfunction rerenderActionState      (\n  action                      ,\n  initialState            ,\n  permalink         ,\n)                                     {\n  // Unlike useState, useActionState doesn't support render phase updates.\n  // Also unlike useState, we need to replay all pending updates again in case\n  // the passthrough value changed.\n  //\n  // So instead of a forked re-render implementation that knows how to handle\n  // render phase udpates, we can use the same implementation as during a\n  // regular mount or update.\n  const stateHook = updateWorkInProgressHook();\n  const currentStateHook = currentHook;\n\n  if (currentStateHook !== null) {\n    // This is an update. Process the update queue.\n    return updateActionStateImpl(\n      stateHook,\n      currentStateHook,\n      action,\n      initialState,\n      permalink,\n    );\n  }\n\n  updateWorkInProgressHook(); // State\n\n  // This is a mount. No updates to process.\n  const state             = stateHook.memoizedState;\n\n  const actionQueueHook = updateWorkInProgressHook();\n  const actionQueue = actionQueueHook.queue;\n  const dispatch = actionQueue.dispatch;\n\n  // This may have changed during the rerender.\n  actionQueueHook.memoizedState = action;\n\n  // For mount, pending is always false.\n  return [state, dispatch, false];\n}\n\nfunction pushSimpleEffect(\n  tag           ,\n  inst                ,\n  create                           ,\n  deps                            ,\n)         {\n  const effect         = {\n    tag,\n    create,\n    deps,\n    inst,\n    // Circular\n    next: (null     ),\n  };\n  return pushEffectImpl(effect);\n}\n\nfunction pushEffectImpl(effect        )         {\n  let componentUpdateQueue                                      =\n    (currentlyRenderingFiber.updateQueue     );\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue     );\n  }\n  const lastEffect = componentUpdateQueue.lastEffect;\n  if (lastEffect === null) {\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const firstEffect = lastEffect.next;\n    lastEffect.next = effect;\n    effect.next = firstEffect;\n    componentUpdateQueue.lastEffect = effect;\n  }\n  return effect;\n}\n\nfunction createEffectInstance()                 {\n  return {destroy: undefined};\n}\n\nfunction mountRef   (initialValue   )               {\n  const hook = mountWorkInProgressHook();\n  const ref = {current: initialValue};\n  hook.memoizedState = ref;\n  return ref;\n}\n\nfunction updateRef   (initialValue   )               {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(\n  fiberFlags       ,\n  hookFlags           ,\n  create                           ,\n  deps                            ,\n)       {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushSimpleEffect(\n    HookHasEffect | hookFlags,\n    createEffectInstance(),\n    create,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(\n  fiberFlags       ,\n  hookFlags           ,\n  create                           ,\n  deps                            ,\n)       {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const effect         = hook.memoizedState;\n  const inst = effect.inst;\n\n  // currentHook is null on initial mount when rerendering after a render phase\n  // state update or for strict mode.\n  if (currentHook !== null) {\n    if (nextDeps !== null) {\n      const prevEffect         = currentHook.memoizedState;\n      const prevDeps = prevEffect.deps;\n      // $FlowFixMe[incompatible-call] (@poteto)\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushSimpleEffect(\n          hookFlags,\n          inst,\n          create,\n          nextDeps,\n        );\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushSimpleEffect(\n    HookHasEffect | hookFlags,\n    inst,\n    create,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create                           ,\n  deps                            ,\n)       {\n  if (\n    __DEV__ &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode &&\n    (currentlyRenderingFiber.mode & NoStrictPassiveEffectsMode) === NoMode\n  ) {\n    mountEffectImpl(\n      MountPassiveDevEffect | PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  } else {\n    mountEffectImpl(\n      PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  }\n}\n\nfunction updateEffect(\n  create                           ,\n  deps                            ,\n)       {\n  updateEffectImpl(PassiveEffect, HookPassive, create, deps);\n}\n\nfunction useEffectEventImpl                                             (\n  payload                                       ,\n) {\n  currentlyRenderingFiber.flags |= UpdateEffect;\n  let componentUpdateQueue                                      =\n    (currentlyRenderingFiber.updateQueue     );\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue     );\n    componentUpdateQueue.events = [payload];\n  } else {\n    const events = componentUpdateQueue.events;\n    if (events === null) {\n      componentUpdateQueue.events = [payload];\n    } else {\n      events.push(payload);\n    }\n  }\n}\n\nfunction mountEvent                                             (\n  callback   ,\n)    {\n  const hook = mountWorkInProgressHook();\n  const ref = {impl: callback};\n  hook.memoizedState = ref;\n  // $FlowIgnore[incompatible-return]\n  return function eventFn() {\n    if (isInvalidExecutionContextForEventFunction()) {\n      throw new Error(\n        \"A function wrapped in useEffectEvent can't be called during rendering.\",\n      );\n    }\n    return ref.impl.apply(undefined, arguments);\n  };\n}\n\nfunction updateEvent                                             (\n  callback   ,\n)    {\n  const hook = updateWorkInProgressHook();\n  const ref = hook.memoizedState;\n  useEffectEventImpl({ref, nextImpl: callback});\n  // $FlowIgnore[incompatible-return]\n  return function eventFn() {\n    if (isInvalidExecutionContextForEventFunction()) {\n      throw new Error(\n        \"A function wrapped in useEffectEvent can't be called during rendering.\",\n      );\n    }\n    return ref.impl.apply(undefined, arguments);\n  };\n}\n\nfunction mountInsertionEffect(\n  create                           ,\n  deps                            ,\n)       {\n  mountEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction updateInsertionEffect(\n  create                           ,\n  deps                            ,\n)       {\n  return updateEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction mountLayoutEffect(\n  create                           ,\n  deps                            ,\n)       {\n  let fiberFlags        = UpdateEffect | LayoutStaticEffect;\n  if (\n    __DEV__ &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(fiberFlags, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create                           ,\n  deps                            ,\n)       {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect   (\n  create         ,\n  ref                                                                 ,\n)                      {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    const refCleanup = refCallback(inst);\n    return () => {\n      if (typeof refCleanup === 'function') {\n        // $FlowFixMe[incompatible-use] we need to assume no parameters\n        refCleanup();\n      } else {\n        refCallback(null);\n      }\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle   (\n  ref                                                                 ,\n  create         ,\n  deps                            ,\n)       {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  let fiberFlags        = UpdateEffect | LayoutStaticEffect;\n  if (\n    __DEV__ &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  mountEffectImpl(\n    fiberFlags,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle   (\n  ref                                                                 ,\n  create         ,\n  deps                            ,\n)       {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue   (value   , formatterFn                      )       {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback   (callback   , deps                            )    {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback   (callback   , deps                            )    {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (nextDeps !== null) {\n    const prevDeps                      = prevState[1];\n    if (areHookInputsEqual(nextDeps, prevDeps)) {\n      return prevState[0];\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo   (\n  nextCreate         ,\n  deps                            ,\n)    {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  if (shouldDoubleInvokeUserFnsInHooksDEV) {\n    setIsStrictModeForDevtools(true);\n    try {\n      nextCreate();\n    } finally {\n      setIsStrictModeForDevtools(false);\n    }\n  }\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo   (\n  nextCreate         ,\n  deps                            ,\n)    {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  // Assume these are defined. If they're not, areHookInputsEqual will warn.\n  if (nextDeps !== null) {\n    const prevDeps                      = prevState[1];\n    if (areHookInputsEqual(nextDeps, prevDeps)) {\n      return prevState[0];\n    }\n  }\n  const nextValue = nextCreate();\n  if (shouldDoubleInvokeUserFnsInHooksDEV) {\n    setIsStrictModeForDevtools(true);\n    try {\n      nextCreate();\n    } finally {\n      setIsStrictModeForDevtools(false);\n    }\n  }\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue   (value   , initialValue    )    {\n  const hook = mountWorkInProgressHook();\n  return mountDeferredValueImpl(hook, value, initialValue);\n}\n\nfunction updateDeferredValue   (value   , initialValue    )    {\n  const hook = updateWorkInProgressHook();\n  const resolvedCurrentHook       = (currentHook     );\n  const prevValue    = resolvedCurrentHook.memoizedState;\n  return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n}\n\nfunction rerenderDeferredValue   (value   , initialValue    )    {\n  const hook = updateWorkInProgressHook();\n  if (currentHook === null) {\n    // This is a rerender during a mount.\n    return mountDeferredValueImpl(hook, value, initialValue);\n  } else {\n    // This is a rerender during an update.\n    const prevValue    = currentHook.memoizedState;\n    return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n  }\n}\n\nfunction mountDeferredValueImpl   (hook      , value   , initialValue    )    {\n  if (\n    // When `initialValue` is provided, we defer the initial render even if the\n    // current render is not synchronous.\n    initialValue !== undefined &&\n    // However, to avoid waterfalls, we do not defer if this render\n    // was itself spawned by an earlier useDeferredValue. Check if DeferredLane\n    // is part of the render lanes.\n    !includesSomeLane(renderLanes, DeferredLane)\n  ) {\n    // Render with the initial value\n    hook.memoizedState = initialValue;\n\n    // Schedule a deferred render to switch to the final value.\n    const deferredLane = requestDeferredLane();\n    currentlyRenderingFiber.lanes = mergeLanes(\n      currentlyRenderingFiber.lanes,\n      deferredLane,\n    );\n    markSkippedUpdateLanes(deferredLane);\n\n    return initialValue;\n  } else {\n    hook.memoizedState = value;\n    return value;\n  }\n}\n\nfunction updateDeferredValueImpl   (\n  hook      ,\n  prevValue   ,\n  value   ,\n  initialValue    ,\n)    {\n  if (is(value, prevValue)) {\n    // The incoming value is referentially identical to the currently rendered\n    // value, so we can bail out quickly.\n    return value;\n  } else {\n    // Received a new value that's different from the current value.\n\n    // Check if we're inside a hidden tree\n    if (isCurrentTreeHidden()) {\n      // Revealing a prerendered tree is considered the same as mounting new\n      // one, so we reuse the \"mount\" path in this case.\n      const resultValue = mountDeferredValueImpl(hook, value, initialValue);\n      // Unlike during an actual mount, we need to mark this as an update if\n      // the value changed.\n      if (!is(resultValue, prevValue)) {\n        markWorkInProgressReceivedUpdate();\n      }\n      return resultValue;\n    }\n\n    const shouldDeferValue =\n      !includesOnlyNonUrgentLanes(renderLanes) &&\n      !includesSomeLane(renderLanes, DeferredLane);\n    if (shouldDeferValue) {\n      // This is an urgent update. Since the value has changed, keep using the\n      // previous value and spawn a deferred render to update it later.\n\n      // Schedule a deferred render\n      const deferredLane = requestDeferredLane();\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        deferredLane,\n      );\n      markSkippedUpdateLanes(deferredLane);\n\n      // Reuse the previous value. We do not need to mark this as an update,\n      // because we did not render a new value.\n      return prevValue;\n    } else {\n      // This is not an urgent update, so we can use the latest value regardless\n      // of what it is. No need to defer it.\n\n      // Mark this as an update to prevent the fiber from bailing out.\n      markWorkInProgressReceivedUpdate();\n      hook.memoizedState = value;\n      return value;\n    }\n  }\n}\n\nfunction releaseAsyncTransition() {\n  if (__DEV__) {\n    ReactSharedInternals.asyncTransitions--;\n  }\n}\n\nfunction startTransition   (\n  fiber       ,\n  queue                                                                 ,\n  pendingState   ,\n  finishedState   ,\n  callback             ,\n  options                         ,\n)       {\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(\n    higherEventPriority(previousPriority, ContinuousEventPriority),\n  );\n\n  const prevTransition = ReactSharedInternals.T;\n  const currentTransition             = ({}     );\n  if (enableViewTransition) {\n    currentTransition.types =\n      prevTransition !== null\n        ? // If we're a nested transition, we should use the same set as the parent\n          // since we're conceptually always joined into the same entangled transition.\n          // In practice, this only matters if we add transition types in the inner\n          // without setting state. In that case, the inner transition can finish\n          // without waiting for the outer.\n          prevTransition.types\n        : null;\n  }\n  if (enableGestureTransition) {\n    currentTransition.gesture = null;\n  }\n  if (enableTransitionTracing) {\n    currentTransition.name =\n      options !== undefined && options.name !== undefined ? options.name : null;\n    currentTransition.startTime = now();\n  }\n  if (__DEV__) {\n    currentTransition._updatedFibers = new Set();\n  }\n\n  // We don't really need to use an optimistic update here, because we\n  // schedule a second \"revert\" update below (which we use to suspend the\n  // transition until the async action scope has finished). But we'll use an\n  // optimistic update anyway to make it less likely the behavior accidentally\n  // diverges; for example, both an optimistic update and this one should\n  // share the same lane.\n  ReactSharedInternals.T = currentTransition;\n  dispatchOptimisticSetState(fiber, false, queue, pendingState);\n\n  try {\n    const returnValue = callback();\n    const onStartTransitionFinish = ReactSharedInternals.S;\n    if (onStartTransitionFinish !== null) {\n      onStartTransitionFinish(currentTransition, returnValue);\n    }\n\n    // Check if we're inside an async action scope. If so, we'll entangle\n    // this new action with the existing scope.\n    //\n    // If we're not already inside an async action scope, and this action is\n    // async, then we'll create a new async scope.\n    //\n    // In the async case, the resulting render will suspend until the async\n    // action scope has finished.\n    if (\n      returnValue !== null &&\n      typeof returnValue === 'object' &&\n      typeof returnValue.then === 'function'\n    ) {\n      const thenable = ((returnValue     )                 );\n      if (__DEV__) {\n        // Keep track of the number of async transitions still running so we can warn.\n        ReactSharedInternals.asyncTransitions++;\n        thenable.then(releaseAsyncTransition, releaseAsyncTransition);\n      }\n      // Create a thenable that resolves to `finishedState` once the async\n      // action has completed.\n      const thenableForFinishedState = chainThenableValue(\n        thenable,\n        finishedState,\n      );\n      dispatchSetStateInternal(\n        fiber,\n        queue,\n        (thenableForFinishedState     ),\n        requestUpdateLane(fiber),\n      );\n    } else {\n      dispatchSetStateInternal(\n        fiber,\n        queue,\n        finishedState,\n        requestUpdateLane(fiber),\n      );\n    }\n  } catch (error) {\n    // This is a trick to get the `useTransition` hook to rethrow the error.\n    // When it unwraps the thenable with the `use` algorithm, the error\n    // will be thrown.\n    const rejectedThenable                      = {\n      then() {},\n      status: 'rejected',\n      reason: error,\n    };\n    dispatchSetStateInternal(\n      fiber,\n      queue,\n      rejectedThenable,\n      requestUpdateLane(fiber),\n    );\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n\n    if (prevTransition !== null && currentTransition.types !== null) {\n      // If we created a new types set in the inner transition, we transfer it to the parent\n      // since they should share the same set. They're conceptually entangled.\n      if (__DEV__) {\n        if (\n          prevTransition.types !== null &&\n          prevTransition.types !== currentTransition.types\n        ) {\n          // Just assert that assumption holds that we're not overriding anything.\n          console.error(\n            'We expected inner Transitions to have transferred the outer types set and ' +\n              'that you cannot add to the outer Transition while inside the inner.' +\n              'This is a bug in React.',\n          );\n        }\n      }\n      prevTransition.types = currentTransition.types;\n    }\n    ReactSharedInternals.T = prevTransition;\n\n    if (__DEV__) {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        const updatedFibersCount = currentTransition._updatedFibers.size;\n        currentTransition._updatedFibers.clear();\n        if (updatedFibersCount > 10) {\n          console.warn(\n            'Detected a large number of updates inside startTransition. ' +\n              'If this is due to a subscription please re-write it to use React provided hooks. ' +\n              'Otherwise concurrent mode guarantees are off the table.',\n          );\n        }\n      }\n    }\n  }\n}\n\nconst noop = () => {};\n\nexport function startHostTransition   (\n  formFiber       ,\n  pendingState                  ,\n  action                     ,\n  formData   ,\n)       {\n  if (formFiber.tag !== HostComponent) {\n    throw new Error(\n      'Expected the form instance to be a HostComponent. This ' +\n        'is a bug in React.',\n    );\n  }\n\n  const stateHook = ensureFormComponentIsStateful(formFiber);\n\n  const queue              \n                                                  \n                                                                    \n    = stateHook.queue;\n\n  startTransition(\n    formFiber,\n    queue,\n    pendingState,\n    NoPendingHostTransition,\n    // TODO: `startTransition` both sets the pending state and dispatches\n    // the action, if one is provided. Consider refactoring these two\n    // concerns to avoid the extra lambda.\n\n    action === null\n      ? // No action was provided, but we still call `startTransition` to\n        // set the pending form status.\n        noop\n      : () => {\n          // Automatically reset the form when the action completes.\n          requestFormReset(formFiber);\n          return action(formData);\n        },\n  );\n}\n\nfunction ensureFormComponentIsStateful(formFiber       ) {\n  const existingStateHook              = formFiber.memoizedState;\n  if (existingStateHook !== null) {\n    // This fiber was already upgraded to be stateful.\n    return existingStateHook;\n  }\n\n  // Upgrade this host component fiber to be stateful. We're going to pretend\n  // it was stateful all along so we can reuse most of the implementation\n  // for function components and useTransition.\n  //\n  // Create the state hook used by TransitionAwareHostComponent. This is\n  // essentially an inlined version of mountState.\n  const newQueue              \n                                                  \n                                                                    \n    = {\n    pending: null,\n    lanes: NoLanes,\n    // We're going to cheat and intentionally not create a bound dispatch\n    // method, because we can call it directly in startTransition.\n    dispatch: (null     ),\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: NoPendingHostTransition,\n  };\n\n  const stateHook       = {\n    memoizedState: NoPendingHostTransition,\n    baseState: NoPendingHostTransition,\n    baseQueue: null,\n    queue: newQueue,\n    next: null,\n  };\n\n  // We use another state hook to track whether the form needs to be reset.\n  // The state is an empty object. To trigger a reset, we update the state\n  // to a new object. Then during rendering, we detect that the state has\n  // changed and schedule a commit effect.\n  const initialResetState = {};\n  const newResetStateQueue                              = {\n    pending: null,\n    lanes: NoLanes,\n    // We're going to cheat and intentionally not create a bound dispatch\n    // method, because we can call it directly in startTransition.\n    dispatch: (null     ),\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: initialResetState,\n  };\n  const resetStateHook       = {\n    memoizedState: initialResetState,\n    baseState: initialResetState,\n    baseQueue: null,\n    queue: newResetStateQueue,\n    next: null,\n  };\n  stateHook.next = resetStateHook;\n\n  // Add the hook list to both fiber alternates. The idea is that the fiber\n  // had this hook all along.\n  formFiber.memoizedState = stateHook;\n  const alternate = formFiber.alternate;\n  if (alternate !== null) {\n    alternate.memoizedState = stateHook;\n  }\n\n  return stateHook;\n}\n\nexport function requestFormReset(formFiber       ) {\n  const transition = requestCurrentTransition();\n\n  if (transition === null) {\n    if (__DEV__) {\n      // An optimistic update occurred, but startTransition is not on the stack.\n      // The form reset will be scheduled at default (sync) priority, which\n      // is probably not what the user intended. Most likely because the\n      // requestFormReset call happened after an `await`.\n      // TODO: Theoretically, requestFormReset is still useful even for\n      // non-transition updates because it allows you to update defaultValue\n      // synchronously and then wait to reset until after the update commits.\n      // I've chosen to warn anyway because it's more likely the `await` mistake\n      // described above. But arguably we shouldn't.\n      console.error(\n        'requestFormReset was called outside a transition or action. To ' +\n          'fix, move to an action, or wrap with startTransition.',\n      );\n    }\n  } else if (enableGestureTransition && transition.gesture) {\n    throw new Error(\n      'Cannot requestFormReset() inside a startGestureTransition. ' +\n        'There should be no side-effects associated with starting a ' +\n        'Gesture until its Action is invoked. Move side-effects to the ' +\n        'Action instead.',\n    );\n  }\n\n  let stateHook       = ensureFormComponentIsStateful(formFiber);\n  const newResetState = {};\n  if (stateHook.next === null) {\n    // Hack alert. If formFiber is the workInProgress Fiber then\n    // we might get a broken intermediate state. Try the alternate\n    // instead.\n    // TODO: We should really stash the Queue somewhere stateful\n    // just like how setState binds the Queue.\n    stateHook = (formFiber.alternate     ).memoizedState;\n  }\n  const resetStateHook       = (stateHook.next     );\n  const resetStateQueue = resetStateHook.queue;\n  dispatchSetStateInternal(\n    formFiber,\n    resetStateQueue,\n    newResetState,\n    requestUpdateLane(formFiber),\n  );\n}\n\nfunction mountTransition()   \n          \n                                                                   \n  {\n  const stateHook = mountStateImpl((false                             ));\n  // The `start` method never changes.\n  const start = startTransition.bind(\n    null,\n    currentlyRenderingFiber,\n    stateHook.queue,\n    true,\n    false,\n  );\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [false, start];\n}\n\nfunction updateTransition()   \n          \n                                                                   \n  {\n  const [booleanOrThenable] = updateState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  const isPending =\n    typeof booleanOrThenable === 'boolean'\n      ? booleanOrThenable\n      : // This will suspend until the async action scope has finished.\n        useThenable(booleanOrThenable);\n  return [isPending, start];\n}\n\nfunction rerenderTransition()   \n          \n                                                                   \n  {\n  const [booleanOrThenable] = rerenderState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  const isPending =\n    typeof booleanOrThenable === 'boolean'\n      ? booleanOrThenable\n      : // This will suspend until the async action scope has finished.\n        useThenable(booleanOrThenable);\n  return [isPending, start];\n}\n\nfunction useHostTransitionStatus()                   {\n  return readContext(HostTransitionContext);\n}\n\nfunction mountId()         {\n  const hook = mountWorkInProgressHook();\n\n  const root = ((getWorkInProgressRoot()     )           );\n  // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n  const identifierPrefix = root.identifierPrefix;\n\n  let id;\n  if (getIsHydrating()) {\n    const treeId = getTreeId();\n\n    // Use a captial R prefix for server-generated ids.\n    id = '\\u00AB' + identifierPrefix + 'R' + treeId;\n\n    // Unless this is the first id at this level, append a number at the end\n    // that represents the position of this useId hook among all the useId\n    // hooks for this fiber.\n    const localId = localIdCounter++;\n    if (localId > 0) {\n      id += 'H' + localId.toString(32);\n    }\n\n    id += '\\u00BB';\n  } else {\n    // Use a lowercase r prefix for client-generated ids.\n    const globalClientId = globalClientIdCounter++;\n    id =\n      '\\u00AB' +\n      identifierPrefix +\n      'r' +\n      globalClientId.toString(32) +\n      '\\u00BB';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId()         {\n  const hook = updateWorkInProgressHook();\n  const id         = hook.memoizedState;\n  return id;\n}\n\nfunction mountRefresh()      {\n  const hook = mountWorkInProgressHook();\n  const refresh = (hook.memoizedState = refreshCache.bind(\n    null,\n    currentlyRenderingFiber,\n  ));\n  return refresh;\n}\n\nfunction updateRefresh()      {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction refreshCache   (fiber       , seedKey          , seedValue   )       {\n  // TODO: Does Cache work in legacy mode? Should decide and write a test.\n  // TODO: Consider warning if the refresh is at discrete priority, or if we\n  // otherwise suspect that it wasn't batched properly.\n  let provider = fiber.return;\n  while (provider !== null) {\n    switch (provider.tag) {\n      case CacheComponent:\n      case HostRoot: {\n        // Schedule an update on the cache boundary to trigger a refresh.\n        const lane = requestUpdateLane(provider);\n        const refreshUpdate = createLegacyQueueUpdate(lane);\n        const root = enqueueLegacyQueueUpdate(provider, refreshUpdate, lane);\n        if (root !== null) {\n          startUpdateTimerByLane(lane, 'refresh()');\n          scheduleUpdateOnFiber(root, provider, lane);\n          entangleLegacyQueueTransitions(root, provider, lane);\n        }\n\n        // TODO: If a refresh never commits, the new cache created here must be\n        // released. A simple case is start refreshing a cache boundary, but then\n        // unmount that boundary before the refresh completes.\n        const seededCache = createCache();\n        if (seedKey !== null && seedKey !== undefined && root !== null) {\n          if (enableLegacyCache) {\n            // Seed the cache with the value passed by the caller. This could be\n            // from a server mutation, or it could be a streaming response.\n            seededCache.data.set(seedKey, seedValue);\n          } else {\n            if (__DEV__) {\n              console.error(\n                'The seed argument is not enabled outside experimental channels.',\n              );\n            }\n          }\n        }\n\n        const payload = {\n          cache: seededCache,\n        };\n        refreshUpdate.payload = payload;\n        return;\n      }\n    }\n    provider = provider.return;\n  }\n  // TODO: Warn if unmounted?\n}\n\nfunction dispatchReducerAction      (\n  fiber       ,\n  queue                   ,\n  action   ,\n)       {\n  if (__DEV__) {\n    // using a reference to `arguments` bails out of GCC optimizations which affect function arity\n    const args = arguments;\n    if (typeof args[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n\n  const update               = {\n    lane,\n    revertLane: NoLane,\n    gesture: null,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null     ),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      startUpdateTimerByLane(lane, 'dispatch()');\n      scheduleUpdateOnFiber(root, fiber, lane);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction dispatchSetState      (\n  fiber       ,\n  queue                   ,\n  action   ,\n)       {\n  if (__DEV__) {\n    // using a reference to `arguments` bails out of GCC optimizations which affect function arity\n    const args = arguments;\n    if (typeof args[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n  const didScheduleUpdate = dispatchSetStateInternal(\n    fiber,\n    queue,\n    action,\n    lane,\n  );\n  if (didScheduleUpdate) {\n    startUpdateTimerByLane(lane, 'setState()');\n  }\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction dispatchSetStateInternal      (\n  fiber       ,\n  queue                   ,\n  action   ,\n  lane      ,\n)          {\n  const update               = {\n    lane,\n    revertLane: NoLane,\n    gesture: null,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null     ),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const alternate = fiber.alternate;\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher = null;\n        if (__DEV__) {\n          prevDispatcher = ReactSharedInternals.H;\n          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState    = (queue.lastRenderedState     );\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            // TODO: Do we still need to entangle transitions in this case?\n            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update);\n            return false;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactSharedInternals.H = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane);\n      entangleTransitionUpdate(root, queue, lane);\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction dispatchOptimisticSetState      (\n  fiber       ,\n  throwIfDuringRender         ,\n  queue                   ,\n  action   ,\n)       {\n  const transition = requestCurrentTransition();\n\n  if (__DEV__) {\n    if (transition === null) {\n      // An optimistic update occurred, but startTransition is not on the stack.\n      // There are two likely scenarios.\n\n      // One possibility is that the optimistic update is triggered by a regular\n      // event handler (e.g. `onSubmit`) instead of an action. This is a mistake\n      // and we will warn.\n\n      // The other possibility is the optimistic update is inside an async\n      // action, but after an `await`. In this case, we can make it \"just work\"\n      // by associating the optimistic update with the pending async action.\n\n      // Technically it's possible that the optimistic update is unrelated to\n      // the pending action, but we don't have a way of knowing this for sure\n      // because browsers currently do not provide a way to track async scope.\n      // (The AsyncContext proposal, if it lands, will solve this in the\n      // future.) However, this is no different than the problem of unrelated\n      // transitions being grouped together \u2014 it's not wrong per se, but it's\n      // not ideal.\n\n      // Once AsyncContext starts landing in browsers, we will provide better\n      // warnings in development for these cases.\n      if (peekEntangledActionLane() !== NoLane) {\n        // There is a pending async action. Don't warn.\n      } else {\n        // There's no pending async action. The most likely cause is that we're\n        // inside a regular event handler (e.g. onSubmit) instead of an action.\n        console.error(\n          'An optimistic state update occurred outside a transition or ' +\n            'action. To fix, move the update to an action, or wrap ' +\n            'with startTransition.',\n        );\n      }\n    }\n  }\n\n  // For regular Transitions an optimistic update commits synchronously.\n  // For gesture Transitions an optimistic update commits on the GestureLane.\n  const lane =\n    enableGestureTransition && transition !== null && transition.gesture\n      ? GestureLane\n      : SyncLane;\n  const update               = {\n    lane: lane,\n    // After committing, the optimistic update is \"reverted\" using the same\n    // lane as the transition it's associated with.\n    revertLane: requestTransitionLane(transition),\n    gesture: null,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null     ),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    // When calling startTransition during render, this warns instead of\n    // throwing because throwing would be a breaking change. setOptimisticState\n    // is a new API so it's OK to throw.\n    if (throwIfDuringRender) {\n      throw new Error('Cannot update optimistic state while rendering.');\n    } else {\n      // startTransition was called during render. We don't need to do anything\n      // besides warn here because the render phase update would be overidden by\n      // the second update, anyway. We can remove this branch and make it throw\n      // in a future release.\n      if (__DEV__) {\n        console.error('Cannot call startTransition while rendering.');\n      }\n    }\n  } else {\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      // NOTE: The optimistic update implementation assumes that the transition\n      // will never be attempted before the optimistic update. This currently\n      // holds because the optimistic update is always synchronous. If we ever\n      // change that, we'll need to account for this.\n      startUpdateTimerByLane(lane, 'setOptimistic()');\n      scheduleUpdateOnFiber(root, fiber, lane);\n      // Optimistic updates are always synchronous, so we don't need to call\n      // entangleTransitionUpdate here.\n      if (enableGestureTransition && transition !== null) {\n        const provider = transition.gesture;\n        if (provider !== null) {\n          // If this was a gesture, ensure we have a scheduled gesture and that\n          // we associate this update with this specific gesture instance.\n          update.gesture = scheduleGesture(root, provider);\n        }\n      }\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction isRenderPhaseUpdate(fiber       )          {\n  const alternate = fiber.alternate;\n  return (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  );\n}\n\nfunction enqueueRenderPhaseUpdate      (\n  queue                   ,\n  update              ,\n)       {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate =\n    true;\n  const pending = queue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  queue.pending = update;\n}\n\n// TODO: Move to ReactFiberConcurrentUpdates?\nfunction entangleTransitionUpdate      (\n  root           ,\n  queue                   ,\n  lane      ,\n)       {\n  if (isTransitionLane(lane)) {\n    let queueLanes = queue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nfunction markUpdateInDevTools   (fiber       , lane      , action   )       {\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nexport const ContextOnlyDispatcher             = {\n  readContext,\n\n  use,\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError,\n  useHostTransitionStatus: throwInvalidHookError,\n  useFormState: throwInvalidHookError,\n  useActionState: throwInvalidHookError,\n  useOptimistic: throwInvalidHookError,\n  useMemoCache: throwInvalidHookError,\n  useCacheRefresh: throwInvalidHookError,\n};\nif (enableUseEffectEventHook) {\n  (ContextOnlyDispatcher            ).useEffectEvent = throwInvalidHookError;\n}\n\nconst HooksDispatcherOnMount             = {\n  readContext,\n\n  use,\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useInsertionEffect: mountInsertionEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useSyncExternalStore: mountSyncExternalStore,\n  useId: mountId,\n  useHostTransitionStatus: useHostTransitionStatus,\n  useFormState: mountActionState,\n  useActionState: mountActionState,\n  useOptimistic: mountOptimistic,\n  useMemoCache,\n  useCacheRefresh: mountRefresh,\n};\nif (enableUseEffectEventHook) {\n  (HooksDispatcherOnMount            ).useEffectEvent = mountEvent;\n}\n\nconst HooksDispatcherOnUpdate             = {\n  readContext,\n\n  use,\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n  useHostTransitionStatus: useHostTransitionStatus,\n  useFormState: updateActionState,\n  useActionState: updateActionState,\n  useOptimistic: updateOptimistic,\n  useMemoCache,\n  useCacheRefresh: updateRefresh,\n};\nif (enableUseEffectEventHook) {\n  (HooksDispatcherOnUpdate            ).useEffectEvent = updateEvent;\n}\n\nconst HooksDispatcherOnRerender             = {\n  readContext,\n\n  use,\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n  useHostTransitionStatus: useHostTransitionStatus,\n  useFormState: rerenderActionState,\n  useActionState: rerenderActionState,\n  useOptimistic: rerenderOptimistic,\n  useMemoCache,\n  useCacheRefresh: updateRefresh,\n};\nif (enableUseEffectEventHook) {\n  (HooksDispatcherOnRerender            ).useEffectEvent = updateEvent;\n}\n\nlet HooksDispatcherOnMountInDEV                    = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV                    = null;\nlet HooksDispatcherOnUpdateInDEV                    = null;\nlet HooksDispatcherOnRerenderInDEV                    = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV                    = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV                    = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV                    = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://react.dev/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext   (context                 )    {\n      return readContext(context);\n    },\n    use,\n    useCallback   (callback   , deps                            )    {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext   (context                 )    {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle   (\n      ref                                                                 ,\n      create         ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useInsertionEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo   (create         , deps                            )    {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useReducer         (\n      reducer             ,\n      initialArg   ,\n      init         ,\n    )                   {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useRef   (initialValue   )               {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState   (\n      initialState               ,\n    )                                     {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useDebugValue   (value   , formatterFn                      )       {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue   (value   , initialValue    )    {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value, initialValue);\n    },\n    useTransition()                                  {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useSyncExternalStore   (\n      subscribe                            ,\n      getSnapshot         ,\n      getServerSnapshot          ,\n    )    {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId()         {\n      currentHookNameInDev = 'useId';\n      mountHookTypesDev();\n      return mountId();\n    },\n    useFormState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useFormState';\n      mountHookTypesDev();\n      warnOnUseFormStateInDev();\n      return mountActionState(action, initialState, permalink);\n    },\n    useActionState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useActionState';\n      mountHookTypesDev();\n      return mountActionState(action, initialState, permalink);\n    },\n    useOptimistic      (\n      passthrough   ,\n      reducer              ,\n    )                   {\n      currentHookNameInDev = 'useOptimistic';\n      mountHookTypesDev();\n      return mountOptimistic(passthrough, reducer);\n    },\n    useHostTransitionStatus,\n    useMemoCache,\n    useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    },\n  };\n  if (enableUseEffectEventHook) {\n    (HooksDispatcherOnMountInDEV            ).useEffectEvent =\n      function useEffectEvent                                             (\n        callback   ,\n      )    {\n        currentHookNameInDev = 'useEffectEvent';\n        mountHookTypesDev();\n        return mountEvent(callback);\n      };\n  }\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext   (context                 )    {\n      return readContext(context);\n    },\n    use,\n    useCallback   (callback   , deps                            )    {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext   (context                 )    {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle   (\n      ref                                                                 ,\n      create         ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo   (create         , deps                            )    {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useReducer         (\n      reducer             ,\n      initialArg   ,\n      init         ,\n    )                   {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useRef   (initialValue   )               {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState   (\n      initialState               ,\n    )                                     {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useDebugValue   (value   , formatterFn                      )       {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue   (value   , initialValue    )    {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value, initialValue);\n    },\n    useTransition()                                  {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useSyncExternalStore   (\n      subscribe                            ,\n      getSnapshot         ,\n      getServerSnapshot          ,\n    )    {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId()         {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return mountId();\n    },\n    useActionState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useActionState';\n      updateHookTypesDev();\n      return mountActionState(action, initialState, permalink);\n    },\n    useFormState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useFormState';\n      updateHookTypesDev();\n      warnOnUseFormStateInDev();\n      return mountActionState(action, initialState, permalink);\n    },\n    useOptimistic      (\n      passthrough   ,\n      reducer              ,\n    )                   {\n      currentHookNameInDev = 'useOptimistic';\n      updateHookTypesDev();\n      return mountOptimistic(passthrough, reducer);\n    },\n    useHostTransitionStatus,\n    useMemoCache,\n    useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    },\n  };\n  if (enableUseEffectEventHook) {\n    (HooksDispatcherOnMountWithHookTypesInDEV            ).useEffectEvent =\n      function useEffectEvent                                             (\n        callback   ,\n      )    {\n        currentHookNameInDev = 'useEffectEvent';\n        updateHookTypesDev();\n        return mountEvent(callback);\n      };\n  }\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext   (context                 )    {\n      return readContext(context);\n    },\n    use,\n    useCallback   (callback   , deps                            )    {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext   (context                 )    {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle   (\n      ref                                                                 ,\n      create         ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo   (create         , deps                            )    {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useReducer         (\n      reducer             ,\n      initialArg   ,\n      init         ,\n    )                   {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useRef   (initialValue   )               {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState   (\n      initialState               ,\n    )                                     {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useDebugValue   (value   , formatterFn                      )       {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue   (value   , initialValue    )    {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value, initialValue);\n    },\n    useTransition()                                  {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useSyncExternalStore   (\n      subscribe                            ,\n      getSnapshot         ,\n      getServerSnapshot          ,\n    )    {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId()         {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    useFormState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useFormState';\n      updateHookTypesDev();\n      warnOnUseFormStateInDev();\n      return updateActionState(action, initialState, permalink);\n    },\n    useActionState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useActionState';\n      updateHookTypesDev();\n      return updateActionState(action, initialState, permalink);\n    },\n    useOptimistic      (\n      passthrough   ,\n      reducer              ,\n    )                   {\n      currentHookNameInDev = 'useOptimistic';\n      updateHookTypesDev();\n      return updateOptimistic(passthrough, reducer);\n    },\n    useHostTransitionStatus,\n    useMemoCache,\n    useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    },\n  };\n  if (enableUseEffectEventHook) {\n    (HooksDispatcherOnUpdateInDEV            ).useEffectEvent =\n      function useEffectEvent                                             (\n        callback   ,\n      )    {\n        currentHookNameInDev = 'useEffectEvent';\n        updateHookTypesDev();\n        return updateEvent(callback);\n      };\n  }\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext   (context                 )    {\n      return readContext(context);\n    },\n    use,\n    useCallback   (callback   , deps                            )    {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext   (context                 )    {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle   (\n      ref                                                                 ,\n      create         ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo   (create         , deps                            )    {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useReducer         (\n      reducer             ,\n      initialArg   ,\n      init         ,\n    )                   {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useRef   (initialValue   )               {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState   (\n      initialState               ,\n    )                                     {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useDebugValue   (value   , formatterFn                      )       {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue   (value   , initialValue    )    {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value, initialValue);\n    },\n    useTransition()                                  {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useSyncExternalStore   (\n      subscribe                            ,\n      getSnapshot         ,\n      getServerSnapshot          ,\n    )    {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId()         {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n    useFormState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useFormState';\n      updateHookTypesDev();\n      warnOnUseFormStateInDev();\n      return rerenderActionState(action, initialState, permalink);\n    },\n    useActionState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useActionState';\n      updateHookTypesDev();\n      return rerenderActionState(action, initialState, permalink);\n    },\n    useOptimistic      (\n      passthrough   ,\n      reducer              ,\n    )                   {\n      currentHookNameInDev = 'useOptimistic';\n      updateHookTypesDev();\n      return rerenderOptimistic(passthrough, reducer);\n    },\n    useHostTransitionStatus,\n    useMemoCache,\n    useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    },\n  };\n  if (enableUseEffectEventHook) {\n    (HooksDispatcherOnRerenderInDEV            ).useEffectEvent =\n      function useEffectEvent                                             (\n        callback   ,\n      )    {\n        currentHookNameInDev = 'useEffectEvent';\n        updateHookTypesDev();\n        return updateEvent(callback);\n      };\n  }\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext   (context                 )    {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    use   (usable           )    {\n      warnInvalidHookAccess();\n      return use(usable);\n    },\n    useCallback   (callback   , deps                            )    {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext   (context                 )    {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle   (\n      ref                                                                 ,\n      create         ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo   (create         , deps                            )    {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useReducer         (\n      reducer             ,\n      initialArg   ,\n      init         ,\n    )                   {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useRef   (initialValue   )               {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState   (\n      initialState               ,\n    )                                     {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useDebugValue   (value   , formatterFn                      )       {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue   (value   , initialValue    )    {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value, initialValue);\n    },\n    useTransition()                                  {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useSyncExternalStore   (\n      subscribe                            ,\n      getSnapshot         ,\n      getServerSnapshot          ,\n    )    {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId()         {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountId();\n    },\n    useFormState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useFormState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountActionState(action, initialState, permalink);\n    },\n    useActionState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useActionState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountActionState(action, initialState, permalink);\n    },\n    useOptimistic      (\n      passthrough   ,\n      reducer              ,\n    )                   {\n      currentHookNameInDev = 'useOptimistic';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountOptimistic(passthrough, reducer);\n    },\n    useMemoCache(size        )             {\n      warnInvalidHookAccess();\n      return useMemoCache(size);\n    },\n    useHostTransitionStatus,\n    useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    },\n  };\n  if (enableUseEffectEventHook) {\n    (InvalidNestedHooksDispatcherOnMountInDEV            ).useEffectEvent =\n      function useEffectEvent                                             (\n        callback   ,\n      )    {\n        currentHookNameInDev = 'useEffectEvent';\n        warnInvalidHookAccess();\n        mountHookTypesDev();\n        return mountEvent(callback);\n      };\n  }\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext   (context                 )    {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    use   (usable           )    {\n      warnInvalidHookAccess();\n      return use(usable);\n    },\n    useCallback   (callback   , deps                            )    {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext   (context                 )    {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle   (\n      ref                                                                 ,\n      create         ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo   (create         , deps                            )    {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useReducer         (\n      reducer             ,\n      initialArg   ,\n      init         ,\n    )                   {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useRef   (initialValue   )               {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState   (\n      initialState               ,\n    )                                     {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useDebugValue   (value   , formatterFn                      )       {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue   (value   , initialValue    )    {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value, initialValue);\n    },\n    useTransition()                                  {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useSyncExternalStore   (\n      subscribe                            ,\n      getSnapshot         ,\n      getServerSnapshot          ,\n    )    {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId()         {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    useFormState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useFormState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateActionState(action, initialState, permalink);\n    },\n    useActionState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useActionState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateActionState(action, initialState, permalink);\n    },\n    useOptimistic      (\n      passthrough   ,\n      reducer              ,\n    )                   {\n      currentHookNameInDev = 'useOptimistic';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateOptimistic(passthrough, reducer);\n    },\n    useMemoCache(size        )             {\n      warnInvalidHookAccess();\n      return useMemoCache(size);\n    },\n    useHostTransitionStatus,\n    useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    },\n  };\n  if (enableUseEffectEventHook) {\n    (InvalidNestedHooksDispatcherOnUpdateInDEV            ).useEffectEvent =\n      function useEffectEvent                                             (\n        callback   ,\n      )    {\n        currentHookNameInDev = 'useEffectEvent';\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateEvent(callback);\n      };\n  }\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext   (context                 )    {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    use   (usable           )    {\n      warnInvalidHookAccess();\n      return use(usable);\n    },\n    useCallback   (callback   , deps                            )    {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext   (context                 )    {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle   (\n      ref                                                                 ,\n      create         ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create                           ,\n      deps                            ,\n    )       {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo   (create         , deps                            )    {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useReducer         (\n      reducer             ,\n      initialArg   ,\n      init         ,\n    )                   {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useRef   (initialValue   )               {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState   (\n      initialState               ,\n    )                                     {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactSharedInternals.H;\n      ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactSharedInternals.H = prevDispatcher;\n      }\n    },\n    useDebugValue   (value   , formatterFn                      )       {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue   (value   , initialValue    )    {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value, initialValue);\n    },\n    useTransition()                                  {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useSyncExternalStore   (\n      subscribe                            ,\n      getSnapshot         ,\n      getServerSnapshot          ,\n    )    {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId()         {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n    useFormState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useFormState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderActionState(action, initialState, permalink);\n    },\n    useActionState      (\n      action                      ,\n      initialState            ,\n      permalink         ,\n    )                                     {\n      currentHookNameInDev = 'useActionState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderActionState(action, initialState, permalink);\n    },\n    useOptimistic      (\n      passthrough   ,\n      reducer              ,\n    )                   {\n      currentHookNameInDev = 'useOptimistic';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderOptimistic(passthrough, reducer);\n    },\n    useMemoCache(size        )             {\n      warnInvalidHookAccess();\n      return useMemoCache(size);\n    },\n    useHostTransitionStatus,\n    useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    },\n  };\n  if (enableUseEffectEventHook) {\n    (InvalidNestedHooksDispatcherOnRerenderInDEV            ).useEffectEvent =\n      function useEffectEvent                                             (\n        callback   ,\n      )    {\n        currentHookNameInDev = 'useEffectEvent';\n        warnInvalidHookAccess();\n        updateHookTypesDev();\n        return updateEvent(callback);\n      };\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n                                            \n                                                              \n\nimport {\n  LayoutStatic,\n  Update,\n  Snapshot,\n  MountLayoutDev,\n} from './ReactFiberFlags';\nimport {\n  disableLegacyContext,\n  enableSchedulingProfiler,\n  disableDefaultPropsExceptForClasses,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport assign from 'shared/assign';\nimport isArray from 'shared/isArray';\nimport {REACT_CONTEXT_TYPE, REACT_CONSUMER_TYPE} from 'shared/ReactSymbols';\n\nimport {NoMode, StrictLegacyMode, StrictEffectsMode} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  entangleTransitions,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n  suspendIfUpdateReadFromEntangledAsyncAction,\n} from './ReactFiberClassUpdateQueue';\nimport {NoLanes} from './ReactFiberLane';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext';\nimport {requestUpdateLane, scheduleUpdateOnFiber} from './ReactFiberWorkLoop';\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook';\nimport {startUpdateTimerByLane} from './ReactProfilerTimer';\n\nconst fakeInternalInstance = {};\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutContextTypes;\nlet didWarnAboutChildContextTypes;\nlet didWarnAboutInvalidateContextType;\nlet didWarnOnInvalidCallback;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set        ();\n  didWarnAboutUninitializedState = new Set        ();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set        ();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set        ();\n  didWarnAboutDirectlyAssigningPropsToState = new Set        ();\n  didWarnAboutUndefinedDerivedState = new Set        ();\n  didWarnAboutContextTypeAndContextTypes = new Set        ();\n  didWarnAboutContextTypes = new Set       ();\n  didWarnAboutChildContextTypes = new Set       ();\n  didWarnAboutInvalidateContextType = new Set        ();\n  didWarnOnInvalidCallback = new Set        ();\n\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction warnOnInvalidCallback(callback       ) {\n  if (__DEV__) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    const key = String(callback);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        'Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callback,\n      );\n    }\n  }\n}\n\nfunction warnOnUndefinedDerivedState(type     , partialState     ) {\n  if (__DEV__) {\n    if (partialState === undefined) {\n      const componentName = getComponentNameFromType(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  }\n}\n\nfunction applyDerivedStateFromProps(\n  workInProgress       ,\n  ctor     ,\n  getDerivedStateFromProps                                 ,\n  nextProps     ,\n) {\n  const prevState = workInProgress.memoizedState;\n  let partialState = getDerivedStateFromProps(nextProps, prevState);\n  if (__DEV__) {\n    if (workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue                   = (workInProgress.updateQueue     );\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  // $FlowFixMe[missing-local-annot]\n  enqueueSetState(inst     , payload     , callback) {\n    const fiber = getInstance(inst);\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback);\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      startUpdateTimerByLane(lane, 'this.setState()');\n      scheduleUpdateOnFiber(root, fiber, lane);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst     , payload     , callback      ) {\n    const fiber = getInstance(inst);\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback);\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      startUpdateTimerByLane(lane, 'this.replaceState()');\n      scheduleUpdateOnFiber(root, fiber, lane);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  // $FlowFixMe[missing-local-annot]\n  enqueueForceUpdate(inst     , callback) {\n    const fiber = getInstance(inst);\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback);\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      startUpdateTimerByLane(lane, 'this.forceUpdate()');\n      scheduleUpdateOnFiber(root, fiber, lane);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress       ,\n  ctor     ,\n  oldProps     ,\n  newProps     ,\n  oldState     ,\n  newState     ,\n  nextContext     ,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    let shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n    if (__DEV__) {\n      if (workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(\n            newProps,\n            newState,\n            nextContext,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentNameFromType(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress       , ctor     , newProps     ) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentNameFromType(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          'No `render` method found on the %s ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          'No `render` method found on the %s ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes && !didWarnAboutChildContextTypes.has(ctor)) {\n        didWarnAboutChildContextTypes.add(ctor);\n        console.error(\n          '%s uses the legacy childContextTypes API which was removed in React 19. ' +\n            'Use React.createContext() instead. (https://react.dev/link/legacy-context)',\n          name,\n        );\n      }\n      if (ctor.contextTypes && !didWarnAboutContextTypes.has(ctor)) {\n        didWarnAboutContextTypes.add(ctor);\n        console.error(\n          '%s uses the legacy contextTypes API which was removed in React 19. ' +\n            'Use React.createContext() with static contextType instead. ' +\n            '(https://react.dev/link/legacy-context)',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n      if (ctor.childContextTypes && !didWarnAboutChildContextTypes.has(ctor)) {\n        didWarnAboutChildContextTypes.add(ctor);\n        console.error(\n          '%s uses the legacy childContextTypes API which will soon be removed. ' +\n            'Use React.createContext() instead. (https://react.dev/link/legacy-context)',\n          name,\n        );\n      }\n      if (ctor.contextTypes && !didWarnAboutContextTypes.has(ctor)) {\n        didWarnAboutContextTypes.add(ctor);\n        console.error(\n          '%s uses the legacy contextTypes API which will soon be removed. ' +\n            'Use React.createContext() with static contextType instead. ' +\n            '(https://react.dev/link/legacy-context)',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentNameFromType(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        'When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentNameFromType(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress       ,\n  ctor     ,\n  props     ,\n)      {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE);\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_CONSUMER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentNameFromType(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType     ));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  let instance = new ctor(props, context);\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (workInProgress.mode & StrictLegacyMode) {\n      setIsStrictModeForDevtools(true);\n      try {\n        instance = new ctor(props, context);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentNameFromType(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://react.dev/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress       , instance     ) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentNameFromFiber(workInProgress) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress       ,\n  instance     ,\n  newProps     ,\n  nextContext     ,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentNameFromFiber(workInProgress) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress       ,\n  ctor     ,\n  newProps     ,\n  renderLanes       ,\n)       {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = {};\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n      workInProgress,\n      instance,\n    );\n  }\n\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    suspendIfUpdateReadFromEntangledAsyncAction();\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    workInProgress.flags |= Update | LayoutStatic;\n  }\n  if (__DEV__ && (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n    workInProgress.flags |= MountLayoutDev;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress       ,\n  ctor     ,\n  newProps     ,\n  renderLanes       ,\n)          {\n  const instance = workInProgress.stateNode;\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps = resolveClassComponentProps(\n    ctor,\n    unresolvedOldProps,\n    workInProgress.type === workInProgress.elementType,\n  );\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // When comparing whether props changed, we should compare using the\n  // unresolved props object that is stored on the fiber, rather than the\n  // one that gets assigned to the instance, because that object may have been\n  // cloned to resolve default props and/or remove `ref`.\n  const unresolvedNewProps = workInProgress.pendingProps;\n  const didReceiveNewProps = unresolvedNewProps !== unresolvedOldProps;\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (didReceiveNewProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  suspendIfUpdateReadFromEntangledAsyncAction();\n  newState = workInProgress.memoizedState;\n  if (\n    !didReceiveNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update | LayoutStatic;\n    }\n    if (__DEV__ && (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n      workInProgress.flags |= MountLayoutDev;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update | LayoutStatic;\n    }\n    if (__DEV__ && (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n      workInProgress.flags |= MountLayoutDev;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update | LayoutStatic;\n    }\n    if (__DEV__ && (workInProgress.mode & StrictEffectsMode) !== NoMode) {\n      workInProgress.flags |= MountLayoutDev;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current       ,\n  workInProgress       ,\n  ctor     ,\n  newProps     ,\n  renderLanes       ,\n)          {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps = resolveClassComponentProps(\n    ctor,\n    unresolvedOldProps,\n    workInProgress.type === workInProgress.elementType,\n  );\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  suspendIfUpdateReadFromEntangledAsyncAction();\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing() &&\n    !(\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies)\n    )\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    ) ||\n    // TODO: In some cases, we'll end up checking if context has changed twice,\n    // both before and after `shouldComponentUpdate` has been called. Not ideal,\n    // but I'm loath to refactor this function. This only happens for memoized\n    // components so it's not that common.\n    (current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies));\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport function resolveClassComponentProps(\n  Component     ,\n  baseProps        ,\n  // Only resolve default props if this is a lazy component. Otherwise, they\n  // would have already been resolved by the JSX runtime.\n  // TODO: We're going to remove default prop resolution from the JSX runtime\n  // and keep it only for class components. As part of that change, we should\n  // remove this extra check.\n  alreadyResolvedDefaultProps         ,\n)         {\n  let newProps = baseProps;\n\n  // Remove ref from the props object, if it exists.\n  if ('ref' in baseProps) {\n    newProps = ({}     );\n    for (const propName in baseProps) {\n      if (propName !== 'ref') {\n        newProps[propName] = baseProps[propName];\n      }\n    }\n  }\n\n  // Resolve default props.\n  const defaultProps = Component.defaultProps;\n  if (\n    defaultProps &&\n    // If disableDefaultPropsExceptForClasses is true, we always resolve\n    // default props here in the reconciler, rather than in the JSX runtime.\n    (disableDefaultPropsExceptForClasses || !alreadyResolvedDefaultProps)\n  ) {\n    // We may have already copied the props object above to remove ref. If so,\n    // we can modify that. Otherwise, copy the props object with Object.assign.\n    if (newProps === baseProps) {\n      newProps = assign({}, newProps);\n    }\n    // Taken from old JSX runtime, where this used to live.\n    for (const propName in defaultProps) {\n      if (newProps[propName] === undefined) {\n        newProps[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return newProps;\n}\n\nexport {\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport assign from 'shared/assign';\nimport {disableDefaultPropsExceptForClasses} from 'shared/ReactFeatureFlags';\n\nexport function resolveDefaultPropsOnNonClassComponent(\n  Component     ,\n  baseProps        ,\n)         {\n  if (disableDefaultPropsExceptForClasses) {\n    // Support for defaultProps is removed in React 19 for all types\n    // except classes.\n    return baseProps;\n  }\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                           \n                                                        \n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nimport {ClassComponent} from './ReactWorkTags';\n\nimport reportGlobalError from 'shared/reportGlobalError';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nimport {bindToConsole} from './ReactFiberConfig';\n\n// Side-channel since I'm not sure we want to make this part of the public API\nlet componentName                = null;\nlet errorBoundaryName                = null;\n\nexport function defaultOnUncaughtError(\n  error       ,\n  errorInfo                             ,\n)       {\n  // Overriding this can silence these warnings e.g. for tests.\n  // See https://github.com/facebook/react/pull/13384\n\n  // For uncaught root errors we report them as uncaught to the browser's\n  // onerror callback. This won't have component stacks and the error addendum.\n  // So we add those into a separate console.warn.\n  reportGlobalError(error);\n  if (__DEV__) {\n    const componentNameMessage = componentName\n      ? `An error occurred in the <${componentName}> component.`\n      : 'An error occurred in one of your React components.';\n\n    const errorBoundaryMessage =\n      'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n      'Visit https://react.dev/link/error-boundaries to learn more about error boundaries.';\n\n    try {\n      console.warn(\n        '%s\\n\\n%s\\n',\n        componentNameMessage,\n        errorBoundaryMessage,\n        // We let our console.error wrapper add the component stack to the end.\n      );\n    } finally {\n      // ignore\n    }\n  }\n}\n\nexport function defaultOnCaughtError(\n  error       ,\n  errorInfo   \n                              \n                                                \n   ,\n)       {\n  // Overriding this can silence these warnings e.g. for tests.\n  // See https://github.com/facebook/react/pull/13384\n\n  // Caught by error boundary\n  if (__DEV__) {\n    const componentNameMessage = componentName\n      ? `The above error occurred in the <${componentName}> component.`\n      : 'The above error occurred in one of your React components.';\n\n    // In development, we provide our own message which includes the component stack\n    // in addition to the error.\n    const recreateMessage =\n      `React will try to recreate this component tree from scratch ` +\n      `using the error boundary you provided, ${\n        errorBoundaryName || 'Anonymous'\n      }.`;\n\n    try {\n      if (\n        typeof error === 'object' &&\n        error !== null &&\n        typeof error.environmentName === 'string'\n      ) {\n        // This was a Server error. We print the environment name in a badge just like we do with\n        // replays of console logs to indicate that the source of this throw as actually the Server.\n        bindToConsole(\n          'error',\n          [\n            '%o\\n\\n%s\\n\\n%s\\n',\n            error,\n            componentNameMessage,\n            recreateMessage,\n            // We let DevTools or console.createTask add the component stack to the end.\n          ],\n          error.environmentName,\n        )();\n      } else {\n        console.error(\n          '%o\\n\\n%s\\n\\n%s\\n',\n          error,\n          componentNameMessage,\n          recreateMessage,\n          // We let our DevTools or console.createTask add the component stack to the end.\n        );\n      }\n    } finally {\n      // ignore\n    }\n  } else {\n    // In production, we print the error directly.\n    // This will include the message, the JS stack, and anything the browser wants to show.\n    // We pass the error object instead of custom message so that the browser displays the error natively.\n    console['error'](error); // Don't transform to our wrapper, however, React DevTools can still add a stack.\n  }\n}\n\nexport function defaultOnRecoverableError(\n  error       ,\n  errorInfo                             ,\n) {\n  reportGlobalError(error);\n}\n\nexport function logUncaughtError(\n  root           ,\n  errorInfo                      ,\n)       {\n  try {\n    if (__DEV__) {\n      componentName = errorInfo.source\n        ? getComponentNameFromFiber(errorInfo.source)\n        : null;\n      errorBoundaryName = null;\n    }\n    const error = (errorInfo.value     );\n    if (__DEV__ && ReactSharedInternals.actQueue !== null) {\n      // For uncaught errors inside act, we track them on the act and then\n      // rethrow them into the test.\n      ReactSharedInternals.thrownErrors.push(error);\n      return;\n    }\n    const onUncaughtError = root.onUncaughtError;\n    onUncaughtError(error, {\n      componentStack: errorInfo.stack,\n    });\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n\nexport function logCaughtError(\n  root           ,\n  boundary       ,\n  errorInfo                      ,\n)       {\n  try {\n    if (__DEV__) {\n      componentName = errorInfo.source\n        ? getComponentNameFromFiber(errorInfo.source)\n        : null;\n      errorBoundaryName = getComponentNameFromFiber(boundary);\n    }\n    const error = (errorInfo.value     );\n    const onCaughtError = root.onCaughtError;\n    onCaughtError(error, {\n      componentStack: errorInfo.stack,\n      errorBoundary:\n        boundary.tag === ClassComponent\n          ? boundary.stateNode // This should always be the case as long as we only have class boundaries\n          : null,\n    });\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                           \n                                                  \n                                                        \n                                                         \n                                                \n                                                                   \n                                                              \n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostRoot,\n  IncompleteClassComponent,\n  IncompleteFunctionComponent,\n  FunctionComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  ActivityComponent,\n  SuspenseComponent,\n  OffscreenComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n  ForceClientRender,\n  ScheduleRetry,\n} from './ReactFiberFlags';\nimport {NoMode, ConcurrentMode} from './ReactTypeOfMode';\nimport {\n  enableUpdaterTracking,\n  enablePostpone,\n  disableLegacyMode,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValueAtFiber} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactFiberClassUpdateQueue';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading';\nimport {\n  getShellBoundary,\n  getSuspenseHandler,\n} from './ReactFiberSuspenseContext';\nimport {\n  renderDidError,\n  queueConcurrentError,\n  renderDidSuspendDelayIfPossible,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  attachPingListener,\n  restorePendingUpdaters,\n  renderDidSuspend,\n} from './ReactFiberWorkLoop';\nimport {propagateParentContextChangesToDeferredTree} from './ReactFiberNewContext';\nimport {logUncaughtError, logCaughtError} from './ReactFiberErrorLogger';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook';\nimport {\n  SyncLane,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane';\nimport {\n  getIsHydrating,\n  markDidThrowWhileHydratingDEV,\n  queueHydrationError,\n  HydrationMismatchException,\n} from './ReactFiberHydrationContext';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {noopSuspenseyCommitThenable} from './ReactFiberThenable';\nimport {REACT_POSTPONE_TYPE} from 'shared/ReactSymbols';\nimport {runWithFiberInDEV} from './ReactCurrentFiber';\nimport {callComponentDidCatchInDEV} from './ReactFiberCallUserSpace';\n\nfunction createRootErrorUpdate(\n  root           ,\n  errorInfo                      ,\n  lane      ,\n)                {\n  const update = createUpdate(lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  update.callback = () => {\n    if (__DEV__) {\n      runWithFiberInDEV(errorInfo.source, logUncaughtError, root, errorInfo);\n    } else {\n      logUncaughtError(root, errorInfo);\n    }\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(lane      )                {\n  const update = createUpdate(lane);\n  update.tag = CaptureUpdate;\n  return update;\n}\n\nfunction initializeClassErrorUpdate(\n  update               ,\n  root           ,\n  fiber       ,\n  errorInfo                      ,\n)       {\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      return getDerivedStateFromError(error);\n    };\n    update.callback = () => {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      if (__DEV__) {\n        runWithFiberInDEV(\n          errorInfo.source,\n          logCaughtError,\n          root,\n          fiber,\n          errorInfo,\n        );\n      } else {\n        logCaughtError(root, fiber, errorInfo);\n      }\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    // $FlowFixMe[missing-this-annot]\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      if (__DEV__) {\n        runWithFiberInDEV(\n          errorInfo.source,\n          logCaughtError,\n          root,\n          fiber,\n          errorInfo,\n        );\n      } else {\n        logCaughtError(root, fiber, errorInfo);\n      }\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n      if (__DEV__) {\n        callComponentDidCatchInDEV(this, errorInfo);\n      } else {\n        const error = errorInfo.value;\n        const stack = errorInfo.stack;\n        this.componentDidCatch(error, {\n          componentStack: stack !== null ? stack : '',\n        });\n      }\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane      ))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentNameFromFiber(fiber) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber       , rootRenderLanes       ) {\n  const currentSourceFiber = sourceFiber.alternate;\n  if (currentSourceFiber !== null) {\n    // Since we never visited the children of the suspended component, we\n    // need to propagate the context change now, to ensure that we visit\n    // them during the retry.\n    //\n    // We don't have to do this for errors because we retry errors without\n    // committing in between. So this is specific to Suspense.\n    propagateParentContextChangesToDeferredTree(\n      currentSourceFiber,\n      sourceFiber,\n      rootRenderLanes,\n    );\n  }\n\n  // Reset the memoizedState to what it was before we attempted to render it.\n  // A legacy mode Suspense quirk, only relevant to hook components.\n  const tag = sourceFiber.tag;\n  if (\n    !disableLegacyMode &&\n    (sourceFiber.mode & ConcurrentMode) === NoMode &&\n    (tag === FunctionComponent ||\n      tag === ForwardRef ||\n      tag === SimpleMemoComponent)\n  ) {\n    const currentSource = sourceFiber.alternate;\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction markSuspenseBoundaryShouldCapture(\n  suspenseBoundary       ,\n  returnFiber              ,\n  sourceFiber       ,\n  root           ,\n  rootRenderLanes       ,\n)               {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if (\n    !disableLegacyMode &&\n    (suspenseBoundary.mode & ConcurrentMode) === NoMode\n  ) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n      // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (sourceFiber.tag === ClassComponent) {\n        const currentSourceFiber = sourceFiber.alternate;\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          const update = createUpdate(SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update, SyncLane);\n        }\n      } else if (sourceFiber.tag === FunctionComponent) {\n        const currentSourceFiber = sourceFiber.alternate;\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed function component.\n          sourceFiber.tag = IncompleteFunctionComponent;\n        }\n      }\n\n      // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n    return suspenseBoundary;\n  }\n  // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n  suspenseBoundary.flags |= ShouldCapture;\n  // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(\n  root           ,\n  returnFiber              ,\n  sourceFiber       ,\n  value       ,\n  rootRenderLanes       ,\n)          {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (value !== null && typeof value === 'object') {\n    if (enablePostpone && value.$$typeof === REACT_POSTPONE_TYPE) {\n      // Act as if this is an infinitely suspending promise.\n      value = {then: function () {}};\n    }\n    if (typeof value.then === 'function') {\n      // This is a wakeable. The component suspended.\n      const wakeable           = (value     );\n      resetSuspendedComponent(sourceFiber, rootRenderLanes);\n\n      if (__DEV__) {\n        if (\n          getIsHydrating() &&\n          (disableLegacyMode || sourceFiber.mode & ConcurrentMode)\n        ) {\n          markDidThrowWhileHydratingDEV();\n        }\n      }\n\n      // Mark the nearest Suspense boundary to switch to rendering a fallback.\n      const suspenseBoundary = getSuspenseHandler();\n      if (suspenseBoundary !== null) {\n        switch (suspenseBoundary.tag) {\n          case ActivityComponent:\n          case SuspenseComponent: {\n            // If this suspense/activity boundary is not already showing a fallback, mark\n            // the in-progress render as suspended. We try to perform this logic\n            // as soon as soon as possible during the render phase, so the work\n            // loop can know things like whether it's OK to switch to other tasks,\n            // or whether it can wait for data to resolve before continuing.\n            // TODO: Most of these checks are already performed when entering a\n            // Suspense boundary. We should track the information on the stack so\n            // we don't have to recompute it on demand. This would also allow us\n            // to unify with `use` which needs to perform this logic even sooner,\n            // before `throwException` is called.\n            if (disableLegacyMode || sourceFiber.mode & ConcurrentMode) {\n              if (getShellBoundary() === null) {\n                // Suspended in the \"shell\" of the app. This is an undesirable\n                // loading state. We should avoid committing this tree.\n                renderDidSuspendDelayIfPossible();\n              } else {\n                // If we suspended deeper than the shell, we don't need to delay\n                // the commmit. However, we still call renderDidSuspend if this is\n                // a new boundary, to tell the work loop that a new fallback has\n                // appeared during this render.\n                // TODO: Theoretically we should be able to delete this branch.\n                // It's currently used for two things: 1) to throttle the\n                // appearance of successive loading states, and 2) in\n                // SuspenseList, to determine whether the children include any\n                // pending fallbacks. For 1, we should apply throttling to all\n                // retries, not just ones that render an additional fallback. For\n                // 2, we should check subtreeFlags instead. Then we can delete\n                // this branch.\n                const current = suspenseBoundary.alternate;\n                if (current === null) {\n                  renderDidSuspend();\n                }\n              }\n            }\n\n            suspenseBoundary.flags &= ~ForceClientRender;\n            markSuspenseBoundaryShouldCapture(\n              suspenseBoundary,\n              returnFiber,\n              sourceFiber,\n              root,\n              rootRenderLanes,\n            );\n            // Retry listener\n            //\n            // If the fallback does commit, we need to attach a different type of\n            // listener. This one schedules an update on the Suspense boundary to\n            // turn the fallback state off.\n            //\n            // Stash the wakeable on the boundary fiber so we can access it in the\n            // commit phase.\n            //\n            // When the wakeable resolves, we'll attempt to render the boundary\n            // again (\"retry\").\n\n            // Check if this is a Suspensey resource. We do not attach retry\n            // listeners to these, because we don't actually need them for\n            // rendering. Only for committing. Instead, if a fallback commits\n            // and the only thing that suspended was a Suspensey resource, we\n            // retry immediately.\n            // TODO: Refactor throwException so that we don't have to do this type\n            // check. The caller already knows what the cause was.\n            const isSuspenseyResource =\n              wakeable === noopSuspenseyCommitThenable;\n            if (isSuspenseyResource) {\n              suspenseBoundary.flags |= ScheduleRetry;\n            } else {\n              const retryQueue                    =\n                (suspenseBoundary.updateQueue     );\n              if (retryQueue === null) {\n                suspenseBoundary.updateQueue = new Set([wakeable]);\n              } else {\n                retryQueue.add(wakeable);\n              }\n\n              // We only attach ping listeners in concurrent mode. Legacy\n              // Suspense always commits fallbacks synchronously, so there are\n              // no pings.\n              if (disableLegacyMode || suspenseBoundary.mode & ConcurrentMode) {\n                attachPingListener(root, wakeable, rootRenderLanes);\n              }\n            }\n            return false;\n          }\n          case OffscreenComponent: {\n            if (disableLegacyMode || suspenseBoundary.mode & ConcurrentMode) {\n              suspenseBoundary.flags |= ShouldCapture;\n              const isSuspenseyResource =\n                wakeable === noopSuspenseyCommitThenable;\n              if (isSuspenseyResource) {\n                suspenseBoundary.flags |= ScheduleRetry;\n              } else {\n                const offscreenQueue                        =\n                  (suspenseBoundary.updateQueue     );\n                if (offscreenQueue === null) {\n                  const newOffscreenQueue                 = {\n                    transitions: null,\n                    markerInstances: null,\n                    retryQueue: new Set([wakeable]),\n                  };\n                  suspenseBoundary.updateQueue = newOffscreenQueue;\n                } else {\n                  const retryQueue = offscreenQueue.retryQueue;\n                  if (retryQueue === null) {\n                    offscreenQueue.retryQueue = new Set([wakeable]);\n                  } else {\n                    retryQueue.add(wakeable);\n                  }\n                }\n\n                attachPingListener(root, wakeable, rootRenderLanes);\n              }\n              return false;\n            }\n          }\n        }\n        throw new Error(\n          `Unexpected Suspense handler tag (${suspenseBoundary.tag}). This ` +\n            'is a bug in React.',\n        );\n      } else {\n        // No boundary was found. Unless this is a sync update, this is OK.\n        // We can suspend and wait for more data to arrive.\n\n        if (disableLegacyMode || root.tag === ConcurrentRoot) {\n          // In a concurrent root, suspending without a Suspense boundary is\n          // allowed. It will suspend indefinitely without committing.\n          //\n          // TODO: Should we have different behavior for discrete updates? What\n          // about flushSync? Maybe it should put the tree into an inert state,\n          // and potentially log a warning. Revisit this for a future release.\n          attachPingListener(root, wakeable, rootRenderLanes);\n          renderDidSuspendDelayIfPossible();\n          return false;\n        } else {\n          // In a legacy root, suspending without a boundary is always an error.\n          const uncaughtSuspenseError = new Error(\n            'A component suspended while responding to synchronous input. This ' +\n              'will cause the UI to be replaced with a loading indicator. To ' +\n              'fix, updates that suspend should be wrapped ' +\n              'with startTransition.',\n          );\n          value = uncaughtSuspenseError;\n        }\n      }\n    }\n  }\n\n  // This is a regular error, not a Suspense wakeable.\n  if (\n    getIsHydrating() &&\n    (disableLegacyMode || sourceFiber.mode & ConcurrentMode)\n  ) {\n    markDidThrowWhileHydratingDEV();\n    const hydrationBoundary = getSuspenseHandler();\n    // If the error was thrown during hydration, we may be able to recover by\n    // discarding the dehydrated content and switching to a client render.\n    // Instead of surfacing the error, find the nearest Suspense boundary\n    // and render it again without hydration.\n    if (hydrationBoundary !== null) {\n      if ((hydrationBoundary.flags & ShouldCapture) === NoFlags) {\n        // Set a flag to indicate that we should try rendering the normal\n        // children again, not the fallback.\n        hydrationBoundary.flags |= ForceClientRender;\n      }\n      markSuspenseBoundaryShouldCapture(\n        hydrationBoundary,\n        returnFiber,\n        sourceFiber,\n        root,\n        rootRenderLanes,\n      );\n\n      // Even though the user may not be affected by this error, we should\n      // still log it so it can be fixed.\n      if (value !== HydrationMismatchException) {\n        const wrapperError = new Error(\n          'There was an error while hydrating but React was able to recover by ' +\n            'instead client rendering from the nearest Suspense boundary.',\n          {cause: value},\n        );\n        queueHydrationError(\n          createCapturedValueAtFiber(wrapperError, sourceFiber),\n        );\n      }\n      return false;\n    } else {\n      if (value !== HydrationMismatchException) {\n        const wrapperError = new Error(\n          'There was an error while hydrating but React was able to recover by ' +\n            'instead client rendering the entire root.',\n          {cause: value},\n        );\n        queueHydrationError(\n          createCapturedValueAtFiber(wrapperError, sourceFiber),\n        );\n      }\n      const workInProgress        = (root.current     ).alternate;\n      // Schedule an update at the root to log the error but this shouldn't\n      // actually happen because we should recover.\n      workInProgress.flags |= ShouldCapture;\n      const lane = pickArbitraryLane(rootRenderLanes);\n      workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n      const rootErrorInfo = createCapturedValueAtFiber(value, sourceFiber);\n      const update = createRootErrorUpdate(\n        workInProgress.stateNode,\n        rootErrorInfo, // This should never actually get logged due to the recovery.\n        lane,\n      );\n      enqueueCapturedUpdate(workInProgress, update);\n      renderDidError();\n      return false;\n    }\n  } else {\n    // Otherwise, fall through to the error path.\n  }\n\n  const wrapperError = new Error(\n    'There was an error during concurrent rendering but React was able to recover by ' +\n      'instead synchronously rendering the entire root.',\n    {cause: value},\n  );\n  queueConcurrentError(createCapturedValueAtFiber(wrapperError, sourceFiber));\n  renderDidError();\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n\n  if (returnFiber === null) {\n    // There's no return fiber, which means the root errored. This should never\n    // happen. Return `true` to trigger a fatal error (panic).\n    return true;\n  }\n\n  const errorInfo = createCapturedValueAtFiber(value, sourceFiber);\n  let workInProgress        = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(\n          workInProgress.stateNode,\n          errorInfo,\n          lane,\n        );\n        enqueueCapturedUpdate(workInProgress, update);\n        return false;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(lane);\n          initializeClassErrorUpdate(update, root, workInProgress, errorInfo);\n          enqueueCapturedUpdate(workInProgress, update);\n          return false;\n        }\n        break;\n      default:\n        break;\n    }\n    // $FlowFixMe[incompatible-type] we bail out when we get a null\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n\n  return false;\n}\n\nexport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n  initializeClassErrorUpdate,\n};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n             \n                             \n        \n            \n                              \n                                                               \n                                                                      \n                                                   \n\nimport {enableTransitionTracing} from 'shared/ReactFeatureFlags';\nimport {createCursor, push, pop} from './ReactFiberStack';\nimport {getWorkInProgressTransitions} from './ReactFiberWorkLoop';\n\n                                                 \n\n                                          \n                                            \n                                                                \n                                               \n                      \n           \n                                                                         \n           \n                        \n           \n                                                                   \n           \n                                                      \n  \n\n// TODO: Is there a way to not include the tag or name here?\n                                     \n                         \n                                      \n                                              \n                                        \n                      \n  \n\n                               \n                                                      \n                       \n  \n\nexport const TransitionRoot = 0;\nexport const TransitionTracingMarker = 1;\n                                     \n\n                                                                     \n\nexport function processTransitionCallbacks(\n  pendingTransitions                            ,\n  endTime        ,\n  callbacks                            ,\n)       {\n  if (enableTransitionTracing) {\n    if (pendingTransitions !== null) {\n      const transitionStart = pendingTransitions.transitionStart;\n      const onTransitionStart = callbacks.onTransitionStart;\n      if (transitionStart !== null && onTransitionStart != null) {\n        transitionStart.forEach(transition => {\n          if (transition.name != null) {\n            onTransitionStart(transition.name, transition.startTime);\n          }\n        });\n      }\n\n      const markerProgress = pendingTransitions.markerProgress;\n      const onMarkerProgress = callbacks.onMarkerProgress;\n      if (onMarkerProgress != null && markerProgress !== null) {\n        markerProgress.forEach((markerInstance, markerName) => {\n          if (markerInstance.transitions !== null) {\n            // TODO: Clone the suspense object so users can't modify it\n            const pending =\n              markerInstance.pendingBoundaries !== null\n                ? Array.from(markerInstance.pendingBoundaries.values())\n                : [];\n            markerInstance.transitions.forEach(transition => {\n              if (transition.name != null) {\n                onMarkerProgress(\n                  transition.name,\n                  markerName,\n                  transition.startTime,\n                  endTime,\n                  pending,\n                );\n              }\n            });\n          }\n        });\n      }\n\n      const markerComplete = pendingTransitions.markerComplete;\n      const onMarkerComplete = callbacks.onMarkerComplete;\n      if (markerComplete !== null && onMarkerComplete != null) {\n        markerComplete.forEach((transitions, markerName) => {\n          transitions.forEach(transition => {\n            if (transition.name != null) {\n              onMarkerComplete(\n                transition.name,\n                markerName,\n                transition.startTime,\n                endTime,\n              );\n            }\n          });\n        });\n      }\n\n      const markerIncomplete = pendingTransitions.markerIncomplete;\n      const onMarkerIncomplete = callbacks.onMarkerIncomplete;\n      if (onMarkerIncomplete != null && markerIncomplete !== null) {\n        markerIncomplete.forEach(({transitions, aborts}, markerName) => {\n          transitions.forEach(transition => {\n            const filteredAborts = [];\n            aborts.forEach(abort => {\n              switch (abort.reason) {\n                case 'marker': {\n                  filteredAborts.push({\n                    type: 'marker',\n                    name: abort.name,\n                    endTime,\n                  });\n                  break;\n                }\n                case 'suspense': {\n                  filteredAborts.push({\n                    type: 'suspense',\n                    name: abort.name,\n                    endTime,\n                  });\n                  break;\n                }\n                default: {\n                  break;\n                }\n              }\n            });\n\n            if (filteredAborts.length > 0) {\n              if (transition.name != null) {\n                onMarkerIncomplete(\n                  transition.name,\n                  markerName,\n                  transition.startTime,\n                  filteredAborts,\n                );\n              }\n            }\n          });\n        });\n      }\n\n      const transitionProgress = pendingTransitions.transitionProgress;\n      const onTransitionProgress = callbacks.onTransitionProgress;\n      if (onTransitionProgress != null && transitionProgress !== null) {\n        transitionProgress.forEach((pending, transition) => {\n          if (transition.name != null) {\n            onTransitionProgress(\n              transition.name,\n              transition.startTime,\n              endTime,\n              Array.from(pending.values()),\n            );\n          }\n        });\n      }\n\n      const transitionComplete = pendingTransitions.transitionComplete;\n      const onTransitionComplete = callbacks.onTransitionComplete;\n      if (transitionComplete !== null && onTransitionComplete != null) {\n        transitionComplete.forEach(transition => {\n          if (transition.name != null) {\n            onTransitionComplete(\n              transition.name,\n              transition.startTime,\n              endTime,\n            );\n          }\n        });\n      }\n    }\n  }\n}\n\n// For every tracing marker, store a pointer to it. We will later access it\n// to get the set of suspense boundaries that need to resolve before the\n// tracing marker can be logged as complete\n// This code lives separate from the ReactFiberTransition code because\n// we push and pop on the tracing marker, not the suspense boundary\nconst markerInstanceStack                                                   =\n  createCursor(null);\n\nexport function pushRootMarkerInstance(workInProgress       )       {\n  if (enableTransitionTracing) {\n    // On the root, every transition gets mapped to it's own map of\n    // suspense boundaries. The transition is marked as complete when\n    // the suspense boundaries map is empty. We do this because every\n    // transition completes at different times and depends on different\n    // suspense boundaries to complete. We store all the transitions\n    // along with its map of suspense boundaries in the root incomplete\n    // transitions map. Each entry in this map functions like a tracing\n    // marker does, so we can push it onto the marker instance stack\n    const transitions = getWorkInProgressTransitions();\n    const root            = workInProgress.stateNode;\n\n    if (transitions !== null) {\n      transitions.forEach(transition => {\n        if (!root.incompleteTransitions.has(transition)) {\n          const markerInstance                        = {\n            tag: TransitionRoot,\n            transitions: new Set([transition]),\n            pendingBoundaries: null,\n            aborts: null,\n            name: null,\n          };\n          root.incompleteTransitions.set(transition, markerInstance);\n        }\n      });\n    }\n\n    const markerInstances = [];\n    // For ever transition on the suspense boundary, we push the transition\n    // along with its map of pending suspense boundaries onto the marker\n    // instance stack.\n    root.incompleteTransitions.forEach(markerInstance => {\n      markerInstances.push(markerInstance);\n    });\n    push(markerInstanceStack, markerInstances, workInProgress);\n  }\n}\n\nexport function popRootMarkerInstance(workInProgress       ) {\n  if (enableTransitionTracing) {\n    pop(markerInstanceStack, workInProgress);\n  }\n}\n\nexport function pushMarkerInstance(\n  workInProgress       ,\n  markerInstance                       ,\n)       {\n  if (enableTransitionTracing) {\n    if (markerInstanceStack.current === null) {\n      push(markerInstanceStack, [markerInstance], workInProgress);\n    } else {\n      push(\n        markerInstanceStack,\n        markerInstanceStack.current.concat(markerInstance),\n        workInProgress,\n      );\n    }\n  }\n}\n\nexport function popMarkerInstance(workInProgress       )       {\n  if (enableTransitionTracing) {\n    pop(markerInstanceStack, workInProgress);\n  }\n}\n\nexport function getMarkerInstances()                                      {\n  if (enableTransitionTracing) {\n    return markerInstanceStack.current;\n  }\n  return null;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n             \n                    \n               \n                \n                      \n                \n                \n                    \n                          \n                       \n                     \n             \n                \n                           \n                                                                            \n                                                           \n                                                  \n                                                  \n                                                                 \n             \n                \n                          \n                                       \n                                                                 \n             \n                    \n                 \n                 \n                 \n                    \n                                        \n             \n        \n                      \n                   \n                                    \n                                                              \n                                                \n                                                                              \n\nimport {\n  markComponentRenderStarted,\n  markComponentRenderStopped,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook';\nimport {\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  IncompleteFunctionComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n  Throw,\n  ViewTransitionComponent,\n  ActivityComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  Callback,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  RefStatic,\n  ChildDeletion,\n  ForceUpdateForLegacySuspense,\n  StaticMask,\n  ShouldCapture,\n  ForceClientRender,\n  Passive,\n  DidDefer,\n  ViewTransitionNamedStatic,\n  ViewTransitionNamedMount,\n  LayoutStatic,\n} from './ReactFiberFlags';\nimport {\n  disableLegacyContext,\n  disableLegacyContextForFunctionComponents,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableSchedulingProfiler,\n  enableTransitionTracing,\n  enableLegacyHidden,\n  enableCPUSuspense,\n  enablePostpone,\n  enableRenderableContext,\n  disableLegacyMode,\n  disableDefaultPropsExceptForClasses,\n  enableHydrationLaneScheduling,\n  enableViewTransition,\n  enableFragmentRefs,\n} from 'shared/ReactFeatureFlags';\nimport isArray from 'shared/isArray';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings';\nimport {\n  REACT_LAZY_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  getIteratorFn,\n} from 'shared/ReactSymbols';\nimport {setCurrentFiber} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n  enqueueCapturedUpdate,\n  suspendIfUpdateReadFromEntangledAsyncAction,\n} from './ReactFiberClassUpdateQueue';\nimport {\n  NoLane,\n  NoLanes,\n  OffscreenLane,\n  DefaultLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n  pickArbitraryLane,\n} from './ReactFiberLane';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictLegacyMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  getSuspenseInstanceFallbackErrorDetails,\n  supportsHydration,\n  supportsResources,\n  supportsSingletons,\n  isPrimaryRenderer,\n  getResource,\n  createHoistableInstance,\n  HostTransitionContext,\n} from './ReactFiberConfig';\n                                                                           \nimport {shouldError, shouldSuspend} from './ReactFiberReconciler';\nimport {\n  pushHostContext,\n  pushHostContainer,\n  getRootHostContainer,\n} from './ReactFiberHostContext';\nimport {\n  suspenseStackCursor,\n  pushSuspenseListContext,\n  ForceSuspenseFallback,\n  hasSuspenseListContext,\n  setDefaultShallowSuspenseListContext,\n  setShallowSuspenseListContext,\n  pushPrimaryTreeSuspenseHandler,\n  pushFallbackTreeSuspenseHandler,\n  pushDehydratedActivitySuspenseHandler,\n  pushOffscreenSuspenseHandler,\n  reuseSuspenseHandlerOnStack,\n  popSuspenseHandler,\n} from './ReactFiberSuspenseContext';\nimport {\n  pushHiddenContext,\n  reuseHiddenContextOnStack,\n} from './ReactFiberHiddenContext';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent';\nimport {\n  pushProvider,\n  propagateContextChange,\n  lazilyPropagateParentContextChanges,\n  propagateParentContextChangesToDeferredTree,\n  checkIfContextChanged,\n  readContext,\n  prepareToReadContext,\n  scheduleContextWorkOnParentPath,\n} from './ReactFiberNewContext';\nimport {\n  renderWithHooks,\n  checkDidRenderIdHook,\n  bailoutHooks,\n  replaySuspendedComponentWithHooks,\n  renderTransitionAwareHostComponentWithHooks,\n} from './ReactFiberHooks';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext';\nimport {\n  getIsHydrating,\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedActivityInstance,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  claimHydratableSingleton,\n  tryToClaimNextHydratableInstance,\n  tryToClaimNextHydratableTextInstance,\n  claimNextHydratableActivityInstance,\n  claimNextHydratableSuspenseInstance,\n  warnIfHydrating,\n  queueHydrationError,\n} from './ReactFiberHydrationContext';\nimport {\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n  resolveClassComponentProps,\n} from './ReactFiberClassComponent';\nimport {resolveDefaultPropsOnNonClassComponent} from './ReactFiberLazyComponent';\nimport {\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  isSimpleFunctionComponent,\n  isFunctionClassComponent,\n} from './ReactFiber';\nimport {\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n  peekDeferredLane,\n} from './ReactFiberWorkLoop';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates';\nimport {pushCacheProvider, CacheContext} from './ReactFiberCacheComponent';\nimport {\n  createCapturedValueFromError,\n  createCapturedValueAtFiber,\n} from './ReactCapturedValue';\nimport {\n  createClassErrorUpdate,\n  initializeClassErrorUpdate,\n} from './ReactFiberThrow';\nimport {\n  getForksAtLevel,\n  isForkedChild,\n  pushTreeId,\n  pushMaterializedTreeId,\n} from './ReactFiberTreeContext';\nimport {\n  requestCacheFromPool,\n  pushRootTransition,\n  getSuspendedCache,\n  pushTransition,\n  getOffscreenDeferredCache,\n  getPendingTransitions,\n} from './ReactFiberTransition';\nimport {\n  getMarkerInstances,\n  pushMarkerInstance,\n  pushRootMarkerInstance,\n  TransitionTracingMarker,\n} from './ReactFiberTracingMarkerComponent';\nimport {\n  callLazyInitInDEV,\n  callComponentInDEV,\n  callRenderInDEV,\n} from './ReactFiberCallUserSpace';\n\n// A special exception that's used to unwind the stack when an update flows\n// into a dehydrated boundary.\nexport const SelectiveHydrationException        = new Error(\n  \"This is not a real error. It's an implementation detail of React's \" +\n    \"selective hydration feature. If this leaks into userspace, it's a bug in \" +\n    'React. Please file an issue.',\n);\n\nlet didReceiveUpdate          = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutContextTypes;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nexport let didWarnAboutReassigningProps         ;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\nlet didWarnAboutClassNameOnViewTransition;\n\nif (__DEV__) {\n  didWarnAboutBadClass = ({}                     );\n  didWarnAboutContextTypeOnFunctionComponent = ({}                     );\n  didWarnAboutContextTypes = ({}                     );\n  didWarnAboutGetDerivedStateOnFunctionComponent = ({}                     );\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = ({}                    );\n  didWarnAboutTailOptions = ({}                     );\n  didWarnAboutDefaultPropsOnFunctionComponent = ({}                     );\n  didWarnAboutClassNameOnViewTransition = ({}                     );\n}\n\nexport function reconcileChildren(\n  current              ,\n  workInProgress       ,\n  nextChildren     ,\n  renderLanes       ,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current       ,\n  workInProgress       ,\n  nextChildren     ,\n  renderLanes       ,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current              ,\n  workInProgress       ,\n  Component     ,\n  nextProps     ,\n  renderLanes       ,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  let propsWithoutRef;\n  if ('ref' in nextProps) {\n    // `ref` is just a prop now, but `forwardRef` expects it to not appear in\n    // the props object. This used to happen in the JSX runtime, but now we do\n    // it here.\n    propsWithoutRef = ({}                 );\n    for (const key in nextProps) {\n      // Since `ref` should only appear in props via the JSX transform, we can\n      // assume that this is a plain object. So we don't need a\n      // hasOwnProperty check.\n      if (key !== 'ref') {\n        propsWithoutRef[key] = nextProps[key];\n      }\n    }\n  } else {\n    propsWithoutRef = nextProps;\n  }\n\n  // The rest is a fork of updateFunctionComponent\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n\n  const nextChildren = renderWithHooks(\n    current,\n    workInProgress,\n    render,\n    propsWithoutRef,\n    ref,\n    renderLanes,\n  );\n  const hasId = checkDidRenderIdHook();\n\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current              ,\n  workInProgress       ,\n  Component     ,\n  nextProps     ,\n  renderLanes       ,\n)               {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      (disableDefaultPropsExceptForClasses ||\n        Component.defaultProps === undefined)\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        renderLanes,\n      );\n    }\n    if (!disableDefaultPropsExceptForClasses) {\n      if (__DEV__) {\n        if (Component.defaultProps !== undefined) {\n          const componentName = getComponentNameFromType(type) || 'Unknown';\n          if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n            console.error(\n              '%s: Support for defaultProps will be removed from memo components ' +\n                'in a future major release. Use JavaScript default parameters instead.',\n              componentName,\n            );\n            didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n          }\n        }\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  const currentChild = ((current.child     )       ); // This is always exactly one child\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n    current,\n    renderLanes,\n  );\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current              ,\n  workInProgress       ,\n  Component     ,\n  nextProps     ,\n  renderLanes       ,\n)               {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n\n      // The props are shallowly equal. Reuse the previous props object, like we\n      // would during a normal fiber bailout.\n      //\n      // We don't have strong guarantees that the props object is referentially\n      // equal during updates where we can't bail out anyway \u2014 like if the props\n      // are shallowly equal, but there's a local state or context update in the\n      // same batch.\n      //\n      // However, as a principle, we should aim to make the behavior consistent\n      // across different ways of memoizing a component. For example, React.memo\n      // has a different internal Fiber layout if you pass a normal function\n      // component (SimpleMemoComponent) versus if you pass a different type\n      // like forwardRef (MemoComponent). But this is an implementation detail.\n      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n      // affect whether the props object is reused during a bailout.\n      workInProgress.pendingProps = nextProps = prevProps;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n  nextProps                ,\n) {\n  const nextChildren = nextProps.children;\n\n  const prevState                        =\n    current !== null ? current.memoizedState : null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    (enableLegacyHidden && nextProps.mode === 'unstable-defer-without-hiding')\n  ) {\n    // Rendering a hidden tree.\n\n    const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n    if (didSuspend) {\n      // Something suspended inside a hidden tree\n\n      // Include the base lanes from the last render\n      const nextBaseLanes =\n        prevState !== null\n          ? mergeLanes(prevState.baseLanes, renderLanes)\n          : renderLanes;\n\n      if (current !== null) {\n        // Reset to the current children\n        let currentChild = (workInProgress.child = current.child);\n\n        // The current render suspended, but there may be other lanes with\n        // pending work. We can't read `childLanes` from the current Offscreen\n        // fiber because we reset it when it was deferred; however, we can read\n        // the pending lanes from the child fibers.\n        let currentChildLanes        = NoLanes;\n        while (currentChild !== null) {\n          currentChildLanes = mergeLanes(\n            mergeLanes(currentChildLanes, currentChild.lanes),\n            currentChild.childLanes,\n          );\n          currentChild = currentChild.sibling;\n        }\n        const lanesWeJustAttempted = nextBaseLanes;\n        const remainingChildLanes = removeLanes(\n          currentChildLanes,\n          lanesWeJustAttempted,\n        );\n        workInProgress.childLanes = remainingChildLanes;\n      } else {\n        workInProgress.childLanes = NoLanes;\n        workInProgress.child = null;\n      }\n\n      return deferHiddenOffscreenComponent(\n        current,\n        workInProgress,\n        nextBaseLanes,\n        renderLanes,\n      );\n    }\n\n    if (\n      !disableLegacyMode &&\n      (workInProgress.mode & ConcurrentMode) === NoMode\n    ) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Consider how Offscreen should work with transitions in the future\n      const nextState                 = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      // push the cache pool even though we're going to bail out\n      // because otherwise there'd be a context mismatch\n      if (current !== null) {\n        pushTransition(workInProgress, null, null);\n      }\n      reuseHiddenContextOnStack(workInProgress);\n      pushOffscreenSuspenseHandler(workInProgress);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane      ))) {\n      // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n\n      // Schedule this fiber to re-render at Offscreen priority\n      workInProgress.lanes = workInProgress.childLanes =\n        laneToLanes(OffscreenLane);\n\n      // Include the base lanes from the last render\n      const nextBaseLanes =\n        prevState !== null\n          ? mergeLanes(prevState.baseLanes, renderLanes)\n          : renderLanes;\n\n      return deferHiddenOffscreenComponent(\n        current,\n        workInProgress,\n        nextBaseLanes,\n        renderLanes,\n      );\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState                 = {\n        baseLanes: NoLanes,\n        cachePool: null,\n      };\n      workInProgress.memoizedState = nextState;\n      if (current !== null) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState !== null ? prevState.cachePool : null;\n        // TODO: Consider if and how Offscreen pre-rendering should\n        // be attributed to the transition that spawned it\n        pushTransition(workInProgress, prevCachePool, null);\n      }\n\n      // Push the lanes that were skipped when we bailed out.\n      if (prevState !== null) {\n        pushHiddenContext(workInProgress, prevState);\n      } else {\n        reuseHiddenContextOnStack(workInProgress);\n      }\n      pushOffscreenSuspenseHandler(workInProgress);\n    }\n  } else {\n    // Rendering a visible tree.\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n      let prevCachePool = null;\n      // If the render that spawned this one accessed the cache pool, resume\n      // using the same cache. Unless the parent changed, since that means\n      // there was a refresh.\n      prevCachePool = prevState.cachePool;\n\n      let transitions = null;\n      if (enableTransitionTracing) {\n        // We have now gone from hidden to visible, so any transitions should\n        // be added to the stack to get added to any Offscreen/suspense children\n        const instance                           = workInProgress.stateNode;\n        if (instance !== null && instance._transitions != null) {\n          transitions = Array.from(instance._transitions);\n        }\n      }\n\n      pushTransition(workInProgress, prevCachePool, transitions);\n\n      // Push the lanes that were skipped when we bailed out.\n      pushHiddenContext(workInProgress, prevState);\n      reuseSuspenseHandlerOnStack(workInProgress);\n\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n\n      // If the render that spawned this one accessed the cache pool, resume\n      // using the same cache. Unless the parent changed, since that means\n      // there was a refresh.\n      if (current !== null) {\n        pushTransition(workInProgress, null, null);\n      }\n\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      reuseHiddenContextOnStack(workInProgress);\n      reuseSuspenseHandlerOnStack(workInProgress);\n    }\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction deferHiddenOffscreenComponent(\n  current              ,\n  workInProgress       ,\n  nextBaseLanes       ,\n  renderLanes       ,\n) {\n  const nextState                 = {\n    baseLanes: nextBaseLanes,\n    // Save the cache pool so we can resume later.\n    cachePool: getOffscreenDeferredCache(),\n  };\n  workInProgress.memoizedState = nextState;\n  // push the cache pool even though we're going to bail out\n  // because otherwise there'd be a context mismatch\n  if (current !== null) {\n    pushTransition(workInProgress, null, null);\n  }\n\n  // We're about to bail out, but we need to push this to the stack anyway\n  // to avoid a push/pop misalignment.\n  reuseHiddenContextOnStack(workInProgress);\n\n  pushOffscreenSuspenseHandler(workInProgress);\n\n  if (current !== null) {\n    // Since this tree will resume rendering in a separate render, we need\n    // to propagate parent contexts now so we don't lose track of which\n    // ones changed.\n    propagateParentContextChangesToDeferredTree(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  return null;\n}\n\nfunction updateLegacyHiddenComponent(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  const nextProps                    = workInProgress.pendingProps;\n  // Note: These happen to have identical begin phases, for now. We shouldn't hold\n  // ourselves to this constraint, though. If the behavior diverges, we should\n  // fork the function.\n  // This just works today because it has the same Props.\n  return updateOffscreenComponent(\n    current,\n    workInProgress,\n    renderLanes,\n    nextProps,\n  );\n}\n\nfunction mountActivityChildren(\n  workInProgress       ,\n  nextProps               ,\n  renderLanes       ,\n) {\n  if (__DEV__) {\n    const hiddenProp = (nextProps     ).hidden;\n    if (hiddenProp !== undefined) {\n      console.error(\n        '<Activity> doesn\\'t accept a hidden prop. Use mode=\"hidden\" instead.\\n' +\n          '- <Activity %s>\\n' +\n          '+ <Activity %s>',\n        hiddenProp === true\n          ? 'hidden'\n          : hiddenProp === false\n            ? 'hidden={false}'\n            : 'hidden={...}',\n        hiddenProp ? 'mode=\"hidden\"' : 'mode=\"visible\"',\n      );\n    }\n  }\n  const nextChildren = nextProps.children;\n  const nextMode = nextProps.mode;\n  const mode = workInProgress.mode;\n  const offscreenChildProps                 = {\n    mode: nextMode,\n    children: nextChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    offscreenChildProps,\n    mode,\n    renderLanes,\n  );\n  primaryChildFragment.ref = workInProgress.ref;\n  workInProgress.child = primaryChildFragment;\n  primaryChildFragment.return = workInProgress;\n  return primaryChildFragment;\n}\n\nfunction retryActivityComponentWithoutHydrating(\n  current       ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps                = workInProgress.pendingProps;\n  const primaryChildFragment = mountActivityChildren(\n    workInProgress,\n    nextProps,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Activity boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n\n  // If we're not going to hydrate we can't leave it dehydrated if something\n  // suspends. In that case we want that to bubble to the nearest parent boundary\n  // so we need to pop our own handler that we just pushed.\n  popSuspenseHandler(workInProgress);\n\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountDehydratedActivityComponent(\n  workInProgress       ,\n  activityInstance                  ,\n  renderLanes       ,\n)               {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  // We'll continue hydrating the rest at offscreen priority since we'll already\n  // be showing the right content coming from the server, it is no rush.\n  workInProgress.lanes = laneToLanes(OffscreenLane);\n  return null;\n}\n\nfunction updateDehydratedActivityComponent(\n  current       ,\n  workInProgress       ,\n  didSuspend         ,\n  nextProps               ,\n  activityInstance                  ,\n  activityState               ,\n  renderLanes       ,\n)               {\n  // We'll handle suspending since if something suspends we can just leave\n  // it dehydrated. We push early and then pop if we enter non-dehydrated attempts.\n  pushDehydratedActivitySuspenseHandler(workInProgress);\n  if (!didSuspend) {\n    // This is the first render pass. Attempt to hydrate.\n\n    // We should never be hydrating at this point because it is the first pass,\n    // but after we've already committed once.\n    warnIfHydrating();\n\n    if (\n      // TODO: Factoring is a little weird, since we check this right below, too.\n      !didReceiveUpdate\n    ) {\n      // We need to check if any children have context before we decide to bail\n      // out, so propagate the changes now.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n    }\n\n    // We use lanes to indicate that a child might depend on context, so if\n    // any context has changed, we need to treat is as if the input might have changed.\n    const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n    if (didReceiveUpdate || hasContextChanged) {\n      // This boundary has changed since the first render. This means that we are now unable to\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n      const root = getWorkInProgressRoot();\n      if (root !== null) {\n        const attemptHydrationAtLane = getBumpedLaneForHydration(\n          root,\n          renderLanes,\n        );\n        if (\n          attemptHydrationAtLane !== NoLane &&\n          attemptHydrationAtLane !== activityState.retryLane\n        ) {\n          // Intentionally mutating since this render will get interrupted. This\n          // is one of the very rare times where we mutate the current tree\n          // during the render phase.\n          activityState.retryLane = attemptHydrationAtLane;\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane);\n\n          // Throw a special object that signals to the work loop that it should\n          // interrupt the current render.\n          //\n          // Because we're inside a React-only execution stack, we don't\n          // strictly need to throw here \u2014 we could instead modify some internal\n          // work loop state. But using an exception means we don't need to\n          // check for this case on every iteration of the work loop. So doing\n          // it this way moves the check out of the fast path.\n          throw SelectiveHydrationException;\n        } else {\n          // We have already tried to ping at a higher priority than we're rendering with\n          // so if we got here, we must have failed to hydrate at those levels. We must\n          // now give up. Instead, we're going to delete the whole subtree and instead inject\n          // a new real Activity boundary to take its place. This might suspend for a while\n          // and if it does we might still have an opportunity to hydrate before this pass\n          // commits.\n        }\n      }\n\n      // If we did not selectively hydrate, we'll continue rendering without\n      // hydrating. Mark this tree as suspended to prevent it from committing\n      // outside a transition.\n      //\n      // This path should only happen if the hydration lane already suspended.\n      renderDidSuspendDelayIfPossible();\n      return retryActivityComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n      );\n    } else {\n      // This is the first attempt.\n\n      reenterHydrationStateFromDehydratedActivityInstance(\n        workInProgress,\n        activityInstance,\n        activityState.treeContext,\n      );\n\n      const primaryChildFragment = mountActivityChildren(\n        workInProgress,\n        nextProps,\n        renderLanes,\n      );\n      // Mark the children as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      primaryChildFragment.flags |= Hydrating;\n      return primaryChildFragment;\n    }\n  } else {\n    // This is the second render pass. We already attempted to hydrated, but\n    // something either suspended or errored.\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during hydration. Try again without hydrating.\n      // The error should've already been logged in throwException.\n      workInProgress.flags &= ~ForceClientRender;\n      return retryActivityComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n      );\n    } else if ((workInProgress.memoizedState                      ) !== null) {\n      // Something suspended and we should still be in dehydrated mode.\n      // Leave the existing child in place.\n\n      workInProgress.child = current.child;\n      // The dehydrated completion pass expects this flag to be there\n      // but the normal offscreen pass doesn't.\n      workInProgress.flags |= DidCapture;\n      return null;\n    } else {\n      // We called retryActivityComponentWithoutHydrating and tried client rendering\n      // but now we suspended again. We should never arrive here because we should\n      // not have pushed a suspense handler during that second pass and it should\n      // instead have suspended above.\n      throw new Error(\n        'Client rendering an Activity suspended it again. This is a bug in React.',\n      );\n    }\n  }\n}\n\nfunction updateActivityComponent(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  const nextProps                = workInProgress.pendingProps;\n\n  // Check if the first pass suspended.\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n  workInProgress.flags &= ~DidCapture;\n\n  if (current === null) {\n    // Initial mount\n\n    // Special path for hydration\n    // If we're currently hydrating, try to hydrate this boundary.\n    // Hidden Activity boundaries are not emitted on the server.\n    if (getIsHydrating()) {\n      if (nextProps.mode === 'hidden') {\n        // SSR doesn't render hidden Activity so it shouldn't hydrate,\n        // even at offscreen lane. Defer to a client rendered offscreen lane.\n        mountActivityChildren(workInProgress, nextProps, renderLanes);\n        workInProgress.lanes = laneToLanes(OffscreenLane);\n        return null;\n      } else {\n        // We must push the suspense handler context *before* attempting to\n        // hydrate, to avoid a mismatch in case it errors.\n        pushDehydratedActivitySuspenseHandler(workInProgress);\n        const dehydrated                   =\n          claimNextHydratableActivityInstance(workInProgress);\n        return mountDehydratedActivityComponent(\n          workInProgress,\n          dehydrated,\n          renderLanes,\n        );\n      }\n    }\n\n    return mountActivityChildren(workInProgress, nextProps, renderLanes);\n  } else {\n    // This is an update.\n\n    // Special path for hydration\n    const prevState                       = current.memoizedState;\n\n    if (prevState !== null) {\n      const dehydrated = prevState.dehydrated;\n      return updateDehydratedActivityComponent(\n        current,\n        workInProgress,\n        didSuspend,\n        nextProps,\n        dehydrated,\n        prevState,\n        renderLanes,\n      );\n    }\n\n    const currentChild        = (current.child     );\n\n    const nextChildren = nextProps.children;\n    const nextMode = nextProps.mode;\n    const offscreenChildProps                 = {\n      mode: nextMode,\n      children: nextChildren,\n    };\n\n    const primaryChildFragment = updateWorkInProgressOffscreenFiber(\n      currentChild,\n      offscreenChildProps,\n    );\n\n    primaryChildFragment.ref = workInProgress.ref;\n    workInProgress.child = primaryChildFragment;\n    primaryChildFragment.return = workInProgress;\n    return primaryChildFragment;\n  }\n}\n\nfunction updateCacheComponent(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  prepareToReadContext(workInProgress, renderLanes);\n  const parentCache = readContext(CacheContext);\n\n  if (current === null) {\n    // Initial mount. Request a fresh cache from the pool.\n    const freshCache = requestCacheFromPool(renderLanes);\n    const initialState                      = {\n      parent: parentCache,\n      cache: freshCache,\n    };\n    workInProgress.memoizedState = initialState;\n    initializeUpdateQueue(workInProgress);\n    pushCacheProvider(workInProgress, freshCache);\n  } else {\n    // Check for updates\n    if (includesSomeLane(current.lanes, renderLanes)) {\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, null, null, renderLanes);\n      suspendIfUpdateReadFromEntangledAsyncAction();\n    }\n    const prevState                      = current.memoizedState;\n    const nextState                      = workInProgress.memoizedState;\n\n    // Compare the new parent cache to the previous to see detect there was\n    // a refresh.\n    if (prevState.parent !== parentCache) {\n      // Refresh in parent. Update the parent.\n      const derivedState                      = {\n        parent: parentCache,\n        cache: parentCache,\n      };\n\n      // Copied from getDerivedStateFromProps implementation. Once the update\n      // queue is empty, persist the derived state onto the base state.\n      workInProgress.memoizedState = derivedState;\n      if (workInProgress.lanes === NoLanes) {\n        const updateQueue                   = (workInProgress.updateQueue     );\n        workInProgress.memoizedState = updateQueue.baseState = derivedState;\n      }\n\n      pushCacheProvider(workInProgress, parentCache);\n      // No need to propagate a context change because the refreshed parent\n      // already did.\n    } else {\n      // The parent didn't refresh. Now check if this cache did.\n      const nextCache = nextState.cache;\n      pushCacheProvider(workInProgress, nextCache);\n      if (nextCache !== prevState.cache) {\n        // This cache refreshed. Propagate a context change.\n        propagateContextChange(workInProgress, CacheContext, renderLanes);\n      }\n    }\n  }\n\n  const nextProps             = workInProgress.pendingProps;\n\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// This should only be called if the name changes\nfunction updateTracingMarkerComponent(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  const nextProps                     = workInProgress.pendingProps;\n\n  // TODO: (luna) Only update the tracing marker if it's newly rendered or it's name changed.\n  // A tracing marker is only associated with the transitions that rendered\n  // or updated it, so we can create a new set of transitions each time\n  if (current === null) {\n    const currentTransitions = getPendingTransitions();\n    if (currentTransitions !== null) {\n      const markerInstance                        = {\n        tag: TransitionTracingMarker,\n        transitions: new Set(currentTransitions),\n        pendingBoundaries: null,\n        name: nextProps.name,\n        aborts: null,\n      };\n      workInProgress.stateNode = markerInstance;\n\n      // We call the marker complete callback when all child suspense boundaries resolve.\n      // We do this in the commit phase on Offscreen. If the marker has no child suspense\n      // boundaries, we need to schedule a passive effect to make sure we call the marker\n      // complete callback.\n      workInProgress.flags |= Passive;\n    }\n  } else {\n    if (__DEV__) {\n      if (current.memoizedProps.name !== nextProps.name) {\n        console.error(\n          'Changing the name of a tracing marker after mount is not supported. ' +\n            'To remount the tracing marker, pass it a new key.',\n        );\n      }\n    }\n  }\n\n  const instance                               = workInProgress.stateNode;\n  if (instance !== null) {\n    pushMarkerInstance(workInProgress, instance);\n  }\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFragment(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  if (enableFragmentRefs) {\n    markRef(current, workInProgress);\n  }\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    if (enableProfilerCommitHooks) {\n      // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n      // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n      // because the effect is also where times bubble to parent Profilers.\n      workInProgress.flags |= Passive;\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      const stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = -0;\n      stateNode.passiveEffectDuration = -0;\n    }\n  }\n  const nextProps                = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current              , workInProgress       ) {\n  // TODO: Check props.ref instead of fiber.ref when enableRefAsProp is on.\n  const ref = workInProgress.ref;\n  if (ref === null) {\n    if (current !== null && current.ref !== null) {\n      // Schedule a Ref effect\n      workInProgress.flags |= Ref | RefStatic;\n    }\n  } else {\n    if (typeof ref !== 'function' && typeof ref !== 'object') {\n      throw new Error(\n        'Expected ref to be a function, an object returned by React.createRef(), or undefined/null.',\n      );\n    }\n    if (current === null || current.ref !== ref) {\n      // Schedule a Ref effect\n      workInProgress.flags |= Ref | RefStatic;\n    }\n  }\n}\n\nfunction mountIncompleteFunctionComponent(\n  _current              ,\n  workInProgress       ,\n  Component     ,\n  nextProps     ,\n  renderLanes       ,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  workInProgress.tag = FunctionComponent;\n\n  return updateFunctionComponent(\n    null,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateFunctionComponent(\n  current              ,\n  workInProgress       ,\n  Component     ,\n  nextProps     ,\n  renderLanes       ,\n) {\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    if (current === null) {\n      // Some validations were previously done in mountIndeterminateComponent however and are now run\n      // in updateFuntionComponent but only on mount\n      validateFunctionComponentInDev(workInProgress, workInProgress.type);\n\n      if (Component.contextTypes) {\n        const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n        if (!didWarnAboutContextTypes[componentName]) {\n          didWarnAboutContextTypes[componentName] = true;\n          if (disableLegacyContext) {\n            console.error(\n              '%s uses the legacy contextTypes API which was removed in React 19. ' +\n                'Use React.createContext() with React.useContext() instead. ' +\n                '(https://react.dev/link/legacy-context)',\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s uses the legacy contextTypes API which will be removed soon. ' +\n                'Use React.createContext() with React.useContext() instead. ' +\n                '(https://react.dev/link/legacy-context)',\n              componentName,\n            );\n          }\n        }\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext && !disableLegacyContextForFunctionComponents) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function replayFunctionComponent(\n  current              ,\n  workInProgress       ,\n  nextProps     ,\n  Component     ,\n  secondArg     ,\n  renderLanes       ,\n)               {\n  // This function is used to replay a component that previously suspended,\n  // after its data resolves. It's a simplified version of\n  // updateFunctionComponent that reuses the hooks from the previous attempt.\n\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  const nextChildren = replaySuspendedComponentWithHooks(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    secondArg,\n  );\n  const hasId = checkDidRenderIdHook();\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current              ,\n  workInProgress       ,\n  Component     ,\n  nextProps     ,\n  renderLanes       ,\n) {\n  if (__DEV__) {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false: {\n        const instance = workInProgress.stateNode;\n        const ctor = workInProgress.type;\n        // TODO This way of resetting the error boundary state is a hack.\n        // Is there a better way to do this?\n        const tempInstance = new ctor(\n          workInProgress.memoizedProps,\n          instance.context,\n        );\n        const state = tempInstance.state;\n        instance.updater.enqueueSetState(instance, state, null);\n        break;\n      }\n      case true: {\n        workInProgress.flags |= DidCapture;\n        workInProgress.flags |= ShouldCapture;\n        // eslint-disable-next-line react-internal/prod-error-codes\n        const error = new Error('Simulated error coming from DevTools');\n        const lane = pickArbitraryLane(renderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        // Schedule the error boundary to re-render using updated state\n        const root                   = getWorkInProgressRoot();\n        if (root === null) {\n          throw new Error(\n            'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n          );\n        }\n        const update = createClassErrorUpdate(lane);\n        initializeClassErrorUpdate(\n          update,\n          root,\n          workInProgress,\n          createCapturedValueAtFiber(error, workInProgress),\n        );\n        enqueueCapturedUpdate(workInProgress, update);\n        break;\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);\n\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentNameFromFiber(workInProgress) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current              ,\n  workInProgress       ,\n  Component     ,\n  shouldUpdate         ,\n  hasContext         ,\n  renderLanes       ,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  if (__DEV__) {\n    setCurrentFiber(workInProgress);\n  }\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (enableSchedulingProfiler) {\n      markComponentRenderStarted(workInProgress);\n    }\n    if (__DEV__) {\n      nextChildren = callRenderInDEV(instance);\n      if (workInProgress.mode & StrictLegacyMode) {\n        setIsStrictModeForDevtools(true);\n        try {\n          callRenderInDEV(instance);\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    } else {\n      nextChildren = instance.render();\n    }\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress       ) {\n  const root = (workInProgress.stateNode           );\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n\n  const nextState            = workInProgress.memoizedState;\n  const root            = workInProgress.stateNode;\n  pushRootTransition(workInProgress, root, renderLanes);\n\n  if (enableTransitionTracing) {\n    pushRootMarkerInstance(workInProgress);\n  }\n\n  const nextCache        = nextState.cache;\n  pushCacheProvider(workInProgress, nextCache);\n  if (nextCache !== prevState.cache) {\n    // The root cache refreshed.\n    propagateContextChange(workInProgress, CacheContext, renderLanes);\n  }\n\n  // This would ideally go inside processUpdateQueue, but because it suspends,\n  // it needs to happen after the `pushCacheProvider` call above to avoid a\n  // context stack mismatch. A bit unfortunate.\n  suspendIfUpdateReadFromEntangledAsyncAction();\n\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (supportsHydration && prevState.isDehydrated) {\n    // This is a hydration root whose shell has not yet hydrated. We should\n    // attempt to hydrate.\n\n    // Flip isDehydrated to false to indicate that when this render\n    // finishes, the root will no longer be dehydrated.\n    const overrideState            = {\n      element: nextChildren,\n      isDehydrated: false,\n      cache: nextState.cache,\n    };\n    const updateQueue                         =\n      (workInProgress.updateQueue     );\n    // `baseState` can always be the last state because the root doesn't\n    // have reducer functions so it doesn't need rebasing.\n    updateQueue.baseState = overrideState;\n    workInProgress.memoizedState = overrideState;\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during a previous attempt to hydrate the shell, so we\n      // forced a client render. We should have a recoverable error already scheduled.\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n      );\n    } else if (nextChildren !== prevChildren) {\n      const recoverableError = createCapturedValueAtFiber       (\n        new Error(\n          'This root received an early update, before anything was able ' +\n            'hydrate. Switched the entire root to client rendering.',\n        ),\n        workInProgress,\n      );\n      queueHydrationError(recoverableError);\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n      );\n    } else {\n      // The outermost shell has not hydrated yet. Start hydrating.\n      enterHydrationState(workInProgress);\n\n      const child = mountChildFibers(\n        workInProgress,\n        null,\n        nextChildren,\n        renderLanes,\n      );\n      workInProgress.child = child;\n\n      let node = child;\n      while (node) {\n        // Mark each child as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n        node.flags = (node.flags & ~Placement) | Hydrating;\n        node = node.sibling;\n      }\n    }\n  } else {\n    // Root is not dehydrated. Either this is a client-only root, or it\n    // already hydrated.\n    resetHydrationState();\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nfunction mountHostRootWithoutHydrating(\n  current       ,\n  workInProgress       ,\n  nextChildren               ,\n  renderLanes       ,\n) {\n  // Revert to client rendering.\n  resetHydrationState();\n\n  workInProgress.flags |= ForceClientRender;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  pushHostContext(workInProgress);\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  const memoizedState = workInProgress.memoizedState;\n  if (memoizedState !== null) {\n    // This fiber has been upgraded to a stateful component. The only way\n    // happens currently is for form actions. We use hooks to track the\n    // pending and error state of the form.\n    //\n    // Once a fiber is upgraded to be stateful, it remains stateful for the\n    // rest of its lifetime.\n    const newState = renderTransitionAwareHostComponentWithHooks(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n\n    // If the transition state changed, propagate the change to all the\n    // descendents. We use Context as an implementation detail for this.\n    //\n    // This is intentionally set here instead of pushHostContext because\n    // pushHostContext gets called before we process the state hook, to avoid\n    // a state mismatch in the event that something suspends.\n    //\n    // NOTE: This assumes that there cannot be nested transition providers,\n    // because the only renderer that implements this feature is React DOM,\n    // and forms cannot be nested. If we did support nested providers, then\n    // we would need to push a context value even for host fibers that\n    // haven't been upgraded yet.\n    if (isPrimaryRenderer) {\n      HostTransitionContext._currentValue = newState;\n    } else {\n      HostTransitionContext._currentValue2 = newState;\n    }\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostHoistable(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  markRef(current, workInProgress);\n\n  if (current === null) {\n    const resource = getResource(\n      workInProgress.type,\n      null,\n      workInProgress.pendingProps,\n      null,\n    );\n    if (resource) {\n      workInProgress.memoizedState = resource;\n    } else {\n      if (!getIsHydrating()) {\n        // This is not a Resource Hoistable and we aren't hydrating so we construct the instance.\n        workInProgress.stateNode = createHoistableInstance(\n          workInProgress.type,\n          workInProgress.pendingProps,\n          getRootHostContainer(),\n          workInProgress,\n        );\n      }\n    }\n  } else {\n    // Get Resource may or may not return a resource. either way we stash the result\n    // on memoized state.\n    workInProgress.memoizedState = getResource(\n      workInProgress.type,\n      current.memoizedProps,\n      workInProgress.pendingProps,\n      current.memoizedState,\n    );\n  }\n\n  // Resources never have reconciler managed children. It is possible for\n  // the host implementation of getResource to consider children in the\n  // resource construction but they will otherwise be discarded. In practice\n  // this precludes all but the simplest children and Host specific warnings\n  // should be implemented to warn when children are passsed when otherwise not\n  // expected\n  return null;\n}\n\nfunction updateHostSingleton(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    claimHydratableSingleton(workInProgress);\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  markRef(current, workInProgress);\n  if (current === null) {\n    // We mark Singletons with a static flag to more efficiently manage their\n    // ownership of the singleton host instance when in offscreen trees including Suspense\n    workInProgress.flags |= LayoutStatic;\n  }\n  return workInProgress.child;\n}\n\nfunction updateHostText(current              , workInProgress       ) {\n  if (current === null) {\n    tryToClaimNextHydratableTextInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current              ,\n  workInProgress       ,\n  elementType     ,\n  renderLanes       ,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent                              = elementType;\n  let Component;\n  if (__DEV__) {\n    Component = callLazyInitInDEV(lazyComponent);\n  } else {\n    const payload = lazyComponent._payload;\n    const init = lazyComponent._init;\n    Component = init(payload);\n  }\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n\n  if (typeof Component === 'function') {\n    if (isFunctionClassComponent(Component)) {\n      const resolvedProps = resolveClassComponentProps(Component, props, false);\n      workInProgress.tag = ClassComponent;\n      if (__DEV__) {\n        workInProgress.type = Component =\n          resolveClassForHotReloading(Component);\n      }\n      return updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    } else {\n      const resolvedProps = disableDefaultPropsExceptForClasses\n        ? props\n        : resolveDefaultPropsOnNonClassComponent(Component, props);\n      workInProgress.tag = FunctionComponent;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component =\n          resolveFunctionForHotReloading(Component);\n      }\n      return updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      const resolvedProps = disableDefaultPropsExceptForClasses\n        ? props\n        : resolveDefaultPropsOnNonClassComponent(Component, props);\n      workInProgress.tag = ForwardRef;\n      if (__DEV__) {\n        workInProgress.type = Component =\n          resolveForwardRefForHotReloading(Component);\n      }\n      return updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    } else if ($$typeof === REACT_MEMO_TYPE) {\n      const resolvedProps = disableDefaultPropsExceptForClasses\n        ? props\n        : resolveDefaultPropsOnNonClassComponent(Component, props);\n      workInProgress.tag = MemoComponent;\n      return updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        disableDefaultPropsExceptForClasses\n          ? resolvedProps\n          : resolveDefaultPropsOnNonClassComponent(\n              Component.type,\n              resolvedProps,\n            ), // The inner type can have defaults too\n        renderLanes,\n      );\n    }\n  }\n\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n\n  const loggedComponent = getComponentNameFromType(Component) || Component;\n\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  throw new Error(\n    `Element type is invalid. Received a promise that resolves to: ${loggedComponent}. ` +\n      `Lazy element type must resolve to a class or function.${hint}`,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current              ,\n  workInProgress       ,\n  Component     ,\n  nextProps     ,\n  renderLanes       ,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction validateFunctionComponentInDev(workInProgress       , Component     ) {\n  if (__DEV__) {\n    if (Component && Component.childContextTypes) {\n      console.error(\n        'childContextTypes cannot be defined on a function component.\\n' +\n          '  %s.childContextTypes = ...',\n        Component.displayName || Component.name || 'Component',\n      );\n    }\n\n    if (\n      !disableDefaultPropsExceptForClasses &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER                = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane,\n  hydrationErrors: null,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes       )                 {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache(),\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState                ,\n  renderLanes       ,\n)                 {\n  let cachePool                          = null;\n  const prevCachePool                          = prevOffscreenState.cachePool;\n  if (prevCachePool !== null) {\n    const parentCache = isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2;\n    if (prevCachePool.parent !== parentCache) {\n      // Detected a refresh in the parent. This overrides any previously\n      // suspended cache.\n      cachePool = {\n        parent: parentCache,\n        pool: parentCache,\n      };\n    } else {\n      // We can reuse the cache from last time. The only thing that would have\n      // overridden it is a parent refresh, which we checked for above.\n      cachePool = prevCachePool;\n    }\n  } else {\n    // If there's no previous cache pool, grab the current one.\n    cachePool = getSuspendedCache();\n  }\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool,\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  // TODO: For compatibility with offscreen prerendering, this should also check\n  // whether the current fiber (if it exists) was visible in the previous tree.\n  if (current !== null) {\n    const suspenseState                = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  const suspenseContext                  = suspenseStackCursor.current;\n  return hasSuspenseListContext(\n    suspenseContext,\n    (ForceSuspenseFallback                 ),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(\n  current              ,\n  primaryTreeDidDefer         ,\n  renderLanes       ,\n) {\n  let remainingLanes =\n    current !== null ? removeLanes(current.childLanes, renderLanes) : NoLanes;\n  if (primaryTreeDidDefer) {\n    // A useDeferredValue hook spawned a deferred task inside the primary tree.\n    // Ensure that we retry this component at the deferred priority.\n    // TODO: We could make this a per-subtree value instead of a global one.\n    // Would need to track it on the context stack somehow, similar to what\n    // we'd have to do for resumable contexts.\n    remainingLanes = mergeLanes(remainingLanes, peekDeferredLane());\n  }\n  return remainingLanes;\n}\n\nfunction updateSuspenseComponent(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  const nextProps                = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(current, workInProgress, renderLanes)\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  }\n\n  // Check if the primary children spawned a deferred task (useDeferredValue)\n  // during the first pass.\n  const didPrimaryChildrenDefer = (workInProgress.flags & DidDefer) !== NoFlags;\n  workInProgress.flags &= ~DidDefer;\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n\n    // Special path for hydration\n    // If we're currently hydrating, try to hydrate this boundary.\n    if (getIsHydrating()) {\n      // We must push the suspense handler context *before* attempting to\n      // hydrate, to avoid a mismatch in case it errors.\n      if (showFallback) {\n        pushPrimaryTreeSuspenseHandler(workInProgress);\n      } else {\n        pushFallbackTreeSuspenseHandler(workInProgress);\n      }\n      // This throws if we fail to hydrate.\n      const dehydrated                   =\n        claimNextHydratableSuspenseInstance(workInProgress);\n      return mountDehydratedSuspenseComponent(\n        workInProgress,\n        dehydrated,\n        renderLanes,\n      );\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment        = (workInProgress.child     );\n      primaryChildFragment.memoizedState =\n        mountSuspenseOffscreenState(renderLanes);\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n        current,\n        didPrimaryChildrenDefer,\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      if (enableTransitionTracing) {\n        const currentTransitions = getPendingTransitions();\n        if (currentTransitions !== null) {\n          const parentMarkerInstances = getMarkerInstances();\n          const offscreenQueue                        =\n            (primaryChildFragment.updateQueue     );\n          if (offscreenQueue === null) {\n            const newOffscreenQueue                 = {\n              transitions: currentTransitions,\n              markerInstances: parentMarkerInstances,\n              retryQueue: null,\n            };\n            primaryChildFragment.updateQueue = newOffscreenQueue;\n          } else {\n            offscreenQueue.transitions = currentTransitions;\n            offscreenQueue.markerInstances = parentMarkerInstances;\n          }\n        }\n      }\n\n      return fallbackFragment;\n    } else if (\n      enableCPUSuspense &&\n      typeof nextProps.unstable_expectedLoadTime === 'number'\n    ) {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      pushFallbackTreeSuspenseHandler(workInProgress);\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment        = (workInProgress.child     );\n      primaryChildFragment.memoizedState =\n        mountSuspenseOffscreenState(renderLanes);\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n        current,\n        didPrimaryChildrenDefer,\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // TODO: Transition Tracing is not yet implemented for CPU Suspense.\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      return fallbackFragment;\n    } else {\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // Special path for hydration\n    const prevState                       = current.memoizedState;\n    if (prevState !== null) {\n      const dehydrated = prevState.dehydrated;\n      if (dehydrated !== null) {\n        return updateDehydratedSuspenseComponent(\n          current,\n          workInProgress,\n          didSuspend,\n          didPrimaryChildrenDefer,\n          nextProps,\n          dehydrated,\n          prevState,\n          renderLanes,\n        );\n      }\n    }\n\n    if (showFallback) {\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      const nextFallbackChildren = nextProps.fallback;\n      const nextPrimaryChildren = nextProps.children;\n      const fallbackChildFragment = updateSuspenseFallbackChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment        = (workInProgress.child     );\n      const prevOffscreenState                        = (current.child     )\n        .memoizedState;\n      primaryChildFragment.memoizedState =\n        prevOffscreenState === null\n          ? mountSuspenseOffscreenState(renderLanes)\n          : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n      if (enableTransitionTracing) {\n        const currentTransitions = getPendingTransitions();\n        if (currentTransitions !== null) {\n          const parentMarkerInstances = getMarkerInstances();\n          const offscreenQueue                        =\n            (primaryChildFragment.updateQueue     );\n          const currentOffscreenQueue                        =\n            (current.updateQueue     );\n          if (offscreenQueue === null) {\n            const newOffscreenQueue                 = {\n              transitions: currentTransitions,\n              markerInstances: parentMarkerInstances,\n              retryQueue: null,\n            };\n            primaryChildFragment.updateQueue = newOffscreenQueue;\n          } else if (offscreenQueue === currentOffscreenQueue) {\n            // If the work-in-progress queue is the same object as current, we\n            // can't modify it without cloning it first.\n            const newOffscreenQueue                 = {\n              transitions: currentTransitions,\n              markerInstances: parentMarkerInstances,\n              retryQueue:\n                currentOffscreenQueue !== null\n                  ? currentOffscreenQueue.retryQueue\n                  : null,\n            };\n            primaryChildFragment.updateQueue = newOffscreenQueue;\n          } else {\n            offscreenQueue.transitions = currentTransitions;\n            offscreenQueue.markerInstances = parentMarkerInstances;\n          }\n        }\n      }\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n        current,\n        didPrimaryChildrenDefer,\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    } else {\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n\n      const nextPrimaryChildren = nextProps.children;\n      const primaryChildFragment = updateSuspensePrimaryChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress       ,\n  primaryChildren            ,\n  renderLanes       ,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps                 = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    mode,\n    renderLanes,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress       ,\n  primaryChildren            ,\n  fallbackChildren            ,\n  renderLanes       ,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment               = workInProgress.child;\n\n  const primaryChildProps                 = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if (\n    !disableLegacyMode &&\n    (mode & ConcurrentMode) === NoMode &&\n    progressedPrimaryFragment !== null\n  ) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = -0;\n      primaryChildFragment.actualStartTime = -1.1;\n      primaryChildFragment.selfBaseDuration = -0;\n      primaryChildFragment.treeBaseDuration = -0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(\n      primaryChildProps,\n      mode,\n      NoLanes,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(\n  offscreenProps                ,\n  mode            ,\n  renderLanes       ,\n) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(\n  current       ,\n  offscreenProps                ,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current       ,\n  workInProgress       ,\n  primaryChildren            ,\n  renderLanes       ,\n) {\n  const currentPrimaryChildFragment        = (current.child     );\n  const currentFallbackChildFragment               =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = updateWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if (!disableLegacyMode && (workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    const deletions = workInProgress.deletions;\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current       ,\n  workInProgress       ,\n  primaryChildren            ,\n  fallbackChildren            ,\n  renderLanes       ,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment        = (current.child     );\n  const currentFallbackChildFragment               =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps                 = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    !disableLegacyMode &&\n    (mode & ConcurrentMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment        = (workInProgress.child     );\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = -0;\n      primaryChildFragment.actualStartTime = -1.1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n    // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n    primaryChildFragment.subtreeFlags =\n      currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current       ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current       ,\n  workInProgress       ,\n  primaryChildren            ,\n  fallbackChildren            ,\n  renderLanes       ,\n) {\n  const fiberMode = workInProgress.mode;\n  const primaryChildProps                 = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    fiberMode,\n    NoLanes,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    fiberMode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if (disableLegacyMode || (workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress       ,\n  suspenseInstance                  ,\n  renderLanes       ,\n)               {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(\n      enableHydrationLaneScheduling ? DefaultLane : DefaultHydrationLane,\n    );\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current       ,\n  workInProgress       ,\n  didSuspend         ,\n  didPrimaryChildrenDefer         ,\n  nextProps               ,\n  suspenseInstance                  ,\n  suspenseState               ,\n  renderLanes       ,\n)               {\n  if (!didSuspend) {\n    // This is the first render pass. Attempt to hydrate.\n    pushPrimaryTreeSuspenseHandler(workInProgress);\n\n    // We should never be hydrating at this point because it is the first pass,\n    // but after we've already committed once.\n    warnIfHydrating();\n\n    if (isSuspenseInstanceFallback(suspenseInstance)) {\n      // This boundary is in a permanent fallback state. In this case, we'll never\n      // get an update and we'll never be able to hydrate the final content. Let's just try the\n      // client side render instead.\n      let digest         ;\n      let message;\n      let stack = null;\n      let componentStack = null;\n      if (__DEV__) {\n        ({digest, message, stack, componentStack} =\n          getSuspenseInstanceFallbackErrorDetails(suspenseInstance));\n      } else {\n        ({digest} = getSuspenseInstanceFallbackErrorDetails(suspenseInstance));\n      }\n\n      // TODO: Figure out a better signal than encoding a magic digest value.\n      if (!enablePostpone || digest !== 'POSTPONE') {\n        let error       ;\n        if (__DEV__ && message) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          error = new Error(message);\n        } else {\n          error = new Error(\n            'The server could not finish this Suspense boundary, likely ' +\n              'due to an error during server rendering. ' +\n              'Switched to client rendering.',\n          );\n        }\n        // Replace the stack with the server stack\n        error.stack = (__DEV__ && stack) || '';\n        (error     ).digest = digest;\n        const capturedValue = createCapturedValueFromError(\n          error,\n          componentStack === undefined ? null : componentStack,\n        );\n        queueHydrationError(capturedValue);\n      }\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n      );\n    }\n\n    if (\n      // TODO: Factoring is a little weird, since we check this right below, too.\n      !didReceiveUpdate\n    ) {\n      // We need to check if any children have context before we decide to bail\n      // out, so propagate the changes now.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n    }\n\n    // We use lanes to indicate that a child might depend on context, so if\n    // any context has changed, we need to treat is as if the input might have changed.\n    const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n    if (didReceiveUpdate || hasContextChanged) {\n      // This boundary has changed since the first render. This means that we are now unable to\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n      const root = getWorkInProgressRoot();\n      if (root !== null) {\n        const attemptHydrationAtLane = getBumpedLaneForHydration(\n          root,\n          renderLanes,\n        );\n        if (\n          attemptHydrationAtLane !== NoLane &&\n          attemptHydrationAtLane !== suspenseState.retryLane\n        ) {\n          // Intentionally mutating since this render will get interrupted. This\n          // is one of the very rare times where we mutate the current tree\n          // during the render phase.\n          suspenseState.retryLane = attemptHydrationAtLane;\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane);\n\n          // Throw a special object that signals to the work loop that it should\n          // interrupt the current render.\n          //\n          // Because we're inside a React-only execution stack, we don't\n          // strictly need to throw here \u2014 we could instead modify some internal\n          // work loop state. But using an exception means we don't need to\n          // check for this case on every iteration of the work loop. So doing\n          // it this way moves the check out of the fast path.\n          throw SelectiveHydrationException;\n        } else {\n          // We have already tried to ping at a higher priority than we're rendering with\n          // so if we got here, we must have failed to hydrate at those levels. We must\n          // now give up. Instead, we're going to delete the whole subtree and instead inject\n          // a new real Suspense boundary to take its place, which may render content\n          // or fallback. This might suspend for a while and if it does we might still have\n          // an opportunity to hydrate before this pass commits.\n        }\n      }\n\n      // If we did not selectively hydrate, we'll continue rendering without\n      // hydrating. Mark this tree as suspended to prevent it from committing\n      // outside a transition.\n      //\n      // This path should only happen if the hydration lane already suspended.\n      if (isSuspenseInstancePending(suspenseInstance)) {\n        // This is a dehydrated suspense instance. We don't need to suspend\n        // because we're already showing a fallback.\n        // TODO: The Fizz runtime might still stream in completed HTML, out-of-\n        // band. Should we fix this? There's a version of this bug that happens\n        // during client rendering, too. Needs more consideration.\n      } else {\n        renderDidSuspendDelayIfPossible();\n      }\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n      );\n    } else if (isSuspenseInstancePending(suspenseInstance)) {\n      // This component is still pending more data from the server, so we can't hydrate its\n      // content. We treat it as if this component suspended itself. It might seem as if\n      // we could just try to render it client-side instead. However, this will perform a\n      // lot of unnecessary work and is unlikely to complete since it often will suspend\n      // on missing data anyway. Additionally, the server might be able to render more\n      // than we can on the client yet. In that case we'd end up with more fallback states\n      // on the client than if we just leave it alone. If the server times out or errors\n      // these should update this boundary to the permanent Fallback state instead.\n      // Mark it as having captured (i.e. suspended).\n      // Also Mark it as requiring retry.\n      workInProgress.flags |= DidCapture | Callback;\n      // Leave the child in place. I.e. the dehydrated fragment.\n      workInProgress.child = current.child;\n      return null;\n    } else {\n      // This is the first attempt.\n      reenterHydrationStateFromDehydratedSuspenseInstance(\n        workInProgress,\n        suspenseInstance,\n        suspenseState.treeContext,\n      );\n      const primaryChildren = nextProps.children;\n      const primaryChildFragment = mountSuspensePrimaryChildren(\n        workInProgress,\n        primaryChildren,\n        renderLanes,\n      );\n      // Mark the children as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      primaryChildFragment.flags |= Hydrating;\n      return primaryChildFragment;\n    }\n  } else {\n    // This is the second render pass. We already attempted to hydrated, but\n    // something either suspended or errored.\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during hydration. Try again without hydrating.\n      // The error should've already been logged in throwException.\n      pushPrimaryTreeSuspenseHandler(workInProgress);\n      workInProgress.flags &= ~ForceClientRender;\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n      );\n    } else if ((workInProgress.memoizedState                      ) !== null) {\n      // Something suspended and we should still be in dehydrated mode.\n      // Leave the existing child in place.\n\n      // Push to avoid a mismatch\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      workInProgress.child = current.child;\n      // The dehydrated completion pass expects this flag to be there\n      // but the normal suspense pass doesn't.\n      workInProgress.flags |= DidCapture;\n      return null;\n    } else {\n      // Suspended but we should no longer be in dehydrated mode.\n      // Therefore we now have to render the fallback.\n      pushFallbackTreeSuspenseHandler(workInProgress);\n\n      const nextPrimaryChildren = nextProps.children;\n      const nextFallbackChildren = nextProps.fallback;\n      const fallbackChildFragment =\n        mountSuspenseFallbackAfterRetryWithoutHydrating(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n      const primaryChildFragment        = (workInProgress.child     );\n      primaryChildFragment.memoizedState =\n        mountSuspenseOffscreenState(renderLanes);\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n        current,\n        didPrimaryChildrenDefer,\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    }\n  }\n}\n\nfunction scheduleSuspenseWorkOnFiber(\n  fiber       ,\n  renderLanes       ,\n  propagationRoot       ,\n) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress       ,\n  firstChild              ,\n  renderLanes       ,\n)       {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state                       = node.memoizedState;\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    while (node.sibling === null) {\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild              )               {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow               = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\nfunction validateRevealOrder(revealOrder                         ) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode                      ,\n  revealOrder                         ,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot       , index        ) {\n  if (__DEV__) {\n    const isAnArray = isArray(childSlot);\n    const isIterable =\n      !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isAnArray || isIterable) {\n      const type = isAnArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children       ,\n  revealOrder                         ,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress       ,\n  isBackwards         ,\n  tail              ,\n  lastContentRow              ,\n  tailMode                      ,\n)       {\n  const renderState                                 =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n    }                         );\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  const nextProps                    = workInProgress.pendingProps;\n  const revealOrder                          = nextProps.revealOrder;\n  const tailMode                       = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext                  = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseListContext(\n    suspenseContext,\n    (ForceSuspenseFallback                 ),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseListContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n  }\n  pushSuspenseListContext(workInProgress, suspenseContext);\n\n  if (!disableLegacyMode && (workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updateViewTransition(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  const pendingProps                      = workInProgress.pendingProps;\n  if (pendingProps.name != null && pendingProps.name !== 'auto') {\n    // Explicitly named boundary. We track it so that we can pair it up with another explicit\n    // boundary if we get deleted.\n    workInProgress.flags |=\n      current === null\n        ? ViewTransitionNamedMount | ViewTransitionNamedStatic\n        : ViewTransitionNamedStatic;\n  } else {\n    // The server may have used useId to auto-assign a generated name for this boundary.\n    // We push a materialization to ensure child ids line up with the server.\n    if (getIsHydrating()) {\n      pushMaterializedTreeId(workInProgress);\n    }\n  }\n  if (__DEV__) {\n    // $FlowFixMe[prop-missing]\n    if (pendingProps.className !== undefined) {\n      const example =\n        typeof pendingProps.className === 'string'\n          ? JSON.stringify(pendingProps.className)\n          : '{...}';\n      if (!didWarnAboutClassNameOnViewTransition[example]) {\n        didWarnAboutClassNameOnViewTransition[example] = true;\n        console.error(\n          '<ViewTransition> doesn\\'t accept a \"className\" prop. It has been renamed to \"default\".\\n' +\n            '-   <ViewTransition className=%s>\\n' +\n            '+   <ViewTransition default=%s>',\n          example,\n          example,\n        );\n      }\n    }\n  }\n  if (current !== null && current.memoizedProps.name !== pendingProps.name) {\n    // If the name changes, we schedule a ref effect to create a new ref instance.\n    workInProgress.flags |= Ref | RefStatic;\n  } else {\n    markRef(current, workInProgress);\n  }\n  const nextChildren = pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  let context                   ;\n  if (enableRenderableContext) {\n    context = workInProgress.type;\n  } else {\n    context = workInProgress.type._context;\n  }\n  const newProps = workInProgress.pendingProps;\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateContextConsumer(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  let context                   ;\n  if (enableRenderableContext) {\n    const consumerType                         = workInProgress.type;\n    context = consumerType._context;\n  } else {\n    context = workInProgress.type;\n    if (__DEV__) {\n      if ((context     )._context !== undefined) {\n        context = (context     )._context;\n      }\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  let newChildren;\n  if (__DEV__) {\n    newChildren = callComponentInDEV(render, newValue, undefined);\n  } else {\n    newChildren = render(newValue);\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nexport function checkIfWorkInProgressReceivedUpdate()          {\n  return didReceiveUpdate;\n}\n\nfunction resetSuspendedCurrentOnMountInLegacyMode(\n  current              ,\n  workInProgress       ,\n) {\n  if (!disableLegacyMode && (workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (current !== null) {\n      // A lazy component only mounts if it suspended inside a non-\n      // concurrent tree, in an inconsistent state. We want to treat it like\n      // a new mount, even though an empty version of it already committed.\n      // Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n  }\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n)               {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n\n    if (current !== null) {\n      // Before bailing out, check if there are any context changes in\n      // the children.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(\n  current       ,\n  oldWorkInProgress       ,\n  newWorkInProgress       ,\n)               {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      // eslint-disable-next-line react-internal/prod-error-codes\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    if (__DEV__) {\n      newWorkInProgress._debugInfo = oldWorkInProgress._debugInfo;\n    }\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('Expected parent to have a child.');\n      }\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction checkScheduledUpdateOrContext(\n  current       ,\n  renderLanes       ,\n)          {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  const updateLanes = current.lanes;\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  }\n  // No pending update, but because context is propagated lazily, we need\n  // to check for a context change before we bail out.\n  const dependencies = current.dependencies;\n  if (dependencies !== null && checkIfContextChanged(dependencies)) {\n    return true;\n  }\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(\n  current       ,\n  workInProgress       ,\n  renderLanes       ,\n) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot: {\n      pushHostRootContext(workInProgress);\n      const root            = workInProgress.stateNode;\n      pushRootTransition(workInProgress, root, renderLanes);\n\n      if (enableTransitionTracing) {\n        pushRootMarkerInstance(workInProgress);\n      }\n\n      const cache        = current.memoizedState.cache;\n      pushCacheProvider(workInProgress, cache);\n      resetHydrationState();\n      break;\n    }\n    case HostSingleton:\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        pushLegacyContextProvider(workInProgress);\n      }\n      break;\n    }\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n    case ContextProvider: {\n      const newValue = workInProgress.memoizedProps.value;\n      let context                   ;\n      if (enableRenderableContext) {\n        context = workInProgress.type;\n      } else {\n        context = workInProgress.type._context;\n      }\n      pushProvider(workInProgress, context, newValue);\n      break;\n    }\n    case Profiler:\n      if (enableProfilerTimer) {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        const hasChildWork = includesSomeLane(\n          renderLanes,\n          workInProgress.childLanes,\n        );\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        if (enableProfilerCommitHooks) {\n          // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n          // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n          // because the effect is also where times bubble to parent Profilers.\n          workInProgress.flags |= Passive;\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          const stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = -0;\n          stateNode.passiveEffectDuration = -0;\n        }\n      }\n      break;\n    case ActivityComponent: {\n      const state                       = workInProgress.memoizedState;\n      if (state !== null) {\n        // We're dehydrated so we're not going to render the children. This is just\n        // to maintain push/pop symmetry.\n        // We know that this component will suspend again because if it has\n        // been unsuspended it has committed as a hydrated Activity component.\n        // If it needs to be retried, it should have work scheduled on it.\n        workInProgress.flags |= DidCapture;\n        pushDehydratedActivitySuspenseHandler(workInProgress);\n        return null;\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      const state                       = workInProgress.memoizedState;\n      if (state !== null) {\n        if (state.dehydrated !== null) {\n          // We're not going to render the children, so this is just to maintain\n          // push/pop symmetry\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          // We know that this component will suspend again because if it has\n          // been unsuspended it has committed as a resolved Suspense component.\n          // If it needs to be retried, it should have work scheduled on it.\n          workInProgress.flags |= DidCapture;\n          // We should never render the children of a dehydrated boundary until we\n          // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n          return null;\n        }\n\n        // If this boundary is currently timed out, we need to decide\n        // whether to retry the primary children, or to skip over it and\n        // go straight to the fallback. Check the priority of the primary\n        // child fragment.\n        const primaryChildFragment        = (workInProgress.child     );\n        const primaryChildLanes = primaryChildFragment.childLanes;\n        if (includesSomeLane(renderLanes, primaryChildLanes)) {\n          // The primary children have pending work. Use the normal path\n          // to attempt to render the primary children again.\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        } else {\n          // The primary child fragment does not have pending work marked\n          // on it\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          // The primary children do not have pending work with sufficient\n          // priority. Bailout.\n          const child = bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n          if (child !== null) {\n            // The fallback children have pending work. Skip over the\n            // primary children and work on the fallback.\n            return child.sibling;\n          } else {\n            // Note: We can return `null` here because we already checked\n            // whether there were nested context consumers, via the call to\n            // `bailoutOnAlreadyFinishedWork` above.\n            return null;\n          }\n        }\n      } else {\n        pushPrimaryTreeSuspenseHandler(workInProgress);\n      }\n      break;\n    }\n    case SuspenseListComponent: {\n      const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n      let hasChildWork = includesSomeLane(\n        renderLanes,\n        workInProgress.childLanes,\n      );\n\n      if (!hasChildWork) {\n        // Context changes may not have been propagated yet. We need to do\n        // that now, before we can decide whether to bail out.\n        // TODO: We use `childLanes` as a heuristic for whether there is\n        // remaining work in a few places, including\n        // `bailoutOnAlreadyFinishedWork` and\n        // `updateDehydratedSuspenseComponent`. We should maybe extract this\n        // into a dedicated function.\n        lazilyPropagateParentContextChanges(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n        hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n      }\n\n      if (didSuspendBefore) {\n        if (hasChildWork) {\n          // If something was in fallback state last time, and we have all the\n          // same children then we're still in progressive loading state.\n          // Something might get unblocked by state updates or retries in the\n          // tree which will affect the tail. So we need to use the normal\n          // path to compute the correct tail.\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        workInProgress.flags |= DidCapture;\n      }\n\n      // If nothing suspended before and we're rendering the same children,\n      // then the tail doesn't matter. Anything new that suspends will work\n      // in the \"together\" mode, so we can continue from the state we had.\n      const renderState = workInProgress.memoizedState;\n      if (renderState !== null) {\n        // Reset to the \"together\" mode in case we've started a different\n        // update in the past but didn't complete it.\n        renderState.rendering = null;\n        renderState.tail = null;\n        renderState.lastEffect = null;\n      }\n      pushSuspenseListContext(workInProgress, suspenseStackCursor.current);\n\n      if (hasChildWork) {\n        break;\n      } else {\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        return null;\n      }\n    }\n    case OffscreenComponent: {\n      // Need to check if the tree still needs to be deferred. This is\n      // almost identical to the logic used in the normal update path,\n      // so we'll just enter that. The only difference is we'll bail out\n      // at the next level instead of this one, because the child props\n      // have not changed. Which is fine.\n      // TODO: Probably should refactor `beginWork` to split the bailout\n      // path from the normal path. I'm tempted to do a labeled break here\n      // but I won't :)\n      workInProgress.lanes = NoLanes;\n      return updateOffscreenComponent(\n        current,\n        workInProgress,\n        renderLanes,\n        workInProgress.pendingProps,\n      );\n    }\n    case CacheComponent: {\n      const cache        = current.memoizedState.cache;\n      pushCacheProvider(workInProgress, cache);\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        const instance                               = workInProgress.stateNode;\n        if (instance !== null) {\n          pushMarkerInstance(workInProgress, instance);\n        }\n        break;\n      }\n      // Fallthrough\n    }\n    case LegacyHiddenComponent: {\n      if (enableLegacyHidden) {\n        workInProgress.lanes = NoLanes;\n        return updateLegacyHiddenComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      // Fallthrough\n    }\n  }\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n)               {\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      const copiedFiber = createFiberFromTypeAndProps(\n        workInProgress.type,\n        workInProgress.key,\n        workInProgress.pendingProps,\n        workInProgress._debugOwner || null,\n        workInProgress.mode,\n        workInProgress.lanes,\n      );\n      copiedFiber._debugStack = workInProgress._debugStack;\n      copiedFiber._debugTask = workInProgress._debugTask;\n      return remountFiber(current, workInProgress, copiedFiber);\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n        current,\n        renderLanes,\n      );\n      if (\n        !hasScheduledUpdateOrContext &&\n        // If this is the second pass of an error or suspense boundary, there\n        // may not be work scheduled on `current`, so we check for this flag.\n        (workInProgress.flags & DidCapture) === NoFlags\n      ) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\n      // Check if this child belongs to a list of muliple children in\n      // its parent.\n      //\n      // In a true multi-threaded implementation, we would render children on\n      // parallel threads. This would represent the beginning of a new render\n      // thread for this subtree.\n      //\n      // We only use this for id generation during hydration, which is why the\n      // logic is located in this special branch.\n      const slotIndex = workInProgress.index;\n      const numberOfForks = getForksAtLevel(workInProgress);\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\n    }\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        disableDefaultPropsExceptForClasses ||\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultPropsOnNonClassComponent(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps = resolveClassComponentProps(\n        Component,\n        unresolvedProps,\n        workInProgress.elementType === Component,\n      );\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostHoistable:\n      if (supportsResources) {\n        return updateHostHoistable(current, workInProgress, renderLanes);\n      }\n    // Fall through\n    case HostSingleton:\n      if (supportsSingletons) {\n        return updateHostSingleton(current, workInProgress, renderLanes);\n      }\n    // Fall through\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        disableDefaultPropsExceptForClasses ||\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultPropsOnNonClassComponent(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = disableDefaultPropsExceptForClasses\n        ? unresolvedProps\n        : resolveDefaultPropsOnNonClassComponent(type, unresolvedProps);\n      resolvedProps = disableDefaultPropsExceptForClasses\n        ? resolvedProps\n        : resolveDefaultPropsOnNonClassComponent(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      if (disableLegacyMode) {\n        break;\n      }\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps = resolveClassComponentProps(\n        Component,\n        unresolvedProps,\n        workInProgress.elementType === Component,\n      );\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case IncompleteFunctionComponent: {\n      if (disableLegacyMode) {\n        break;\n      }\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps = resolveClassComponentProps(\n        Component,\n        unresolvedProps,\n        workInProgress.elementType === Component,\n      );\n      return mountIncompleteFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case ActivityComponent: {\n      return updateActivityComponent(current, workInProgress, renderLanes);\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(\n        current,\n        workInProgress,\n        renderLanes,\n        workInProgress.pendingProps,\n      );\n    }\n    case LegacyHiddenComponent: {\n      if (enableLegacyHidden) {\n        return updateLegacyHiddenComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n    case CacheComponent: {\n      return updateCacheComponent(current, workInProgress, renderLanes);\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        return updateTracingMarkerComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n    case ViewTransitionComponent: {\n      if (enableViewTransition) {\n        return updateViewTransition(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case Throw: {\n      // This represents a Component that threw in the reconciliation phase.\n      // So we'll rethrow here. This might be a Thenable.\n      throw workInProgress.pendingProps;\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {beginWork};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                \n             \n                     \n               \n                  \n                           \n\nimport {\n  getPublicInstance,\n  getInstanceFromNode,\n  getInstanceFromScope,\n} from './ReactFiberConfig';\nimport {isFiberSuspenseAndTimedOut} from './ReactFiberTreeReflection';\n\nimport {HostComponent, ScopeComponent, ContextProvider} from './ReactWorkTags';\nimport {\n  enableScopeAPI,\n  enableRenderableContext,\n} from 'shared/ReactFeatureFlags';\n\nfunction getSuspenseFallbackChild(fiber       )               {\n  return ((((fiber.child     )       ).sibling     )       ).child;\n}\n\nconst emptyObject = {};\n\nfunction collectScopedNodes(\n  node       ,\n  fn                 ,\n  scopedNodes            ,\n)       {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {type, memoizedProps, stateNode} = node;\n      const instance = getPublicInstance(stateNode);\n      if (\n        instance !== null &&\n        fn(type, memoizedProps || emptyObject, instance) === true\n      ) {\n        scopedNodes.push(instance);\n      }\n    }\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      collectScopedNodesFromChildren(child, fn, scopedNodes);\n    }\n  }\n}\n\nfunction collectFirstScopedNode(\n  node       ,\n  fn                 ,\n)                {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {type, memoizedProps, stateNode} = node;\n      const instance = getPublicInstance(stateNode);\n      if (instance !== null && fn(type, memoizedProps, instance) === true) {\n        return instance;\n      }\n    }\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      return collectFirstScopedNodeFromChildren(child, fn);\n    }\n  }\n  return null;\n}\n\nfunction collectScopedNodesFromChildren(\n  startingChild       ,\n  fn                 ,\n  scopedNodes            ,\n)       {\n  let child               = startingChild;\n  while (child !== null) {\n    collectScopedNodes(child, fn, scopedNodes);\n    child = child.sibling;\n  }\n}\n\nfunction collectFirstScopedNodeFromChildren(\n  startingChild       ,\n  fn                 ,\n)                {\n  let child               = startingChild;\n  while (child !== null) {\n    const scopedNode = collectFirstScopedNode(child, fn);\n    if (scopedNode !== null) {\n      return scopedNode;\n    }\n    child = child.sibling;\n  }\n  return null;\n}\n\nfunction collectNearestContextValues   (\n  node       ,\n  context                 ,\n  childContextValues          ,\n)       {\n  if (\n    node.tag === ContextProvider &&\n    (enableRenderableContext ? node.type : node.type._context) === context\n  ) {\n    const contextValue = node.memoizedProps.value;\n    childContextValues.push(contextValue);\n  } else {\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      collectNearestChildContextValues(child, context, childContextValues);\n    }\n  }\n}\n\nfunction collectNearestChildContextValues   (\n  startingChild              ,\n  context                 ,\n  childContextValues          ,\n)       {\n  let child = startingChild;\n  while (child !== null) {\n    collectNearestContextValues(child, context, childContextValues);\n    child = child.sibling;\n  }\n}\n\nfunction DO_NOT_USE_queryAllNodes(\n                   \n  fn                 ,\n)                       {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return null;\n  }\n  const child = currentFiber.child;\n  const scopedNodes             = [];\n  if (child !== null) {\n    collectScopedNodesFromChildren(child, fn, scopedNodes);\n  }\n  return scopedNodes.length === 0 ? null : scopedNodes;\n}\n\nfunction DO_NOT_USE_queryFirstNode(\n                   \n  fn                 ,\n)                {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return null;\n  }\n  const child = currentFiber.child;\n  if (child !== null) {\n    return collectFirstScopedNodeFromChildren(child, fn);\n  }\n  return null;\n}\n\nfunction containsNode(                  node        )          {\n  let fiber = getInstanceFromNode(node);\n  while (fiber !== null) {\n    if (fiber.tag === ScopeComponent && fiber.stateNode === this) {\n      return true;\n    }\n    fiber = fiber.return;\n  }\n  return false;\n}\n\nfunction getChildContextValues   (\n                   \n  context                 ,\n)           {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return [];\n  }\n  const child = currentFiber.child;\n  const childContextValues           = [];\n  if (child !== null) {\n    collectNearestChildContextValues(child, context, childContextValues);\n  }\n  return childContextValues;\n}\n\nexport function createScopeInstance()                     {\n  return {\n    DO_NOT_USE_queryAllNodes,\n    DO_NOT_USE_queryFirstNode,\n    containsNode,\n    getChildContextValues,\n  };\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                           \n                                                \n                                                  \n                                                                        \n             \n           \n       \n        \n            \n           \n           \n                            \n                                                                 \n             \n                \n                          \n             \n                                       \n             \n                 \n                 \n                                        \n                                                                              \n                                                      \nimport {\n  enableLegacyHidden,\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enablePersistedModeClonedFlag,\n  enableProfilerTimer,\n  enableTransitionTracing,\n  enableRenderableContext,\n  passChildrenWhenCloningPersistedNodes,\n  disableLegacyMode,\n  enableViewTransition,\n  enableSuspenseyImages,\n} from 'shared/ReactFeatureFlags';\n\nimport {now} from './Scheduler';\n\nimport {\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  IncompleteFunctionComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n  Throw,\n  ViewTransitionComponent,\n  ActivityComponent,\n} from './ReactWorkTags';\nimport {\n  NoMode,\n  ConcurrentMode,\n  ProfileMode,\n  SuspenseyImagesMode,\n} from './ReactTypeOfMode';\nimport {\n  Placement,\n  Update,\n  Visibility,\n  NoFlags,\n  DidCapture,\n  Snapshot,\n  ChildDeletion,\n  StaticMask,\n  MutationMask,\n  Passive,\n  ForceClientRender,\n  MaySuspendCommit,\n  ScheduleRetry,\n  ShouldSuspendCommit,\n  Cloned,\n  ViewTransitionStatic,\n  Hydrate,\n} from './ReactFiberFlags';\n\nimport {\n  createInstance,\n  createTextInstance,\n  resolveSingletonInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  finalizeHydratedChildren,\n  supportsMutation,\n  supportsPersistence,\n  supportsResources,\n  supportsSingletons,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  preparePortalMount,\n  prepareScopeUpdate,\n  maySuspendCommit,\n  maySuspendCommitOnUpdate,\n  maySuspendCommitInSyncRender,\n  mayResourceSuspendCommit,\n  preloadInstance,\n  preloadResource,\n} from './ReactFiberConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext';\nimport {\n  suspenseStackCursor,\n  popSuspenseListContext,\n  popSuspenseHandler,\n  pushSuspenseListContext,\n  setShallowSuspenseListContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseListContext,\n} from './ReactFiberSuspenseContext';\nimport {popHiddenContext} from './ReactFiberHiddenContext';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext';\nimport {popProvider} from './ReactFiberNewContext';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostActivityInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n  upgradeHydrationErrorsToRecoverable,\n  emitPendingHydrationWarnings,\n} from './ReactFiberHydrationContext';\nimport {\n  renderHasNotSuspendedYet,\n  getRenderTargetTime,\n  getWorkInProgressTransitions,\n  shouldRemainOnPreviousScreen,\n  markSpawnedRetryLane,\n} from './ReactFiberWorkLoop';\nimport {\n  OffscreenLane,\n  SomeRetryLane,\n  NoLanes,\n  includesSomeLane,\n  mergeLanes,\n  claimNextRetryLane,\n  includesOnlySuspenseyCommitEligibleLanes,\n} from './ReactFiberLane';\nimport {resetChildFibers} from './ReactChildFiber';\nimport {createScopeInstance} from './ReactFiberScope';\nimport {transferActualDuration} from './ReactProfilerTimer';\nimport {popCacheProvider} from './ReactFiberCacheComponent';\nimport {popTreeContext} from './ReactFiberTreeContext';\nimport {popRootTransition, popTransition} from './ReactFiberTransition';\nimport {\n  popMarkerInstance,\n  popRootMarkerInstance,\n} from './ReactFiberTracingMarkerComponent';\nimport {suspendCommit} from './ReactFiberThenable';\n\n/**\n * Tag the fiber with an update effect. This turns a Placement into\n * a PlacementAndUpdate.\n */\nfunction markUpdate(workInProgress       ) {\n  workInProgress.flags |= Update;\n}\n\n/**\n * Tag the fiber with Cloned in persistent mode to signal that\n * it received an update that requires a clone of the tree above.\n */\nfunction markCloned(workInProgress       ) {\n  if (supportsPersistence && enablePersistedModeClonedFlag) {\n    workInProgress.flags |= Cloned;\n  }\n}\n\n/**\n * In persistent mode, return whether this update needs to clone the subtree.\n */\nfunction doesRequireClone(current              , completedWork       ) {\n  const didBailout = current !== null && current.child === completedWork.child;\n  if (didBailout) {\n    return false;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return true;\n  }\n\n  // TODO: If we move the `doesRequireClone` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n  let child = completedWork.child;\n  while (child !== null) {\n    const checkedFlags = enablePersistedModeClonedFlag\n      ? Cloned | Visibility | Placement | ChildDeletion\n      : MutationMask;\n    if (\n      (child.flags & checkedFlags) !== NoFlags ||\n      (child.subtreeFlags & checkedFlags) !== NoFlags\n    ) {\n      return true;\n    }\n    child = child.sibling;\n  }\n  return false;\n}\n\nfunction appendAllChildren(\n  parent          ,\n  workInProgress       ,\n  needsVisibilityToggle         ,\n  isHidden         ,\n) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (\n        node.tag === HostPortal ||\n        (supportsSingletons ? node.tag === HostSingleton : false)\n      ) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n        // If we have a HostSingleton it will be placed independently\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      while (node.sibling === null) {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  } else if (supportsPersistence) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildren(\n          parent,\n          node,\n          /* needsVisibilityToggle */ true,\n          /* isHidden */ true,\n        );\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      while (node.sibling === null) {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\n// An unfortunate fork of appendAllChildren because we have two different parent types.\nfunction appendAllChildrenToContainer(\n  containerChildSet          ,\n  workInProgress       ,\n  needsVisibilityToggle         ,\n  isHidden         ,\n)          {\n  // Host components that have their visibility toggled by an OffscreenComponent\n  // do not support passChildrenWhenCloningPersistedNodes. To inform the callee\n  // about their presence, we track and return if they were added to the\n  // child set.\n  let hasOffscreenComponentChild = false;\n  if (supportsPersistence) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildrenToContainer(\n          containerChildSet,\n          node,\n          /* needsVisibilityToggle */ true,\n          /* isHidden */ true,\n        );\n\n        hasOffscreenComponentChild = true;\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      node = (node       );\n      if (node === workInProgress) {\n        return hasOffscreenComponentChild;\n      }\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      while (node.sibling === null) {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        if (node.return === null || node.return === workInProgress) {\n          return hasOffscreenComponentChild;\n        }\n        node = node.return;\n      }\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  return hasOffscreenComponentChild;\n}\n\nfunction updateHostContainer(current              , workInProgress       ) {\n  if (supportsPersistence) {\n    if (doesRequireClone(current, workInProgress)) {\n      const portalOrRoot   \n                                 \n                                  \n           \n        = workInProgress.stateNode;\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet();\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(\n        newChildSet,\n        workInProgress,\n        /* needsVisibilityToggle */ false,\n        /* isHidden */ false,\n      );\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  }\n}\n\nfunction updateHostComponent(\n  current       ,\n  workInProgress       ,\n  type      ,\n  newProps       ,\n  renderLanes       ,\n) {\n  if (supportsMutation) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    markUpdate(workInProgress);\n  } else if (supportsPersistence) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const requiresClone = doesRequireClone(current, workInProgress);\n    if (!requiresClone && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const currentHostContext = getHostContext();\n\n    let newChildSet = null;\n    let hasOffscreenComponentChild = false;\n    if (requiresClone && passChildrenWhenCloningPersistedNodes) {\n      markCloned(workInProgress);\n      newChildSet = createContainerChildSet();\n      // If children might have changed, we have to add them all to the set.\n      hasOffscreenComponentChild = appendAllChildrenToContainer(\n        newChildSet,\n        workInProgress,\n        /* needsVisibilityToggle */ false,\n        /* isHidden */ false,\n      );\n    }\n\n    const newInstance = cloneInstance(\n      currentInstance,\n      type,\n      oldProps,\n      newProps,\n      !requiresClone,\n      !hasOffscreenComponentChild ? newChildSet : undefined,\n    );\n    if (newInstance === currentInstance) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    } else {\n      markCloned(workInProgress);\n    }\n\n    // Certain renderers require commit-time effects for initial mount.\n    // (eg DOM renderer supports auto-focus for certain elements).\n    // Make sure such renderers get scheduled for later work.\n    if (\n      finalizeInitialChildren(newInstance, type, newProps, currentHostContext)\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (!requiresClone) {\n      if (!enablePersistedModeClonedFlag) {\n        // If there are no other effects in this tree, we need to flag this node as having one.\n        // Even though we're not going to use it for anything.\n        // Otherwise parents won't know that there are new children to propagate upwards.\n        markUpdate(workInProgress);\n      }\n    } else if (\n      !passChildrenWhenCloningPersistedNodes ||\n      hasOffscreenComponentChild\n    ) {\n      // If children have changed, we have to add them all to the set.\n      appendAllChildren(\n        newInstance,\n        workInProgress,\n        /* needsVisibilityToggle */ false,\n        /* isHidden */ false,\n      );\n    }\n  }\n}\n\n// This function must be called at the very end of the complete phase, because\n// it might throw to suspend, and if the resource immediately loads, the work\n// loop will resume rendering as if the work-in-progress completed. So it must\n// fully complete.\n// TODO: This should ideally move to begin phase, but currently the instance is\n// not created until the complete phase. For our existing use cases, host nodes\n// that suspend don't have children, so it doesn't matter. But that might not\n// always be true in the future.\nfunction preloadInstanceAndSuspendIfNeeded(\n  workInProgress       ,\n  type      ,\n  oldProps              ,\n  newProps       ,\n  renderLanes       ,\n) {\n  const maySuspend =\n    (enableSuspenseyImages ||\n      (workInProgress.mode & SuspenseyImagesMode) !== NoMode) &&\n    (oldProps === null\n      ? maySuspendCommit(type, newProps)\n      : maySuspendCommitOnUpdate(type, oldProps, newProps));\n\n  if (!maySuspend) {\n    // If this flag was set previously, we can remove it. The flag\n    // represents whether this particular set of props might ever need to\n    // suspend. The safest thing to do is for maySuspendCommit to always\n    // return true, but if the renderer is reasonably confident that the\n    // underlying resource won't be evicted, it can return false as a\n    // performance optimization.\n    workInProgress.flags &= ~MaySuspendCommit;\n    return;\n  }\n\n  // Mark this fiber with a flag. This gets set on all host instances\n  // that might possibly suspend, even if they don't need to suspend\n  // currently. We use this when revealing a prerendered tree, because\n  // even though the tree has \"mounted\", its resources might not have\n  // loaded yet.\n  workInProgress.flags |= MaySuspendCommit;\n\n  if (\n    includesOnlySuspenseyCommitEligibleLanes(renderLanes) ||\n    maySuspendCommitInSyncRender(type, newProps)\n  ) {\n    // preload the instance if necessary. Even if this is an urgent render there\n    // could be benefits to preloading early.\n    // @TODO we should probably do the preload in begin work\n    const isReady = preloadInstance(workInProgress.stateNode, type, newProps);\n    if (!isReady) {\n      if (shouldRemainOnPreviousScreen()) {\n        workInProgress.flags |= ShouldSuspendCommit;\n      } else {\n        suspendCommit();\n      }\n    } else {\n      // Even if we're ready we suspend the commit and check again in the pre-commit\n      // phase if we need to suspend anyway. Such as if it's delayed on decoding or\n      // if it was dropped from the cache while rendering due to pressure.\n      workInProgress.flags |= ShouldSuspendCommit;\n    }\n  }\n}\n\nfunction preloadResourceAndSuspendIfNeeded(\n  workInProgress       ,\n  resource          ,\n  type      ,\n  props       ,\n  renderLanes       ,\n) {\n  // This is a fork of preloadInstanceAndSuspendIfNeeded, but for resources.\n  if (!mayResourceSuspendCommit(resource)) {\n    workInProgress.flags &= ~MaySuspendCommit;\n    return;\n  }\n\n  workInProgress.flags |= MaySuspendCommit;\n\n  const isReady = preloadResource(resource);\n  if (!isReady) {\n    if (shouldRemainOnPreviousScreen()) {\n      workInProgress.flags |= ShouldSuspendCommit;\n    } else {\n      suspendCommit();\n    }\n  }\n}\n\nfunction scheduleRetryEffect(\n  workInProgress       ,\n  retryQueue                   ,\n) {\n  const wakeables = retryQueue;\n  if (wakeables !== null) {\n    // Schedule an effect to attach a retry listener to the promise.\n    // TODO: Move to passive phase\n    workInProgress.flags |= Update;\n  }\n\n  // Check if we need to schedule an immediate retry. This should happen\n  // whenever we unwind a suspended tree without fully rendering its siblings;\n  // we need to begin the retry so we can start prerendering them.\n  //\n  // We also use this mechanism for Suspensey Resources (e.g. stylesheets),\n  // because those don't actually block the render phase, only the commit phase.\n  // So we can start rendering even before the resources are ready.\n  if (workInProgress.flags & ScheduleRetry) {\n    const retryLane =\n      // TODO: This check should probably be moved into claimNextRetryLane\n      // I also suspect that we need some further consolidation of offscreen\n      // and retry lanes.\n      workInProgress.tag !== OffscreenComponent\n        ? claimNextRetryLane()\n        : OffscreenLane;\n    workInProgress.lanes = mergeLanes(workInProgress.lanes, retryLane);\n\n    // Track the lanes that have been scheduled for an immediate retry so that\n    // we can mark them as suspended upon committing the root.\n    markSpawnedRetryLane(retryLane);\n  }\n}\n\nfunction updateHostText(\n  current       ,\n  workInProgress       ,\n  oldText        ,\n  newText        ,\n) {\n  if (supportsMutation) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  } else if (supportsPersistence) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      markCloned(workInProgress);\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      if (!enablePersistedModeClonedFlag) {\n        // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n        // This lets the parents know that at least one of their children has changed.\n        markUpdate(workInProgress);\n      }\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  }\n}\n\nfunction cutOffTailIfNeeded(\n  renderState                         ,\n  hasRenderedATailFallback         ,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction bubbleProperties(completedWork       ) {\n  const didBailout =\n    completedWork.alternate !== null &&\n    completedWork.alternate.child === completedWork.child;\n\n  let newChildLanes        = NoLanes;\n  let subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let actualDuration = completedWork.actualDuration;\n      let treeBaseDuration = ((completedWork.selfBaseDuration     )        );\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n        // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n        actualDuration += child.actualDuration;\n\n        // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let treeBaseDuration = ((completedWork.selfBaseDuration     )        );\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n\n  return didBailout;\n}\n\nfunction completeDehydratedActivityBoundary(\n  current              ,\n  workInProgress       ,\n  nextState                      ,\n)          {\n  const wasHydrated = popHydrationState(workInProgress);\n\n  if (nextState !== null) {\n    // We might be inside a hydration state the first time we're picking up this\n    // Activity boundary, and also after we've reentered it for further hydration.\n    if (current === null) {\n      if (!wasHydrated) {\n        throw new Error(\n          'A dehydrated suspense component was completed without a hydrated node. ' +\n            'This is probably a bug in React.',\n        );\n      }\n      prepareToHydrateHostActivityInstance(workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -=\n                ((primaryChildFragment.treeBaseDuration     )        );\n            }\n          }\n        }\n      }\n      return false;\n    } else {\n      emitPendingHydrationWarnings();\n      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n      resetHydrationState();\n      if ((workInProgress.flags & DidCapture) === NoFlags) {\n        // This boundary did not suspend so it's now hydrated and unsuspended.\n        nextState = workInProgress.memoizedState = null;\n      }\n      // If nothing suspended, we need to schedule an effect to mark this boundary\n      // as having hydrated so events know that they're free to be invoked.\n      // It's also a signal to replay events and the suspense callback.\n      // If something suspended, schedule an effect to attach retry listeners.\n      // So we might as well always mark this.\n      workInProgress.flags |= Update;\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -=\n                ((primaryChildFragment.treeBaseDuration     )        );\n            }\n          }\n        }\n      }\n      return false;\n    }\n  } else {\n    // Successfully completed this tree. If this was a forced client render,\n    // there may have been recoverable errors during first hydration\n    // attempt. If so, add them to a queue so we can log them in the\n    // commit phase. We also add them to prev state so we can get to them\n    // from the Suspense Boundary.\n    const hydrationErrors = upgradeHydrationErrorsToRecoverable();\n    if (current !== null && current.memoizedState !== null) {\n      const prevState                = current.memoizedState;\n      prevState.hydrationErrors = hydrationErrors;\n    }\n    // Fall through to normal Offscreen path\n    return true;\n  }\n}\n\nfunction completeDehydratedSuspenseBoundary(\n  current              ,\n  workInProgress       ,\n  nextState                      ,\n)          {\n  const wasHydrated = popHydrationState(workInProgress);\n\n  if (nextState !== null && nextState.dehydrated !== null) {\n    // We might be inside a hydration state the first time we're picking up this\n    // Suspense boundary, and also after we've reentered it for further hydration.\n    if (current === null) {\n      if (!wasHydrated) {\n        throw new Error(\n          'A dehydrated suspense component was completed without a hydrated node. ' +\n            'This is probably a bug in React.',\n        );\n      }\n      prepareToHydrateHostSuspenseInstance(workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -=\n                ((primaryChildFragment.treeBaseDuration     )        );\n            }\n          }\n        }\n      }\n      return false;\n    } else {\n      emitPendingHydrationWarnings();\n      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n      resetHydrationState();\n      if ((workInProgress.flags & DidCapture) === NoFlags) {\n        // This boundary did not suspend so it's now hydrated and unsuspended.\n        nextState = workInProgress.memoizedState = null;\n      }\n      // If nothing suspended, we need to schedule an effect to mark this boundary\n      // as having hydrated so events know that they're free to be invoked.\n      // It's also a signal to replay events and the suspense callback.\n      // If something suspended, schedule an effect to attach retry listeners.\n      // So we might as well always mark this.\n      workInProgress.flags |= Update;\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -=\n                ((primaryChildFragment.treeBaseDuration     )        );\n            }\n          }\n        }\n      }\n      return false;\n    }\n  } else {\n    // Successfully completed this tree. If this was a forced client render,\n    // there may have been recoverable errors during first hydration\n    // attempt. If so, add them to a queue so we can log them in the\n    // commit phase. We also add them to prev state so we can get to them\n    // from the Suspense Boundary.\n    const hydrationErrors = upgradeHydrationErrorsToRecoverable();\n    if (current !== null && current.memoizedState !== null) {\n      const prevState                = current.memoizedState;\n      prevState.hydrationErrors = hydrationErrors;\n    }\n    // Fall through to normal Suspense path\n    return true;\n  }\n}\n\nfunction completeWork(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n)               {\n  const newProps = workInProgress.pendingProps;\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case IncompleteFunctionComponent: {\n      if (disableLegacyMode) {\n        break;\n      }\n      // Fallthrough\n    }\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostRoot: {\n      const fiberRoot = (workInProgress.stateNode           );\n\n      if (enableTransitionTracing) {\n        const transitions = getWorkInProgressTransitions();\n        // We set the Passive flag here because if there are new transitions,\n        // we will need to schedule callbacks and process the transitions,\n        // which we do in the passive phase\n        if (transitions !== null) {\n          workInProgress.flags |= Passive;\n        }\n      }\n\n      let previousCache               = null;\n      if (current !== null) {\n        previousCache = current.memoizedState.cache;\n      }\n      const cache        = workInProgress.memoizedState.cache;\n      if (cache !== previousCache) {\n        // Run passive effects to retain/release the cache.\n        workInProgress.flags |= Passive;\n      }\n      popCacheProvider(workInProgress, cache);\n\n      if (enableTransitionTracing) {\n        popRootMarkerInstance(workInProgress);\n      }\n\n      popRootTransition(workInProgress, fiberRoot, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          emitPendingHydrationWarnings();\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else {\n          if (current !== null) {\n            const prevState            = current.memoizedState;\n            if (\n              // Check if this is a client root\n              !prevState.isDehydrated ||\n              // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags\n            ) {\n              // Schedule an effect to clear this container at the start of the\n              // next commit. This handles the case of React rendering into a\n              // container with previous children. It's also safe to do for\n              // updates too, because current.child would only be null if the\n              // previous render was null (so the container would already\n              // be empty).\n              workInProgress.flags |= Snapshot;\n\n              // If this was a forced client render, there may have been\n              // recoverable errors during first hydration attempt. If so, add\n              // them to a queue so we can log them in the commit phase.\n              upgradeHydrationErrorsToRecoverable();\n            }\n          }\n        }\n      }\n      updateHostContainer(current, workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableTransitionTracing) {\n        if ((workInProgress.subtreeFlags & Visibility) !== NoFlags) {\n          // If any of our suspense children toggle visibility, this means that\n          // the pending boundaries array needs to be updated, which we only\n          // do in the passive phase.\n          workInProgress.flags |= Passive;\n        }\n      }\n      return null;\n    }\n    case HostHoistable: {\n      if (supportsResources) {\n        // The branching here is more complicated than you might expect because\n        // a HostHoistable sometimes corresponds to a Resource and sometimes\n        // corresponds to an Instance. It can also switch during an update.\n\n        const type = workInProgress.type;\n        const nextResource                  = workInProgress.memoizedState;\n        if (current === null) {\n          // We are mounting and must Update this Hoistable in this commit\n          // @TODO refactor this block to create the instance here in complete\n          // phase if we are not hydrating.\n          markUpdate(workInProgress);\n          if (nextResource !== null) {\n            // This is a Hoistable Resource\n\n            // This must come at the very end of the complete phase.\n            bubbleProperties(workInProgress);\n            preloadResourceAndSuspendIfNeeded(\n              workInProgress,\n              nextResource,\n              type,\n              newProps,\n              renderLanes,\n            );\n            return null;\n          } else {\n            // This is a Hoistable Instance\n            // This must come at the very end of the complete phase.\n            bubbleProperties(workInProgress);\n            preloadInstanceAndSuspendIfNeeded(\n              workInProgress,\n              type,\n              null,\n              newProps,\n              renderLanes,\n            );\n            return null;\n          }\n        } else {\n          // This is an update.\n          if (nextResource) {\n            // This is a Resource\n            if (nextResource !== current.memoizedState) {\n              // we have a new Resource. we need to update\n              markUpdate(workInProgress);\n              // This must come at the very end of the complete phase.\n              bubbleProperties(workInProgress);\n              // This must come at the very end of the complete phase, because it might\n              // throw to suspend, and if the resource immediately loads, the work loop\n              // will resume rendering as if the work-in-progress completed. So it must\n              // fully complete.\n              preloadResourceAndSuspendIfNeeded(\n                workInProgress,\n                nextResource,\n                type,\n                newProps,\n                renderLanes,\n              );\n              return null;\n            } else {\n              // This must come at the very end of the complete phase.\n              bubbleProperties(workInProgress);\n              workInProgress.flags &= ~MaySuspendCommit;\n              return null;\n            }\n          } else {\n            const oldProps = current.memoizedProps;\n            // This is an Instance\n            // We may have props to update on the Hoistable instance.\n            if (supportsMutation) {\n              if (oldProps !== newProps) {\n                markUpdate(workInProgress);\n              }\n            } else {\n              // We use the updateHostComponent path becuase it produces\n              // the update queue we need for Hoistables.\n              updateHostComponent(\n                current,\n                workInProgress,\n                type,\n                newProps,\n                renderLanes,\n              );\n            }\n            // This must come at the very end of the complete phase.\n            bubbleProperties(workInProgress);\n            preloadInstanceAndSuspendIfNeeded(\n              workInProgress,\n              type,\n              oldProps,\n              newProps,\n              renderLanes,\n            );\n            return null;\n          }\n        }\n      }\n      // Fall through\n    }\n    case HostSingleton: {\n      if (supportsSingletons) {\n        popHostContext(workInProgress);\n        const rootContainerInstance = getRootHostContainer();\n        const type = workInProgress.type;\n        if (current !== null && workInProgress.stateNode != null) {\n          if (supportsMutation) {\n            const oldProps = current.memoizedProps;\n            if (oldProps !== newProps) {\n              markUpdate(workInProgress);\n            }\n          } else {\n            updateHostComponent(\n              current,\n              workInProgress,\n              type,\n              newProps,\n              renderLanes,\n            );\n          }\n        } else {\n          if (!newProps) {\n            if (workInProgress.stateNode === null) {\n              throw new Error(\n                'We must have new props for new mounts. This error is likely ' +\n                  'caused by a bug in React. Please file an issue.',\n              );\n            }\n\n            // This can happen when we abort work.\n            bubbleProperties(workInProgress);\n            if (enableViewTransition) {\n              // Host Components act as their own View Transitions which doesn't run enter/exit animations.\n              // We clear any ViewTransitionStatic flag bubbled from inner View Transitions.\n              workInProgress.subtreeFlags &= ~ViewTransitionStatic;\n            }\n            return null;\n          }\n\n          const currentHostContext = getHostContext();\n          const wasHydrated = popHydrationState(workInProgress);\n          let instance          ;\n          if (wasHydrated) {\n            // We ignore the boolean indicating there is an updateQueue because\n            // it is used only to set text children and HostSingletons do not\n            // use them.\n            prepareToHydrateHostInstance(workInProgress, currentHostContext);\n            instance = workInProgress.stateNode;\n          } else {\n            instance = resolveSingletonInstance(\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n              true,\n            );\n            workInProgress.stateNode = instance;\n            markUpdate(workInProgress);\n          }\n        }\n        bubbleProperties(workInProgress);\n        if (enableViewTransition) {\n          // Host Components act as their own View Transitions which doesn't run enter/exit animations.\n          // We clear any ViewTransitionStatic flag bubbled from inner View Transitions.\n          workInProgress.subtreeFlags &= ~ViewTransitionStatic;\n        }\n        return null;\n      }\n      // Fall through\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          renderLanes,\n        );\n      } else {\n        if (!newProps) {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          // This can happen when we abort work.\n          bubbleProperties(workInProgress);\n          if (enableViewTransition) {\n            // Host Components act as their own View Transitions which doesn't run enter/exit animations.\n            // We clear any ViewTransitionStatic flag bubbled from inner View Transitions.\n            workInProgress.subtreeFlags &= ~ViewTransitionStatic;\n          }\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          prepareToHydrateHostInstance(workInProgress, currentHostContext);\n          if (\n            finalizeHydratedChildren(\n              workInProgress.stateNode,\n              type,\n              newProps,\n              currentHostContext,\n            )\n          ) {\n            workInProgress.flags |= Hydrate;\n          }\n        } else {\n          const rootContainerInstance = getRootHostContainer();\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n          // TODO: For persistent renderers, we should pass children as part\n          // of the initial instance creation\n          markCloned(workInProgress);\n          appendAllChildren(instance, workInProgress, false, false);\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n      }\n      bubbleProperties(workInProgress);\n      if (enableViewTransition) {\n        // Host Components act as their own View Transitions which doesn't run enter/exit animations.\n        // We clear any ViewTransitionStatic flag bubbled from inner View Transitions.\n        workInProgress.subtreeFlags &= ~ViewTransitionStatic;\n      }\n\n      // This must come at the very end of the complete phase, because it might\n      // throw to suspend, and if the resource immediately loads, the work loop\n      // will resume rendering as if the work-in-progress completed. So it must\n      // fully complete.\n      preloadInstanceAndSuspendIfNeeded(\n        workInProgress,\n        workInProgress.type,\n        current === null ? null : current.memoizedProps,\n        workInProgress.pendingProps,\n        renderLanes,\n      );\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          prepareToHydrateHostTextInstance(workInProgress);\n        } else {\n          markCloned(workInProgress);\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case ActivityComponent: {\n      const nextState                       = workInProgress.memoizedState;\n\n      if (current === null || current.memoizedState !== null) {\n        const fallthroughToNormalOffscreenPath =\n          completeDehydratedActivityBoundary(\n            current,\n            workInProgress,\n            nextState,\n          );\n        if (!fallthroughToNormalOffscreenPath) {\n          if (workInProgress.flags & ForceClientRender) {\n            popSuspenseHandler(workInProgress);\n            // Special case. There were remaining unhydrated nodes. We treat\n            // this as a mismatch. Revert to client rendering.\n            return workInProgress;\n          } else {\n            popSuspenseHandler(workInProgress);\n            // Did not finish hydrating, either because this is the initial\n            // render or because something suspended.\n            return null;\n          }\n        }\n\n        if ((workInProgress.flags & DidCapture) !== NoFlags) {\n          // We called retryActivityComponentWithoutHydrating and tried client rendering\n          // but now we suspended again. We should never arrive here because we should\n          // not have pushed a suspense handler during that second pass and it should\n          // instead have suspended above.\n          throw new Error(\n            'Client rendering an Activity suspended it again. This is a bug in React.',\n          );\n        }\n\n        // Continue with the normal Activity path.\n      }\n\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      const nextState                       = workInProgress.memoizedState;\n\n      // Special path for dehydrated boundaries. We may eventually move this\n      // to its own fiber type so that we can add other kinds of hydration\n      // boundaries that aren't associated with a Suspense tree. In anticipation\n      // of such a refactor, all the hydration logic is contained in\n      // this branch.\n      if (\n        current === null ||\n        (current.memoizedState !== null &&\n          current.memoizedState.dehydrated !== null)\n      ) {\n        const fallthroughToNormalSuspensePath =\n          completeDehydratedSuspenseBoundary(\n            current,\n            workInProgress,\n            nextState,\n          );\n        if (!fallthroughToNormalSuspensePath) {\n          if (workInProgress.flags & ForceClientRender) {\n            popSuspenseHandler(workInProgress);\n            // Special case. There were remaining unhydrated nodes. We treat\n            // this as a mismatch. Revert to client rendering.\n            return workInProgress;\n          } else {\n            popSuspenseHandler(workInProgress);\n            // Did not finish hydrating, either because this is the initial\n            // render or because something suspended.\n            return null;\n          }\n        }\n\n        // Continue with the normal Suspense path.\n      }\n\n      popSuspenseHandler(workInProgress);\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        // Don't bubble properties in this case.\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      const prevDidTimeout =\n        current !== null &&\n        (current.memoizedState                      ) !== null;\n\n      if (nextDidTimeout) {\n        const offscreenFiber        = (workInProgress.child     );\n        let previousCache               = null;\n        if (\n          offscreenFiber.alternate !== null &&\n          offscreenFiber.alternate.memoizedState !== null &&\n          offscreenFiber.alternate.memoizedState.cachePool !== null\n        ) {\n          previousCache = offscreenFiber.alternate.memoizedState.cachePool.pool;\n        }\n        let cache               = null;\n        if (\n          offscreenFiber.memoizedState !== null &&\n          offscreenFiber.memoizedState.cachePool !== null\n        ) {\n          cache = offscreenFiber.memoizedState.cachePool.pool;\n        }\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          offscreenFiber.flags |= Passive;\n        }\n      }\n\n      // If the suspended state of the boundary changes, we need to schedule\n      // a passive effect, which is when we process the transitions\n      if (nextDidTimeout !== prevDidTimeout) {\n        if (enableTransitionTracing) {\n          const offscreenFiber        = (workInProgress.child     );\n          offscreenFiber.flags |= Passive;\n        }\n\n        // If the suspended state of the boundary changes, we need to schedule\n        // an effect to toggle the subtree's visibility. When we switch from\n        // fallback -> primary, the inner Offscreen fiber schedules this effect\n        // as part of its normal complete phase. But when we switch from\n        // primary -> fallback, the inner Offscreen fiber does not have a complete\n        // phase. So we need to schedule its effect here.\n        //\n        // We also use this flag to connect/disconnect the effects, but the same\n        // logic applies: when re-connecting, the Offscreen fiber's complete\n        // phase will handle scheduling the effect. It's only when the fallback\n        // is active that we have to do anything special.\n        if (nextDidTimeout) {\n          const offscreenFiber        = (workInProgress.child     );\n          offscreenFiber.flags |= Visibility;\n        }\n      }\n\n      const retryQueue                    = (workInProgress.updateQueue     );\n      scheduleRetryEffect(workInProgress, retryQueue);\n\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          if (nextDidTimeout) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -=\n                ((primaryChildFragment.treeBaseDuration     )        );\n            }\n          }\n        }\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      let context                   ;\n      if (enableRenderableContext) {\n        context = workInProgress.type;\n      } else {\n        context = workInProgress.type._context;\n      }\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      if (disableLegacyMode) {\n        break;\n      }\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseListContext(workInProgress);\n\n      const renderState                                 =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thenables. Instead, we'll transfer its thenables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const retryQueue                    =\n                  (suspended.updateQueue     );\n                workInProgress.updateQueue = retryQueue;\n                scheduleRetryEffect(workInProgress, retryQueue);\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect flags before doing the second pass since that's now invalid.\n                // Reset the child fibers to their original state.\n                workInProgress.subtreeFlags = NoFlags;\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense List Context to force suspense and\n                // immediately rerender the children.\n                pushSuspenseListContext(\n                  workInProgress,\n                  setShallowSuspenseListContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                // Don't bubble properties in this case.\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const retryQueue                    = (suspended.updateQueue     );\n            workInProgress.updateQueue = retryQueue;\n            scheduleRetryEffect(workInProgress, retryQueue);\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We're done.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseListContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext =\n            setDefaultShallowSuspenseListContext(suspenseContext);\n        }\n        pushSuspenseListContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        // Don't bubble properties in this case.\n        return next;\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance                     = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            // Scope components always do work in the commit phase if there's a\n            // ref attached.\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            // Scope components always do work in the commit phase if there's a\n            // ref attached.\n            markUpdate(workInProgress);\n          }\n        }\n        bubbleProperties(workInProgress);\n        return null;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popSuspenseHandler(workInProgress);\n      popHiddenContext(workInProgress);\n      const nextState                        = workInProgress.memoizedState;\n      const nextIsHidden = nextState !== null;\n\n      // Schedule a Visibility effect if the visibility has changed\n      if (enableLegacyHidden && workInProgress.tag === LegacyHiddenComponent) {\n        // LegacyHidden doesn't do any hiding \u2014 it only pre-renders.\n      } else {\n        if (current !== null) {\n          const prevState                        = current.memoizedState;\n          const prevIsHidden = prevState !== null;\n          if (prevIsHidden !== nextIsHidden) {\n            workInProgress.flags |= Visibility;\n          }\n        } else {\n          // On initial mount, we only need a Visibility effect if the tree\n          // is hidden.\n          if (nextIsHidden) {\n            workInProgress.flags |= Visibility;\n          }\n        }\n      }\n\n      if (\n        !nextIsHidden ||\n        (!disableLegacyMode &&\n          (workInProgress.mode & ConcurrentMode) === NoMode)\n      ) {\n        bubbleProperties(workInProgress);\n      } else {\n        // Don't bubble properties for hidden children unless we're rendering\n        // at offscreen priority.\n        if (\n          includesSomeLane(renderLanes, (OffscreenLane      )) &&\n          // Also don't bubble if the tree suspended\n          (workInProgress.flags & DidCapture) === NoLanes\n        ) {\n          bubbleProperties(workInProgress);\n          // Check if there was an insertion or update in the hidden subtree.\n          // If so, we need to hide those nodes in the commit phase, so\n          // schedule a visibility effect.\n          if (\n            (!enableLegacyHidden ||\n              workInProgress.tag !== LegacyHiddenComponent) &&\n            workInProgress.subtreeFlags & (Placement | Update)\n          ) {\n            workInProgress.flags |= Visibility;\n          }\n        }\n      }\n\n      const offscreenQueue                        =\n        (workInProgress.updateQueue     );\n      if (offscreenQueue !== null) {\n        const retryQueue = offscreenQueue.retryQueue;\n        scheduleRetryEffect(workInProgress, retryQueue);\n      }\n\n      let previousCache               = null;\n      if (\n        current !== null &&\n        current.memoizedState !== null &&\n        current.memoizedState.cachePool !== null\n      ) {\n        previousCache = current.memoizedState.cachePool.pool;\n      }\n      let cache               = null;\n      if (\n        workInProgress.memoizedState !== null &&\n        workInProgress.memoizedState.cachePool !== null\n      ) {\n        cache = workInProgress.memoizedState.cachePool.pool;\n      }\n      if (cache !== previousCache) {\n        // Run passive effects to retain/release the cache.\n        workInProgress.flags |= Passive;\n      }\n\n      popTransition(workInProgress, current);\n\n      return null;\n    }\n    case CacheComponent: {\n      let previousCache               = null;\n      if (current !== null) {\n        previousCache = current.memoizedState.cache;\n      }\n      const cache        = workInProgress.memoizedState.cache;\n      if (cache !== previousCache) {\n        // Run passive effects to retain/release the cache.\n        workInProgress.flags |= Passive;\n      }\n      popCacheProvider(workInProgress, cache);\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        const instance                               = workInProgress.stateNode;\n        if (instance !== null) {\n          popMarkerInstance(workInProgress);\n        }\n        bubbleProperties(workInProgress);\n      }\n      return null;\n    }\n    case ViewTransitionComponent: {\n      if (enableViewTransition) {\n        // We're a component that might need an exit transition. This flag will\n        // bubble up to the parent tree to indicate that there's a child that\n        // might need an exit View Transition upon unmount.\n        workInProgress.flags |= ViewTransitionStatic;\n        bubbleProperties(workInProgress);\n      }\n      return null;\n    }\n    case Throw: {\n      if (!disableLegacyMode) {\n        // Only Legacy Mode completes an errored node.\n        return null;\n      }\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {completeWork};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                    \n                                                           \n                                            \n                                                                 \n                                                                 \n                                                      \n                                                                              \n\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostPortal,\n  ContextProvider,\n  ActivityComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  enableProfilerTimer,\n  enableTransitionTracing,\n  enableRenderableContext,\n} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext';\nimport {\n  popSuspenseListContext,\n  popSuspenseHandler,\n} from './ReactFiberSuspenseContext';\nimport {popHiddenContext} from './ReactFiberHiddenContext';\nimport {resetHydrationState} from './ReactFiberHydrationContext';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext';\nimport {popProvider} from './ReactFiberNewContext';\nimport {popCacheProvider} from './ReactFiberCacheComponent';\nimport {transferActualDuration} from './ReactProfilerTimer';\nimport {popTreeContext} from './ReactFiberTreeContext';\nimport {popRootTransition, popTransition} from './ReactFiberTransition';\nimport {\n  popMarkerInstance,\n  popRootMarkerInstance,\n} from './ReactFiberTracingMarkerComponent';\n\nfunction unwindWork(\n  current              ,\n  workInProgress       ,\n  renderLanes       ,\n)               {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      const root            = workInProgress.stateNode;\n      const cache        = workInProgress.memoizedState.cache;\n      popCacheProvider(workInProgress, cache);\n\n      if (enableTransitionTracing) {\n        popRootMarkerInstance(workInProgress);\n      }\n\n      popRootTransition(workInProgress, root, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      const flags = workInProgress.flags;\n      if (\n        (flags & ShouldCapture) !== NoFlags &&\n        (flags & DidCapture) === NoFlags\n      ) {\n        // There was an error during render that wasn't captured by a suspense\n        // boundary. Do a second pass on the root to unmount the children.\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        return workInProgress;\n      }\n      // We unwound to the root without completing it. Exit.\n      return null;\n    }\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case ActivityComponent: {\n      const activityState                       = workInProgress.memoizedState;\n      if (activityState !== null) {\n        popSuspenseHandler(workInProgress);\n\n        if (workInProgress.alternate === null) {\n          throw new Error(\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n        }\n\n        resetHydrationState();\n      }\n\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseHandler(workInProgress);\n      const suspenseState                       = workInProgress.memoizedState;\n      if (suspenseState !== null && suspenseState.dehydrated !== null) {\n        if (workInProgress.alternate === null) {\n          throw new Error(\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n        }\n\n        resetHydrationState();\n      }\n\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseListContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      let context                   ;\n      if (enableRenderableContext) {\n        context = workInProgress.type;\n      } else {\n        context = workInProgress.type._context;\n      }\n      popProvider(context, workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popSuspenseHandler(workInProgress);\n      popHiddenContext(workInProgress);\n      popTransition(workInProgress, current);\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case CacheComponent:\n      const cache        = workInProgress.memoizedState.cache;\n      popCacheProvider(workInProgress, cache);\n      return null;\n    case TracingMarkerComponent:\n      if (enableTransitionTracing) {\n        if (workInProgress.stateNode !== null) {\n          popMarkerInstance(workInProgress);\n        }\n      }\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(\n  current              ,\n  interruptedWork       ,\n  renderLanes       ,\n) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      const root            = interruptedWork.stateNode;\n      const cache        = interruptedWork.memoizedState.cache;\n      popCacheProvider(interruptedWork, cache);\n\n      if (enableTransitionTracing) {\n        popRootMarkerInstance(interruptedWork);\n      }\n\n      popRootTransition(interruptedWork, root, renderLanes);\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      break;\n    }\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case ActivityComponent: {\n      if (interruptedWork.memoizedState !== null) {\n        popSuspenseHandler(interruptedWork);\n      }\n      break;\n    }\n    case SuspenseComponent:\n      popSuspenseHandler(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseListContext(interruptedWork);\n      break;\n    case ContextProvider:\n      let context                   ;\n      if (enableRenderableContext) {\n        context = interruptedWork.type;\n      } else {\n        context = interruptedWork.type._context;\n      }\n      popProvider(context, interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popSuspenseHandler(interruptedWork);\n      popHiddenContext(interruptedWork);\n      popTransition(interruptedWork, current);\n      break;\n    case CacheComponent:\n      const cache        = interruptedWork.memoizedState.cache;\n      popCacheProvider(interruptedWork, cache);\n      break;\n    case TracingMarkerComponent:\n      if (enableTransitionTracing) {\n        const instance                               =\n          interruptedWork.stateNode;\n        if (instance !== null) {\n          popMarkerInstance(interruptedWork);\n        }\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n             \n                      \n                \n                \n                           \n                                                \n                                                              \n                                                                    \n                                                     \n                                                             \n                                                                             \n\nimport {getViewTransitionName} from './ReactFiberViewTransitionComponent';\n\nimport {\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableSchedulingProfiler,\n  enableViewTransition,\n  enableFragmentRefs,\n} from 'shared/ReactFeatureFlags';\nimport {\n  ClassComponent,\n  Fragment,\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  ViewTransitionComponent,\n} from './ReactWorkTags';\nimport {NoFlags} from './ReactFiberFlags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {resolveClassComponentProps} from './ReactFiberClassComponent';\nimport {\n  recordEffectDuration,\n  startEffectTimer,\n  isCurrentUpdateNested,\n} from './ReactProfilerTimer';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  commitCallbacks,\n  commitHiddenCallbacks,\n} from './ReactFiberClassUpdateQueue';\nimport {\n  getPublicInstance,\n  createViewTransitionInstance,\n  createFragmentInstance,\n} from './ReactFiberConfig';\nimport {\n  captureCommitPhaseError,\n  setIsRunningInsertionEffect,\n} from './ReactFiberWorkLoop';\nimport {\n  NoFlags as NoHookEffect,\n  Layout as HookLayout,\n  Insertion as HookInsertion,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork';\nimport {\n  markComponentPassiveEffectMountStarted,\n  markComponentPassiveEffectMountStopped,\n  markComponentPassiveEffectUnmountStarted,\n  markComponentPassiveEffectUnmountStopped,\n  markComponentLayoutEffectMountStarted,\n  markComponentLayoutEffectMountStopped,\n  markComponentLayoutEffectUnmountStarted,\n  markComponentLayoutEffectUnmountStopped,\n} from './ReactFiberDevToolsHook';\nimport {\n  callComponentDidMountInDEV,\n  callComponentDidUpdateInDEV,\n  callComponentWillUnmountInDEV,\n  callCreateInDEV,\n  callDestroyInDEV,\n} from './ReactFiberCallUserSpace';\n\nimport {runWithFiberInDEV} from './ReactCurrentFiber';\n\nfunction shouldProfile(current       )          {\n  return (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    (current.mode & ProfileMode) !== NoMode\n  );\n}\n\nexport function commitHookLayoutEffects(\n  finishedWork       ,\n  hookFlags           ,\n) {\n  // At this point layout effects have already been destroyed (during mutation phase).\n  // This is done to prevent sibling component effects from interfering with each other,\n  // e.g. a destroy function in one component should never override a ref set\n  // by a create function in another component during the same commit.\n  if (shouldProfile(finishedWork)) {\n    startEffectTimer();\n    commitHookEffectListMount(hookFlags, finishedWork);\n    recordEffectDuration(finishedWork);\n  } else {\n    commitHookEffectListMount(hookFlags, finishedWork);\n  }\n}\n\nexport function commitHookLayoutUnmountEffects(\n  finishedWork       ,\n  nearestMountedAncestor              ,\n  hookFlags           ,\n) {\n  // Layout effects are destroyed during the mutation phase so that all\n  // destroy functions for all fibers are called before any create functions.\n  // This prevents sibling component effects from interfering with each other,\n  // e.g. a destroy function in one component should never override a ref set\n  // by a create function in another component during the same commit.\n  if (shouldProfile(finishedWork)) {\n    startEffectTimer();\n    commitHookEffectListUnmount(\n      hookFlags,\n      finishedWork,\n      nearestMountedAncestor,\n    );\n    recordEffectDuration(finishedWork);\n  } else {\n    commitHookEffectListUnmount(\n      hookFlags,\n      finishedWork,\n      nearestMountedAncestor,\n    );\n  }\n}\n\nexport function commitHookEffectListMount(\n  flags           ,\n  finishedWork       ,\n) {\n  try {\n    const updateQueue                                      =\n      (finishedWork.updateQueue     );\n    const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n    if (lastEffect !== null) {\n      const firstEffect = lastEffect.next;\n      let effect = firstEffect;\n      do {\n        if ((effect.tag & flags) === flags) {\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectMountStarted(finishedWork);\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectMountStarted(finishedWork);\n            }\n          }\n\n          // Mount\n          let destroy;\n          if (__DEV__) {\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(true);\n            }\n            destroy = runWithFiberInDEV(finishedWork, callCreateInDEV, effect);\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(false);\n            }\n          } else {\n            const create = effect.create;\n            const inst = effect.inst;\n            destroy = create();\n            inst.destroy = destroy;\n          }\n\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectMountStopped();\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectMountStopped();\n            }\n          }\n\n          if (__DEV__) {\n            if (destroy !== undefined && typeof destroy !== 'function') {\n              let hookName;\n              if ((effect.tag & HookLayout) !== NoFlags) {\n                hookName = 'useLayoutEffect';\n              } else if ((effect.tag & HookInsertion) !== NoFlags) {\n                hookName = 'useInsertionEffect';\n              } else {\n                hookName = 'useEffect';\n              }\n              let addendum;\n              if (destroy === null) {\n                addendum =\n                  ' You returned null. If your effect does not require clean ' +\n                  'up, return undefined (or nothing).';\n                // $FlowFixMe (@poteto) this check is safe on arbitrary non-null/void objects\n              } else if (typeof destroy.then === 'function') {\n                addendum =\n                  '\\n\\nIt looks like you wrote ' +\n                  hookName +\n                  '(async () => ...) or returned a Promise. ' +\n                  'Instead, write the async function inside your effect ' +\n                  'and call it immediately:\\n\\n' +\n                  hookName +\n                  '(() => {\\n' +\n                  '  async function fetchData() {\\n' +\n                  '    // You can await here\\n' +\n                  '    const response = await MyAPI.getData(someId);\\n' +\n                  '    // ...\\n' +\n                  '  }\\n' +\n                  '  fetchData();\\n' +\n                  `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                  'Learn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching';\n              } else {\n                // $FlowFixMe[unsafe-addition] (@poteto)\n                addendum = ' You returned: ' + destroy;\n              }\n              runWithFiberInDEV(\n                finishedWork,\n                (n, a) => {\n                  console.error(\n                    '%s must not return anything besides a function, ' +\n                      'which is used for clean-up.%s',\n                    n,\n                    a,\n                  );\n                },\n                hookName,\n                addendum,\n              );\n            }\n          }\n        }\n        effect = effect.next;\n      } while (effect !== firstEffect);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHookEffectListUnmount(\n  flags           ,\n  finishedWork       ,\n  nearestMountedAncestor              ,\n) {\n  try {\n    const updateQueue                                      =\n      (finishedWork.updateQueue     );\n    const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n    if (lastEffect !== null) {\n      const firstEffect = lastEffect.next;\n      let effect = firstEffect;\n      do {\n        if ((effect.tag & flags) === flags) {\n          // Unmount\n          const inst = effect.inst;\n          const destroy = inst.destroy;\n          if (destroy !== undefined) {\n            inst.destroy = undefined;\n            if (enableSchedulingProfiler) {\n              if ((flags & HookPassive) !== NoHookEffect) {\n                markComponentPassiveEffectUnmountStarted(finishedWork);\n              } else if ((flags & HookLayout) !== NoHookEffect) {\n                markComponentLayoutEffectUnmountStarted(finishedWork);\n              }\n            }\n\n            if (__DEV__) {\n              if ((flags & HookInsertion) !== NoHookEffect) {\n                setIsRunningInsertionEffect(true);\n              }\n            }\n            safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n            if (__DEV__) {\n              if ((flags & HookInsertion) !== NoHookEffect) {\n                setIsRunningInsertionEffect(false);\n              }\n            }\n\n            if (enableSchedulingProfiler) {\n              if ((flags & HookPassive) !== NoHookEffect) {\n                markComponentPassiveEffectUnmountStopped();\n              } else if ((flags & HookLayout) !== NoHookEffect) {\n                markComponentLayoutEffectUnmountStopped();\n              }\n            }\n          }\n        }\n        effect = effect.next;\n      } while (effect !== firstEffect);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHookPassiveMountEffects(\n  finishedWork       ,\n  hookFlags           ,\n) {\n  if (shouldProfile(finishedWork)) {\n    startEffectTimer();\n    commitHookEffectListMount(hookFlags, finishedWork);\n    recordEffectDuration(finishedWork);\n  } else {\n    commitHookEffectListMount(hookFlags, finishedWork);\n  }\n}\n\nexport function commitHookPassiveUnmountEffects(\n  finishedWork       ,\n  nearestMountedAncestor              ,\n  hookFlags           ,\n) {\n  if (shouldProfile(finishedWork)) {\n    startEffectTimer();\n    commitHookEffectListUnmount(\n      hookFlags,\n      finishedWork,\n      nearestMountedAncestor,\n    );\n    recordEffectDuration(finishedWork);\n  } else {\n    commitHookEffectListUnmount(\n      hookFlags,\n      finishedWork,\n      nearestMountedAncestor,\n    );\n  }\n}\n\nexport function commitClassLayoutLifecycles(\n  finishedWork       ,\n  current              ,\n) {\n  const instance = finishedWork.stateNode;\n  if (current === null) {\n    // We could update instance props and state here,\n    // but instead we rely on them being set during last render.\n    // TODO: revisit this when we implement resuming.\n    if (__DEV__) {\n      if (\n        !finishedWork.type.defaultProps &&\n        !('ref' in finishedWork.memoizedProps) &&\n        !didWarnAboutReassigningProps\n      ) {\n        if (instance.props !== finishedWork.memoizedProps) {\n          console.error(\n            'Expected %s props to match memoized props before ' +\n              'componentDidMount. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.props`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n        if (instance.state !== finishedWork.memoizedState) {\n          console.error(\n            'Expected %s state to match memoized state before ' +\n              'componentDidMount. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.state`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n      }\n    }\n    if (shouldProfile(finishedWork)) {\n      startEffectTimer();\n      if (__DEV__) {\n        runWithFiberInDEV(\n          finishedWork,\n          callComponentDidMountInDEV,\n          finishedWork,\n          instance,\n        );\n      } else {\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n      recordEffectDuration(finishedWork);\n    } else {\n      if (__DEV__) {\n        runWithFiberInDEV(\n          finishedWork,\n          callComponentDidMountInDEV,\n          finishedWork,\n          instance,\n        );\n      } else {\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n  } else {\n    const prevProps = resolveClassComponentProps(\n      finishedWork.type,\n      current.memoizedProps,\n      finishedWork.elementType === finishedWork.type,\n    );\n    const prevState = current.memoizedState;\n    // We could update instance props and state here,\n    // but instead we rely on them being set during last render.\n    // TODO: revisit this when we implement resuming.\n    if (__DEV__) {\n      if (\n        !finishedWork.type.defaultProps &&\n        !('ref' in finishedWork.memoizedProps) &&\n        !didWarnAboutReassigningProps\n      ) {\n        if (instance.props !== finishedWork.memoizedProps) {\n          console.error(\n            'Expected %s props to match memoized props before ' +\n              'componentDidUpdate. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.props`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n        if (instance.state !== finishedWork.memoizedState) {\n          console.error(\n            'Expected %s state to match memoized state before ' +\n              'componentDidUpdate. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.state`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n      }\n    }\n    if (shouldProfile(finishedWork)) {\n      startEffectTimer();\n      if (__DEV__) {\n        runWithFiberInDEV(\n          finishedWork,\n          callComponentDidUpdateInDEV,\n          finishedWork,\n          instance,\n          prevProps,\n          prevState,\n          instance.__reactInternalSnapshotBeforeUpdate,\n        );\n      } else {\n        try {\n          instance.componentDidUpdate(\n            prevProps,\n            prevState,\n            instance.__reactInternalSnapshotBeforeUpdate,\n          );\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n      recordEffectDuration(finishedWork);\n    } else {\n      if (__DEV__) {\n        runWithFiberInDEV(\n          finishedWork,\n          callComponentDidUpdateInDEV,\n          finishedWork,\n          instance,\n          prevProps,\n          prevState,\n          instance.__reactInternalSnapshotBeforeUpdate,\n        );\n      } else {\n        try {\n          instance.componentDidUpdate(\n            prevProps,\n            prevState,\n            instance.__reactInternalSnapshotBeforeUpdate,\n          );\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n  }\n}\n\nexport function commitClassDidMount(finishedWork       ) {\n  // TODO: Check for LayoutStatic flag\n  const instance = finishedWork.stateNode;\n  if (typeof instance.componentDidMount === 'function') {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        callComponentDidMountInDEV,\n        finishedWork,\n        instance,\n      );\n    } else {\n      try {\n        instance.componentDidMount();\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n  }\n}\n\nexport function commitClassCallbacks(finishedWork       ) {\n  // TODO: I think this is now always non-null by the time it reaches the\n  // commit phase. Consider removing the type check.\n  const updateQueue                            =\n    (finishedWork.updateQueue     );\n  if (updateQueue !== null) {\n    const instance = finishedWork.stateNode;\n    if (__DEV__) {\n      if (\n        !finishedWork.type.defaultProps &&\n        !('ref' in finishedWork.memoizedProps) &&\n        !didWarnAboutReassigningProps\n      ) {\n        if (instance.props !== finishedWork.memoizedProps) {\n          console.error(\n            'Expected %s props to match memoized props before ' +\n              'processing the update queue. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.props`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n        if (instance.state !== finishedWork.memoizedState) {\n          console.error(\n            'Expected %s state to match memoized state before ' +\n              'processing the update queue. ' +\n              'This might either be because of a bug in React, or because ' +\n              'a component reassigns its own `this.state`. ' +\n              'Please file an issue.',\n            getComponentNameFromFiber(finishedWork) || 'instance',\n          );\n        }\n      }\n    }\n    // We could update instance props and state here,\n    // but instead we rely on them being set during last render.\n    // TODO: revisit this when we implement resuming.\n    try {\n      if (__DEV__) {\n        runWithFiberInDEV(finishedWork, commitCallbacks, updateQueue, instance);\n      } else {\n        commitCallbacks(updateQueue, instance);\n      }\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nexport function commitClassHiddenCallbacks(finishedWork       ) {\n  // Commit any callbacks that would have fired while the component\n  // was hidden.\n  const updateQueue                            =\n    (finishedWork.updateQueue     );\n  if (updateQueue !== null) {\n    const instance = finishedWork.stateNode;\n    try {\n      if (__DEV__) {\n        runWithFiberInDEV(\n          finishedWork,\n          commitHiddenCallbacks,\n          updateQueue,\n          instance,\n        );\n      } else {\n        commitHiddenCallbacks(updateQueue, instance);\n      }\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nexport function commitRootCallbacks(finishedWork       ) {\n  // TODO: I think this is now always non-null by the time it reaches the\n  // commit phase. Consider removing the type check.\n  const updateQueue                            =\n    (finishedWork.updateQueue     );\n  if (updateQueue !== null) {\n    let instance = null;\n    if (finishedWork.child !== null) {\n      switch (finishedWork.child.tag) {\n        case HostSingleton:\n        case HostComponent:\n          instance = getPublicInstance(finishedWork.child.stateNode);\n          break;\n        case ClassComponent:\n          instance = finishedWork.child.stateNode;\n          break;\n      }\n    }\n    try {\n      if (__DEV__) {\n        runWithFiberInDEV(finishedWork, commitCallbacks, updateQueue, instance);\n      } else {\n        commitCallbacks(updateQueue, instance);\n      }\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate                    = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\nfunction callGetSnapshotBeforeUpdates(\n  instance     ,\n  prevProps     ,\n  prevState     ,\n) {\n  return instance.getSnapshotBeforeUpdate(prevProps, prevState);\n}\n\nexport function commitClassSnapshot(finishedWork       , current       ) {\n  const prevProps = current.memoizedProps;\n  const prevState = current.memoizedState;\n  const instance = finishedWork.stateNode;\n  // We could update instance props and state here,\n  // but instead we rely on them being set during last render.\n  // TODO: revisit this when we implement resuming.\n  if (__DEV__) {\n    if (\n      !finishedWork.type.defaultProps &&\n      !('ref' in finishedWork.memoizedProps) &&\n      !didWarnAboutReassigningProps\n    ) {\n      if (instance.props !== finishedWork.memoizedProps) {\n        console.error(\n          'Expected %s props to match memoized props before ' +\n            'getSnapshotBeforeUpdate. ' +\n            'This might either be because of a bug in React, or because ' +\n            'a component reassigns its own `this.props`. ' +\n            'Please file an issue.',\n          getComponentNameFromFiber(finishedWork) || 'instance',\n        );\n      }\n      if (instance.state !== finishedWork.memoizedState) {\n        console.error(\n          'Expected %s state to match memoized state before ' +\n            'getSnapshotBeforeUpdate. ' +\n            'This might either be because of a bug in React, or because ' +\n            'a component reassigns its own `this.state`. ' +\n            'Please file an issue.',\n          getComponentNameFromFiber(finishedWork) || 'instance',\n        );\n      }\n    }\n  }\n  try {\n    const resolvedPrevProps = resolveClassComponentProps(\n      finishedWork.type,\n      prevProps,\n      finishedWork.elementType === finishedWork.type,\n    );\n    let snapshot;\n    if (__DEV__) {\n      snapshot = runWithFiberInDEV(\n        finishedWork,\n        callGetSnapshotBeforeUpdates,\n        instance,\n        resolvedPrevProps,\n        prevState,\n      );\n      const didWarnSet =\n        ((didWarnAboutUndefinedSnapshotBeforeUpdate     )            );\n      if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n        didWarnSet.add(finishedWork.type);\n        runWithFiberInDEV(finishedWork, () => {\n          console.error(\n            '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n              'must be returned. You have returned undefined.',\n            getComponentNameFromFiber(finishedWork),\n          );\n        });\n      }\n    } else {\n      snapshot = callGetSnapshotBeforeUpdates(\n        instance,\n        resolvedPrevProps,\n        prevState,\n      );\n    }\n    instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\n// Capture errors so they don't interrupt unmounting.\nexport function safelyCallComponentWillUnmount(\n  current       ,\n  nearestMountedAncestor              ,\n  instance     ,\n) {\n  instance.props = resolveClassComponentProps(\n    current.type,\n    current.memoizedProps,\n    current.elementType === current.type,\n  );\n  instance.state = current.memoizedState;\n  if (shouldProfile(current)) {\n    startEffectTimer();\n    if (__DEV__) {\n      runWithFiberInDEV(\n        current,\n        callComponentWillUnmountInDEV,\n        current,\n        nearestMountedAncestor,\n        instance,\n      );\n    } else {\n      try {\n        instance.componentWillUnmount();\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    recordEffectDuration(current);\n  } else {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        current,\n        callComponentWillUnmountInDEV,\n        current,\n        nearestMountedAncestor,\n        instance,\n      );\n    } else {\n      try {\n        instance.componentWillUnmount();\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork       ) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostHoistable:\n      case HostSingleton:\n      case HostComponent:\n        instanceToUse = getPublicInstance(finishedWork.stateNode);\n        break;\n      case ViewTransitionComponent: {\n        if (enableViewTransition) {\n          const instance                      = finishedWork.stateNode;\n          const props                      = finishedWork.memoizedProps;\n          const name = getViewTransitionName(props, instance);\n          if (instance.ref === null || instance.ref.name !== name) {\n            instance.ref = createViewTransitionInstance(name);\n          }\n          instanceToUse = instance.ref;\n          break;\n        }\n        instanceToUse = finishedWork.stateNode;\n        break;\n      }\n      case Fragment:\n        if (enableFragmentRefs) {\n          const instance                              = finishedWork.stateNode;\n          if (instance === null) {\n            finishedWork.stateNode = createFragmentInstance(finishedWork);\n          }\n          instanceToUse = finishedWork.stateNode;\n          break;\n        }\n      // Fallthrough\n      default:\n        instanceToUse = finishedWork.stateNode;\n    }\n    if (typeof ref === 'function') {\n      if (shouldProfile(finishedWork)) {\n        try {\n          startEffectTimer();\n          finishedWork.refCleanup = ref(instanceToUse);\n        } finally {\n          recordEffectDuration(finishedWork);\n        }\n      } else {\n        finishedWork.refCleanup = ref(instanceToUse);\n      }\n    } else {\n      if (__DEV__) {\n        // TODO: We should move these warnings to happen during the render\n        // phase (markRef).\n        if (typeof ref === 'string') {\n          console.error('String refs are no longer supported.');\n        } else if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n\n      // $FlowFixMe[incompatible-use] unable to narrow type to the non-function case\n      ref.current = instanceToUse;\n    }\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nexport function safelyAttachRef(\n  current       ,\n  nearestMountedAncestor              ,\n) {\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(current, commitAttachRef, current);\n    } else {\n      commitAttachRef(current);\n    }\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nexport function safelyDetachRef(\n  current       ,\n  nearestMountedAncestor              ,\n) {\n  const ref = current.ref;\n  const refCleanup = current.refCleanup;\n\n  if (ref !== null) {\n    if (typeof refCleanup === 'function') {\n      try {\n        if (shouldProfile(current)) {\n          try {\n            startEffectTimer();\n            if (__DEV__) {\n              runWithFiberInDEV(current, refCleanup);\n            } else {\n              refCleanup();\n            }\n          } finally {\n            recordEffectDuration(current);\n          }\n        } else {\n          if (__DEV__) {\n            runWithFiberInDEV(current, refCleanup);\n          } else {\n            refCleanup();\n          }\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      } finally {\n        // `refCleanup` has been called. Nullify all references to it to prevent double invocation.\n        current.refCleanup = null;\n        const finishedWork = current.alternate;\n        if (finishedWork != null) {\n          finishedWork.refCleanup = null;\n        }\n      }\n    } else if (typeof ref === 'function') {\n      try {\n        if (shouldProfile(current)) {\n          try {\n            startEffectTimer();\n            if (__DEV__) {\n              (runWithFiberInDEV(current, ref, null)      );\n            } else {\n              ref(null);\n            }\n          } finally {\n            recordEffectDuration(current);\n          }\n        } else {\n          if (__DEV__) {\n            (runWithFiberInDEV(current, ref, null)      );\n          } else {\n            ref(null);\n          }\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } else {\n      // $FlowFixMe[incompatible-use] unable to narrow type to RefObject\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(\n  current       ,\n  nearestMountedAncestor              ,\n  destroy                                  ,\n  resource                      ,\n) {\n  // $FlowFixMe[extra-arg] @poteto this is safe either way because the extra arg is ignored if it's not a CRUD effect\n  const destroy_ = resource == null ? destroy : destroy.bind(null, resource);\n  if (__DEV__) {\n    runWithFiberInDEV(\n      current,\n      callDestroyInDEV,\n      current,\n      nearestMountedAncestor,\n      destroy_,\n    );\n  } else {\n    try {\n      // $FlowFixMe(incompatible-call) Already bound to resource\n      destroy_();\n    } catch (error) {\n      captureCommitPhaseError(current, nearestMountedAncestor, error);\n    }\n  }\n}\n\nfunction commitProfiler(\n  finishedWork       ,\n  current              ,\n  commitStartTime        ,\n  effectDuration        ,\n) {\n  const {id, onCommit, onRender} = (finishedWork.memoizedProps               );\n\n  let phase                = current === null ? 'mount' : 'update';\n  if (enableProfilerNestedUpdatePhase) {\n    if (isCurrentUpdateNested()) {\n      phase = 'nested-update';\n    }\n  }\n\n  if (typeof onRender === 'function') {\n    onRender(\n      id,\n      phase,\n      // $FlowFixMe: This should be always a number in profiling mode\n      finishedWork.actualDuration,\n      // $FlowFixMe: This should be always a number in profiling mode\n      finishedWork.treeBaseDuration,\n      // $FlowFixMe: This should be always a number in profiling mode\n      finishedWork.actualStartTime,\n      commitStartTime,\n    );\n  }\n\n  if (enableProfilerCommitHooks) {\n    if (typeof onCommit === 'function') {\n      onCommit(id, phase, effectDuration, commitStartTime);\n    }\n  }\n}\n\nexport function commitProfilerUpdate(\n  finishedWork       ,\n  current              ,\n  commitStartTime        ,\n  effectDuration        ,\n) {\n  if (enableProfilerTimer) {\n    try {\n      if (__DEV__) {\n        runWithFiberInDEV(\n          finishedWork,\n          commitProfiler,\n          finishedWork,\n          current,\n          commitStartTime,\n          effectDuration,\n        );\n      } else {\n        commitProfiler(finishedWork, current, commitStartTime, effectDuration);\n      }\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n  }\n}\n\nfunction commitProfilerPostCommitImpl(\n  finishedWork       ,\n  current              ,\n  commitStartTime        ,\n  passiveEffectDuration        ,\n)       {\n  const {id, onPostCommit} = finishedWork.memoizedProps;\n\n  let phase = current === null ? 'mount' : 'update';\n  if (enableProfilerNestedUpdatePhase) {\n    if (isCurrentUpdateNested()) {\n      phase = 'nested-update';\n    }\n  }\n\n  if (typeof onPostCommit === 'function') {\n    onPostCommit(id, phase, passiveEffectDuration, commitStartTime);\n  }\n}\n\nexport function commitProfilerPostCommit(\n  finishedWork       ,\n  current              ,\n  commitStartTime        ,\n  passiveEffectDuration        ,\n) {\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        commitProfilerPostCommitImpl,\n        finishedWork,\n        current,\n        commitStartTime,\n        passiveEffectDuration,\n      );\n    } else {\n      commitProfilerPostCommitImpl(\n        finishedWork,\n        current,\n        commitStartTime,\n        passiveEffectDuration,\n      );\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {\n  enableDefaultTransitionIndicator,\n  enableViewTransition,\n} from 'shared/ReactFeatureFlags';\n\nexport let rootMutationContext          = false;\nexport let viewTransitionMutationContext          = false;\n\nexport function pushRootMutationContext()       {\n  if (enableDefaultTransitionIndicator) {\n    rootMutationContext = false;\n  }\n  if (enableViewTransition) {\n    viewTransitionMutationContext = false;\n  }\n}\n\nexport function pushMutationContext()          {\n  if (!enableViewTransition) {\n    return false;\n  }\n  const prev = viewTransitionMutationContext;\n  viewTransitionMutationContext = false;\n  return prev;\n}\n\nexport function popMutationContext(prev         )       {\n  if (enableViewTransition) {\n    if (viewTransitionMutationContext) {\n      rootMutationContext = true;\n    }\n    viewTransitionMutationContext = prev;\n  }\n}\n\nexport function trackHostMutation()       {\n  // This is extremely hot function that must be inlined. Don't add more stuff.\n  if (enableViewTransition) {\n    viewTransitionMutationContext = true;\n  } else if (enableDefaultTransitionIndicator) {\n    // We only set this if enableViewTransition is not on. Otherwise we track\n    // it on the viewTransitionMutationContext and collect it when we pop\n    // to avoid more than a single operation in this hot path.\n    rootMutationContext = true;\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n             \n           \n               \n                   \n                   \n            \n           \n                       \n                            \n                                                           \n\nimport {\n  HostRoot,\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostText,\n  HostPortal,\n  DehydratedFragment,\n  Fragment,\n} from './ReactWorkTags';\nimport {ContentReset, Placement} from './ReactFiberFlags';\nimport {\n  supportsMutation,\n  supportsResources,\n  supportsSingletons,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  replaceContainerChildren,\n  hideDehydratedBoundary,\n  hideInstance,\n  hideTextInstance,\n  unhideDehydratedBoundary,\n  unhideInstance,\n  unhideTextInstance,\n  commitHydratedInstance,\n  commitHydratedContainer,\n  commitHydratedActivityInstance,\n  commitHydratedSuspenseInstance,\n  removeChildFromContainer,\n  removeChild,\n  acquireSingletonInstance,\n  releaseSingletonInstance,\n  isSingletonScope,\n  commitNewChildToFragmentInstance,\n  deleteChildFromFragmentInstance,\n} from './ReactFiberConfig';\nimport {captureCommitPhaseError} from './ReactFiberWorkLoop';\nimport {trackHostMutation} from './ReactFiberMutationTracking';\n\nimport {runWithFiberInDEV} from './ReactCurrentFiber';\nimport {enableFragmentRefs} from 'shared/ReactFeatureFlags';\n\nexport function commitHostMount(finishedWork       ) {\n  const type = finishedWork.type;\n  const props = finishedWork.memoizedProps;\n  const instance           = finishedWork.stateNode;\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        commitMount,\n        instance,\n        type,\n        props,\n        finishedWork,\n      );\n    } else {\n      commitMount(instance, type, props, finishedWork);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHostHydratedInstance(finishedWork       ) {\n  const type = finishedWork.type;\n  const props = finishedWork.memoizedProps;\n  const instance           = finishedWork.stateNode;\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        commitHydratedInstance,\n        instance,\n        type,\n        props,\n        finishedWork,\n      );\n    } else {\n      commitHydratedInstance(instance, type, props, finishedWork);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHostUpdate(\n  finishedWork       ,\n  newProps     ,\n  oldProps     ,\n)       {\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        commitUpdate,\n        finishedWork.stateNode,\n        finishedWork.type,\n        oldProps,\n        newProps,\n        finishedWork,\n      );\n    } else {\n      commitUpdate(\n        finishedWork.stateNode,\n        finishedWork.type,\n        oldProps,\n        newProps,\n        finishedWork,\n      );\n    }\n    // Mutations are tracked manually from within commitUpdate.\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHostTextUpdate(\n  finishedWork       ,\n  newText        ,\n  oldText        ,\n) {\n  const textInstance               = finishedWork.stateNode;\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        commitTextUpdate,\n        textInstance,\n        oldText,\n        newText,\n      );\n    } else {\n      commitTextUpdate(textInstance, oldText, newText);\n    }\n    trackHostMutation();\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHostResetTextContent(finishedWork       ) {\n  const instance           = finishedWork.stateNode;\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(finishedWork, resetTextContent, instance);\n    } else {\n      resetTextContent(instance);\n    }\n    trackHostMutation();\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitShowHideSuspenseBoundary(node       , isHidden         ) {\n  try {\n    const instance = node.stateNode;\n    if (isHidden) {\n      if (__DEV__) {\n        runWithFiberInDEV(node, hideDehydratedBoundary, instance);\n      } else {\n        hideDehydratedBoundary(instance);\n      }\n    } else {\n      if (__DEV__) {\n        runWithFiberInDEV(node, unhideDehydratedBoundary, node.stateNode);\n      } else {\n        unhideDehydratedBoundary(node.stateNode);\n      }\n    }\n  } catch (error) {\n    captureCommitPhaseError(node, node.return, error);\n  }\n}\n\nexport function commitShowHideHostInstance(node       , isHidden         ) {\n  try {\n    const instance = node.stateNode;\n    if (isHidden) {\n      if (__DEV__) {\n        runWithFiberInDEV(node, hideInstance, instance);\n      } else {\n        hideInstance(instance);\n      }\n    } else {\n      if (__DEV__) {\n        runWithFiberInDEV(\n          node,\n          unhideInstance,\n          node.stateNode,\n          node.memoizedProps,\n        );\n      } else {\n        unhideInstance(node.stateNode, node.memoizedProps);\n      }\n    }\n  } catch (error) {\n    captureCommitPhaseError(node, node.return, error);\n  }\n}\n\nexport function commitShowHideHostTextInstance(node       , isHidden         ) {\n  try {\n    const instance = node.stateNode;\n    if (isHidden) {\n      if (__DEV__) {\n        runWithFiberInDEV(node, hideTextInstance, instance);\n      } else {\n        hideTextInstance(instance);\n      }\n    } else {\n      if (__DEV__) {\n        runWithFiberInDEV(\n          node,\n          unhideTextInstance,\n          instance,\n          node.memoizedProps,\n        );\n      } else {\n        unhideTextInstance(instance, node.memoizedProps);\n      }\n    }\n    trackHostMutation();\n  } catch (error) {\n    captureCommitPhaseError(node, node.return, error);\n  }\n}\n\nexport function commitNewChildToFragmentInstances(\n  fiber       ,\n  parentFragmentInstances                             ,\n)       {\n  for (let i = 0; i < parentFragmentInstances.length; i++) {\n    const fragmentInstance = parentFragmentInstances[i];\n    commitNewChildToFragmentInstance(fiber.stateNode, fragmentInstance);\n  }\n}\n\nexport function commitFragmentInstanceInsertionEffects(fiber       )       {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isFragmentInstanceParent(parent)) {\n      const fragmentInstance                       = parent.stateNode;\n      commitNewChildToFragmentInstance(fiber.stateNode, fragmentInstance);\n    }\n\n    if (isHostParent(parent)) {\n      return;\n    }\n\n    parent = parent.return;\n  }\n}\n\nexport function commitFragmentInstanceDeletionEffects(fiber       )       {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isFragmentInstanceParent(parent)) {\n      const fragmentInstance                       = parent.stateNode;\n      deleteChildFromFragmentInstance(fiber.stateNode, fragmentInstance);\n    }\n\n    if (isHostParent(parent)) {\n      return;\n    }\n\n    parent = parent.return;\n  }\n}\n\nfunction isHostParent(fiber       )          {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    (supportsResources ? fiber.tag === HostHoistable : false) ||\n    (supportsSingletons\n      ? fiber.tag === HostSingleton && isSingletonScope(fiber.type)\n      : false) ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction isFragmentInstanceParent(fiber       )          {\n  return fiber && fiber.tag === Fragment && fiber.stateNode !== null;\n}\n\nfunction getHostSibling(fiber       )            {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node        = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      // $FlowFixMe[incompatible-type] found when upgrading Flow\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If this is a host singleton we go deeper if it's not a special\n      // singleton scope. If it is a singleton scope we skip over it because\n      // you only insert against this scope when you are already inside of it\n      if (\n        supportsSingletons &&\n        node.tag === HostSingleton &&\n        isSingletonScope(node.type)\n      ) {\n        continue siblings;\n      }\n\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node       ,\n  before           ,\n  parent           ,\n  parentFragmentInstances                                    ,\n)       {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n    // TODO: Enable HostText for RN\n    if (\n      enableFragmentRefs &&\n      tag === HostComponent &&\n      // Only run fragment insertion effects for initial insertions\n      node.alternate === null &&\n      parentFragmentInstances !== null\n    ) {\n      commitNewChildToFragmentInstances(node, parentFragmentInstances);\n    }\n    trackHostMutation();\n    return;\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n    return;\n  }\n\n  if (\n    (supportsSingletons ? tag === HostSingleton : false) &&\n    isSingletonScope(node.type)\n  ) {\n    // This singleton is the parent of deeper nodes and needs to become\n    // the parent for child insertions and appends\n    parent = node.stateNode;\n    before = null;\n  }\n\n  const child = node.child;\n  if (child !== null) {\n    insertOrAppendPlacementNodeIntoContainer(\n      child,\n      before,\n      parent,\n      parentFragmentInstances,\n    );\n    let sibling = child.sibling;\n    while (sibling !== null) {\n      insertOrAppendPlacementNodeIntoContainer(\n        sibling,\n        before,\n        parent,\n        parentFragmentInstances,\n      );\n      sibling = sibling.sibling;\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node       ,\n  before           ,\n  parent          ,\n  parentFragmentInstances                                    ,\n)       {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n    // TODO: Enable HostText for RN\n    if (\n      enableFragmentRefs &&\n      tag === HostComponent &&\n      // Only run fragment insertion effects for initial insertions\n      node.alternate === null &&\n      parentFragmentInstances !== null\n    ) {\n      commitNewChildToFragmentInstances(node, parentFragmentInstances);\n    }\n    trackHostMutation();\n    return;\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n    return;\n  }\n\n  if (\n    (supportsSingletons ? tag === HostSingleton : false) &&\n    isSingletonScope(node.type)\n  ) {\n    // This singleton is the parent of deeper nodes and needs to become\n    // the parent for child insertions and appends\n    parent = node.stateNode;\n  }\n\n  const child = node.child;\n  if (child !== null) {\n    insertOrAppendPlacementNode(child, before, parent, parentFragmentInstances);\n    let sibling = child.sibling;\n    while (sibling !== null) {\n      insertOrAppendPlacementNode(\n        sibling,\n        before,\n        parent,\n        parentFragmentInstances,\n      );\n      sibling = sibling.sibling;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork       )       {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  let hostParentFiber;\n  let parentFragmentInstances = null;\n  let parentFiber = finishedWork.return;\n  while (parentFiber !== null) {\n    if (enableFragmentRefs && isFragmentInstanceParent(parentFiber)) {\n      const fragmentInstance                       = parentFiber.stateNode;\n      if (parentFragmentInstances === null) {\n        parentFragmentInstances = [fragmentInstance];\n      } else {\n        parentFragmentInstances.push(fragmentInstance);\n      }\n    }\n    if (isHostParent(parentFiber)) {\n      hostParentFiber = parentFiber;\n      break;\n    }\n    parentFiber = parentFiber.return;\n  }\n  if (hostParentFiber == null) {\n    throw new Error(\n      'Expected to find a host parent. This error is likely caused by a bug ' +\n        'in React. Please file an issue.',\n    );\n  }\n\n  switch (hostParentFiber.tag) {\n    case HostSingleton: {\n      if (supportsSingletons) {\n        const parent           = hostParentFiber.stateNode;\n        const before = getHostSibling(finishedWork);\n        // We only have the top Fiber that was inserted but we need to recurse down its\n        // children to find all the terminal nodes.\n        insertOrAppendPlacementNode(\n          finishedWork,\n          before,\n          parent,\n          parentFragmentInstances,\n        );\n        break;\n      }\n      // Fall through\n    }\n    case HostComponent: {\n      const parent           = hostParentFiber.stateNode;\n      if (hostParentFiber.flags & ContentReset) {\n        // Reset the text content of the parent before doing any insertions\n        resetTextContent(parent);\n        // Clear ContentReset from the effect tag\n        hostParentFiber.flags &= ~ContentReset;\n      }\n\n      const before = getHostSibling(finishedWork);\n      // We only have the top Fiber that was inserted but we need to recurse down its\n      // children to find all the terminal nodes.\n      insertOrAppendPlacementNode(\n        finishedWork,\n        before,\n        parent,\n        parentFragmentInstances,\n      );\n      break;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const parent            = hostParentFiber.stateNode.containerInfo;\n      const before = getHostSibling(finishedWork);\n      insertOrAppendPlacementNodeIntoContainer(\n        finishedWork,\n        before,\n        parent,\n        parentFragmentInstances,\n      );\n      break;\n    }\n    default:\n      throw new Error(\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n}\n\nexport function commitHostPlacement(finishedWork       ) {\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);\n    } else {\n      commitPlacement(finishedWork);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHostRemoveChildFromContainer(\n  deletedFiber       ,\n  nearestMountedAncestor       ,\n  parentContainer           ,\n  hostInstance                         ,\n) {\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        deletedFiber,\n        removeChildFromContainer,\n        parentContainer,\n        hostInstance,\n      );\n    } else {\n      removeChildFromContainer(parentContainer, hostInstance);\n    }\n    trackHostMutation();\n  } catch (error) {\n    captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);\n  }\n}\n\nexport function commitHostRemoveChild(\n  deletedFiber       ,\n  nearestMountedAncestor       ,\n  parentInstance          ,\n  hostInstance                         ,\n) {\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        deletedFiber,\n        removeChild,\n        parentInstance,\n        hostInstance,\n      );\n    } else {\n      removeChild(parentInstance, hostInstance);\n    }\n    trackHostMutation();\n  } catch (error) {\n    captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);\n  }\n}\n\nexport function commitHostRootContainerChildren(\n  root           ,\n  finishedWork       ,\n) {\n  const containerInfo = root.containerInfo;\n  const pendingChildren = root.pendingChildren;\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        replaceContainerChildren,\n        containerInfo,\n        pendingChildren,\n      );\n    } else {\n      replaceContainerChildren(containerInfo, pendingChildren);\n    }\n    trackHostMutation();\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHostPortalContainerChildren(\n  portal   \n                             \n                              \n       \n   ,\n  finishedWork       ,\n  pendingChildren          ,\n) {\n  const containerInfo = portal.containerInfo;\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        replaceContainerChildren,\n        containerInfo,\n        pendingChildren,\n      );\n    } else {\n      replaceContainerChildren(containerInfo, pendingChildren);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHostHydratedContainer(\n  root           ,\n  finishedWork       ,\n) {\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        commitHydratedContainer,\n        root.containerInfo,\n      );\n    } else {\n      commitHydratedContainer(root.containerInfo);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHostHydratedActivity(\n  activityInstance                  ,\n  finishedWork       ,\n) {\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        commitHydratedActivityInstance,\n        activityInstance,\n      );\n    } else {\n      commitHydratedActivityInstance(activityInstance);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHostHydratedSuspense(\n  suspenseInstance                  ,\n  finishedWork       ,\n) {\n  try {\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        commitHydratedSuspenseInstance,\n        suspenseInstance,\n      );\n    } else {\n      commitHydratedSuspenseInstance(suspenseInstance);\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHostSingletonAcquisition(finishedWork       ) {\n  const singleton = finishedWork.stateNode;\n  const props = finishedWork.memoizedProps;\n\n  try {\n    // This was a new mount, acquire the DOM instance and set initial properties\n    if (__DEV__) {\n      runWithFiberInDEV(\n        finishedWork,\n        acquireSingletonInstance,\n        finishedWork.type,\n        props,\n        singleton,\n        finishedWork,\n      );\n    } else {\n      acquireSingletonInstance(\n        finishedWork.type,\n        props,\n        singleton,\n        finishedWork,\n      );\n    }\n  } catch (error) {\n    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n  }\n}\n\nexport function commitHostSingletonRelease(releasingWork       ) {\n  if (__DEV__) {\n    runWithFiberInDEV(\n      releasingWork,\n      releaseSingletonInstance,\n      releasingWork.stateNode,\n    );\n  } else {\n    releaseSingletonInstance(releasingWork.stateNode);\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                           \n                                                                             \n                                                \n                                                                             \n\nimport {\n  HostComponent,\n  OffscreenComponent,\n  ViewTransitionComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  Update,\n  ViewTransitionStatic,\n  AffectedParentLayout,\n  ViewTransitionNamedStatic,\n} from './ReactFiberFlags';\nimport {\n  supportsMutation,\n  applyViewTransitionName,\n  restoreViewTransitionName,\n  measureInstance,\n  measureClonedInstance,\n  hasInstanceChanged,\n  hasInstanceAffectedParent,\n  wasInstanceInViewport,\n} from './ReactFiberConfig';\nimport {scheduleViewTransitionEvent} from './ReactFiberWorkLoop';\nimport {\n  getViewTransitionName,\n  getViewTransitionClassName,\n} from './ReactFiberViewTransitionComponent';\n\nexport let shouldStartViewTransition          = false;\n\nexport function resetShouldStartViewTransition()       {\n  shouldStartViewTransition = false;\n}\n\n// This tracks named ViewTransition components found in the accumulateSuspenseyCommit\n// phase that might need to find deleted pairs in the beforeMutation phase.\nexport let appearingViewTransitions                                          =\n  null;\n\nexport function resetAppearingViewTransitions()       {\n  appearingViewTransitions = null;\n}\n\nexport function trackAppearingViewTransition(\n  name        ,\n  state                     ,\n)       {\n  if (appearingViewTransitions === null) {\n    appearingViewTransitions = new Map();\n  }\n  appearingViewTransitions.set(name, state);\n}\n\nexport function trackEnterViewTransitions(placement       )       {\n  if (\n    placement.tag === ViewTransitionComponent ||\n    (placement.subtreeFlags & ViewTransitionStatic) !== NoFlags\n  ) {\n    // If an inserted or appearing Fiber is a ViewTransition component or has one as\n    // an immediate child, then that will trigger as an \"Enter\" in future passes.\n    // We don't do anything else for that case in the \"before mutation\" phase but we\n    // still have to mark it as needing to call startViewTransition if nothing else\n    // updates.\n    shouldStartViewTransition = true;\n  }\n}\n\n// We can't cancel view transition children until we know that their parent also\n// don't need to transition.\nexport let viewTransitionCancelableChildren               \n                            \n  = null; // tupled array where each entry is [instance: Instance, oldName: string, props: Props]\n\nexport function pushViewTransitionCancelableScope()               \n                            \n  {\n  const prevChildren = viewTransitionCancelableChildren;\n  viewTransitionCancelableChildren = null;\n  return prevChildren;\n}\n\nexport function popViewTransitionCancelableScope(\n  prevChildren                                         ,\n)       {\n  viewTransitionCancelableChildren = prevChildren;\n}\n\nlet viewTransitionHostInstanceIdx = 0;\n\nexport function applyViewTransitionToHostInstances(\n  child              ,\n  name        ,\n  className         ,\n  collectMeasurements                                   ,\n  stopAtNestedViewTransitions         ,\n)          {\n  viewTransitionHostInstanceIdx = 0;\n  return applyViewTransitionToHostInstancesRecursive(\n    child,\n    name,\n    className,\n    collectMeasurements,\n    stopAtNestedViewTransitions,\n  );\n}\n\nfunction applyViewTransitionToHostInstancesRecursive(\n  child              ,\n  name        ,\n  className         ,\n  collectMeasurements                                   ,\n  stopAtNestedViewTransitions         ,\n)          {\n  if (!supportsMutation) {\n    return false;\n  }\n  let inViewport = false;\n  while (child !== null) {\n    if (child.tag === HostComponent) {\n      const instance           = child.stateNode;\n      if (collectMeasurements !== null) {\n        const measurement = measureInstance(instance);\n        collectMeasurements.push(measurement);\n        if (wasInstanceInViewport(measurement)) {\n          inViewport = true;\n        }\n      } else if (!inViewport) {\n        if (wasInstanceInViewport(measureInstance(instance))) {\n          inViewport = true;\n        }\n      }\n      shouldStartViewTransition = true;\n      applyViewTransitionName(\n        instance,\n        viewTransitionHostInstanceIdx === 0\n          ? name\n          : // If we have multiple Host Instances below, we add a suffix to the name to give\n            // each one a unique name.\n            name + '_' + viewTransitionHostInstanceIdx,\n        className,\n      );\n      viewTransitionHostInstanceIdx++;\n    } else if (\n      child.tag === OffscreenComponent &&\n      child.memoizedState !== null\n    ) {\n      // Skip any hidden subtrees. They were or are effectively not there.\n    } else if (\n      child.tag === ViewTransitionComponent &&\n      stopAtNestedViewTransitions\n    ) {\n      // Skip any nested view transitions for updates since in that case the\n      // inner most one is the one that handles the update.\n    } else {\n      if (\n        applyViewTransitionToHostInstancesRecursive(\n          child.child,\n          name,\n          className,\n          collectMeasurements,\n          stopAtNestedViewTransitions,\n        )\n      ) {\n        inViewport = true;\n      }\n    }\n    child = child.sibling;\n  }\n  return inViewport;\n}\n\nfunction restoreViewTransitionOnHostInstances(\n  child              ,\n  stopAtNestedViewTransitions         ,\n)       {\n  if (!supportsMutation) {\n    return;\n  }\n  while (child !== null) {\n    if (child.tag === HostComponent) {\n      const instance           = child.stateNode;\n      restoreViewTransitionName(instance, child.memoizedProps);\n    } else if (\n      child.tag === OffscreenComponent &&\n      child.memoizedState !== null\n    ) {\n      // Skip any hidden subtrees. They were or are effectively not there.\n    } else if (\n      child.tag === ViewTransitionComponent &&\n      stopAtNestedViewTransitions\n    ) {\n      // Skip any nested view transitions for updates since in that case the\n      // inner most one is the one that handles the update.\n    } else {\n      restoreViewTransitionOnHostInstances(\n        child.child,\n        stopAtNestedViewTransitions,\n      );\n    }\n    child = child.sibling;\n  }\n}\n\nfunction commitAppearingPairViewTransitions(placement       )       {\n  if ((placement.subtreeFlags & ViewTransitionNamedStatic) === NoFlags) {\n    // This has no named view transitions in its subtree.\n    return;\n  }\n  let child = placement.child;\n  while (child !== null) {\n    if (child.tag === OffscreenComponent && child.memoizedState === null) {\n      // This tree was already hidden so we skip it.\n    } else {\n      commitAppearingPairViewTransitions(child);\n      if (\n        child.tag === ViewTransitionComponent &&\n        (child.flags & ViewTransitionNamedStatic) !== NoFlags\n      ) {\n        const instance                      = child.stateNode;\n        if (instance.paired) {\n          const props                      = child.memoizedProps;\n          if (props.name == null || props.name === 'auto') {\n            throw new Error(\n              'Found a pair with an auto name. This is a bug in React.',\n            );\n          }\n          const name = props.name;\n          const className          = getViewTransitionClassName(\n            props.default,\n            props.share,\n          );\n          if (className !== 'none') {\n            // We found a new appearing view transition with the same name as this deletion.\n            // We'll transition between them.\n            const inViewport = applyViewTransitionToHostInstances(\n              child.child,\n              name,\n              className,\n              null,\n              false,\n            );\n            if (!inViewport) {\n              // This boundary is exiting within the viewport but is going to leave the viewport.\n              // Instead, we treat this as an exit of the previous entry by reverting the new name.\n              // Ideally we could undo the old transition but it's now too late. It's also on its\n              // on snapshot. We have know was for it to paint onto the original group.\n              // TODO: This will lead to things unexpectedly having exit animations that normally\n              // wouldn't happen. Consider if we should just let this fly off the screen instead.\n              restoreViewTransitionOnHostInstances(child.child, false);\n            }\n          }\n        }\n      }\n    }\n    child = child.sibling;\n  }\n}\n\nexport function commitEnterViewTransitions(\n  placement       ,\n  gesture         ,\n)       {\n  if (placement.tag === ViewTransitionComponent) {\n    const state                      = placement.stateNode;\n    const props                      = placement.memoizedProps;\n    const name = getViewTransitionName(props, state);\n    const className          = getViewTransitionClassName(\n      props.default,\n      state.paired ? props.share : props.enter,\n    );\n    if (className !== 'none') {\n      const inViewport = applyViewTransitionToHostInstances(\n        placement.child,\n        name,\n        className,\n        null,\n        false,\n      );\n      if (!inViewport) {\n        // TODO: If this was part of a pair we will still run the onShare callback.\n        // Revert the transition names. This boundary is not in the viewport\n        // so we won't bother animating it.\n        restoreViewTransitionOnHostInstances(placement.child, false);\n        // TODO: Should we still visit the children in case a named one was in the viewport?\n      } else {\n        commitAppearingPairViewTransitions(placement);\n\n        if (!state.paired) {\n          if (gesture) {\n            // TODO: Schedule gesture events.\n          } else {\n            scheduleViewTransitionEvent(placement, props.onEnter);\n          }\n        }\n      }\n    } else {\n      commitAppearingPairViewTransitions(placement);\n    }\n  } else if ((placement.subtreeFlags & ViewTransitionStatic) !== NoFlags) {\n    let child = placement.child;\n    while (child !== null) {\n      commitEnterViewTransitions(child, gesture);\n      child = child.sibling;\n    }\n  } else {\n    commitAppearingPairViewTransitions(placement);\n  }\n}\n\nfunction commitDeletedPairViewTransitions(deletion       )       {\n  if (\n    appearingViewTransitions === null ||\n    appearingViewTransitions.size === 0\n  ) {\n    // We've found all.\n    return;\n  }\n  const pairs = appearingViewTransitions;\n  if ((deletion.subtreeFlags & ViewTransitionNamedStatic) === NoFlags) {\n    // This has no named view transitions in its subtree.\n    return;\n  }\n  let child = deletion.child;\n  while (child !== null) {\n    if (child.tag === OffscreenComponent && child.memoizedState === null) {\n      // This tree was already hidden so we skip it.\n    } else {\n      if (\n        child.tag === ViewTransitionComponent &&\n        (child.flags & ViewTransitionNamedStatic) !== NoFlags\n      ) {\n        const props                      = child.memoizedProps;\n        const name = props.name;\n        if (name != null && name !== 'auto') {\n          const pair = pairs.get(name);\n          if (pair !== undefined) {\n            const className          = getViewTransitionClassName(\n              props.default,\n              props.share,\n            );\n            if (className !== 'none') {\n              // We found a new appearing view transition with the same name as this deletion.\n              const inViewport = applyViewTransitionToHostInstances(\n                child.child,\n                name,\n                className,\n                null,\n                false,\n              );\n              if (!inViewport) {\n                // This boundary is not in the viewport so we won't treat it as a matched pair.\n                // Revert the transition names. This avoids it flying onto the screen which can\n                // be disruptive and doesn't really preserve any continuity anyway.\n                restoreViewTransitionOnHostInstances(child.child, false);\n              } else {\n                // We'll transition between them.\n                const oldInstance                      = child.stateNode;\n                const newInstance                      = pair;\n                newInstance.paired = oldInstance;\n                oldInstance.paired = newInstance;\n                // Note: If the other side ends up outside the viewport, we'll still run this.\n                // Therefore it's possible for onShare to be called with only an old snapshot.\n                scheduleViewTransitionEvent(child, props.onShare);\n              }\n            }\n            // Delete the entry so that we know when we've found all of them\n            // and can stop searching (size reaches zero).\n            pairs.delete(name);\n            if (pairs.size === 0) {\n              break;\n            }\n          }\n        }\n      }\n      commitDeletedPairViewTransitions(child);\n    }\n    child = child.sibling;\n  }\n}\n\nexport function commitExitViewTransitions(deletion       )       {\n  if (deletion.tag === ViewTransitionComponent) {\n    const props                      = deletion.memoizedProps;\n    const name = getViewTransitionName(props, deletion.stateNode);\n    const pair =\n      appearingViewTransitions !== null\n        ? appearingViewTransitions.get(name)\n        : undefined;\n    const className          = getViewTransitionClassName(\n      props.default,\n      pair !== undefined ? props.share : props.exit,\n    );\n    if (className !== 'none') {\n      const inViewport = applyViewTransitionToHostInstances(\n        deletion.child,\n        name,\n        className,\n        null,\n        false,\n      );\n      if (!inViewport) {\n        // Revert the transition names. This boundary is not in the viewport\n        // so we won't bother animating it.\n        restoreViewTransitionOnHostInstances(deletion.child, false);\n        // TODO: Should we still visit the children in case a named one was in the viewport?\n      } else if (pair !== undefined) {\n        // We found a new appearing view transition with the same name as this deletion.\n        // We'll transition between them instead of running the normal exit.\n        const oldInstance                      = deletion.stateNode;\n        const newInstance                      = pair;\n        newInstance.paired = oldInstance;\n        oldInstance.paired = newInstance;\n        // Delete the entry so that we know when we've found all of them\n        // and can stop searching (size reaches zero).\n        // $FlowFixMe[incompatible-use]: Refined by the pair.\n        appearingViewTransitions.delete(name);\n        // Note: If the other side ends up outside the viewport, we'll still run this.\n        // Therefore it's possible for onShare to be called with only an old snapshot.\n        scheduleViewTransitionEvent(deletion, props.onShare);\n      } else {\n        scheduleViewTransitionEvent(deletion, props.onExit);\n      }\n    }\n    if (appearingViewTransitions !== null) {\n      // Look for more pairs deeper in the tree.\n      commitDeletedPairViewTransitions(deletion);\n    }\n  } else if ((deletion.subtreeFlags & ViewTransitionStatic) !== NoFlags) {\n    let child = deletion.child;\n    while (child !== null) {\n      commitExitViewTransitions(child);\n      child = child.sibling;\n    }\n  } else {\n    if (appearingViewTransitions !== null) {\n      commitDeletedPairViewTransitions(deletion);\n    }\n  }\n}\n\nexport function commitBeforeUpdateViewTransition(\n  current       ,\n  finishedWork       ,\n)       {\n  // The way we deal with multiple HostInstances as children of a View Transition in an\n  // update can get tricky. The important bit is that if you swap out n HostInstances\n  // from n HostInstances then they match up in order. Similarly, if you don't swap\n  // any HostInstances each instance just transitions as is.\n  //\n  // We call this function twice. First we apply the view transition names on the\n  // \"current\" tree in the snapshot phase. Then in the mutation phase we apply view\n  // transition names to the \"finishedWork\" tree.\n  //\n  // This means that if there were insertions or deletions before an updated Instance\n  // that same Instance might get different names in the \"old\" and the \"new\" state.\n  // For example if you swap two HostInstances inside a ViewTransition they don't\n  // animate to swap position but rather cross-fade into the other instance. This might\n  // be unexpected but it is in line with the semantics that the ViewTransition is its\n  // own layer that cross-fades its content when it updates. If you want to reorder then\n  // each child needs its own ViewTransition.\n  const oldProps                      = current.memoizedProps;\n  const oldName = getViewTransitionName(oldProps, current.stateNode);\n  const newProps                      = finishedWork.memoizedProps;\n  // This className applies only if there are fewer child DOM nodes than\n  // before or if this update should've been cancelled but we ended up with\n  // a parent animating so we need to animate the child too.\n  // For example, if update=\"foo\" layout=\"none\" and it turns out this was\n  // a layout only change, then the \"foo\" class will be applied even though\n  // it was not actually an update. Which is a bug.\n  const className          = getViewTransitionClassName(\n    newProps.default,\n    newProps.update,\n  );\n  if (className === 'none') {\n    // If update is \"none\" then we don't have to apply a name. Since we won't animate this boundary.\n    return;\n  }\n  applyViewTransitionToHostInstances(\n    current.child,\n    oldName,\n    className,\n    (current.memoizedState = []),\n    true,\n  );\n}\n\nexport function commitNestedViewTransitions(changedParent       )       {\n  let child = changedParent.child;\n  while (child !== null) {\n    if (child.tag === ViewTransitionComponent) {\n      // In this case the outer ViewTransition component wins but if there\n      // was an update through this component then the inner one wins.\n      const props                      = child.memoizedProps;\n      const name = getViewTransitionName(props, child.stateNode);\n      const className          = getViewTransitionClassName(\n        props.default,\n        props.update,\n      );\n      // \"Nested\" view transitions are in subtrees that didn't update so\n      // this is a \"current\". We normally clear this upon rerendering\n      // but we use this flag to track changes from layout in the commit.\n      // So we need it to be cleared before we do that.\n      // TODO: Use some other temporary state to track this.\n      child.flags &= ~Update;\n      if (className !== 'none') {\n        applyViewTransitionToHostInstances(\n          child.child,\n          name,\n          className,\n          (child.memoizedState = []),\n          false,\n        );\n      }\n    } else if ((child.subtreeFlags & ViewTransitionStatic) !== NoFlags) {\n      commitNestedViewTransitions(child);\n    }\n    child = child.sibling;\n  }\n}\n\nfunction restorePairedViewTransitions(parent       )       {\n  if ((parent.subtreeFlags & ViewTransitionNamedStatic) === NoFlags) {\n    // This has no named view transitions in its subtree.\n    return;\n  }\n  let child = parent.child;\n  while (child !== null) {\n    if (child.tag === OffscreenComponent && child.memoizedState === null) {\n      // This tree was already hidden so we skip it.\n    } else {\n      if (\n        child.tag === ViewTransitionComponent &&\n        (child.flags & ViewTransitionNamedStatic) !== NoFlags\n      ) {\n        const instance                      = child.stateNode;\n        if (instance.paired !== null) {\n          instance.paired = null;\n          restoreViewTransitionOnHostInstances(child.child, false);\n        }\n      }\n      restorePairedViewTransitions(child);\n    }\n    child = child.sibling;\n  }\n}\n\nexport function restoreEnterOrExitViewTransitions(fiber       )       {\n  if (fiber.tag === ViewTransitionComponent) {\n    const instance                      = fiber.stateNode;\n    instance.paired = null;\n    restoreViewTransitionOnHostInstances(fiber.child, false);\n    restorePairedViewTransitions(fiber);\n  } else if ((fiber.subtreeFlags & ViewTransitionStatic) !== NoFlags) {\n    let child = fiber.child;\n    while (child !== null) {\n      restoreEnterOrExitViewTransitions(child);\n      child = child.sibling;\n    }\n  } else {\n    restorePairedViewTransitions(fiber);\n  }\n}\n\nexport function restoreUpdateViewTransition(\n  current       ,\n  finishedWork       ,\n)       {\n  restoreViewTransitionOnHostInstances(current.child, true);\n  restoreViewTransitionOnHostInstances(finishedWork.child, true);\n}\n\nexport function restoreUpdateViewTransitionForGesture(\n  current       ,\n  finishedWork       ,\n)       {\n  // For gestures we don't need to reset \"finishedWork\" because those would\n  // have all been clones that got deleted.\n  restoreViewTransitionOnHostInstances(current.child, true);\n}\n\nexport function restoreNestedViewTransitions(changedParent       )       {\n  let child = changedParent.child;\n  while (child !== null) {\n    if (child.tag === ViewTransitionComponent) {\n      restoreViewTransitionOnHostInstances(child.child, false);\n    } else if ((child.subtreeFlags & ViewTransitionStatic) !== NoFlags) {\n      restoreNestedViewTransitions(child);\n    }\n    child = child.sibling;\n  }\n}\n\nexport function measureViewTransitionHostInstances(\n  parentViewTransition       ,\n  child              ,\n  newName        ,\n  oldName        ,\n  className         ,\n  previousMeasurements                                   ,\n  stopAtNestedViewTransitions         ,\n)          {\n  viewTransitionHostInstanceIdx = 0;\n  return measureViewTransitionHostInstancesRecursive(\n    parentViewTransition,\n    child,\n    newName,\n    oldName,\n    className,\n    previousMeasurements,\n    stopAtNestedViewTransitions,\n  );\n}\n\nfunction measureViewTransitionHostInstancesRecursive(\n  parentViewTransition       ,\n  child              ,\n  newName        ,\n  oldName        ,\n  className         ,\n  previousMeasurements                                   ,\n  stopAtNestedViewTransitions         ,\n)          {\n  if (!supportsMutation) {\n    return true;\n  }\n  let inViewport = false;\n  while (child !== null) {\n    if (child.tag === HostComponent) {\n      const instance           = child.stateNode;\n      if (\n        previousMeasurements !== null &&\n        viewTransitionHostInstanceIdx < previousMeasurements.length\n      ) {\n        // The previous measurement of the Instance in this location within the ViewTransition.\n        // Note that this might not be the same exact Instance if the Instances within the\n        // ViewTransition changed.\n        const previousMeasurement =\n          previousMeasurements[viewTransitionHostInstanceIdx];\n        const nextMeasurement = measureInstance(instance);\n        if (\n          wasInstanceInViewport(previousMeasurement) ||\n          wasInstanceInViewport(nextMeasurement)\n        ) {\n          // If either the old or new state was within the viewport we have to animate this.\n          // But if it turns out that none of them were we'll be able to skip it.\n          inViewport = true;\n        }\n        if (\n          (parentViewTransition.flags & Update) === NoFlags &&\n          hasInstanceChanged(previousMeasurement, nextMeasurement)\n        ) {\n          parentViewTransition.flags |= Update;\n        }\n        if (hasInstanceAffectedParent(previousMeasurement, nextMeasurement)) {\n          // If this instance size within its parent has changed it might have caused the\n          // parent to relayout which needs a cross fade.\n          parentViewTransition.flags |= AffectedParentLayout;\n        }\n      } else {\n        // If there was an insertion of extra nodes, we have to assume they affected the parent.\n        // It should have already been marked as an Update due to the mutation.\n        parentViewTransition.flags |= AffectedParentLayout;\n      }\n      if ((parentViewTransition.flags & Update) !== NoFlags) {\n        // We might update this node so we need to apply its new name for the new state.\n        // Additionally in the ApplyGesture case we also need to do this because the clone\n        // will have the name but this one won't.\n        applyViewTransitionName(\n          instance,\n          viewTransitionHostInstanceIdx === 0\n            ? newName\n            : // If we have multiple Host Instances below, we add a suffix to the name to give\n              // each one a unique name.\n              newName + '_' + viewTransitionHostInstanceIdx,\n          className,\n        );\n      }\n      if (!inViewport || (parentViewTransition.flags & Update) === NoFlags) {\n        // It turns out that we had no other deeper mutations, the child transitions didn't\n        // affect the parent layout and this instance hasn't changed size. So we can skip\n        // animating it. However, in the current model this only works if the parent also\n        // doesn't animate. So we have to queue these and wait until we complete the parent\n        // to cancel them.\n        if (viewTransitionCancelableChildren === null) {\n          viewTransitionCancelableChildren = [];\n        }\n        viewTransitionCancelableChildren.push(\n          instance,\n          oldName,\n          child.memoizedProps,\n        );\n      }\n      viewTransitionHostInstanceIdx++;\n    } else if (\n      child.tag === OffscreenComponent &&\n      child.memoizedState !== null\n    ) {\n      // Skip any hidden subtrees. They were or are effectively not there.\n    } else if (\n      child.tag === ViewTransitionComponent &&\n      stopAtNestedViewTransitions\n    ) {\n      // Skip any nested view transitions for updates since in that case the\n      // inner most one is the one that handles the update.\n      // If this inner boundary resized we need to bubble that information up.\n      parentViewTransition.flags |= child.flags & AffectedParentLayout;\n    } else {\n      if (\n        measureViewTransitionHostInstancesRecursive(\n          parentViewTransition,\n          child.child,\n          newName,\n          oldName,\n          className,\n          previousMeasurements,\n          stopAtNestedViewTransitions,\n        )\n      ) {\n        inViewport = true;\n      }\n    }\n    child = child.sibling;\n  }\n  return inViewport;\n}\n\nexport function measureUpdateViewTransition(\n  current       ,\n  finishedWork       ,\n  gesture         ,\n)          {\n  // If this was a gesture then which Fiber was used for the \"old\" vs \"new\" state is reversed.\n  // We still need to treat \"finishedWork\" as the Fiber that contains the flags for this commmit.\n  const oldFiber = gesture ? finishedWork : current;\n  const newFiber = gesture ? current : finishedWork;\n  const props                      = newFiber.memoizedProps;\n  const state                      = newFiber.stateNode;\n  const newName = getViewTransitionName(props, state);\n  const oldName = getViewTransitionName(oldFiber.memoizedProps, state);\n  // Whether it ends up having been updated or relayout we apply the update class name.\n  const className          = getViewTransitionClassName(\n    props.default,\n    props.update,\n  );\n  if (className === 'none') {\n    // If update is \"none\" then we don't have to apply a name. Since we won't animate this boundary.\n    return false;\n  }\n  // If nothing changed due to a mutation, or children changing size\n  // and the measurements end up unchanged, we should restore it to not animate.\n  let previousMeasurements                                   ;\n  if (gesture) {\n    const clones = state.clones;\n    if (clones === null) {\n      previousMeasurements = null;\n    } else {\n      previousMeasurements = clones.map(measureClonedInstance);\n    }\n  } else {\n    previousMeasurements = oldFiber.memoizedState;\n    oldFiber.memoizedState = null; // Clear it. We won't need it anymore.\n  }\n  const inViewport = measureViewTransitionHostInstances(\n    finishedWork, // This is always finishedWork since it's used to assign flags.\n    newFiber.child, // This either current or finishedWork depending on if was a gesture.\n    newName,\n    oldName,\n    className,\n    previousMeasurements,\n    true,\n  );\n  const previousCount =\n    previousMeasurements === null ? 0 : previousMeasurements.length;\n  if (viewTransitionHostInstanceIdx !== previousCount) {\n    // If we found a different number of child DOM nodes we need to assume that\n    // the parent layout may have changed as a result. This is not necessarily\n    // true if those nodes were absolutely positioned.\n    finishedWork.flags |= AffectedParentLayout;\n  }\n  return inViewport;\n}\n\nexport function measureNestedViewTransitions(\n  changedParent       ,\n  gesture         ,\n)       {\n  let child = changedParent.child;\n  while (child !== null) {\n    if (child.tag === ViewTransitionComponent) {\n      const props                      = child.memoizedProps;\n      const state                      = child.stateNode;\n      const name = getViewTransitionName(props, state);\n      const className          = getViewTransitionClassName(\n        props.default,\n        props.update,\n      );\n      let previousMeasurements                                   ;\n      if (gesture) {\n        const clones = state.clones;\n        if (clones === null) {\n          previousMeasurements = null;\n        } else {\n          previousMeasurements = clones.map(measureClonedInstance);\n        }\n      } else {\n        previousMeasurements = child.memoizedState;\n        child.memoizedState = null; // Clear it. We won't need it anymore.\n      }\n      const inViewport = measureViewTransitionHostInstances(\n        child,\n        child.child,\n        name,\n        name, // Since this is unchanged, new and old name is the same.\n        className,\n        previousMeasurements,\n        false,\n      );\n      if ((child.flags & Update) === NoFlags || !inViewport) {\n        // Nothing changed.\n      } else {\n        if (gesture) {\n          // TODO: Schedule gesture events.\n        } else {\n          scheduleViewTransitionEvent(child, props.onUpdate);\n        }\n      }\n    } else if ((child.subtreeFlags & ViewTransitionStatic) !== NoFlags) {\n      measureNestedViewTransitions(child, gesture);\n    }\n    child = child.sibling;\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n             \n           \n               \n                   \n                   \n            \n                \n               \n        \n                            \n                                                           \n                                            \nimport {\n  includesLoadingIndicatorLanes,\n  includesOnlySuspenseyCommitEligibleLanes,\n  includesOnlyViewTransitionEligibleLanes,\n} from './ReactFiberLane';\n                                                                 \n                                                                             \n                                                              \n                                                                    \n                                                                     \n             \n                 \n                    \n                 \n                                        \n                                                      \n                                                \n                                                               \n             \n                        \n                  \n                                            \n                                                                             \n\nimport {\n  alwaysThrottleRetries,\n  enableCreateEventHandleAPI,\n  enableHiddenSubtreeInsertionEffectCleanup,\n  enablePersistedModeClonedFlag,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableUpdaterTracking,\n  enableTransitionTracing,\n  enableUseEffectEventHook,\n  enableLegacyHidden,\n  disableLegacyMode,\n  enableComponentPerformanceTrack,\n  enableViewTransition,\n  enableFragmentRefs,\n  enableEagerAlternateStateNodeCleanup,\n  enableDefaultTransitionIndicator,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostText,\n  HostPortal,\n  Profiler,\n  ActivityComponent,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n  ViewTransitionComponent,\n  Fragment,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  ChildDeletion,\n  Snapshot,\n  Update,\n  Hydrate,\n  Callback,\n  Ref,\n  Hydrating,\n  Passive,\n  BeforeMutationMask,\n  BeforeAndAfterMutationTransitionMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  PassiveTransitionMask,\n  Visibility,\n  ShouldSuspendCommit,\n  MaySuspendCommit,\n  FormReset,\n  Cloned,\n  PerformedWork,\n  ForceClientRender,\n  DidCapture,\n  AffectedParentLayout,\n  ViewTransitionNamedStatic,\n} from './ReactFiberFlags';\nimport {\n  commitStartTime,\n  pushNestedEffectDurations,\n  popNestedEffectDurations,\n  bubbleNestedEffectDurations,\n  resetComponentEffectTimers,\n  pushComponentEffectStart,\n  popComponentEffectStart,\n  pushComponentEffectDuration,\n  popComponentEffectDuration,\n  pushComponentEffectErrors,\n  popComponentEffectErrors,\n  componentEffectStartTime,\n  componentEffectEndTime,\n  componentEffectDuration,\n  componentEffectErrors,\n} from './ReactProfilerTimer';\nimport {\n  logComponentRender,\n  logComponentErrored,\n  logComponentEffect,\n  logComponentMount,\n  logComponentUnmount,\n  logComponentReappeared,\n  logComponentDisappeared,\n} from './ReactFiberPerformanceTrack';\nimport {ConcurrentMode, NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {deferHiddenCallbacks} from './ReactFiberClassUpdateQueue';\nimport {\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  supportsResources,\n  supportsSingletons,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  createContainerChildSet,\n  clearContainer,\n  prepareScopeUpdate,\n  prepareForCommit,\n  beforeActiveInstanceBlur,\n  detachDeletedInstance,\n  getHoistableRoot,\n  acquireResource,\n  releaseResource,\n  hydrateHoistable,\n  mountHoistable,\n  unmountHoistable,\n  prepareToCommitHoistables,\n  maySuspendCommitInSyncRender,\n  suspendInstance,\n  suspendResource,\n  resetFormInstance,\n  registerSuspenseInstanceRetry,\n  cancelViewTransitionName,\n  cancelRootViewTransitionName,\n  restoreRootViewTransitionName,\n  isSingletonScope,\n  updateFragmentInstanceFiber,\n} from './ReactFiberConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  restorePendingUpdaters,\n  addTransitionStartCallbackToPendingTransition,\n  addTransitionProgressCallbackToPendingTransition,\n  addTransitionCompleteCallbackToPendingTransition,\n  addMarkerProgressCallbackToPendingTransition,\n  addMarkerIncompleteCallbackToPendingTransition,\n  addMarkerCompleteCallbackToPendingTransition,\n  retryDehydratedSuspenseBoundary,\n  scheduleViewTransitionEvent,\n} from './ReactFiberWorkLoop';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Insertion as HookInsertion,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\nimport {isDevToolsPresent, onCommitUnmount} from './ReactFiberDevToolsHook';\nimport {releaseCache, retainCache} from './ReactFiberCacheComponent';\nimport {clearTransitionsForLanes} from './ReactFiberLane';\nimport {\n  OffscreenVisible,\n  OffscreenPassiveEffectsConnected,\n} from './ReactFiberOffscreenComponent';\nimport {\n  TransitionRoot,\n  TransitionTracingMarker,\n} from './ReactFiberTracingMarkerComponent';\nimport {getViewTransitionClassName} from './ReactFiberViewTransitionComponent';\nimport {\n  commitHookLayoutEffects,\n  commitHookLayoutUnmountEffects,\n  commitHookEffectListMount,\n  commitHookEffectListUnmount,\n  commitHookPassiveMountEffects,\n  commitHookPassiveUnmountEffects,\n  commitClassLayoutLifecycles,\n  commitClassDidMount,\n  commitClassCallbacks,\n  commitClassHiddenCallbacks,\n  commitClassSnapshot,\n  safelyCallComponentWillUnmount,\n  safelyAttachRef,\n  safelyDetachRef,\n  commitProfilerUpdate,\n  commitProfilerPostCommit,\n  commitRootCallbacks,\n} from './ReactFiberCommitEffects';\nimport {\n  commitHostMount,\n  commitHostHydratedInstance,\n  commitHostUpdate,\n  commitHostTextUpdate,\n  commitHostResetTextContent,\n  commitShowHideSuspenseBoundary,\n  commitShowHideHostInstance,\n  commitShowHideHostTextInstance,\n  commitHostPlacement,\n  commitHostRootContainerChildren,\n  commitHostPortalContainerChildren,\n  commitHostHydratedContainer,\n  commitHostHydratedActivity,\n  commitHostHydratedSuspense,\n  commitHostRemoveChildFromContainer,\n  commitHostRemoveChild,\n  commitHostSingletonAcquisition,\n  commitHostSingletonRelease,\n  commitFragmentInstanceDeletionEffects,\n  commitFragmentInstanceInsertionEffects,\n} from './ReactFiberCommitHostEffects';\nimport {\n  trackEnterViewTransitions,\n  commitEnterViewTransitions,\n  commitExitViewTransitions,\n  commitBeforeUpdateViewTransition,\n  commitNestedViewTransitions,\n  restoreEnterOrExitViewTransitions,\n  restoreUpdateViewTransition,\n  restoreNestedViewTransitions,\n  measureUpdateViewTransition,\n  measureNestedViewTransitions,\n  resetAppearingViewTransitions,\n  trackAppearingViewTransition,\n  viewTransitionCancelableChildren,\n  pushViewTransitionCancelableScope,\n  popViewTransitionCancelableScope,\n} from './ReactFiberCommitViewTransitions';\nimport {\n  viewTransitionMutationContext,\n  pushRootMutationContext,\n  pushMutationContext,\n  popMutationContext,\n  rootMutationContext,\n} from './ReactFiberMutationTracking';\nimport {\n  trackNamedViewTransition,\n  untrackNamedViewTransition,\n} from './ReactFiberDuplicateViewTransitions';\nimport {markIndicatorHandled} from './ReactFiberRootScheduler';\n\n// Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\nlet offscreenSubtreeIsHidden          = false;\nlet offscreenSubtreeWasHidden          = false;\n\n// Used to track if a form needs to be reset at the end of the mutation phase.\nlet needsFormReset = false;\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nlet nextEffect               = null;\n\n// Used for Profiling builds to track updaters.\nlet inProgressLanes               = null;\nlet inProgressRoot                   = null;\n\nlet focusedInstanceHandle               = null;\nexport let shouldFireAfterActiveInstanceBlur          = false;\n\n// Used during the commit phase to track whether a parent ViewTransition component\n// might have been affected by any mutations / relayouts below.\nlet viewTransitionContextChanged          = false;\nlet inUpdateViewTransition          = false;\nlet rootViewTransitionAffected          = false;\n\nfunction isHydratingParent(current       , finishedWork       )          {\n  if (finishedWork.tag === ActivityComponent) {\n    const prevState                       = current.memoizedState;\n    const nextState                       = finishedWork.memoizedState;\n    return prevState !== null && nextState === null;\n  } else if (finishedWork.tag === SuspenseComponent) {\n    const prevState                       = current.memoizedState;\n    const nextState                       = finishedWork.memoizedState;\n    return (\n      prevState !== null &&\n      prevState.dehydrated !== null &&\n      (nextState === null || nextState.dehydrated === null)\n    );\n  } else if (finishedWork.tag === HostRoot) {\n    return (\n      (current.memoizedState           ).isDehydrated &&\n      (finishedWork.flags & ForceClientRender) === NoFlags\n    );\n  } else {\n    return false;\n  }\n}\n\nexport function commitBeforeMutationEffects(\n  root           ,\n  firstChild       ,\n  committedLanes       ,\n)       {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n  shouldFireAfterActiveInstanceBlur = false;\n\n  const isViewTransitionEligible =\n    enableViewTransition &&\n    includesOnlyViewTransitionEligibleLanes(committedLanes);\n\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin(isViewTransitionEligible);\n\n  // We no longer need to track the active instance fiber\n  focusedInstanceHandle = null;\n  // We've found any matched pairs and can now reset.\n  resetAppearingViewTransitions();\n}\n\nfunction commitBeforeMutationEffects_begin(isViewTransitionEligible         ) {\n  // If this commit is eligible for a View Transition we look into all mutated subtrees.\n  // TODO: We could optimize this by marking these with the Snapshot subtree flag in the render phase.\n  const subtreeMask = isViewTransitionEligible\n    ? BeforeAndAfterMutationTransitionMask\n    : BeforeMutationMask;\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // This phase is only used for beforeActiveInstanceBlur.\n    // Let's skip the whole loop if it's off.\n    if (enableCreateEventHandleAPI || isViewTransitionEligible) {\n      // TODO: Should wrap this in flags check, too, as optimization\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const deletion = deletions[i];\n          commitBeforeMutationEffectsDeletion(\n            deletion,\n            isViewTransitionEligible,\n          );\n        }\n      }\n    }\n\n    if (\n      enableViewTransition &&\n      fiber.alternate === null &&\n      (fiber.flags & Placement) !== NoFlags\n    ) {\n      // Skip before mutation effects of the children because we don't want\n      // to trigger updates of any nested view transitions and we shouldn't\n      // have any other before mutation effects since snapshot effects are\n      // only applied to updates. TODO: Model this using only flags.\n      if (isViewTransitionEligible) {\n        trackEnterViewTransitions(fiber);\n      }\n      commitBeforeMutationEffects_complete(isViewTransitionEligible);\n      continue;\n    }\n\n    // TODO: This should really unify with the switch in commitBeforeMutationEffectsOnFiber recursively.\n    if (enableViewTransition && fiber.tag === OffscreenComponent) {\n      const isModernRoot =\n        disableLegacyMode || (fiber.mode & ConcurrentMode) !== NoMode;\n      if (isModernRoot) {\n        const current = fiber.alternate;\n        const isHidden = fiber.memoizedState !== null;\n        if (isHidden) {\n          if (\n            current !== null &&\n            current.memoizedState === null &&\n            isViewTransitionEligible\n          ) {\n            // Was previously mounted as visible but is now hidden.\n            commitExitViewTransitions(current);\n          }\n          // Skip before mutation effects of the children because they're hidden.\n          commitBeforeMutationEffects_complete(isViewTransitionEligible);\n          continue;\n        } else if (current !== null && current.memoizedState !== null) {\n          // Was previously mounted as hidden but is now visible.\n          // Skip before mutation effects of the children because we don't want\n          // to trigger updates of any nested view transitions and we shouldn't\n          // have any other before mutation effects since snapshot effects are\n          // only applied to updates. TODO: Model this using only flags.\n          if (isViewTransitionEligible) {\n            trackEnterViewTransitions(fiber);\n          }\n          commitBeforeMutationEffects_complete(isViewTransitionEligible);\n          continue;\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if ((fiber.subtreeFlags & subtreeMask) !== NoFlags && child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      if (isViewTransitionEligible) {\n        // We are inside an updated subtree. Any mutations that affected the\n        // parent HostInstance's layout or set of children (such as reorders)\n        // might have also affected the positioning or size of the inner\n        // ViewTransitions. Therefore we need to find them inside.\n        commitNestedViewTransitions(fiber);\n      }\n      commitBeforeMutationEffects_complete(isViewTransitionEligible);\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete(\n  isViewTransitionEligible         ,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    commitBeforeMutationEffectsOnFiber(fiber, isViewTransitionEligible);\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(\n  finishedWork       ,\n  isViewTransitionEligible         ,\n) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  if (enableCreateEventHandleAPI) {\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      // Check to see if the focused element was inside of a hidden (Suspense) subtree.\n      // TODO: Move this out of the hot path using a dedicated effect tag.\n      // TODO: This should consider Offscreen in general and not just SuspenseComponent.\n      if (\n        finishedWork.tag === SuspenseComponent &&\n        isSuspenseBoundaryBeingHidden(current, finishedWork) &&\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        doesFiberContain(finishedWork, focusedInstanceHandle)\n      ) {\n        shouldFireAfterActiveInstanceBlur = true;\n        beforeActiveInstanceBlur(finishedWork);\n      }\n    }\n  }\n\n  switch (finishedWork.tag) {\n    case FunctionComponent: {\n      if (enableUseEffectEventHook) {\n        if ((flags & Update) !== NoFlags) {\n          const updateQueue                                      =\n            (finishedWork.updateQueue     );\n          const eventPayloads =\n            updateQueue !== null ? updateQueue.events : null;\n          if (eventPayloads !== null) {\n            for (let ii = 0; ii < eventPayloads.length; ii++) {\n              const {ref, nextImpl} = eventPayloads[ii];\n              ref.impl = nextImpl;\n            }\n          }\n        }\n      }\n      break;\n    }\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      break;\n    }\n    case ClassComponent: {\n      if ((flags & Snapshot) !== NoFlags) {\n        if (current !== null) {\n          commitClassSnapshot(finishedWork, current);\n        }\n      }\n      break;\n    }\n    case HostRoot: {\n      if ((flags & Snapshot) !== NoFlags) {\n        if (supportsMutation) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n      }\n      break;\n    }\n    case HostComponent:\n    case HostHoistable:\n    case HostSingleton:\n    case HostText:\n    case HostPortal:\n    case IncompleteClassComponent:\n      // Nothing to do for these component types\n      break;\n    case ViewTransitionComponent:\n      if (enableViewTransition) {\n        if (isViewTransitionEligible) {\n          if (current === null) {\n            // This is a new mount. We should have handled this as part of the\n            // Placement effect or it is deeper inside a entering transition.\n          } else {\n            // Something may have mutated within this subtree. This might need to cause\n            // a cross-fade of this parent. We first assign old names to the\n            // previous tree in the before mutation phase in case we need to.\n            // TODO: This walks the tree that we might continue walking anyway.\n            // We should just stash the parent ViewTransitionComponent and continue\n            // walking the tree until we find HostComponent but to do that we need\n            // to use a stack which requires refactoring this phase.\n            commitBeforeUpdateViewTransition(current, finishedWork);\n          }\n        }\n        break;\n      }\n    // Fallthrough\n    default: {\n      if ((flags & Snapshot) !== NoFlags) {\n        throw new Error(\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n  }\n}\n\nfunction commitBeforeMutationEffectsDeletion(\n  deletion       ,\n  isViewTransitionEligible         ,\n) {\n  if (enableCreateEventHandleAPI) {\n    // TODO (effects) It would be nice to avoid calling doesFiberContain()\n    // Maybe we can repurpose one of the subtreeFlags positions for this instead?\n    // Use it to store which part of the tree the focused instance is in?\n    // This assumes we can safely determine that instance during the \"render\" phase.\n    if (doesFiberContain(deletion, ((focusedInstanceHandle     )       ))) {\n      shouldFireAfterActiveInstanceBlur = true;\n      beforeActiveInstanceBlur(deletion);\n    }\n  }\n  if (isViewTransitionEligible) {\n    commitExitViewTransitions(deletion);\n  }\n}\n\nfunction commitLayoutEffectOnFiber(\n  finishedRoot           ,\n  current              ,\n  finishedWork       ,\n  committedLanes       ,\n)       {\n  const prevEffectStart = pushComponentEffectStart();\n  const prevEffectDuration = pushComponentEffectDuration();\n  const prevEffectErrors = pushComponentEffectErrors();\n  // When updating this function, also update reappearLayoutEffects, which does\n  // most of the same things when an offscreen tree goes from hidden -> visible.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Update) {\n        commitHookLayoutEffects(finishedWork, HookLayout | HookHasEffect);\n      }\n      break;\n    }\n    case ClassComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Update) {\n        commitClassLayoutLifecycles(finishedWork, current);\n      }\n\n      if (flags & Callback) {\n        commitClassCallbacks(finishedWork);\n      }\n\n      if (flags & Ref) {\n        safelyAttachRef(finishedWork, finishedWork.return);\n      }\n      break;\n    }\n    case HostRoot: {\n      const prevProfilerEffectDuration = pushNestedEffectDurations();\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Callback) {\n        commitRootCallbacks(finishedWork);\n      }\n      if (enableProfilerTimer && enableProfilerCommitHooks) {\n        finishedRoot.effectDuration += popNestedEffectDurations(\n          prevProfilerEffectDuration,\n        );\n      }\n      break;\n    }\n    case HostSingleton: {\n      if (supportsSingletons) {\n        // We acquire the singleton instance first so it has appropriate\n        // styles before other layout effects run. This isn't perfect because\n        // an early sibling of the singleton may have an effect that can\n        // observe the singleton before it is acquired.\n        // @TODO move this to the mutation phase. The reason it isn't there yet\n        // is it seemingly requires an extra traversal because we need to move the\n        // disappear effect into a phase before the appear phase\n        if (current === null && flags & Update) {\n          // Unlike in the reappear path we only acquire on new mount\n          commitHostSingletonAcquisition(finishedWork);\n        }\n        // We fall through to the HostComponent case below.\n      }\n      // Fallthrough\n    }\n    case HostHoistable:\n    case HostComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n\n      // Renderers may schedule work to be done after host components are mounted\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n      // These effects should only be committed when components are first mounted,\n      // aka when there is no current/alternate.\n      if (current === null) {\n        if (flags & Update) {\n          commitHostMount(finishedWork);\n        } else if (flags & Hydrate) {\n          commitHostHydratedInstance(finishedWork);\n        }\n      }\n\n      if (flags & Ref) {\n        safelyAttachRef(finishedWork, finishedWork.return);\n      }\n      break;\n    }\n    case Profiler: {\n      // TODO: Should this fire inside an offscreen tree? Or should it wait to\n      // fire when the tree becomes visible again.\n      if (flags & Update) {\n        const prevProfilerEffectDuration = pushNestedEffectDurations();\n\n        recursivelyTraverseLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n        );\n\n        const profilerInstance = finishedWork.stateNode;\n\n        if (enableProfilerTimer && enableProfilerCommitHooks) {\n          // Propagate layout effect durations to the next nearest Profiler ancestor.\n          // Do not reset these values until the next render so DevTools has a chance to read them first.\n          profilerInstance.effectDuration += bubbleNestedEffectDurations(\n            prevProfilerEffectDuration,\n          );\n        }\n\n        commitProfilerUpdate(\n          finishedWork,\n          current,\n          commitStartTime,\n          profilerInstance.effectDuration,\n        );\n      } else {\n        recursivelyTraverseLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n        );\n      }\n      break;\n    }\n    case ActivityComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Update) {\n        commitActivityHydrationCallbacks(finishedRoot, finishedWork);\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      if (flags & Update) {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n      }\n      if (flags & Callback) {\n        // This Boundary is in fallback and has a dehydrated Suspense instance.\n        // We could in theory assume the dehydrated state but we recheck it for\n        // certainty.\n        const finishedState                       = finishedWork.memoizedState;\n        if (finishedState !== null) {\n          const dehydrated = finishedState.dehydrated;\n          if (dehydrated !== null) {\n            // Register a callback to retry this boundary once the server has sent the result.\n            const retry = retryDehydratedSuspenseBoundary.bind(\n              null,\n              finishedWork,\n            );\n            registerSuspenseInstanceRetry(dehydrated, retry);\n          }\n        }\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const isModernRoot =\n        disableLegacyMode || (finishedWork.mode & ConcurrentMode) !== NoMode;\n      if (isModernRoot) {\n        const isHidden = finishedWork.memoizedState !== null;\n        const newOffscreenSubtreeIsHidden =\n          isHidden || offscreenSubtreeIsHidden;\n        if (newOffscreenSubtreeIsHidden) {\n          // The Offscreen tree is hidden. Skip over its layout effects.\n        } else {\n          // The Offscreen tree is visible.\n\n          const wasHidden = current !== null && current.memoizedState !== null;\n          const newOffscreenSubtreeWasHidden =\n            wasHidden || offscreenSubtreeWasHidden;\n          const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n          const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n          offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n          offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n          if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n            // This is the root of a reappearing boundary. As we continue\n            // traversing the layout effects, we must also re-mount layout\n            // effects that were unmounted when the Offscreen subtree was\n            // hidden. So this is a superset of the normal commitLayoutEffects.\n            const includeWorkInProgressEffects =\n              (finishedWork.subtreeFlags & LayoutMask) !== NoFlags;\n            recursivelyTraverseReappearLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              includeWorkInProgressEffects,\n            );\n            if (\n              enableProfilerTimer &&\n              enableProfilerCommitHooks &&\n              enableComponentPerformanceTrack &&\n              (finishedWork.mode & ProfileMode) !== NoMode &&\n              componentEffectStartTime >= 0 &&\n              componentEffectEndTime >= 0 &&\n              componentEffectEndTime - componentEffectStartTime > 0.05\n            ) {\n              logComponentReappeared(\n                finishedWork,\n                componentEffectStartTime,\n                componentEffectEndTime,\n              );\n            }\n          } else {\n            recursivelyTraverseLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n            );\n          }\n          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        }\n      } else {\n        recursivelyTraverseLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n        );\n      }\n      break;\n    }\n    case ViewTransitionComponent: {\n      if (enableViewTransition) {\n        if (__DEV__) {\n          if (flags & ViewTransitionNamedStatic) {\n            trackNamedViewTransition(finishedWork);\n          }\n        }\n        recursivelyTraverseLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n        );\n        if (flags & Ref) {\n          safelyAttachRef(finishedWork, finishedWork.return);\n        }\n        break;\n      }\n      break;\n    }\n    case Fragment:\n      if (enableFragmentRefs) {\n        if (flags & Ref) {\n          safelyAttachRef(finishedWork, finishedWork.return);\n        }\n      }\n    // Fallthrough\n    default: {\n      recursivelyTraverseLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n      );\n      break;\n    }\n  }\n\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    enableComponentPerformanceTrack &&\n    (finishedWork.mode & ProfileMode) !== NoMode &&\n    componentEffectStartTime >= 0 &&\n    componentEffectEndTime >= 0\n  ) {\n    if (componentEffectDuration > 0.05) {\n      logComponentEffect(\n        finishedWork,\n        componentEffectStartTime,\n        componentEffectEndTime,\n        componentEffectDuration,\n        componentEffectErrors,\n      );\n    }\n    if (\n      // Insertion\n      finishedWork.alternate === null &&\n      finishedWork.return !== null &&\n      finishedWork.return.alternate !== null &&\n      componentEffectEndTime - componentEffectStartTime > 0.05\n    ) {\n      const isHydration = isHydratingParent(\n        finishedWork.return.alternate,\n        finishedWork.return,\n      );\n      if (!isHydration) {\n        logComponentMount(\n          finishedWork,\n          componentEffectStartTime,\n          componentEffectEndTime,\n        );\n      }\n    }\n  }\n\n  popComponentEffectStart(prevEffectStart);\n  popComponentEffectDuration(prevEffectDuration);\n  popComponentEffectErrors(prevEffectErrors);\n}\n\nfunction abortRootTransitions(\n  root           ,\n  abort                 ,\n  deletedTransitions                 ,\n  deletedOffscreenInstance                          ,\n  isInDeletedTree         ,\n) {\n  if (enableTransitionTracing) {\n    const rootTransitions = root.incompleteTransitions;\n    deletedTransitions.forEach(transition => {\n      if (rootTransitions.has(transition)) {\n        const transitionInstance                        = (rootTransitions.get(\n          transition,\n        )     );\n        if (transitionInstance.aborts === null) {\n          transitionInstance.aborts = [];\n        }\n        transitionInstance.aborts.push(abort);\n\n        if (deletedOffscreenInstance !== null) {\n          if (\n            transitionInstance.pendingBoundaries !== null &&\n            transitionInstance.pendingBoundaries.has(deletedOffscreenInstance)\n          ) {\n            // $FlowFixMe[incompatible-use] found when upgrading Flow\n            transitionInstance.pendingBoundaries.delete(\n              deletedOffscreenInstance,\n            );\n          }\n        }\n      }\n    });\n  }\n}\n\nfunction abortTracingMarkerTransitions(\n  abortedFiber       ,\n  abort                 ,\n  deletedTransitions                 ,\n  deletedOffscreenInstance                          ,\n  isInDeletedTree         ,\n) {\n  if (enableTransitionTracing) {\n    const markerInstance                        = abortedFiber.stateNode;\n    const markerTransitions = markerInstance.transitions;\n    const pendingBoundaries = markerInstance.pendingBoundaries;\n    if (markerTransitions !== null) {\n      // TODO: Refactor this code. Is there a way to move this code to\n      // the deletions phase instead of calculating it here while making sure\n      // complete is called appropriately?\n      deletedTransitions.forEach(transition => {\n        // If one of the transitions on the tracing marker is a transition\n        // that was in an aborted subtree, we will abort that tracing marker\n        if (\n          abortedFiber !== null &&\n          markerTransitions.has(transition) &&\n          (markerInstance.aborts === null ||\n            !markerInstance.aborts.includes(abort))\n        ) {\n          if (markerInstance.transitions !== null) {\n            if (markerInstance.aborts === null) {\n              markerInstance.aborts = [abort];\n              addMarkerIncompleteCallbackToPendingTransition(\n                abortedFiber.memoizedProps.name,\n                markerInstance.transitions,\n                markerInstance.aborts,\n              );\n            } else {\n              markerInstance.aborts.push(abort);\n            }\n\n            // We only want to call onTransitionProgress when the marker hasn't been\n            // deleted\n            if (\n              deletedOffscreenInstance !== null &&\n              !isInDeletedTree &&\n              pendingBoundaries !== null &&\n              pendingBoundaries.has(deletedOffscreenInstance)\n            ) {\n              pendingBoundaries.delete(deletedOffscreenInstance);\n\n              addMarkerProgressCallbackToPendingTransition(\n                abortedFiber.memoizedProps.name,\n                deletedTransitions,\n                pendingBoundaries,\n              );\n            }\n          }\n        }\n      });\n    }\n  }\n}\n\nfunction abortParentMarkerTransitionsForDeletedFiber(\n  abortedFiber       ,\n  abort                 ,\n  deletedTransitions                 ,\n  deletedOffscreenInstance                          ,\n  isInDeletedTree         ,\n) {\n  if (enableTransitionTracing) {\n    // Find all pending markers that are waiting on child suspense boundaries in the\n    // aborted subtree and cancels them\n    let fiber               = abortedFiber;\n    while (fiber !== null) {\n      switch (fiber.tag) {\n        case TracingMarkerComponent:\n          abortTracingMarkerTransitions(\n            fiber,\n            abort,\n            deletedTransitions,\n            deletedOffscreenInstance,\n            isInDeletedTree,\n          );\n          break;\n        case HostRoot:\n          const root = fiber.stateNode;\n          abortRootTransitions(\n            root,\n            abort,\n            deletedTransitions,\n            deletedOffscreenInstance,\n            isInDeletedTree,\n          );\n\n          break;\n        default:\n          break;\n      }\n\n      fiber = fiber.return;\n    }\n  }\n}\n\nfunction commitTransitionProgress(offscreenFiber       ) {\n  if (enableTransitionTracing) {\n    // This function adds suspense boundaries to the root\n    // or tracing marker's pendingBoundaries map.\n    // When a suspense boundary goes from a resolved to a fallback\n    // state we add the boundary to the map, and when it goes from\n    // a fallback to a resolved state, we remove the boundary from\n    // the map.\n\n    // We use stateNode on the Offscreen component as a stable object\n    // that doesnt change from render to render. This way we can\n    // distinguish between different Offscreen instances (vs. the same\n    // Offscreen instance with different fibers)\n    const offscreenInstance                    = offscreenFiber.stateNode;\n\n    let prevState                       = null;\n    const previousFiber = offscreenFiber.alternate;\n    if (previousFiber !== null && previousFiber.memoizedState !== null) {\n      prevState = previousFiber.memoizedState;\n    }\n    const nextState                       = offscreenFiber.memoizedState;\n\n    const wasHidden = prevState !== null;\n    const isHidden = nextState !== null;\n\n    const pendingMarkers = offscreenInstance._pendingMarkers;\n    // If there is a name on the suspense boundary, store that in\n    // the pending boundaries.\n    let name = null;\n    const parent = offscreenFiber.return;\n    if (\n      parent !== null &&\n      parent.tag === SuspenseComponent &&\n      parent.memoizedProps.name\n    ) {\n      name = parent.memoizedProps.name;\n    }\n\n    if (!wasHidden && isHidden) {\n      // The suspense boundaries was just hidden. Add the boundary\n      // to the pending boundary set if it's there\n      if (pendingMarkers !== null) {\n        pendingMarkers.forEach(markerInstance => {\n          const pendingBoundaries = markerInstance.pendingBoundaries;\n          const transitions = markerInstance.transitions;\n          const markerName = markerInstance.name;\n          if (\n            pendingBoundaries !== null &&\n            !pendingBoundaries.has(offscreenInstance)\n          ) {\n            pendingBoundaries.set(offscreenInstance, {\n              name,\n            });\n            if (transitions !== null) {\n              if (\n                markerInstance.tag === TransitionTracingMarker &&\n                markerName !== null\n              ) {\n                addMarkerProgressCallbackToPendingTransition(\n                  markerName,\n                  transitions,\n                  pendingBoundaries,\n                );\n              } else if (markerInstance.tag === TransitionRoot) {\n                transitions.forEach(transition => {\n                  addTransitionProgressCallbackToPendingTransition(\n                    transition,\n                    pendingBoundaries,\n                  );\n                });\n              }\n            }\n          }\n        });\n      }\n    } else if (wasHidden && !isHidden) {\n      // The suspense boundary went from hidden to visible. Remove\n      // the boundary from the pending suspense boundaries set\n      // if it's there\n      if (pendingMarkers !== null) {\n        pendingMarkers.forEach(markerInstance => {\n          const pendingBoundaries = markerInstance.pendingBoundaries;\n          const transitions = markerInstance.transitions;\n          const markerName = markerInstance.name;\n          if (\n            pendingBoundaries !== null &&\n            pendingBoundaries.has(offscreenInstance)\n          ) {\n            pendingBoundaries.delete(offscreenInstance);\n            if (transitions !== null) {\n              if (\n                markerInstance.tag === TransitionTracingMarker &&\n                markerName !== null\n              ) {\n                addMarkerProgressCallbackToPendingTransition(\n                  markerName,\n                  transitions,\n                  pendingBoundaries,\n                );\n\n                // If there are no more unresolved suspense boundaries, the interaction\n                // is considered finished\n                if (pendingBoundaries.size === 0) {\n                  if (markerInstance.aborts === null) {\n                    addMarkerCompleteCallbackToPendingTransition(\n                      markerName,\n                      transitions,\n                    );\n                  }\n                  markerInstance.transitions = null;\n                  markerInstance.pendingBoundaries = null;\n                  markerInstance.aborts = null;\n                }\n              } else if (markerInstance.tag === TransitionRoot) {\n                transitions.forEach(transition => {\n                  addTransitionProgressCallbackToPendingTransition(\n                    transition,\n                    pendingBoundaries,\n                  );\n                });\n              }\n            }\n          }\n        });\n      }\n    }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork       , isHidden         ) {\n  // Only hide or unhide the top-most host nodes.\n  let hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node        = finishedWork;\n    while (true) {\n      if (\n        node.tag === HostComponent ||\n        (supportsResources ? node.tag === HostHoistable : false)\n      ) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n          commitShowHideHostInstance(node, isHidden);\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          commitShowHideHostTextInstance(node, isHidden);\n        }\n      } else if (node.tag === DehydratedFragment) {\n        if (hostSubtreeRoot === null) {\n          commitShowHideSuspenseBoundary(node, isHidden);\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState                ) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden.\n        // Don't search any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction detachFiberMutation(fiber       ) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber       ) {\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  }\n\n  // Clear cyclical Fiber fields. This level alone is designed to roughly\n  // approximate the planned Fiber refactor. In that world, `setState` will be\n  // bound to a special \"instance\" object instead of a Fiber. The Instance\n  // object will not have any of these fields. It will only be connected to\n  // the fiber tree via a single link at the root. So if this level alone is\n  // sufficient to fix memory issues, that bodes well for our plans.\n  fiber.child = null;\n  fiber.deletions = null;\n  fiber.sibling = null;\n\n  // The `stateNode` is cyclical because on host nodes it points to the host\n  // tree, which has its own pointers to children, parents, and siblings.\n  // The other host nodes also point back to fibers, so we should detach that\n  // one, too.\n  if (fiber.tag === HostComponent) {\n    const hostInstance           = fiber.stateNode;\n    if (hostInstance !== null) {\n      detachDeletedInstance(hostInstance);\n    }\n  }\n  fiber.stateNode = null;\n\n  if (__DEV__) {\n    fiber._debugOwner = null;\n  }\n\n  // Theoretically, nothing in here should be necessary, because we already\n  // disconnected the fiber from the tree. So even if something leaks this\n  // particular fiber, it won't leak anything else.\n  fiber.return = null;\n  fiber.dependencies = null;\n  fiber.memoizedProps = null;\n  fiber.memoizedState = null;\n  fiber.pendingProps = null;\n  fiber.stateNode = null;\n  // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n  fiber.updateQueue = null;\n}\n\n// These are tracked on the stack as we recursively traverse a\n// deleted subtree.\n// TODO: Update these during the whole mutation phase, not just during\n// a deletion.\nlet hostParent                              = null;\nlet hostParentIsContainer          = false;\n\nfunction commitDeletionEffects(\n  root           ,\n  returnFiber       ,\n  deletedFiber       ,\n) {\n  const prevEffectStart = pushComponentEffectStart();\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was deleted but we need to recurse down its\n    // children to find all the terminal nodes.\n\n    // Recursively delete all host nodes from the parent, detach refs, clean\n    // up mounted layout effects, and call componentWillUnmount.\n\n    // We only need to remove the topmost host child in each branch. But then we\n    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n    // could split this into two separate traversals functions, where the second\n    // one doesn't include any removeChild logic. This is maybe the same\n    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n    // the layout phase is refactored to use recursion).\n\n    // Before starting, find the nearest host parent on the stack so we know\n    // which instance/container to remove the children from.\n    // TODO: Instead of searching up the fiber return path on every deletion, we\n    // can track the nearest host component on the JS stack as we traverse the\n    // tree during the commit phase. This would make insertions faster, too.\n    let parent               = returnFiber;\n    findParent: while (parent !== null) {\n      switch (parent.tag) {\n        case HostSingleton: {\n          if (supportsSingletons) {\n            if (isSingletonScope(parent.type)) {\n              hostParent = parent.stateNode;\n              hostParentIsContainer = false;\n              break findParent;\n            }\n            break;\n          }\n          // Expected fallthrough when supportsSingletons is false\n        }\n        case HostComponent: {\n          hostParent = parent.stateNode;\n          hostParentIsContainer = false;\n          break findParent;\n        }\n        case HostRoot:\n        case HostPortal: {\n          hostParent = parent.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          break findParent;\n        }\n      }\n      parent = parent.return;\n    }\n    if (hostParent === null) {\n      throw new Error(\n        'Expected to find a host parent. This error is likely caused by ' +\n          'a bug in React. Please file an issue.',\n      );\n    }\n\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n    hostParent = null;\n    hostParentIsContainer = false;\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n  }\n\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    enableComponentPerformanceTrack &&\n    (deletedFiber.mode & ProfileMode) !== NoMode &&\n    componentEffectStartTime >= 0 &&\n    componentEffectEndTime >= 0 &&\n    componentEffectEndTime - componentEffectStartTime > 0.05\n  ) {\n    logComponentUnmount(\n      deletedFiber,\n      componentEffectStartTime,\n      componentEffectEndTime,\n    );\n  }\n  popComponentEffectStart(prevEffectStart);\n\n  detachFiberMutation(deletedFiber);\n}\n\nfunction recursivelyTraverseDeletionEffects(\n  finishedRoot           ,\n  nearestMountedAncestor       ,\n  parent       ,\n) {\n  // TODO: Use a static flag to skip trees that don't have unmount effects\n  let child = parent.child;\n  while (child !== null) {\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n    child = child.sibling;\n  }\n}\n\nfunction commitDeletionEffectsOnFiber(\n  finishedRoot           ,\n  nearestMountedAncestor       ,\n  deletedFiber       ,\n) {\n  // TODO: Delete this Hook once new DevTools ships everywhere. No longer needed.\n  onCommitUnmount(deletedFiber);\n\n  const prevEffectStart = pushComponentEffectStart();\n  const prevEffectDuration = pushComponentEffectDuration();\n  const prevEffectErrors = pushComponentEffectErrors();\n\n  // The cases in this outer switch modify the stack before they traverse\n  // into their subtree. There are simpler cases in the inner switch\n  // that don't modify the stack.\n  switch (deletedFiber.tag) {\n    case HostHoistable: {\n      if (supportsResources) {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        }\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        if (deletedFiber.memoizedState) {\n          releaseResource(deletedFiber.memoizedState);\n        } else if (deletedFiber.stateNode) {\n          unmountHoistable(deletedFiber.stateNode);\n        }\n        break;\n      }\n      // Fall through\n    }\n    case HostSingleton: {\n      if (supportsSingletons) {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        }\n\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        if (isSingletonScope(deletedFiber.type)) {\n          hostParent = deletedFiber.stateNode;\n          hostParentIsContainer = false;\n        }\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n\n        // Normally this is called in passive unmount effect phase however with\n        // HostSingleton we warn if you acquire one that is already associated to\n        // a different fiber. To increase our chances of avoiding this, specifically\n        // if you keyed a HostSingleton so there will be a delete followed by a Placement\n        // we treat detach eagerly here\n        commitHostSingletonRelease(deletedFiber);\n\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n\n        break;\n      }\n      // Fall through\n    }\n    case HostComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      }\n      if (enableFragmentRefs && deletedFiber.tag === HostComponent) {\n        commitFragmentInstanceDeletionEffects(deletedFiber);\n      }\n      // Intentional fallthrough to next branch\n    }\n    case HostText: {\n      // We only need to remove the nearest host child. Set the host parent\n      // to `null` on the stack to indicate that nested children don't\n      // need to be removed.\n      if (supportsMutation) {\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = null;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n\n        if (hostParent !== null) {\n          // Now that all the child effects have unmounted, we can remove the\n          // node from the tree.\n          if (hostParentIsContainer) {\n            commitHostRemoveChildFromContainer(\n              deletedFiber,\n              nearestMountedAncestor,\n              ((hostParent     )           ),\n              (deletedFiber.stateNode                         ),\n            );\n          } else {\n            commitHostRemoveChild(\n              deletedFiber,\n              nearestMountedAncestor,\n              ((hostParent     )          ),\n              (deletedFiber.stateNode                         ),\n            );\n          }\n        }\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      break;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          try {\n            const onDeleted = hydrationCallbacks.onDeleted;\n            if (onDeleted) {\n              onDeleted(\n                (deletedFiber.stateNode                                     ),\n              );\n            }\n          } catch (error) {\n            captureCommitPhaseError(\n              deletedFiber,\n              nearestMountedAncestor,\n              error,\n            );\n          }\n        }\n      }\n\n      // Dehydrated fragments don't have any children\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (supportsMutation) {\n        if (hostParent !== null) {\n          if (hostParentIsContainer) {\n            clearSuspenseBoundaryFromContainer(\n              ((hostParent     )           ),\n              (deletedFiber.stateNode                  ),\n            );\n          } else {\n            clearSuspenseBoundary(\n              ((hostParent     )          ),\n              (deletedFiber.stateNode                  ),\n            );\n          }\n        }\n      }\n      break;\n    }\n    case HostPortal: {\n      if (supportsMutation) {\n        // When we go into a portal, it becomes the parent to remove from.\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = deletedFiber.stateNode.containerInfo;\n        hostParentIsContainer = true;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n      } else {\n        if (supportsPersistence) {\n          commitHostPortalContainerChildren(\n            deletedFiber.stateNode,\n            deletedFiber,\n            createContainerChildSet(),\n          );\n        }\n\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      break;\n    }\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      if (\n        enableHiddenSubtreeInsertionEffectCleanup ||\n        !offscreenSubtreeWasHidden\n      ) {\n        // TODO: Use a commitHookInsertionUnmountEffects wrapper to record timings.\n        commitHookEffectListUnmount(\n          HookInsertion,\n          deletedFiber,\n          nearestMountedAncestor,\n        );\n      }\n      if (!offscreenSubtreeWasHidden) {\n        commitHookLayoutUnmountEffects(\n          deletedFiber,\n          nearestMountedAncestor,\n          HookLayout,\n        );\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      break;\n    }\n    case ClassComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        const instance = deletedFiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(\n            deletedFiber,\n            nearestMountedAncestor,\n            instance,\n          );\n        }\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        }\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      break;\n    }\n    case OffscreenComponent: {\n      if (disableLegacyMode || deletedFiber.mode & ConcurrentMode) {\n        // If this offscreen component is hidden, we already unmounted it. Before\n        // deleting the children, track that it's already unmounted so that we\n        // don't attempt to unmount the effects again.\n        // TODO: If the tree is hidden, in most cases we should be able to skip\n        // over the nested children entirely. An exception is we haven't yet found\n        // the topmost host node to delete, which we already track on the stack.\n        // But the other case is portals, which need to be detached no matter how\n        // deeply they are nested. We should use a subtree flag to track whether a\n        // subtree includes a nested portal.\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeWasHidden =\n          prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      break;\n    }\n    case ViewTransitionComponent: {\n      if (enableViewTransition) {\n        if (__DEV__) {\n          if (deletedFiber.flags & ViewTransitionNamedStatic) {\n            untrackNamedViewTransition(deletedFiber);\n          }\n        }\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        break;\n      }\n      // Fallthrough\n    }\n    case Fragment: {\n      if (enableFragmentRefs) {\n        if (!offscreenSubtreeWasHidden) {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        }\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        break;\n      }\n      // Fallthrough\n    }\n    default: {\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      break;\n    }\n  }\n\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    enableComponentPerformanceTrack &&\n    (deletedFiber.mode & ProfileMode) !== NoMode &&\n    componentEffectStartTime >= 0 &&\n    componentEffectEndTime >= 0 &&\n    componentEffectDuration > 0.05\n  ) {\n    logComponentEffect(\n      deletedFiber,\n      componentEffectStartTime,\n      componentEffectEndTime,\n      componentEffectDuration,\n      componentEffectErrors,\n    );\n  }\n\n  popComponentEffectStart(prevEffectStart);\n  popComponentEffectDuration(prevEffectDuration);\n  popComponentEffectErrors(prevEffectErrors);\n}\n\nfunction commitSuspenseCallback(finishedWork       ) {\n  // TODO: Delete this feature. It's not properly covered by DEV features.\n  const newState                       = finishedWork.memoizedState;\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const retryQueue                    = (finishedWork.updateQueue     );\n      if (retryQueue !== null) {\n        suspenseCallback(new Set(retryQueue));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitActivityHydrationCallbacks(\n  finishedRoot           ,\n  finishedWork       ,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState                       = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState                       = current.memoizedState;\n      if (prevState !== null) {\n        const activityInstance = prevState.dehydrated;\n        commitHostHydratedActivity(activityInstance, finishedWork);\n        if (enableSuspenseCallback) {\n          try {\n            // TODO: Delete this feature. It's not properly covered by DEV features.\n            const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n            if (hydrationCallbacks !== null) {\n              const onHydrated = hydrationCallbacks.onHydrated;\n              if (onHydrated) {\n                onHydrated(activityInstance);\n              }\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot           ,\n  finishedWork       ,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState                       = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState                       = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          commitHostHydratedSuspense(suspenseInstance, finishedWork);\n          if (enableSuspenseCallback) {\n            try {\n              // TODO: Delete this feature. It's not properly covered by DEV features.\n              const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n              if (hydrationCallbacks !== null) {\n                const onHydrated = hydrationCallbacks.onHydrated;\n                if (onHydrated) {\n                  onHydrated(suspenseInstance);\n                }\n              }\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction getRetryCache(finishedWork       ) {\n  // TODO: Unify the interface for the retry cache so we don't have to switch\n  // on the tag like this.\n  switch (finishedWork.tag) {\n    case ActivityComponent:\n    case SuspenseComponent:\n    case SuspenseListComponent: {\n      let retryCache = finishedWork.stateNode;\n      if (retryCache === null) {\n        retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n      }\n      return retryCache;\n    }\n    case OffscreenComponent: {\n      const instance                    = finishedWork.stateNode;\n      let retryCache                                           =\n        instance._retryCache;\n      if (retryCache === null) {\n        retryCache = instance._retryCache = new PossiblyWeakSet();\n      }\n      return retryCache;\n    }\n    default: {\n      throw new Error(\n        `Unexpected Suspense handler tag (${finishedWork.tag}). This is a ` +\n          'bug in React.',\n      );\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(\n  finishedWork       ,\n  wakeables            ,\n) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const retryCache = getRetryCache(finishedWork);\n  wakeables.forEach(wakeable => {\n    // Memoize using the boundary fiber to prevent redundant listeners.\n    const retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n    if (!retryCache.has(wakeable)) {\n      retryCache.add(wakeable);\n\n      if (enableUpdaterTracking) {\n        if (isDevToolsPresent) {\n          if (inProgressLanes !== null && inProgressRoot !== null) {\n            // If we have pending work still, associate the original updaters with it.\n            restorePendingUpdaters(inProgressRoot, inProgressLanes);\n          } else {\n            throw Error(\n              'Expected finished root and lanes to be set. This is a bug in React.',\n            );\n          }\n        }\n      }\n\n      wakeable.then(retry, retry);\n    }\n  });\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nfunction isSuspenseBoundaryBeingHidden(\n  current              ,\n  finishedWork       ,\n)          {\n  if (current !== null) {\n    const oldState                       = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState                       = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nexport function commitMutationEffects(\n  root           ,\n  finishedWork       ,\n  committedLanes       ,\n) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n\n  rootViewTransitionAffected = false;\n  inUpdateViewTransition = false;\n\n  resetComponentEffectTimers();\n\n  commitMutationEffectsOnFiber(finishedWork, root, committedLanes);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseMutationEffects(\n  root           ,\n  parentFiber       ,\n  lanes       ,\n) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects have fired.\n  const deletions = parentFiber.deletions;\n  if (deletions !== null) {\n    for (let i = 0; i < deletions.length; i++) {\n      const childToDelete = deletions[i];\n      commitDeletionEffects(root, parentFiber, childToDelete);\n    }\n  }\n\n  if (\n    parentFiber.subtreeFlags &\n    (enablePersistedModeClonedFlag ? MutationMask | Cloned : MutationMask)\n  ) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      commitMutationEffectsOnFiber(child, root, lanes);\n      child = child.sibling;\n    }\n  }\n}\n\nlet currentHoistableRoot                       = null;\n\nfunction commitMutationEffectsOnFiber(\n  finishedWork       ,\n  root           ,\n  lanes       ,\n) {\n  const prevEffectStart = pushComponentEffectStart();\n  const prevEffectDuration = pushComponentEffectDuration();\n  const prevEffectErrors = pushComponentEffectErrors();\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconciliation, because those can be set on all fiber types.\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork, lanes);\n\n      if (flags & Update) {\n        commitHookEffectListUnmount(\n          HookInsertion | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n        // TODO: Use a commitHookInsertionUnmountEffects wrapper to record timings.\n        commitHookEffectListMount(HookInsertion | HookHasEffect, finishedWork);\n        commitHookLayoutUnmountEffects(\n          finishedWork,\n          finishedWork.return,\n          HookLayout | HookHasEffect,\n        );\n      }\n      break;\n    }\n    case ClassComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork, lanes);\n\n      if (flags & Ref) {\n        if (!offscreenSubtreeWasHidden && current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n\n      if (flags & Callback && offscreenSubtreeIsHidden) {\n        const updateQueue                            =\n          (finishedWork.updateQueue     );\n        if (updateQueue !== null) {\n          deferHiddenCallbacks(updateQueue);\n        }\n      }\n      break;\n    }\n    case HostHoistable: {\n      if (supportsResources) {\n        // We cast because we always set the root at the React root and so it cannot be\n        // null while we are processing mutation effects\n        const hoistableRoot                = (currentHoistableRoot     );\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork, lanes);\n\n        if (flags & Ref) {\n          if (!offscreenSubtreeWasHidden && current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n\n        if (flags & Update) {\n          const currentResource =\n            current !== null ? current.memoizedState : null;\n          const newResource = finishedWork.memoizedState;\n          if (current === null) {\n            // We are mounting a new HostHoistable Fiber. We fork the mount\n            // behavior based on whether this instance is a Hoistable Instance\n            // or a Hoistable Resource\n            if (newResource === null) {\n              if (finishedWork.stateNode === null) {\n                finishedWork.stateNode = hydrateHoistable(\n                  hoistableRoot,\n                  finishedWork.type,\n                  finishedWork.memoizedProps,\n                  finishedWork,\n                );\n              } else {\n                mountHoistable(\n                  hoistableRoot,\n                  finishedWork.type,\n                  finishedWork.stateNode,\n                );\n              }\n            } else {\n              finishedWork.stateNode = acquireResource(\n                hoistableRoot,\n                newResource,\n                finishedWork.memoizedProps,\n              );\n            }\n          } else if (currentResource !== newResource) {\n            // We are moving to or from Hoistable Resource, or between different Hoistable Resources\n            if (currentResource === null) {\n              if (current.stateNode !== null) {\n                unmountHoistable(current.stateNode);\n              }\n            } else {\n              releaseResource(currentResource);\n            }\n            if (newResource === null) {\n              mountHoistable(\n                hoistableRoot,\n                finishedWork.type,\n                finishedWork.stateNode,\n              );\n            } else {\n              acquireResource(\n                hoistableRoot,\n                newResource,\n                finishedWork.memoizedProps,\n              );\n            }\n          } else if (newResource === null && finishedWork.stateNode !== null) {\n            commitHostUpdate(\n              finishedWork,\n              finishedWork.memoizedProps,\n              current.memoizedProps,\n            );\n          }\n        }\n        break;\n      }\n      // Fall through\n    }\n    case HostSingleton: {\n      if (supportsSingletons) {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork, lanes);\n        if (flags & Ref) {\n          if (!offscreenSubtreeWasHidden && current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n        if (current !== null && flags & Update) {\n          const newProps = finishedWork.memoizedProps;\n          const oldProps = current.memoizedProps;\n          commitHostUpdate(finishedWork, newProps, oldProps);\n        }\n        break;\n      }\n      // Fall through\n    }\n    case HostComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n\n      commitReconciliationEffects(finishedWork, lanes);\n\n      if (flags & Ref) {\n        if (!offscreenSubtreeWasHidden && current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n      if (supportsMutation) {\n        // TODO: ContentReset gets cleared by the children during the commit\n        // phase. This is a refactor hazard because it means we must read\n        // flags the flags after `commitReconciliationEffects` has already run;\n        // the order matters. We should refactor so that ContentReset does not\n        // rely on mutating the flag during commit. Like by setting a flag\n        // during the render phase instead.\n        if (finishedWork.flags & ContentReset) {\n          commitHostResetTextContent(finishedWork);\n        }\n\n        if (flags & Update) {\n          const instance           = finishedWork.stateNode;\n          if (instance != null) {\n            // Commit the work prepared earlier.\n            // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n            const newProps = finishedWork.memoizedProps;\n            const oldProps =\n              current !== null ? current.memoizedProps : newProps;\n            commitHostUpdate(finishedWork, newProps, oldProps);\n          }\n        }\n\n        if (flags & FormReset) {\n          needsFormReset = true;\n          if (__DEV__) {\n            if (finishedWork.type !== 'form') {\n              // Paranoid coding. In case we accidentally start using the\n              // FormReset bit for something else.\n              console.error(\n                'Unexpected host component type. Expected a form. This is a ' +\n                  'bug in React.',\n              );\n            }\n          }\n        }\n      } else {\n        if (enableEagerAlternateStateNodeCleanup) {\n          if (supportsPersistence) {\n            if (finishedWork.alternate !== null) {\n              // `finishedWork.alternate.stateNode` is pointing to a stale shadow\n              // node at this point, retaining it and its subtree. To reclaim\n              // memory, point `alternate.stateNode` to new shadow node. This\n              // prevents shadow node from staying in memory longer than it\n              // needs to. The correct behaviour of this is checked by test in\n              // React Native: ShadowNodeReferenceCounter-itest.js#L150\n              finishedWork.alternate.stateNode = finishedWork.stateNode;\n            }\n          }\n        }\n      }\n      break;\n    }\n    case HostText: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork, lanes);\n\n      if (flags & Update) {\n        if (supportsMutation) {\n          if (finishedWork.stateNode === null) {\n            throw new Error(\n              'This should have a text node initialized. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          const newText         = finishedWork.memoizedProps;\n          // For hydration we reuse the update path but we treat the oldProps\n          // as the newProps. The updatePayload will contain the real change in\n          // this case.\n          const oldText         =\n            current !== null ? current.memoizedProps : newText;\n\n          commitHostTextUpdate(finishedWork, newText, oldText);\n        }\n      }\n      break;\n    }\n    case HostRoot: {\n      const prevProfilerEffectDuration = pushNestedEffectDurations();\n\n      pushRootMutationContext();\n      if (supportsResources) {\n        prepareToCommitHoistables();\n\n        const previousHoistableRoot = currentHoistableRoot;\n        currentHoistableRoot = getHoistableRoot(root.containerInfo);\n\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        currentHoistableRoot = previousHoistableRoot;\n\n        commitReconciliationEffects(finishedWork, lanes);\n      } else {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork, lanes);\n      }\n\n      if (flags & Update) {\n        if (supportsMutation && supportsHydration) {\n          if (current !== null) {\n            const prevRootState            = current.memoizedState;\n            if (prevRootState.isDehydrated) {\n              commitHostHydratedContainer(root, finishedWork);\n            }\n          }\n        }\n        if (supportsPersistence) {\n          commitHostRootContainerChildren(root, finishedWork);\n        }\n      }\n\n      if (needsFormReset) {\n        // A form component requested to be reset during this commit. We do this\n        // after all mutations in the rest of the tree so that `defaultValue`\n        // will already be updated. This way you can update `defaultValue` using\n        // data sent by the server as a result of the form submission.\n        //\n        // Theoretically we could check finishedWork.subtreeFlags & FormReset,\n        // but the FormReset bit is overloaded with other flags used by other\n        // fiber types. So this extra variable lets us skip traversing the tree\n        // except when a form was actually submitted.\n        needsFormReset = false;\n        recursivelyResetForms(finishedWork);\n      }\n\n      if (enableProfilerTimer && enableProfilerCommitHooks) {\n        root.effectDuration += popNestedEffectDurations(\n          prevProfilerEffectDuration,\n        );\n      }\n\n      popMutationContext(false);\n\n      if (\n        enableDefaultTransitionIndicator &&\n        rootMutationContext &&\n        includesLoadingIndicatorLanes(lanes)\n      ) {\n        // This root had a mutation. Mark this root as having rendered a manual\n        // loading state.\n        markIndicatorHandled(root);\n      }\n\n      break;\n    }\n    case HostPortal: {\n      const prevMutationContext = pushMutationContext();\n      if (supportsResources) {\n        const previousHoistableRoot = currentHoistableRoot;\n        currentHoistableRoot = getHoistableRoot(\n          finishedWork.stateNode.containerInfo,\n        );\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork, lanes);\n        currentHoistableRoot = previousHoistableRoot;\n      } else {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork, lanes);\n      }\n      if (viewTransitionMutationContext && inUpdateViewTransition) {\n        // A Portal doesn't necessarily exist within the context of this subtree.\n        // Ideally we would track which React ViewTransition component nests the container\n        // but that's costly. Instead, we treat each Portal as if it's a new React root.\n        // Therefore any leaked mutation means that the root should animate.\n        rootViewTransitionAffected = true;\n      }\n      popMutationContext(prevMutationContext);\n\n      if (flags & Update) {\n        if (supportsPersistence) {\n          commitHostPortalContainerChildren(\n            finishedWork.stateNode,\n            finishedWork,\n            finishedWork.stateNode.pendingChildren,\n          );\n        }\n      }\n      break;\n    }\n    case Profiler: {\n      const prevProfilerEffectDuration = pushNestedEffectDurations();\n\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork, lanes);\n\n      if (enableProfilerTimer && enableProfilerCommitHooks) {\n        const profilerInstance = finishedWork.stateNode;\n        // Propagate layout effect durations to the next nearest Profiler ancestor.\n        // Do not reset these values until the next render so DevTools has a chance to read them first.\n        profilerInstance.effectDuration += bubbleNestedEffectDurations(\n          prevProfilerEffectDuration,\n        );\n      }\n      break;\n    }\n    case ActivityComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork, lanes);\n      if (flags & Update) {\n        const retryQueue                    = (finishedWork.updateQueue     );\n        if (retryQueue !== null) {\n          finishedWork.updateQueue = null;\n          attachSuspenseRetryListeners(finishedWork, retryQueue);\n        }\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork, lanes);\n\n      // TODO: We should mark a flag on the Suspense fiber itself, rather than\n      // relying on the Offscreen fiber having a flag also being marked. The\n      // reason is that this offscreen fiber might not be part of the work-in-\n      // progress tree! It could have been reused from a previous render. This\n      // doesn't lead to incorrect behavior because we don't rely on the flag\n      // check alone; we also compare the states explicitly below. But for\n      // modeling purposes, we _should_ be able to rely on the flag check alone.\n      // So this is a bit fragile.\n      //\n      // Also, all this logic could/should move to the passive phase so it\n      // doesn't block paint.\n      const offscreenFiber        = (finishedWork.child     );\n      if (offscreenFiber.flags & Visibility) {\n        // Throttle the appearance and disappearance of Suspense fallbacks.\n        const isShowingFallback =\n          (finishedWork.memoizedState                      ) !== null;\n        const wasShowingFallback =\n          current !== null &&\n          (current.memoizedState                      ) !== null;\n\n        if (alwaysThrottleRetries) {\n          if (isShowingFallback !== wasShowingFallback) {\n            // A fallback is either appearing or disappearing.\n            markCommitTimeOfFallback();\n          }\n        } else {\n          if (isShowingFallback && !wasShowingFallback) {\n            // Old behavior. Only mark when a fallback appears, not when\n            // it disappears.\n            markCommitTimeOfFallback();\n          }\n        }\n      }\n\n      if (flags & Update) {\n        try {\n          commitSuspenseCallback(finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        const retryQueue                    = (finishedWork.updateQueue     );\n        if (retryQueue !== null) {\n          finishedWork.updateQueue = null;\n          attachSuspenseRetryListeners(finishedWork, retryQueue);\n        }\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const newState                        = finishedWork.memoizedState;\n      const isHidden = newState !== null;\n      const wasHidden = current !== null && current.memoizedState !== null;\n\n      if (disableLegacyMode || finishedWork.mode & ConcurrentMode) {\n        // Before committing the children, track on the stack whether this\n        // offscreen subtree was already hidden, so that we don't unmount the\n        // effects again.\n        const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n\n        if (\n          // If this was the root of the reappear.\n          wasHidden &&\n          !isHidden &&\n          !prevOffscreenSubtreeIsHidden &&\n          !prevOffscreenSubtreeWasHidden &&\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          enableComponentPerformanceTrack &&\n          (finishedWork.mode & ProfileMode) !== NoMode &&\n          componentEffectStartTime >= 0 &&\n          componentEffectEndTime >= 0 &&\n          componentEffectEndTime - componentEffectStartTime > 0.05\n        ) {\n          logComponentReappeared(\n            finishedWork,\n            componentEffectStartTime,\n            componentEffectEndTime,\n          );\n        }\n      } else {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      }\n\n      commitReconciliationEffects(finishedWork, lanes);\n\n      if (flags & Visibility) {\n        const offscreenInstance                    = finishedWork.stateNode;\n\n        // Track the current state on the Offscreen instance so we can\n        // read it during an event\n        if (isHidden) {\n          offscreenInstance._visibility &= ~OffscreenVisible;\n        } else {\n          offscreenInstance._visibility |= OffscreenVisible;\n        }\n\n        const isUpdate = current !== null;\n        if (isHidden) {\n          // Only trigger disappear layout effects if:\n          //   - This is an update, not first mount.\n          //   - This Offscreen was not hidden before.\n          //   - Ancestor Offscreen was not hidden in previous commit or in this commit\n          if (\n            isUpdate &&\n            !wasHidden &&\n            !offscreenSubtreeIsHidden &&\n            !offscreenSubtreeWasHidden\n          ) {\n            if (\n              disableLegacyMode ||\n              (finishedWork.mode & ConcurrentMode) !== NoMode\n            ) {\n              // Disappear the layout effects of all the children\n              recursivelyTraverseDisappearLayoutEffects(finishedWork);\n\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                enableComponentPerformanceTrack &&\n                (finishedWork.mode & ProfileMode) !== NoMode &&\n                componentEffectStartTime >= 0 &&\n                componentEffectEndTime >= 0 &&\n                componentEffectEndTime - componentEffectStartTime > 0.05\n              ) {\n                logComponentDisappeared(\n                  finishedWork,\n                  componentEffectStartTime,\n                  componentEffectEndTime,\n                );\n              }\n            }\n          }\n        }\n\n        if (supportsMutation) {\n          // TODO: This needs to run whenever there's an insertion or update\n          // inside a hidden Offscreen tree.\n          hideOrUnhideAllChildren(finishedWork, isHidden);\n        }\n      }\n\n      // TODO: Move to passive phase\n      if (flags & Update) {\n        const offscreenQueue                        =\n          (finishedWork.updateQueue     );\n        if (offscreenQueue !== null) {\n          const retryQueue = offscreenQueue.retryQueue;\n          if (retryQueue !== null) {\n            offscreenQueue.retryQueue = null;\n            attachSuspenseRetryListeners(finishedWork, retryQueue);\n          }\n        }\n      }\n      break;\n    }\n    case SuspenseListComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork, lanes);\n\n      if (flags & Update) {\n        const retryQueue                       =\n          (finishedWork.updateQueue     );\n        if (retryQueue !== null) {\n          finishedWork.updateQueue = null;\n          attachSuspenseRetryListeners(finishedWork, retryQueue);\n        }\n      }\n      break;\n    }\n    case ViewTransitionComponent: {\n      if (enableViewTransition) {\n        if (flags & Ref) {\n          if (!offscreenSubtreeWasHidden && current !== null) {\n            safelyDetachRef(current, current.return);\n          }\n        }\n        const prevMutationContext = pushMutationContext();\n        const prevUpdate = inUpdateViewTransition;\n        const isViewTransitionEligible =\n          enableViewTransition &&\n          includesOnlyViewTransitionEligibleLanes(lanes);\n        const props = finishedWork.memoizedProps;\n        inUpdateViewTransition =\n          isViewTransitionEligible &&\n          getViewTransitionClassName(props.default, props.update) !== 'none';\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork, lanes);\n        if (isViewTransitionEligible) {\n          if (current === null) {\n            // This is a new mount. We should have handled this as part of the\n            // Placement effect or it is deeper inside a entering transition.\n          } else if (viewTransitionMutationContext) {\n            // Something mutated in this tree so we need to animate this regardless\n            // what the measurements say. We use the Update flag to track this.\n            // If diffing was done in the render phase, like we used, this could have\n            // been done in the render already.\n            finishedWork.flags |= Update;\n          }\n        }\n        inUpdateViewTransition = prevUpdate;\n        popMutationContext(prevMutationContext);\n        break;\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork, lanes);\n\n        // TODO: This is a temporary solution that allowed us to transition away\n        // from React Flare on www.\n        if (flags & Ref) {\n          if (!offscreenSubtreeWasHidden && current !== null) {\n            safelyDetachRef(finishedWork, finishedWork.return);\n          }\n          if (!offscreenSubtreeIsHidden) {\n            safelyAttachRef(finishedWork, finishedWork.return);\n          }\n        }\n        if (flags & Update) {\n          const scopeInstance = finishedWork.stateNode;\n          prepareScopeUpdate(scopeInstance, finishedWork);\n        }\n      }\n      break;\n    }\n    case Fragment:\n      if (enableFragmentRefs) {\n        if (current && current.stateNode !== null) {\n          updateFragmentInstanceFiber(finishedWork, current.stateNode);\n        }\n      }\n    // Fallthrough\n    default: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork, lanes);\n\n      break;\n    }\n  }\n\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    enableComponentPerformanceTrack &&\n    (finishedWork.mode & ProfileMode) !== NoMode &&\n    componentEffectStartTime >= 0 &&\n    componentEffectEndTime >= 0\n  ) {\n    if (componentEffectDuration > 0.05) {\n      logComponentEffect(\n        finishedWork,\n        componentEffectStartTime,\n        componentEffectEndTime,\n        componentEffectDuration,\n        componentEffectErrors,\n      );\n    }\n    if (\n      // Insertion\n      finishedWork.alternate === null &&\n      finishedWork.return !== null &&\n      finishedWork.return.alternate !== null &&\n      componentEffectEndTime - componentEffectStartTime > 0.05\n    ) {\n      const isHydration = isHydratingParent(\n        finishedWork.return.alternate,\n        finishedWork.return,\n      );\n      if (!isHydration) {\n        logComponentMount(\n          finishedWork,\n          componentEffectStartTime,\n          componentEffectEndTime,\n        );\n      }\n    }\n  }\n\n  popComponentEffectStart(prevEffectStart);\n  popComponentEffectDuration(prevEffectDuration);\n  popComponentEffectErrors(prevEffectErrors);\n}\n\nfunction commitReconciliationEffects(\n  finishedWork       ,\n  committedLanes       ,\n) {\n  // Placement effects (insertions, reorders) can be scheduled on any fiber\n  // type. They needs to happen after the children effects have fired, but\n  // before the effects on this fiber have fired.\n  const flags = finishedWork.flags;\n  if (flags & Placement) {\n    commitHostPlacement(finishedWork);\n    // Clear the \"placement\" from effect tag so that we know that this is\n    // inserted, before any life-cycles like componentDidMount gets called.\n    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n    // and isMounted is deprecated anyway so we should be able to kill this.\n    finishedWork.flags &= ~Placement;\n  }\n  if (flags & Hydrating) {\n    finishedWork.flags &= ~Hydrating;\n  }\n}\n\nfunction recursivelyResetForms(parentFiber       ) {\n  if (parentFiber.subtreeFlags & FormReset) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      resetFormOnFiber(child);\n      child = child.sibling;\n    }\n  }\n}\n\nfunction resetFormOnFiber(fiber       ) {\n  recursivelyResetForms(fiber);\n  if (fiber.tag === HostComponent && fiber.flags & FormReset) {\n    const formInstance               = fiber.stateNode;\n    resetFormInstance(formInstance);\n  }\n}\n\nexport function commitAfterMutationEffects(\n  root           ,\n  finishedWork       ,\n  committedLanes       ,\n)       {\n  if (!enableViewTransition) {\n    // This phase is only used for view transitions.\n    return;\n  }\n  commitAfterMutationEffectsOnFiber(finishedWork, root, committedLanes);\n}\n\nfunction recursivelyTraverseAfterMutationEffects(\n  root           ,\n  parentFiber       ,\n  lanes       ,\n) {\n  // We need to visit the same nodes that we visited in the before mutation phase.\n  if (parentFiber.subtreeFlags & BeforeAndAfterMutationTransitionMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      commitAfterMutationEffectsOnFiber(child, root, lanes);\n      child = child.sibling;\n    }\n  } else {\n    // Nothing has changed in this subtree, but the parent may have still affected\n    // its size and position. We need to measure this and if not, restore it to\n    // not animate.\n    measureNestedViewTransitions(parentFiber, false);\n  }\n}\n\nfunction commitAfterMutationEffectsOnFiber(\n  finishedWork       ,\n  root           ,\n  lanes       ,\n) {\n  const current = finishedWork.alternate;\n  if (current === null) {\n    // This is a newly inserted subtree. We can't use Placement flags to detect\n    // this since they get removed in the mutation phase. Usually it's not enough\n    // to just check current because that can also happen deeper in the same tree.\n    // However, since we don't need to visit newly inserted subtrees in AfterMutation\n    // we can just bail after we're done with the first one.\n    // The first ViewTransition inside a newly mounted tree runs an enter transition\n    // but other nested ones don't unless they have a named pair.\n    commitEnterViewTransitions(finishedWork, false);\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case HostRoot: {\n      viewTransitionContextChanged = false;\n      pushViewTransitionCancelableScope();\n      recursivelyTraverseAfterMutationEffects(root, finishedWork, lanes);\n      if (!viewTransitionContextChanged && !rootViewTransitionAffected) {\n        // If we didn't leak any resizing out to the root, we don't have to transition\n        // the root itself. This means that we can now safely cancel any cancellations\n        // that bubbled all the way up.\n        const cancelableChildren = viewTransitionCancelableChildren;\n        if (cancelableChildren !== null) {\n          for (let i = 0; i < cancelableChildren.length; i += 3) {\n            cancelViewTransitionName(\n              ((cancelableChildren[i]     )          ),\n              ((cancelableChildren[i + 1]     )        ),\n              ((cancelableChildren[i + 2]     )       ),\n            );\n          }\n        }\n        // We also cancel the root itself.\n        cancelRootViewTransitionName(root.containerInfo);\n      }\n      popViewTransitionCancelableScope(null);\n      break;\n    }\n    case HostComponent: {\n      recursivelyTraverseAfterMutationEffects(root, finishedWork, lanes);\n      break;\n    }\n    case HostPortal: {\n      const prevContextChanged = viewTransitionContextChanged;\n      viewTransitionContextChanged = false;\n      recursivelyTraverseAfterMutationEffects(root, finishedWork, lanes);\n      if (viewTransitionContextChanged) {\n        // A Portal doesn't necessarily exist within the context of this subtree.\n        // Ideally we would track which React ViewTransition component nests the container\n        // but that's costly. Instead, we treat each Portal as if it's a new React root.\n        // Therefore any leaked resize of a child could affect the root so the root should animate.\n        // We only do this if the Portal is inside a ViewTransition and it is not disabled\n        // with update=\"none\". Otherwise the Portal is considered not animating.\n        rootViewTransitionAffected = true;\n      }\n      viewTransitionContextChanged = prevContextChanged;\n      break;\n    }\n    case OffscreenComponent: {\n      const isModernRoot =\n        disableLegacyMode || (finishedWork.mode & ConcurrentMode) !== NoMode;\n      if (isModernRoot) {\n        const isHidden = finishedWork.memoizedState !== null;\n        if (isHidden) {\n          // The Offscreen tree is hidden. Skip over its after mutation effects.\n        } else {\n          // The Offscreen tree is visible.\n          const wasHidden = current.memoizedState !== null;\n          if (wasHidden) {\n            commitEnterViewTransitions(finishedWork, false);\n            // If it was previous hidden then the children are treated as enter\n            // not updates so we don't need to visit these children.\n          } else {\n            recursivelyTraverseAfterMutationEffects(root, finishedWork, lanes);\n          }\n        }\n      } else {\n        recursivelyTraverseAfterMutationEffects(root, finishedWork, lanes);\n      }\n      break;\n    }\n    case ViewTransitionComponent: {\n      const prevContextChanged = viewTransitionContextChanged;\n      const prevCancelableChildren = pushViewTransitionCancelableScope();\n      viewTransitionContextChanged = false;\n      recursivelyTraverseAfterMutationEffects(root, finishedWork, lanes);\n\n      if (viewTransitionContextChanged) {\n        finishedWork.flags |= Update;\n      }\n\n      const inViewport = measureUpdateViewTransition(\n        current,\n        finishedWork,\n        false,\n      );\n\n      if ((finishedWork.flags & Update) === NoFlags || !inViewport) {\n        // If this boundary didn't update, then we may be able to cancel its children.\n        // We bubble them up to the parent set to be determined later if we can cancel.\n        // Similarly, if old and new state was outside the viewport, we can skip it\n        // even if it did update.\n        if (prevCancelableChildren === null) {\n          // Bubbling up this whole set to the parent.\n        } else {\n          // Merge with parent set.\n          // $FlowFixMe[method-unbinding]\n          prevCancelableChildren.push.apply(\n            prevCancelableChildren,\n            viewTransitionCancelableChildren,\n          );\n          popViewTransitionCancelableScope(prevCancelableChildren);\n        }\n        // TODO: If this doesn't end up canceled, because a parent animates,\n        // then we should probably issue an event since this instance is part of it.\n      } else {\n        const props                      = finishedWork.memoizedProps;\n        scheduleViewTransitionEvent(finishedWork, props.onUpdate);\n\n        // If this boundary did update, we cannot cancel its children so those are dropped.\n        popViewTransitionCancelableScope(prevCancelableChildren);\n      }\n\n      if ((finishedWork.flags & AffectedParentLayout) !== NoFlags) {\n        // This boundary changed size in a way that may have caused its parent to\n        // relayout. We need to bubble this information up to the parent.\n        viewTransitionContextChanged = true;\n      } else {\n        // Otherwise, we restore it to whatever the parent had found so far.\n        viewTransitionContextChanged = prevContextChanged;\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseAfterMutationEffects(root, finishedWork, lanes);\n      break;\n    }\n  }\n}\n\nexport function commitLayoutEffects(\n  finishedWork       ,\n  root           ,\n  committedLanes       ,\n)       {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n\n  resetComponentEffectTimers();\n\n  const current = finishedWork.alternate;\n  commitLayoutEffectOnFiber(root, current, finishedWork, committedLanes);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseLayoutEffects(\n  root           ,\n  parentFiber       ,\n  lanes       ,\n) {\n  if (parentFiber.subtreeFlags & LayoutMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      const current = child.alternate;\n      commitLayoutEffectOnFiber(root, current, child, lanes);\n      child = child.sibling;\n    }\n  }\n}\n\nexport function disappearLayoutEffects(finishedWork       ) {\n  const prevEffectStart = pushComponentEffectStart();\n  const prevEffectDuration = pushComponentEffectDuration();\n  const prevEffectErrors = pushComponentEffectErrors();\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      // TODO (Offscreen) Check: flags & LayoutStatic\n      commitHookLayoutUnmountEffects(\n        finishedWork,\n        finishedWork.return,\n        HookLayout,\n      );\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n    case ClassComponent: {\n      // TODO (Offscreen) Check: flags & RefStatic\n      safelyDetachRef(finishedWork, finishedWork.return);\n\n      const instance = finishedWork.stateNode;\n      if (typeof instance.componentWillUnmount === 'function') {\n        safelyCallComponentWillUnmount(\n          finishedWork,\n          finishedWork.return,\n          instance,\n        );\n      }\n\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n    case HostSingleton: {\n      if (supportsSingletons) {\n        // TODO (Offscreen) Check: flags & RefStatic\n        commitHostSingletonRelease(finishedWork);\n      }\n      // Expected fallthrough to HostComponent\n    }\n    case HostHoistable:\n    case HostComponent: {\n      // TODO (Offscreen) Check: flags & RefStatic\n      safelyDetachRef(finishedWork, finishedWork.return);\n\n      if (enableFragmentRefs && finishedWork.tag === HostComponent) {\n        commitFragmentInstanceDeletionEffects(finishedWork);\n      }\n\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n    case OffscreenComponent: {\n      const isHidden = finishedWork.memoizedState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is already hidden. Don't disappear\n        // its effects.\n      } else {\n        recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      }\n      break;\n    }\n    case ViewTransitionComponent: {\n      if (enableViewTransition) {\n        if (__DEV__) {\n          if (finishedWork.flags & ViewTransitionNamedStatic) {\n            untrackNamedViewTransition(finishedWork);\n          }\n        }\n        safelyDetachRef(finishedWork, finishedWork.return);\n      }\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n    case Fragment: {\n      if (enableFragmentRefs) {\n        safelyDetachRef(finishedWork, finishedWork.return);\n      }\n      // Fallthrough\n    }\n    default: {\n      recursivelyTraverseDisappearLayoutEffects(finishedWork);\n      break;\n    }\n  }\n\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    enableComponentPerformanceTrack &&\n    (finishedWork.mode & ProfileMode) !== NoMode &&\n    componentEffectStartTime >= 0 &&\n    componentEffectEndTime >= 0 &&\n    componentEffectDuration > 0.05\n  ) {\n    logComponentEffect(\n      finishedWork,\n      componentEffectStartTime,\n      componentEffectEndTime,\n      componentEffectDuration,\n      componentEffectErrors,\n    );\n  }\n\n  popComponentEffectStart(prevEffectStart);\n  popComponentEffectDuration(prevEffectDuration);\n  popComponentEffectErrors(prevEffectErrors);\n}\n\nfunction recursivelyTraverseDisappearLayoutEffects(parentFiber       ) {\n  // TODO (Offscreen) Check: subtreeflags & (RefStatic | LayoutStatic)\n  let child = parentFiber.child;\n  while (child !== null) {\n    disappearLayoutEffects(child);\n    child = child.sibling;\n  }\n}\n\nexport function reappearLayoutEffects(\n  finishedRoot           ,\n  current              ,\n  finishedWork       ,\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  includeWorkInProgressEffects         ,\n) {\n  const prevEffectStart = pushComponentEffectStart();\n  const prevEffectDuration = pushComponentEffectDuration();\n  const prevEffectErrors = pushComponentEffectErrors();\n  // Turn on layout effects in a tree that previously disappeared.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        includeWorkInProgressEffects,\n      );\n      // TODO: Check flags & LayoutStatic\n      commitHookLayoutEffects(finishedWork, HookLayout);\n      break;\n    }\n    case ClassComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        includeWorkInProgressEffects,\n      );\n\n      commitClassDidMount(finishedWork);\n\n      commitClassHiddenCallbacks(finishedWork);\n\n      // If this is newly finished work, check for setState callbacks\n      if (includeWorkInProgressEffects && flags & Callback) {\n        commitClassCallbacks(finishedWork);\n      }\n\n      // TODO: Check flags & RefStatic\n      safelyAttachRef(finishedWork, finishedWork.return);\n      break;\n    }\n    // Unlike commitLayoutEffectsOnFiber, we don't need to handle HostRoot\n    // because this function only visits nodes that are inside an\n    // Offscreen fiber.\n    // case HostRoot: {\n    //  ...\n    // }\n    case HostSingleton: {\n      if (supportsSingletons) {\n        // We acquire the singleton instance first so it has appropriate\n        // styles before other layout effects run. This isn't perfect because\n        // an early sibling of the singleton may have an effect that can\n        // observe the singleton before it is acquired.\n        // @TODO move this to the mutation phase. The reason it isn't there yet\n        // is it seemingly requires an extra traversal because we need to move the\n        // disappear effect into a phase before the appear phase\n        commitHostSingletonAcquisition(finishedWork);\n        // We fall through to the HostComponent case below.\n      }\n      // Fallthrough\n    }\n    case HostHoistable:\n    case HostComponent: {\n      // TODO: Enable HostText for RN\n      if (enableFragmentRefs && finishedWork.tag === HostComponent) {\n        commitFragmentInstanceInsertionEffects(finishedWork);\n      }\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        includeWorkInProgressEffects,\n      );\n\n      // Renderers may schedule work to be done after host components are mounted\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n      // These effects should only be committed when components are first mounted,\n      // aka when there is no current/alternate.\n      if (includeWorkInProgressEffects && current === null && flags & Update) {\n        commitHostMount(finishedWork);\n      }\n\n      // TODO: Check flags & Ref\n      safelyAttachRef(finishedWork, finishedWork.return);\n      break;\n    }\n    case Profiler: {\n      // TODO: Figure out how Profiler updates should work with Offscreen\n      if (includeWorkInProgressEffects && flags & Update) {\n        const prevProfilerEffectDuration = pushNestedEffectDurations();\n\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          includeWorkInProgressEffects,\n        );\n\n        const profilerInstance = finishedWork.stateNode;\n\n        if (enableProfilerTimer && enableProfilerCommitHooks) {\n          // Propagate layout effect durations to the next nearest Profiler ancestor.\n          // Do not reset these values until the next render so DevTools has a chance to read them first.\n          profilerInstance.effectDuration += bubbleNestedEffectDurations(\n            prevProfilerEffectDuration,\n          );\n        }\n\n        commitProfilerUpdate(\n          finishedWork,\n          current,\n          commitStartTime,\n          profilerInstance.effectDuration,\n        );\n      } else {\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          includeWorkInProgressEffects,\n        );\n      }\n      break;\n    }\n    case ActivityComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        includeWorkInProgressEffects,\n      );\n\n      if (includeWorkInProgressEffects && flags & Update) {\n        // TODO: Delete this feature.\n        commitActivityHydrationCallbacks(finishedRoot, finishedWork);\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        includeWorkInProgressEffects,\n      );\n\n      if (includeWorkInProgressEffects && flags & Update) {\n        // TODO: Delete this feature.\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const offscreenState                 = finishedWork.memoizedState;\n      const isHidden = offscreenState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n      } else {\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          includeWorkInProgressEffects,\n        );\n      }\n      // TODO: Check flags & Ref\n      safelyAttachRef(finishedWork, finishedWork.return);\n      break;\n    }\n    case ViewTransitionComponent: {\n      if (enableViewTransition) {\n        recursivelyTraverseReappearLayoutEffects(\n          finishedRoot,\n          finishedWork,\n          includeWorkInProgressEffects,\n        );\n        if (__DEV__) {\n          if (flags & ViewTransitionNamedStatic) {\n            trackNamedViewTransition(finishedWork);\n          }\n        }\n        safelyAttachRef(finishedWork, finishedWork.return);\n        break;\n      }\n      break;\n    }\n    case Fragment: {\n      if (enableFragmentRefs) {\n        safelyAttachRef(finishedWork, finishedWork.return);\n      }\n      // Fallthrough\n    }\n    default: {\n      recursivelyTraverseReappearLayoutEffects(\n        finishedRoot,\n        finishedWork,\n        includeWorkInProgressEffects,\n      );\n      break;\n    }\n  }\n\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    enableComponentPerformanceTrack &&\n    (finishedWork.mode & ProfileMode) !== NoMode &&\n    componentEffectStartTime >= 0 &&\n    componentEffectEndTime >= 0 &&\n    componentEffectDuration > 0.05\n  ) {\n    logComponentEffect(\n      finishedWork,\n      componentEffectStartTime,\n      componentEffectEndTime,\n      componentEffectDuration,\n      componentEffectErrors,\n    );\n  }\n\n  popComponentEffectStart(prevEffectStart);\n  popComponentEffectDuration(prevEffectDuration);\n  popComponentEffectErrors(prevEffectErrors);\n}\n\nfunction recursivelyTraverseReappearLayoutEffects(\n  finishedRoot           ,\n  parentFiber       ,\n  includeWorkInProgressEffects         ,\n) {\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  const childShouldIncludeWorkInProgressEffects =\n    includeWorkInProgressEffects &&\n    (parentFiber.subtreeFlags & LayoutMask) !== NoFlags;\n\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n  let child = parentFiber.child;\n  while (child !== null) {\n    const current = child.alternate;\n    reappearLayoutEffects(\n      finishedRoot,\n      current,\n      child,\n      childShouldIncludeWorkInProgressEffects,\n    );\n    child = child.sibling;\n  }\n}\n\nfunction commitOffscreenPassiveMountEffects(\n  current              ,\n  finishedWork       ,\n  instance                   ,\n) {\n  let previousCache               = null;\n  if (\n    current !== null &&\n    current.memoizedState !== null &&\n    current.memoizedState.cachePool !== null\n  ) {\n    previousCache = current.memoizedState.cachePool.pool;\n  }\n  let nextCache               = null;\n  if (\n    finishedWork.memoizedState !== null &&\n    finishedWork.memoizedState.cachePool !== null\n  ) {\n    nextCache = finishedWork.memoizedState.cachePool.pool;\n  }\n  // Retain/release the cache used for pending (suspended) nodes.\n  // Note that this is only reached in the non-suspended/visible case:\n  // when the content is suspended/hidden, the retain/release occurs\n  // via the parent Suspense component (see case above).\n  if (nextCache !== previousCache) {\n    if (nextCache != null) {\n      retainCache(nextCache);\n    }\n    if (previousCache != null) {\n      releaseCache(previousCache);\n    }\n  }\n\n  if (enableTransitionTracing) {\n    // TODO: Pre-rendering should not be counted as part of a transition. We\n    // may add separate logs for pre-rendering, but it's not part of the\n    // primary metrics.\n    const offscreenState                 = finishedWork.memoizedState;\n    const queue                        = (finishedWork.updateQueue     );\n\n    const isHidden = offscreenState !== null;\n    if (queue !== null) {\n      if (isHidden) {\n        const transitions = queue.transitions;\n        if (transitions !== null) {\n          transitions.forEach(transition => {\n            // Add all the transitions saved in the update queue during\n            // the render phase (ie the transitions associated with this boundary)\n            // into the transitions set.\n            if (instance._transitions === null) {\n              instance._transitions = new Set();\n            }\n            instance._transitions.add(transition);\n          });\n        }\n\n        const markerInstances = queue.markerInstances;\n        if (markerInstances !== null) {\n          markerInstances.forEach(markerInstance => {\n            const markerTransitions = markerInstance.transitions;\n            // There should only be a few tracing marker transitions because\n            // they should be only associated with the transition that\n            // caused them\n            if (markerTransitions !== null) {\n              markerTransitions.forEach(transition => {\n                if (instance._transitions === null) {\n                  instance._transitions = new Set();\n                } else if (instance._transitions.has(transition)) {\n                  if (markerInstance.pendingBoundaries === null) {\n                    markerInstance.pendingBoundaries = new Map();\n                  }\n                  if (instance._pendingMarkers === null) {\n                    instance._pendingMarkers = new Set();\n                  }\n\n                  instance._pendingMarkers.add(markerInstance);\n                }\n              });\n            }\n          });\n        }\n      }\n\n      finishedWork.updateQueue = null;\n    }\n\n    commitTransitionProgress(finishedWork);\n\n    // TODO: Refactor this into an if/else branch\n    if (!isHidden) {\n      instance._transitions = null;\n      instance._pendingMarkers = null;\n    }\n  }\n}\n\nfunction commitCachePassiveMountEffect(\n  current              ,\n  finishedWork       ,\n) {\n  let previousCache               = null;\n  if (finishedWork.alternate !== null) {\n    previousCache = finishedWork.alternate.memoizedState.cache;\n  }\n  const nextCache = finishedWork.memoizedState.cache;\n  // Retain/release the cache. In theory the cache component\n  // could be \"borrowing\" a cache instance owned by some parent,\n  // in which case we could avoid retaining/releasing. But it\n  // is non-trivial to determine when that is the case, so we\n  // always retain/release.\n  if (nextCache !== previousCache) {\n    retainCache(nextCache);\n    if (previousCache != null) {\n      releaseCache(previousCache);\n    }\n  }\n}\n\nfunction commitTracingMarkerPassiveMountEffect(finishedWork       ) {\n  // Get the transitions that were initiatized during the render\n  // and add a start transition callback for each of them\n  // We will only call this on initial mount of the tracing marker\n  // only if there are no suspense children\n  const instance = finishedWork.stateNode;\n  if (instance.transitions !== null && instance.pendingBoundaries === null) {\n    addMarkerCompleteCallbackToPendingTransition(\n      finishedWork.memoizedProps.name,\n      instance.transitions,\n    );\n    instance.transitions = null;\n    instance.pendingBoundaries = null;\n    instance.aborts = null;\n    instance.name = null;\n  }\n}\n\nexport function commitPassiveMountEffects(\n  root           ,\n  finishedWork       ,\n  committedLanes       ,\n  committedTransitions                          ,\n  renderEndTime        , // Profiling-only\n)       {\n  resetComponentEffectTimers();\n\n  commitPassiveMountOnFiber(\n    root,\n    finishedWork,\n    committedLanes,\n    committedTransitions,\n    enableProfilerTimer && enableComponentPerformanceTrack ? renderEndTime : 0,\n  );\n}\n\nfunction recursivelyTraversePassiveMountEffects(\n  root           ,\n  parentFiber       ,\n  committedLanes       ,\n  committedTransitions                          ,\n  endTime        , // Profiling-only. The start time of the next Fiber or root completion.\n) {\n  const isViewTransitionEligible =\n    enableViewTransition &&\n    includesOnlyViewTransitionEligibleLanes(committedLanes);\n  // TODO: We could optimize this by marking these with the Passive subtree flag in the render phase.\n  const subtreeMask = isViewTransitionEligible\n    ? PassiveTransitionMask\n    : PassiveMask;\n  if (\n    parentFiber.subtreeFlags & subtreeMask ||\n    // If this subtree rendered with profiling this commit, we need to visit it to log it.\n    (enableProfilerTimer &&\n      enableComponentPerformanceTrack &&\n      parentFiber.actualDuration !== 0 &&\n      (parentFiber.alternate === null ||\n        parentFiber.alternate.child !== parentFiber.child))\n  ) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      if (enableProfilerTimer && enableComponentPerformanceTrack) {\n        const nextSibling = child.sibling;\n        commitPassiveMountOnFiber(\n          root,\n          child,\n          committedLanes,\n          committedTransitions,\n          nextSibling !== null\n            ? ((nextSibling.actualStartTime     )        )\n            : endTime,\n        );\n        child = nextSibling;\n      } else {\n        commitPassiveMountOnFiber(\n          root,\n          child,\n          committedLanes,\n          committedTransitions,\n          0,\n        );\n        child = child.sibling;\n      }\n    }\n  } else if (isViewTransitionEligible) {\n    // We are inside an updated subtree. Any mutations that affected the\n    // parent HostInstance's layout or set of children (such as reorders)\n    // might have also affected the positioning or size of the inner\n    // ViewTransitions. Therefore we need to restore those too.\n    restoreNestedViewTransitions(parentFiber);\n  }\n}\n\nlet inHydratedSubtree = false;\n\nfunction commitPassiveMountOnFiber(\n  finishedRoot           ,\n  finishedWork       ,\n  committedLanes       ,\n  committedTransitions                          ,\n  endTime        , // Profiling-only. The start time of the next Fiber or root completion.\n)       {\n  const prevEffectStart = pushComponentEffectStart();\n  const prevEffectDuration = pushComponentEffectDuration();\n  const prevEffectErrors = pushComponentEffectErrors();\n\n  const isViewTransitionEligible = enableViewTransition\n    ? includesOnlyViewTransitionEligibleLanes(committedLanes)\n    : false;\n\n  if (\n    isViewTransitionEligible &&\n    finishedWork.alternate === null &&\n    // We can't use the Placement flag here because it gets reset earlier. Instead,\n    // we check if this is the root of the insertion by checking if the parent\n    // was previous existing.\n    finishedWork.return !== null &&\n    finishedWork.return.alternate !== null\n  ) {\n    // This was a new mount. This means we could've triggered an enter animation on\n    // the content. Restore the view transitions if there were any assigned in the\n    // snapshot phase.\n    restoreEnterOrExitViewTransitions(finishedWork);\n  }\n\n  // When updating this function, also update reconnectPassiveEffects, which does\n  // most of the same things when an offscreen tree goes from hidden -> visible,\n  // or when toggling effects inside a hidden tree.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      // If this component rendered in Profiling mode (DEV or in Profiler component) then log its\n      // render time. We do this after the fact in the passive effect to avoid the overhead of this\n      // getting in the way of the render characteristics and avoid the overhead of unwinding\n      // uncommitted renders.\n      if (\n        enableProfilerTimer &&\n        enableComponentPerformanceTrack &&\n        (finishedWork.mode & ProfileMode) !== NoMode &&\n        ((finishedWork.actualStartTime     )        ) > 0 &&\n        (finishedWork.flags & PerformedWork) !== NoFlags\n      ) {\n        logComponentRender(\n          finishedWork,\n          ((finishedWork.actualStartTime     )        ),\n          endTime,\n          inHydratedSubtree,\n        );\n      }\n\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        endTime,\n      );\n      if (flags & Passive) {\n        commitHookPassiveMountEffects(\n          finishedWork,\n          HookPassive | HookHasEffect,\n        );\n      }\n      break;\n    }\n    case ClassComponent: {\n      // If this component rendered in Profiling mode (DEV or in Profiler component) then log its\n      // render time. We do this after the fact in the passive effect to avoid the overhead of this\n      // getting in the way of the render characteristics and avoid the overhead of unwinding\n      // uncommitted renders.\n      if (\n        enableProfilerTimer &&\n        enableComponentPerformanceTrack &&\n        (finishedWork.mode & ProfileMode) !== NoMode &&\n        ((finishedWork.actualStartTime     )        ) > 0\n      ) {\n        if ((finishedWork.flags & DidCapture) !== NoFlags) {\n          logComponentErrored(\n            finishedWork,\n            ((finishedWork.actualStartTime     )        ),\n            endTime,\n            // TODO: The captured values are all hidden inside the updater/callback closures so\n            // we can't get to the errors but they're there so we should be able to log them.\n            [],\n          );\n        } else if ((finishedWork.flags & PerformedWork) !== NoFlags) {\n          logComponentRender(\n            finishedWork,\n            ((finishedWork.actualStartTime     )        ),\n            endTime,\n            inHydratedSubtree,\n          );\n        }\n      }\n\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        endTime,\n      );\n      break;\n    }\n    case HostRoot: {\n      const prevProfilerEffectDuration = pushNestedEffectDurations();\n\n      const wasInHydratedSubtree = inHydratedSubtree;\n      if (enableProfilerTimer && enableComponentPerformanceTrack) {\n        // Detect if this was a hydration commit by look at if the previous state was\n        // dehydrated and this wasn't a forced client render.\n        inHydratedSubtree =\n          finishedWork.alternate !== null &&\n          (finishedWork.alternate.memoizedState           ).isDehydrated &&\n          (finishedWork.flags & ForceClientRender) === NoFlags;\n      }\n\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        endTime,\n      );\n\n      if (enableProfilerTimer && enableComponentPerformanceTrack) {\n        inHydratedSubtree = wasInHydratedSubtree;\n      }\n\n      if (isViewTransitionEligible) {\n        if (supportsMutation) {\n          restoreRootViewTransitionName(finishedRoot.containerInfo);\n        }\n      }\n\n      if (flags & Passive) {\n        let previousCache               = null;\n        if (finishedWork.alternate !== null) {\n          previousCache = finishedWork.alternate.memoizedState.cache;\n        }\n        const nextCache = finishedWork.memoizedState.cache;\n        // Retain/release the root cache.\n        // Note that on initial mount, previousCache and nextCache will be the same\n        // and this retain won't occur. To counter this, we instead retain the HostRoot's\n        // initial cache when creating the root itself (see createFiberRoot() in\n        // ReactFiberRoot.js). Subsequent updates that change the cache are reflected\n        // here, such that previous/next caches are retained correctly.\n        if (nextCache !== previousCache) {\n          retainCache(nextCache);\n          if (previousCache != null) {\n            releaseCache(previousCache);\n          }\n        }\n\n        if (enableTransitionTracing) {\n          // Get the transitions that were initiatized during the render\n          // and add a start transition callback for each of them\n          const root            = finishedWork.stateNode;\n          const incompleteTransitions = root.incompleteTransitions;\n          // Initial render\n          if (committedTransitions !== null) {\n            committedTransitions.forEach(transition => {\n              addTransitionStartCallbackToPendingTransition(transition);\n            });\n\n            clearTransitionsForLanes(finishedRoot, committedLanes);\n          }\n\n          incompleteTransitions.forEach((markerInstance, transition) => {\n            const pendingBoundaries = markerInstance.pendingBoundaries;\n            if (pendingBoundaries === null || pendingBoundaries.size === 0) {\n              if (markerInstance.aborts === null) {\n                addTransitionCompleteCallbackToPendingTransition(transition);\n              }\n              incompleteTransitions.delete(transition);\n            }\n          });\n\n          clearTransitionsForLanes(finishedRoot, committedLanes);\n        }\n      }\n      if (enableProfilerTimer && enableProfilerCommitHooks) {\n        finishedRoot.passiveEffectDuration += popNestedEffectDurations(\n          prevProfilerEffectDuration,\n        );\n      }\n      break;\n    }\n    case Profiler: {\n      // Only Profilers with work in their subtree will have a Passive effect scheduled.\n      if (flags & Passive) {\n        const prevProfilerEffectDuration = pushNestedEffectDurations();\n\n        recursivelyTraversePassiveMountEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          endTime,\n        );\n\n        const profilerInstance = finishedWork.stateNode;\n\n        if (enableProfilerTimer && enableProfilerCommitHooks) {\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          profilerInstance.passiveEffectDuration += bubbleNestedEffectDurations(\n            prevProfilerEffectDuration,\n          );\n        }\n\n        commitProfilerPostCommit(\n          finishedWork,\n          finishedWork.alternate,\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          commitStartTime,\n          profilerInstance.passiveEffectDuration,\n        );\n      } else {\n        recursivelyTraversePassiveMountEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          endTime,\n        );\n      }\n      break;\n    }\n    case ActivityComponent: {\n      const wasInHydratedSubtree = inHydratedSubtree;\n      if (enableProfilerTimer && enableComponentPerformanceTrack) {\n        const prevState                       =\n          finishedWork.alternate !== null\n            ? finishedWork.alternate.memoizedState\n            : null;\n        const nextState                       = finishedWork.memoizedState;\n        if (prevState !== null && nextState === null) {\n          // This was dehydrated but is no longer dehydrated. We may have now either hydrated it\n          // or client rendered it.\n          const deletions = finishedWork.deletions;\n          if (\n            deletions !== null &&\n            deletions.length > 0 &&\n            deletions[0].tag === DehydratedFragment\n          ) {\n            // This was an abandoned hydration that deleted the dehydrated fragment. That means we\n            // are not hydrating this Suspense boundary.\n            inHydratedSubtree = false;\n            const hydrationErrors = prevState.hydrationErrors;\n            // If there were no hydration errors, that suggests that this was an intentional client\n            // rendered boundary. Such as postpone.\n            if (hydrationErrors !== null) {\n              const startTime         = (finishedWork.actualStartTime     );\n              logComponentErrored(\n                finishedWork,\n                startTime,\n                endTime,\n                hydrationErrors,\n              );\n            }\n          } else {\n            // If any children committed they were hydrated.\n            inHydratedSubtree = true;\n          }\n        } else {\n          inHydratedSubtree = false;\n        }\n      }\n\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        endTime,\n      );\n\n      if (enableProfilerTimer && enableComponentPerformanceTrack) {\n        inHydratedSubtree = wasInHydratedSubtree;\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      const wasInHydratedSubtree = inHydratedSubtree;\n      if (enableProfilerTimer && enableComponentPerformanceTrack) {\n        const prevState                       =\n          finishedWork.alternate !== null\n            ? finishedWork.alternate.memoizedState\n            : null;\n        const nextState                       = finishedWork.memoizedState;\n        if (\n          prevState !== null &&\n          prevState.dehydrated !== null &&\n          (nextState === null || nextState.dehydrated === null)\n        ) {\n          // This was dehydrated but is no longer dehydrated. We may have now either hydrated it\n          // or client rendered it.\n          const deletions = finishedWork.deletions;\n          if (\n            deletions !== null &&\n            deletions.length > 0 &&\n            deletions[0].tag === DehydratedFragment\n          ) {\n            // This was an abandoned hydration that deleted the dehydrated fragment. That means we\n            // are not hydrating this Suspense boundary.\n            inHydratedSubtree = false;\n            const hydrationErrors = prevState.hydrationErrors;\n            // If there were no hydration errors, that suggests that this was an intentional client\n            // rendered boundary. Such as postpone.\n            if (hydrationErrors !== null) {\n              const startTime         = (finishedWork.actualStartTime     );\n              logComponentErrored(\n                finishedWork,\n                startTime,\n                endTime,\n                hydrationErrors,\n              );\n            }\n          } else {\n            // If any children committed they were hydrated.\n            inHydratedSubtree = true;\n          }\n        } else {\n          inHydratedSubtree = false;\n        }\n      }\n\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        endTime,\n      );\n\n      if (enableProfilerTimer && enableComponentPerformanceTrack) {\n        inHydratedSubtree = wasInHydratedSubtree;\n      }\n      break;\n    }\n    case LegacyHiddenComponent: {\n      if (enableLegacyHidden) {\n        recursivelyTraversePassiveMountEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          endTime,\n        );\n\n        if (flags & Passive) {\n          const current = finishedWork.alternate;\n          const instance                    = finishedWork.stateNode;\n          commitOffscreenPassiveMountEffects(current, finishedWork, instance);\n        }\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      // TODO: Pass `current` as argument to this function\n      const instance                    = finishedWork.stateNode;\n      const current = finishedWork.alternate;\n      const nextState                        = finishedWork.memoizedState;\n\n      const isHidden = nextState !== null;\n\n      if (isHidden) {\n        if (\n          isViewTransitionEligible &&\n          current !== null &&\n          current.memoizedState === null\n        ) {\n          // Content is now hidden but wasn't before. This means we could've\n          // triggered an exit animation on the content. Restore the view\n          // transitions if there were any assigned in the snapshot phase.\n          restoreEnterOrExitViewTransitions(current);\n        }\n        if (instance._visibility & OffscreenPassiveEffectsConnected) {\n          // The effects are currently connected. Update them.\n          recursivelyTraversePassiveMountEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n            endTime,\n          );\n        } else {\n          if (disableLegacyMode || finishedWork.mode & ConcurrentMode) {\n            // The effects are currently disconnected. Since the tree is hidden,\n            // don't connect them. This also applies to the initial render.\n            // \"Atomic\" effects are ones that need to fire on every commit,\n            // even during pre-rendering. An example is updating the reference\n            // count on cache instances.\n            recursivelyTraverseAtomicPassiveEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions,\n              endTime,\n            );\n          } else {\n            // Legacy Mode: Fire the effects even if the tree is hidden.\n            instance._visibility |= OffscreenPassiveEffectsConnected;\n            recursivelyTraversePassiveMountEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions,\n              endTime,\n            );\n          }\n        }\n      } else {\n        // Tree is visible\n        if (\n          isViewTransitionEligible &&\n          current !== null &&\n          current.memoizedState !== null\n        ) {\n          // Content is now visible but wasn't before. This means we could've\n          // triggered an enter animation on the content. Restore the view\n          // transitions if there were any assigned in the snapshot phase.\n          restoreEnterOrExitViewTransitions(finishedWork);\n        }\n        if (instance._visibility & OffscreenPassiveEffectsConnected) {\n          // The effects are currently connected. Update them.\n          recursivelyTraversePassiveMountEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n            endTime,\n          );\n        } else {\n          // The effects are currently disconnected. Reconnect them, while also\n          // firing effects inside newly mounted trees. This also applies to\n          // the initial render.\n          instance._visibility |= OffscreenPassiveEffectsConnected;\n\n          const includeWorkInProgressEffects =\n            (finishedWork.subtreeFlags & PassiveMask) !== NoFlags;\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n            includeWorkInProgressEffects,\n            endTime,\n          );\n\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            enableComponentPerformanceTrack &&\n            (finishedWork.mode & ProfileMode) !== NoMode &&\n            !inHydratedSubtree\n          ) {\n            // Log the reappear in the render phase.\n            const startTime = ((finishedWork.actualStartTime     )        );\n            if (startTime >= 0 && endTime - startTime > 0.05) {\n              logComponentReappeared(finishedWork, startTime, endTime);\n            }\n            if (\n              componentEffectStartTime >= 0 &&\n              componentEffectEndTime >= 0 &&\n              componentEffectEndTime - componentEffectStartTime > 0.05\n            ) {\n              logComponentReappeared(\n                finishedWork,\n                componentEffectStartTime,\n                componentEffectEndTime,\n              );\n            }\n          }\n        }\n      }\n\n      if (flags & Passive) {\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\n      }\n      break;\n    }\n    case CacheComponent: {\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        endTime,\n      );\n      if (flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        commitCachePassiveMountEffect(current, finishedWork);\n      }\n      break;\n    }\n    case ViewTransitionComponent: {\n      if (enableViewTransition) {\n        if (isViewTransitionEligible) {\n          const current = finishedWork.alternate;\n          if (current === null) {\n            // This is a new mount. We should have handled this as part of the\n            // Placement effect or it is deeper inside a entering transition.\n          } else {\n            // Something mutated within this subtree. This might have caused\n            // something to cross-fade if we didn't already cancel it.\n            // If not, restore it.\n            restoreUpdateViewTransition(current, finishedWork);\n          }\n        }\n        recursivelyTraversePassiveMountEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          endTime,\n        );\n        break;\n      }\n      // Fallthrough\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        recursivelyTraversePassiveMountEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          endTime,\n        );\n        if (flags & Passive) {\n          commitTracingMarkerPassiveMountEffect(finishedWork);\n        }\n        break;\n      }\n      // Intentional fallthrough to next branch\n    }\n    default: {\n      recursivelyTraversePassiveMountEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        endTime,\n      );\n      break;\n    }\n  }\n\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    enableComponentPerformanceTrack &&\n    (finishedWork.mode & ProfileMode) !== NoMode\n  ) {\n    const isMount =\n      !inHydratedSubtree &&\n      finishedWork.alternate === null &&\n      finishedWork.return !== null &&\n      finishedWork.return.alternate !== null;\n    if (isMount) {\n      // Log the mount in the render phase.\n      const startTime = ((finishedWork.actualStartTime     )        );\n      if (startTime >= 0 && endTime - startTime > 0.05) {\n        logComponentMount(finishedWork, startTime, endTime);\n      }\n    }\n    if (componentEffectStartTime >= 0 && componentEffectEndTime >= 0) {\n      if (componentEffectDuration > 0.05) {\n        logComponentEffect(\n          finishedWork,\n          componentEffectStartTime,\n          componentEffectEndTime,\n          componentEffectDuration,\n          componentEffectErrors,\n        );\n      }\n      if (isMount && componentEffectEndTime - componentEffectStartTime > 0.05) {\n        logComponentMount(\n          finishedWork,\n          componentEffectStartTime,\n          componentEffectEndTime,\n        );\n      }\n    }\n  }\n\n  popComponentEffectStart(prevEffectStart);\n  popComponentEffectDuration(prevEffectDuration);\n  popComponentEffectErrors(prevEffectErrors);\n}\n\nfunction recursivelyTraverseReconnectPassiveEffects(\n  finishedRoot           ,\n  parentFiber       ,\n  committedLanes       ,\n  committedTransitions                          ,\n  includeWorkInProgressEffects         ,\n  endTime        ,\n) {\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  const childShouldIncludeWorkInProgressEffects =\n    includeWorkInProgressEffects &&\n    (parentFiber.subtreeFlags & PassiveMask) !== NoFlags;\n\n  // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n  let child = parentFiber.child;\n  while (child !== null) {\n    if (enableProfilerTimer && enableComponentPerformanceTrack) {\n      const nextSibling = child.sibling;\n      reconnectPassiveEffects(\n        finishedRoot,\n        child,\n        committedLanes,\n        committedTransitions,\n        childShouldIncludeWorkInProgressEffects,\n        nextSibling !== null\n          ? ((nextSibling.actualStartTime     )        )\n          : endTime,\n      );\n      child = nextSibling;\n    } else {\n      reconnectPassiveEffects(\n        finishedRoot,\n        child,\n        committedLanes,\n        committedTransitions,\n        childShouldIncludeWorkInProgressEffects,\n        endTime,\n      );\n      child = child.sibling;\n    }\n  }\n}\n\nexport function reconnectPassiveEffects(\n  finishedRoot           ,\n  finishedWork       ,\n  committedLanes       ,\n  committedTransitions                          ,\n  // This function visits both newly finished work and nodes that were re-used\n  // from a previously committed tree. We cannot check non-static flags if the\n  // node was reused.\n  includeWorkInProgressEffects         ,\n  endTime        , // Profiling-only. The start time of the next Fiber or root completion.\n) {\n  const prevEffectStart = pushComponentEffectStart();\n  const prevEffectDuration = pushComponentEffectDuration();\n  const prevEffectErrors = pushComponentEffectErrors();\n  // If this component rendered in Profiling mode (DEV or in Profiler component) then log its\n  // render time. We do this after the fact in the passive effect to avoid the overhead of this\n  // getting in the way of the render characteristics and avoid the overhead of unwinding\n  // uncommitted renders.\n  if (\n    enableProfilerTimer &&\n    enableComponentPerformanceTrack &&\n    (finishedWork.mode & ProfileMode) !== NoMode &&\n    ((finishedWork.actualStartTime     )        ) > 0 &&\n    (finishedWork.flags & PerformedWork) !== NoFlags\n  ) {\n    logComponentRender(\n      finishedWork,\n      ((finishedWork.actualStartTime     )        ),\n      endTime,\n      inHydratedSubtree,\n    );\n  }\n\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraverseReconnectPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        includeWorkInProgressEffects,\n        endTime,\n      );\n      // TODO: Check for PassiveStatic flag\n      commitHookPassiveMountEffects(finishedWork, HookPassive);\n      break;\n    }\n    // Unlike commitPassiveMountOnFiber, we don't need to handle HostRoot\n    // because this function only visits nodes that are inside an\n    // Offscreen fiber.\n    // case HostRoot: {\n    //  ...\n    // }\n    case LegacyHiddenComponent: {\n      if (enableLegacyHidden) {\n        recursivelyTraverseReconnectPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          includeWorkInProgressEffects,\n          endTime,\n        );\n\n        if (includeWorkInProgressEffects && flags & Passive) {\n          // TODO: Pass `current` as argument to this function\n          const current               = finishedWork.alternate;\n          const instance                    = finishedWork.stateNode;\n          commitOffscreenPassiveMountEffects(current, finishedWork, instance);\n        }\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const instance                    = finishedWork.stateNode;\n      const nextState                        = finishedWork.memoizedState;\n\n      const isHidden = nextState !== null;\n\n      if (isHidden) {\n        if (instance._visibility & OffscreenPassiveEffectsConnected) {\n          // The effects are currently connected. Update them.\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork,\n            committedLanes,\n            committedTransitions,\n            includeWorkInProgressEffects,\n            endTime,\n          );\n        } else {\n          if (disableLegacyMode || finishedWork.mode & ConcurrentMode) {\n            // The effects are currently disconnected. Since the tree is hidden,\n            // don't connect them. This also applies to the initial render.\n            // \"Atomic\" effects are ones that need to fire on every commit,\n            // even during pre-rendering. An example is updating the reference\n            // count on cache instances.\n            recursivelyTraverseAtomicPassiveEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions,\n              endTime,\n            );\n          } else {\n            // Legacy Mode: Fire the effects even if the tree is hidden.\n            instance._visibility |= OffscreenPassiveEffectsConnected;\n            recursivelyTraverseReconnectPassiveEffects(\n              finishedRoot,\n              finishedWork,\n              committedLanes,\n              committedTransitions,\n              includeWorkInProgressEffects,\n              endTime,\n            );\n          }\n        }\n      } else {\n        // Tree is visible\n\n        // Since we're already inside a reconnecting tree, it doesn't matter\n        // whether the effects are currently connected. In either case, we'll\n        // continue traversing the tree and firing all the effects.\n        //\n        // We do need to set the \"connected\" flag on the instance, though.\n        instance._visibility |= OffscreenPassiveEffectsConnected;\n\n        recursivelyTraverseReconnectPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          includeWorkInProgressEffects,\n          endTime,\n        );\n      }\n\n      if (includeWorkInProgressEffects && flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current               = finishedWork.alternate;\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\n      }\n      break;\n    }\n    case CacheComponent: {\n      recursivelyTraverseReconnectPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        includeWorkInProgressEffects,\n        endTime,\n      );\n      if (includeWorkInProgressEffects && flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        commitCachePassiveMountEffect(current, finishedWork);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        recursivelyTraverseReconnectPassiveEffects(\n          finishedRoot,\n          finishedWork,\n          committedLanes,\n          committedTransitions,\n          includeWorkInProgressEffects,\n          endTime,\n        );\n        if (includeWorkInProgressEffects && flags & Passive) {\n          commitTracingMarkerPassiveMountEffect(finishedWork);\n        }\n        break;\n      }\n      // Intentional fallthrough to next branch\n    }\n    default: {\n      recursivelyTraverseReconnectPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        includeWorkInProgressEffects,\n        endTime,\n      );\n      break;\n    }\n  }\n\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    enableComponentPerformanceTrack &&\n    (finishedWork.mode & ProfileMode) !== NoMode &&\n    componentEffectStartTime >= 0 &&\n    componentEffectEndTime >= 0 &&\n    componentEffectDuration > 0.05\n  ) {\n    logComponentEffect(\n      finishedWork,\n      componentEffectStartTime,\n      componentEffectEndTime,\n      componentEffectDuration,\n      componentEffectErrors,\n    );\n  }\n\n  popComponentEffectStart(prevEffectStart);\n  popComponentEffectDuration(prevEffectDuration);\n  popComponentEffectErrors(prevEffectErrors);\n}\n\nfunction recursivelyTraverseAtomicPassiveEffects(\n  finishedRoot           ,\n  parentFiber       ,\n  committedLanes       ,\n  committedTransitions                          ,\n  endTime        , // Profiling-only. The start time of the next Fiber or root completion.\n) {\n  // \"Atomic\" effects are ones that need to fire on every commit, even during\n  // pre-rendering. We call this function when traversing a hidden tree whose\n  // regular effects are currently disconnected.\n  // TODO: Add special flag for atomic effects\n  if (parentFiber.subtreeFlags & PassiveMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      if (enableProfilerTimer && enableComponentPerformanceTrack) {\n        const nextSibling = child.sibling;\n        commitAtomicPassiveEffects(\n          finishedRoot,\n          child,\n          committedLanes,\n          committedTransitions,\n          nextSibling !== null\n            ? ((nextSibling.actualStartTime     )        )\n            : endTime,\n        );\n        child = nextSibling;\n      } else {\n        commitAtomicPassiveEffects(\n          finishedRoot,\n          child,\n          committedLanes,\n          committedTransitions,\n          endTime,\n        );\n        child = child.sibling;\n      }\n    }\n  }\n}\n\nfunction commitAtomicPassiveEffects(\n  finishedRoot           ,\n  finishedWork       ,\n  committedLanes       ,\n  committedTransitions                          ,\n  endTime        , // Profiling-only. The start time of the next Fiber or root completion.\n) {\n  // If this component rendered in Profiling mode (DEV or in Profiler component) then log its\n  // render time. A render can happen even if the subtree is offscreen.\n  if (\n    enableProfilerTimer &&\n    enableComponentPerformanceTrack &&\n    (finishedWork.mode & ProfileMode) !== NoMode &&\n    ((finishedWork.actualStartTime     )        ) > 0 &&\n    (finishedWork.flags & PerformedWork) !== NoFlags\n  ) {\n    logComponentRender(\n      finishedWork,\n      ((finishedWork.actualStartTime     )        ),\n      endTime,\n      inHydratedSubtree,\n    );\n  }\n\n  // \"Atomic\" effects are ones that need to fire on every commit, even during\n  // pre-rendering. We call this function when traversing a hidden tree whose\n  // regular effects are currently disconnected.\n  const flags = finishedWork.flags;\n  switch (finishedWork.tag) {\n    case OffscreenComponent: {\n      recursivelyTraverseAtomicPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        endTime,\n      );\n      if (flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        const instance                    = finishedWork.stateNode;\n        commitOffscreenPassiveMountEffects(current, finishedWork, instance);\n      }\n      break;\n    }\n    case CacheComponent: {\n      recursivelyTraverseAtomicPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        endTime,\n      );\n      if (flags & Passive) {\n        // TODO: Pass `current` as argument to this function\n        const current = finishedWork.alternate;\n        commitCachePassiveMountEffect(current, finishedWork);\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseAtomicPassiveEffects(\n        finishedRoot,\n        finishedWork,\n        committedLanes,\n        committedTransitions,\n        endTime,\n      );\n      break;\n    }\n  }\n}\n\nexport function commitPassiveUnmountEffects(finishedWork       )       {\n  resetComponentEffectTimers();\n  commitPassiveUnmountOnFiber(finishedWork);\n}\n\n// If we're inside a brand new tree, or a tree that was already visible, then we\n// should only suspend host components that have a ShouldSuspendCommit flag.\n// Components without it haven't changed since the last commit, so we can skip\n// over those.\n//\n// When we enter a tree that is being revealed (going from hidden -> visible),\n// we need to suspend _any_ component that _may_ suspend. Even if they're\n// already in the \"current\" tree. Because their visibility has changed, the\n// browser may not have prerendered them yet. So we check the MaySuspendCommit\n// flag instead.\n//\n// Note that MaySuspendCommit and ShouldSuspendCommit also includes named\n// ViewTransitions so that we know to also visit those to collect appearing\n// pairs.\nlet suspenseyCommitFlag = ShouldSuspendCommit;\nexport function accumulateSuspenseyCommit(\n  finishedWork       ,\n  committedLanes       ,\n)       {\n  resetAppearingViewTransitions();\n  accumulateSuspenseyCommitOnFiber(finishedWork, committedLanes);\n}\n\nfunction recursivelyAccumulateSuspenseyCommit(\n  parentFiber       ,\n  committedLanes       ,\n)       {\n  if (parentFiber.subtreeFlags & suspenseyCommitFlag) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      accumulateSuspenseyCommitOnFiber(child, committedLanes);\n      child = child.sibling;\n    }\n  }\n}\n\nfunction accumulateSuspenseyCommitOnFiber(fiber       , committedLanes       ) {\n  switch (fiber.tag) {\n    case HostHoistable: {\n      recursivelyAccumulateSuspenseyCommit(fiber, committedLanes);\n      if (fiber.flags & suspenseyCommitFlag) {\n        if (fiber.memoizedState !== null) {\n          suspendResource(\n            // This should always be set by visiting HostRoot first\n            (currentHoistableRoot     ),\n            fiber.memoizedState,\n            fiber.memoizedProps,\n          );\n        } else {\n          const instance = fiber.stateNode;\n          const type = fiber.type;\n          const props = fiber.memoizedProps;\n          // TODO: Allow sync lanes to suspend too with an opt-in.\n          if (\n            includesOnlySuspenseyCommitEligibleLanes(committedLanes) ||\n            maySuspendCommitInSyncRender(type, props)\n          ) {\n            suspendInstance(instance, type, props);\n          }\n        }\n      }\n      break;\n    }\n    case HostComponent: {\n      recursivelyAccumulateSuspenseyCommit(fiber, committedLanes);\n      if (fiber.flags & suspenseyCommitFlag) {\n        const instance = fiber.stateNode;\n        const type = fiber.type;\n        const props = fiber.memoizedProps;\n        // TODO: Allow sync lanes to suspend too with an opt-in.\n        if (\n          includesOnlySuspenseyCommitEligibleLanes(committedLanes) ||\n          maySuspendCommitInSyncRender(type, props)\n        ) {\n          suspendInstance(instance, type, props);\n        }\n      }\n      break;\n    }\n    case HostRoot:\n    case HostPortal: {\n      if (supportsResources) {\n        const previousHoistableRoot = currentHoistableRoot;\n        const container            = fiber.stateNode.containerInfo;\n        currentHoistableRoot = getHoistableRoot(container);\n\n        recursivelyAccumulateSuspenseyCommit(fiber, committedLanes);\n        currentHoistableRoot = previousHoistableRoot;\n      } else {\n        recursivelyAccumulateSuspenseyCommit(fiber, committedLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const isHidden = (fiber.memoizedState                       ) !== null;\n      if (isHidden) {\n        // Don't suspend in hidden trees\n      } else {\n        const current = fiber.alternate;\n        const wasHidden =\n          current !== null &&\n          (current.memoizedState                       ) !== null;\n        if (wasHidden) {\n          // This tree is being revealed. Visit all newly visible suspensey\n          // instances, even if they're in the current tree.\n          const prevFlags = suspenseyCommitFlag;\n          suspenseyCommitFlag = MaySuspendCommit;\n          recursivelyAccumulateSuspenseyCommit(fiber, committedLanes);\n          suspenseyCommitFlag = prevFlags;\n        } else {\n          recursivelyAccumulateSuspenseyCommit(fiber, committedLanes);\n        }\n      }\n      break;\n    }\n    case ViewTransitionComponent: {\n      if (enableViewTransition) {\n        if ((fiber.flags & suspenseyCommitFlag) !== NoFlags) {\n          const props                      = fiber.memoizedProps;\n          const name                   = props.name;\n          if (name != null && name !== 'auto') {\n            // This is a named ViewTransition being mounted or reappearing. Let's add it to\n            // the map so we can match it with deletions later.\n            const state                      = fiber.stateNode;\n            // Reset the pair in case we didn't end up restoring the instance in previous commits.\n            // This shouldn't really happen anymore but just in case. We could maybe add an invariant.\n            state.paired = null;\n            trackAppearingViewTransition(name, state);\n          }\n        }\n        recursivelyAccumulateSuspenseyCommit(fiber, committedLanes);\n        break;\n      }\n      // Fallthrough\n    }\n    default: {\n      recursivelyAccumulateSuspenseyCommit(fiber, committedLanes);\n    }\n  }\n}\n\nfunction detachAlternateSiblings(parentFiber       ) {\n  // A fiber was deleted from this parent fiber, but it's still part of the\n  // previous (alternate) parent fiber's list of children. Because children\n  // are a linked list, an earlier sibling that's still alive will be\n  // connected to the deleted fiber via its `alternate`:\n  //\n  //   live fiber --alternate--> previous live fiber --sibling--> deleted\n  //   fiber\n  //\n  // We can't disconnect `alternate` on nodes that haven't been deleted yet,\n  // but we can disconnect the `sibling` and `child` pointers.\n\n  const previousFiber = parentFiber.alternate;\n  if (previousFiber !== null) {\n    let detachedChild = previousFiber.child;\n    if (detachedChild !== null) {\n      previousFiber.child = null;\n      do {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        const detachedSibling = detachedChild.sibling;\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        detachedChild.sibling = null;\n        detachedChild = detachedSibling;\n      } while (detachedChild !== null);\n    }\n  }\n}\n\nfunction recursivelyTraversePassiveUnmountEffects(parentFiber       )       {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects have fired.\n  const deletions = parentFiber.deletions;\n\n  if ((parentFiber.flags & ChildDeletion) !== NoFlags) {\n    if (deletions !== null) {\n      for (let i = 0; i < deletions.length; i++) {\n        const childToDelete = deletions[i];\n        const prevEffectStart = pushComponentEffectStart();\n        // TODO: Convert this to use recursion\n        nextEffect = childToDelete;\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n          childToDelete,\n          parentFiber,\n        );\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          enableComponentPerformanceTrack &&\n          (childToDelete.mode & ProfileMode) !== NoMode &&\n          componentEffectStartTime >= 0 &&\n          componentEffectEndTime >= 0 &&\n          componentEffectEndTime - componentEffectStartTime > 0.05\n        ) {\n          logComponentUnmount(\n            childToDelete,\n            componentEffectStartTime,\n            componentEffectEndTime,\n          );\n        }\n        popComponentEffectStart(prevEffectStart);\n      }\n    }\n    detachAlternateSiblings(parentFiber);\n  }\n\n  // TODO: Split PassiveMask into separate masks for mount and unmount?\n  if (parentFiber.subtreeFlags & PassiveMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      commitPassiveUnmountOnFiber(child);\n      child = child.sibling;\n    }\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork       )       {\n  const prevEffectStart = pushComponentEffectStart();\n  const prevEffectDuration = pushComponentEffectDuration();\n  const prevEffectErrors = pushComponentEffectErrors();\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n      if (finishedWork.flags & Passive) {\n        commitHookPassiveUnmountEffects(\n          finishedWork,\n          finishedWork.return,\n          HookPassive | HookHasEffect,\n        );\n      }\n      break;\n    }\n    case HostRoot: {\n      const prevProfilerEffectDuration = pushNestedEffectDurations();\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n      if (enableProfilerTimer && enableProfilerCommitHooks) {\n        const finishedRoot            = finishedWork.stateNode;\n        finishedRoot.passiveEffectDuration += popNestedEffectDurations(\n          prevProfilerEffectDuration,\n        );\n      }\n      break;\n    }\n    case Profiler: {\n      const prevProfilerEffectDuration = pushNestedEffectDurations();\n\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n\n      if (enableProfilerTimer && enableProfilerCommitHooks) {\n        const profilerInstance = finishedWork.stateNode;\n        // Propagate layout effect durations to the next nearest Profiler ancestor.\n        // Do not reset these values until the next render so DevTools has a chance to read them first.\n        profilerInstance.passiveEffectDuration += bubbleNestedEffectDurations(\n          prevProfilerEffectDuration,\n        );\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      const instance                    = finishedWork.stateNode;\n      const nextState                        = finishedWork.memoizedState;\n\n      const isHidden = nextState !== null;\n\n      if (\n        isHidden &&\n        instance._visibility & OffscreenPassiveEffectsConnected &&\n        // For backwards compatibility, don't unmount when a tree suspends. In\n        // the future we may change this to unmount after a delay.\n        (finishedWork.return === null ||\n          finishedWork.return.tag !== SuspenseComponent)\n      ) {\n        // The effects are currently connected. Disconnect them.\n        // TODO: Add option or heuristic to delay before disconnecting the\n        // effects. Then if the tree reappears before the delay has elapsed, we\n        // can skip toggling the effects entirely.\n        instance._visibility &= ~OffscreenPassiveEffectsConnected;\n\n        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          enableComponentPerformanceTrack &&\n          (finishedWork.mode & ProfileMode) !== NoMode &&\n          componentEffectStartTime >= 0 &&\n          componentEffectEndTime >= 0 &&\n          componentEffectEndTime - componentEffectStartTime > 0.05\n        ) {\n          logComponentDisappeared(\n            finishedWork,\n            componentEffectStartTime,\n            componentEffectEndTime,\n          );\n        }\n      } else {\n        recursivelyTraversePassiveUnmountEffects(finishedWork);\n      }\n\n      break;\n    }\n    default: {\n      recursivelyTraversePassiveUnmountEffects(finishedWork);\n      break;\n    }\n  }\n\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    enableComponentPerformanceTrack &&\n    (finishedWork.mode & ProfileMode) !== NoMode &&\n    componentEffectStartTime >= 0 &&\n    componentEffectEndTime >= 0 &&\n    componentEffectDuration > 0.05\n  ) {\n    logComponentEffect(\n      finishedWork,\n      componentEffectStartTime,\n      componentEffectEndTime,\n      componentEffectDuration,\n      componentEffectErrors,\n    );\n  }\n\n  popComponentEffectStart(prevEffectStart);\n  popComponentEffectDuration(prevEffectDuration);\n  popComponentEffectErrors(prevEffectErrors);\n}\n\nfunction recursivelyTraverseDisconnectPassiveEffects(parentFiber       )       {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects have fired.\n  const deletions = parentFiber.deletions;\n\n  if ((parentFiber.flags & ChildDeletion) !== NoFlags) {\n    if (deletions !== null) {\n      for (let i = 0; i < deletions.length; i++) {\n        const childToDelete = deletions[i];\n        const prevEffectStart = pushComponentEffectStart();\n\n        // TODO: Convert this to use recursion\n        nextEffect = childToDelete;\n        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n          childToDelete,\n          parentFiber,\n        );\n\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          enableComponentPerformanceTrack &&\n          (childToDelete.mode & ProfileMode) !== NoMode &&\n          componentEffectStartTime >= 0 &&\n          componentEffectEndTime >= 0 &&\n          componentEffectEndTime - componentEffectStartTime > 0.05\n        ) {\n          // While this is inside the disconnect path. This is a deletion within the\n          // disconnected tree. We currently log this for deletions in the mutation\n          // phase since it's shared by the disappear path.\n          logComponentUnmount(\n            childToDelete,\n            componentEffectStartTime,\n            componentEffectEndTime,\n          );\n        }\n        popComponentEffectStart(prevEffectStart);\n      }\n    }\n    detachAlternateSiblings(parentFiber);\n  }\n\n  // TODO: Check PassiveStatic flag\n  let child = parentFiber.child;\n  while (child !== null) {\n    disconnectPassiveEffect(child);\n    child = child.sibling;\n  }\n}\n\nexport function disconnectPassiveEffect(finishedWork       )       {\n  const prevEffectStart = pushComponentEffectStart();\n  const prevEffectDuration = pushComponentEffectDuration();\n  const prevEffectErrors = pushComponentEffectErrors();\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      // TODO: Check PassiveStatic flag\n      commitHookPassiveUnmountEffects(\n        finishedWork,\n        finishedWork.return,\n        HookPassive,\n      );\n      // When disconnecting passive effects, we fire the effects in the same\n      // order as during a deletiong: parent before child\n      recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      break;\n    }\n    case OffscreenComponent: {\n      const instance                    = finishedWork.stateNode;\n      if (instance._visibility & OffscreenPassiveEffectsConnected) {\n        instance._visibility &= ~OffscreenPassiveEffectsConnected;\n        recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      } else {\n        // The effects are already disconnected.\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n      break;\n    }\n  }\n\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    enableComponentPerformanceTrack &&\n    (finishedWork.mode & ProfileMode) !== NoMode &&\n    componentEffectStartTime >= 0 &&\n    componentEffectEndTime >= 0 &&\n    componentEffectDuration > 0.05\n  ) {\n    logComponentEffect(\n      finishedWork,\n      componentEffectStartTime,\n      componentEffectEndTime,\n      componentEffectDuration,\n      componentEffectErrors,\n    );\n  }\n\n  popComponentEffectStart(prevEffectStart);\n  popComponentEffectDuration(prevEffectDuration);\n  popComponentEffectErrors(prevEffectErrors);\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n  deletedSubtreeRoot       ,\n  nearestMountedAncestor              ,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n\n    const child = fiber.child;\n    // TODO: Only traverse subtree if it has a PassiveStatic flag.\n    if (child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n        deletedSubtreeRoot,\n      );\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n  deletedSubtreeRoot       ,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const sibling = fiber.sibling;\n    const returnFiber = fiber.return;\n\n    // Recursively traverse the entire deleted tree and clean up fiber fields.\n    // This is more aggressive than ideal, and the long term goal is to only\n    // have to detach the deleted tree at the root.\n    detachFiberAfterEffects(fiber);\n    if (fiber === deletedSubtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    if (sibling !== null) {\n      sibling.return = returnFiber;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(\n  current       ,\n  nearestMountedAncestor              ,\n)       {\n  const prevEffectStart = pushComponentEffectStart();\n  const prevEffectDuration = pushComponentEffectDuration();\n  const prevEffectErrors = pushComponentEffectErrors();\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      commitHookPassiveUnmountEffects(\n        current,\n        nearestMountedAncestor,\n        HookPassive,\n      );\n      break;\n    }\n    // TODO: run passive unmount effects when unmounting a root.\n    // Because passive unmount effects are not currently run,\n    // the cache instance owned by the root will never be freed.\n    // When effects are run, the cache should be freed here:\n    // case HostRoot: {\n    //   const cache = current.memoizedState.cache;\n    //   releaseCache(cache);\n    //   break;\n    // }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      if (\n        current.memoizedState !== null &&\n        current.memoizedState.cachePool !== null\n      ) {\n        const cache        = current.memoizedState.cachePool.pool;\n        // Retain/release the cache used for pending (suspended) nodes.\n        // Note that this is only reached in the non-suspended/visible case:\n        // when the content is suspended/hidden, the retain/release occurs\n        // via the parent Suspense component (see case above).\n        if (cache != null) {\n          retainCache(cache);\n        }\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      if (enableTransitionTracing) {\n        // We need to mark this fiber's parents as deleted\n        const offscreenFiber        = (current.child     );\n        const instance                    = offscreenFiber.stateNode;\n        const transitions = instance._transitions;\n        if (transitions !== null) {\n          const abortReason = {\n            reason: 'suspense',\n            name: current.memoizedProps.name || null,\n          };\n          if (\n            current.memoizedState === null ||\n            current.memoizedState.dehydrated === null\n          ) {\n            abortParentMarkerTransitionsForDeletedFiber(\n              offscreenFiber,\n              abortReason,\n              transitions,\n              instance,\n              true,\n            );\n\n            if (nearestMountedAncestor !== null) {\n              abortParentMarkerTransitionsForDeletedFiber(\n                nearestMountedAncestor,\n                abortReason,\n                transitions,\n                instance,\n                false,\n              );\n            }\n          }\n        }\n      }\n      break;\n    }\n    case CacheComponent: {\n      const cache = current.memoizedState.cache;\n      releaseCache(cache);\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        // We need to mark this fiber's parents as deleted\n        const instance                        = current.stateNode;\n        const transitions = instance.transitions;\n        if (transitions !== null) {\n          const abortReason = {\n            reason: 'marker',\n            name: current.memoizedProps.name,\n          };\n          abortParentMarkerTransitionsForDeletedFiber(\n            current,\n            abortReason,\n            transitions,\n            null,\n            true,\n          );\n\n          if (nearestMountedAncestor !== null) {\n            abortParentMarkerTransitionsForDeletedFiber(\n              nearestMountedAncestor,\n              abortReason,\n              transitions,\n              null,\n              false,\n            );\n          }\n        }\n      }\n      break;\n    }\n  }\n\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    enableComponentPerformanceTrack &&\n    (current.mode & ProfileMode) !== NoMode &&\n    componentEffectStartTime >= 0 &&\n    componentEffectEndTime >= 0 &&\n    componentEffectDuration > 0.05\n  ) {\n    logComponentEffect(\n      current,\n      componentEffectStartTime,\n      componentEffectEndTime,\n      componentEffectDuration,\n      componentEffectErrors,\n    );\n  }\n\n  popComponentEffectStart(prevEffectStart);\n  popComponentEffectDuration(prevEffectDuration);\n  popComponentEffectErrors(prevEffectErrors);\n}\n\nexport function invokeLayoutEffectMountInDEV(fiber       )       {\n  if (__DEV__) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        commitHookEffectListMount(HookLayout | HookHasEffect, fiber);\n        break;\n      }\n      case ClassComponent: {\n        commitClassDidMount(fiber);\n        break;\n      }\n    }\n  }\n}\n\nexport function invokePassiveEffectMountInDEV(fiber       )       {\n  if (__DEV__) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        commitHookEffectListMount(HookPassive | HookHasEffect, fiber);\n        break;\n      }\n    }\n  }\n}\n\nexport function invokeLayoutEffectUnmountInDEV(fiber       )       {\n  if (__DEV__) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        commitHookEffectListUnmount(\n          HookLayout | HookHasEffect,\n          fiber,\n          fiber.return,\n        );\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n    }\n  }\n}\n\nexport function invokePassiveEffectUnmountInDEV(fiber       )       {\n  if (__DEV__) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          fiber,\n          fiber.return,\n        );\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                           \n\n                                                           \n\n                                                                      \n\n                                                                   \n\n                                                                             \n\nimport {\n  cloneMutableInstance,\n  cloneMutableTextInstance,\n  cloneRootViewTransitionContainer,\n  removeRootViewTransitionClone,\n  cancelRootViewTransitionName,\n  restoreRootViewTransitionName,\n  cancelViewTransitionName,\n  applyViewTransitionName,\n  appendChild,\n  commitUpdate,\n  commitTextUpdate,\n  resetTextContent,\n  supportsResources,\n  supportsSingletons,\n  unhideInstance,\n  unhideTextInstance,\n} from './ReactFiberConfig';\nimport {\n  popMutationContext,\n  pushMutationContext,\n  viewTransitionMutationContext,\n  trackHostMutation,\n} from './ReactFiberMutationTracking';\nimport {\n  MutationMask,\n  Update,\n  ContentReset,\n  NoFlags,\n  Visibility,\n  ViewTransitionNamedStatic,\n  ViewTransitionStatic,\n  AffectedParentLayout,\n} from './ReactFiberFlags';\nimport {\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostText,\n  HostPortal,\n  OffscreenComponent,\n  ViewTransitionComponent,\n} from './ReactWorkTags';\nimport {\n  restoreEnterOrExitViewTransitions,\n  restoreNestedViewTransitions,\n  restoreUpdateViewTransitionForGesture,\n  appearingViewTransitions,\n  commitEnterViewTransitions,\n  measureNestedViewTransitions,\n  measureUpdateViewTransition,\n  viewTransitionCancelableChildren,\n  pushViewTransitionCancelableScope,\n  popViewTransitionCancelableScope,\n} from './ReactFiberCommitViewTransitions';\nimport {\n  getViewTransitionName,\n  getViewTransitionClassName,\n} from './ReactFiberViewTransitionComponent';\n\nlet didWarnForRootClone = false;\n\n// Used during the apply phase to track whether a parent ViewTransition component\n// might have been affected by any mutations / relayouts below.\nlet viewTransitionContextChanged          = false;\n\nfunction detectMutationOrInsertClones(finishedWork       )          {\n  return true;\n}\n\nconst CLONE_UPDATE = 0; // Mutations in this subtree or potentially affected by layout.\nconst CLONE_EXIT = 1; // Inside a reappearing offscreen before the next ViewTransition or HostComponent.\nconst CLONE_UNHIDE = 2; // Inside a reappearing offscreen before the next HostComponent.\nconst CLONE_APPEARING_PAIR = 3; // Like UNHIDE but we're already inside the first Host Component only finding pairs.\nconst CLONE_UNCHANGED = 4; // Nothing in this tree was changed but we're still walking to clone it.\nconst INSERT_EXIT = 5; // Inside a newly mounted tree before the next ViewTransition or HostComponent.\nconst INSERT_APPEND = 6; // Inside a newly mounted tree before the next HostComponent.\nconst INSERT_APPEARING_PAIR = 7; // Inside a newly mounted tree only finding pairs.\n                                                \n\nfunction applyViewTransitionToClones(\n  name        ,\n  className         ,\n  clones                 ,\n)       {\n  // This gets called when we have found a pair, but after the clone in created. The clone is\n  // created by the insertion side. If the insertion side if found before the deletion side\n  // then this is called by the deletion. If the deletion is visited first then this is called\n  // later by the insertion when the clone has been created.\n  for (let i = 0; i < clones.length; i++) {\n    applyViewTransitionName(\n      clones[i],\n      i === 0\n        ? name\n        : // If we have multiple Host Instances below, we add a suffix to the name to give\n          // each one a unique name.\n          name + '_' + i,\n      className,\n    );\n  }\n}\n\nfunction trackDeletedPairViewTransitions(deletion       )       {\n  if (\n    appearingViewTransitions === null ||\n    appearingViewTransitions.size === 0\n  ) {\n    // We've found all.\n    return;\n  }\n  const pairs = appearingViewTransitions;\n  if ((deletion.subtreeFlags & ViewTransitionNamedStatic) === NoFlags) {\n    // This has no named view transitions in its subtree.\n    return;\n  }\n  let child = deletion.child;\n  while (child !== null) {\n    if (child.tag === OffscreenComponent && child.memoizedState === null) {\n      // This tree was already hidden so we skip it.\n    } else {\n      if (\n        child.tag === ViewTransitionComponent &&\n        (child.flags & ViewTransitionNamedStatic) !== NoFlags\n      ) {\n        const props                      = child.memoizedProps;\n        const name = props.name;\n        if (name != null && name !== 'auto') {\n          const pair = pairs.get(name);\n          if (pair !== undefined) {\n            // Delete the entry so that we know when we've found all of them\n            // and can stop searching (size reaches zero).\n            pairs.delete(name);\n            const className          = getViewTransitionClassName(\n              props.default,\n              props.share,\n            );\n            if (className !== 'none') {\n              // TODO: Since the deleted instance already has layout we could\n              // check if it's in the viewport and if not skip the pairing.\n              // It would currently cause layout thrash though so if we did that\n              // we need to avoid inserting the root of the cloned trees until\n              // the end.\n\n              // The \"old\" instance is actually the one we're inserting.\n              const oldInstance                      = pair;\n              // The \"new\" instance is the already mounted one we're deleting.\n              const newInstance                      = child.stateNode;\n              oldInstance.paired = newInstance;\n              newInstance.paired = oldInstance;\n              const clones = oldInstance.clones;\n              if (clones !== null) {\n                // If we have clones that means that we've already visited this\n                // ViewTransition boundary before and we can now apply the name\n                // to those clones. Otherwise, we have to wait until we clone it.\n                applyViewTransitionToClones(name, className, clones);\n              }\n            }\n            if (pairs.size === 0) {\n              break;\n            }\n          }\n        }\n      }\n      trackDeletedPairViewTransitions(child);\n    }\n    child = child.sibling;\n  }\n}\n\nfunction trackEnterViewTransitions(deletion       )       {\n  if (deletion.tag === ViewTransitionComponent) {\n    const props                      = deletion.memoizedProps;\n    const name = getViewTransitionName(props, deletion.stateNode);\n    const pair =\n      appearingViewTransitions !== null\n        ? appearingViewTransitions.get(name)\n        : undefined;\n    const className          = getViewTransitionClassName(\n      props.default,\n      pair !== undefined ? props.share : props.enter,\n    );\n    if (className !== 'none') {\n      if (pair !== undefined) {\n        // TODO: Since the deleted instance already has layout we could\n        // check if it's in the viewport and if not skip the pairing.\n        // It would currently cause layout thrash though so if we did that\n        // we need to avoid inserting the root of the cloned trees until\n        // the end.\n\n        // Delete the entry so that we know when we've found all of them\n        // and can stop searching (size reaches zero).\n        // $FlowFixMe[incompatible-use]: Refined by the pair.\n        appearingViewTransitions.delete(name);\n        // The \"old\" instance is actually the one we're inserting.\n        const oldInstance                      = pair;\n        // The \"new\" instance is the already mounted one we're deleting.\n        const newInstance                      = deletion.stateNode;\n        oldInstance.paired = newInstance;\n        newInstance.paired = oldInstance;\n        const clones = oldInstance.clones;\n        if (clones !== null) {\n          // If we have clones that means that we've already visited this\n          // ViewTransition boundary before and we can now apply the name\n          // to those clones. Otherwise, we have to wait until we clone it.\n          applyViewTransitionToClones(name, className, clones);\n        }\n      }\n    }\n    // Look for more pairs deeper in the tree.\n    trackDeletedPairViewTransitions(deletion);\n  } else if ((deletion.subtreeFlags & ViewTransitionStatic) !== NoFlags) {\n    let child = deletion.child;\n    while (child !== null) {\n      trackEnterViewTransitions(child);\n      child = child.sibling;\n    }\n  } else {\n    trackDeletedPairViewTransitions(deletion);\n  }\n}\n\nfunction applyAppearingPairViewTransition(child       )       {\n  // Normally these helpers do recursive calls but since insertion/offscreen is forked\n  // we call this helper from those loops instead. This must be called only on\n  // ViewTransitionComponent that has already had their clones filled.\n  if ((child.flags & ViewTransitionNamedStatic) !== NoFlags) {\n    const state                      = child.stateNode;\n    // If this is not yet paired, it doesn't mean that we won't pair it later when\n    // we find the deletion side. If that's the case then we'll add the names to\n    // the clones then.\n    if (state.paired) {\n      const props                      = child.memoizedProps;\n      if (props.name == null || props.name === 'auto') {\n        throw new Error(\n          'Found a pair with an auto name. This is a bug in React.',\n        );\n      }\n      const name = props.name;\n      // Note that this class name that doesn't actually really matter because the\n      // \"new\" side will be the one that wins in practice.\n      const className          = getViewTransitionClassName(\n        props.default,\n        props.share,\n      );\n      if (className !== 'none') {\n        const clones = state.clones;\n        // If there are no clones at this point, that should mean that there are no\n        // HostComponent children in this ViewTransition.\n        if (clones !== null) {\n          applyViewTransitionToClones(name, className, clones);\n        }\n      }\n    }\n  }\n}\n\nfunction applyExitViewTransition(placement       )       {\n  // Normally these helpers do recursive calls but since insertion/offscreen is forked\n  // we call this helper from those loops instead. This must be called only on\n  // ViewTransitionComponent that has already had their clones filled.\n  const state                      = placement.stateNode;\n  const props                      = placement.memoizedProps;\n  const name = getViewTransitionName(props, state);\n  const className          = getViewTransitionClassName(\n    props.default,\n    // Note that just because we don't have a pair yet doesn't mean we won't find one\n    // later. However, that doesn't matter because if we do the class name that wins\n    // is the one applied by the \"new\" side anyway.\n    state.paired ? props.share : props.exit,\n  );\n  if (className !== 'none') {\n    // TODO: Ideally we could determine if this exit is in the viewport and\n    // exclude it otherwise but that would require waiting until we insert\n    // and layout the clones first. Currently wait until the view transition\n    // starts before reading the layout.\n    const clones = state.clones;\n    // If there are no clones at this point, that should mean that there are no\n    // HostComponent children in this ViewTransition.\n    if (clones !== null) {\n      applyViewTransitionToClones(name, className, clones);\n    }\n  }\n}\n\nfunction applyNestedViewTransition(child       )       {\n  const state                      = child.stateNode;\n  const props                      = child.memoizedProps;\n  const name = getViewTransitionName(props, state);\n  const className          = getViewTransitionClassName(\n    props.default,\n    props.update,\n  );\n  if (className !== 'none') {\n    const clones = state.clones;\n    // If there are no clones at this point, that should mean that there are no\n    // HostComponent children in this ViewTransition.\n    if (clones !== null) {\n      applyViewTransitionToClones(name, className, clones);\n    }\n  }\n}\n\nfunction applyUpdateViewTransition(current       , finishedWork       )       {\n  const state                      = finishedWork.stateNode;\n  // Updates can have conflicting names and classNames.\n  // Since we're doing a reverse animation the \"new\" state is actually the current\n  // and the \"old\" state is the finishedWork.\n  const newProps                      = current.memoizedProps;\n  const oldProps                      = finishedWork.memoizedProps;\n  const oldName = getViewTransitionName(oldProps, state);\n  // This className applies only if there are fewer child DOM nodes than\n  // before or if this update should've been cancelled but we ended up with\n  // a parent animating so we need to animate the child too. Otherwise\n  // the \"new\" state wins. Since \"new\" normally wins, that's usually what\n  // we would use. However, since this animation is going in reverse we actually\n  // want the props from \"current\" since that's the class that would've won if\n  // it was the normal direction. To preserve the same effect in either direction.\n  const className          = getViewTransitionClassName(\n    newProps.default,\n    newProps.update,\n  );\n  if (className === 'none') {\n    // If update is \"none\" then we don't have to apply a name. Since we won't animate this boundary.\n    return;\n  }\n  const clones = state.clones;\n  // If there are no clones at this point, that should mean that there are no\n  // HostComponent children in this ViewTransition.\n  if (clones !== null) {\n    applyViewTransitionToClones(oldName, className, clones);\n  }\n}\n\nfunction recursivelyInsertNew(\n  parentFiber       ,\n  hostParentClone          ,\n  parentViewTransition                            ,\n  visitPhase            ,\n)       {\n  if (\n    visitPhase === INSERT_APPEARING_PAIR &&\n    parentViewTransition === null &&\n    (parentFiber.subtreeFlags & ViewTransitionNamedStatic) === NoFlags\n  ) {\n    // We're just searching for pairs but we have reached the end.\n    return;\n  }\n  let child = parentFiber.child;\n  while (child !== null) {\n    recursivelyInsertNewFiber(\n      child,\n      hostParentClone,\n      parentViewTransition,\n      visitPhase,\n    );\n    child = child.sibling;\n  }\n}\n\nfunction recursivelyInsertNewFiber(\n  finishedWork       ,\n  hostParentClone          ,\n  parentViewTransition                            ,\n  visitPhase            ,\n)       {\n  switch (finishedWork.tag) {\n    case HostHoistable: {\n      if (supportsResources) {\n        // TODO: Hoistables should get optimistically inserted and then removed.\n        recursivelyInsertNew(\n          finishedWork,\n          hostParentClone,\n          parentViewTransition,\n          visitPhase,\n        );\n        break;\n      }\n      // Fall through\n    }\n    case HostSingleton: {\n      if (supportsSingletons) {\n        recursivelyInsertNew(\n          finishedWork,\n          hostParentClone,\n          parentViewTransition,\n          visitPhase,\n        );\n\n        if (__DEV__) {\n          // We cannot apply mutations to Host Singletons since by definition\n          // they cannot be cloned. Therefore we warn in DEV if this commit\n          // had any effect.\n          if (finishedWork.flags & Update) {\n            console.error(\n              'startGestureTransition() caused something to render a new <%s>. ' +\n                'This is not possible in the current implementation. ' +\n                \"Make sure that the swipe doesn't mount any new <%s> elements.\",\n              finishedWork.type,\n              finishedWork.type,\n            );\n          }\n        }\n        break;\n      }\n      // Fall through\n    }\n    case HostComponent: {\n      const instance           = finishedWork.stateNode;\n      // For insertions we don't need to clone. It's already new state node.\n      if (visitPhase !== INSERT_APPEARING_PAIR) {\n        appendChild(hostParentClone, instance);\n        trackHostMutation();\n        recursivelyInsertNew(\n          finishedWork,\n          instance,\n          null,\n          INSERT_APPEARING_PAIR,\n        );\n      } else {\n        recursivelyInsertNew(finishedWork, instance, null, visitPhase);\n      }\n      if (parentViewTransition !== null) {\n        if (parentViewTransition.clones === null) {\n          parentViewTransition.clones = [instance];\n        } else {\n          parentViewTransition.clones.push(instance);\n        }\n      }\n      break;\n    }\n    case HostText: {\n      const textInstance               = finishedWork.stateNode;\n      if (textInstance === null) {\n        throw new Error(\n          'This should have a text node initialized. This error is likely ' +\n            'caused by a bug in React. Please file an issue.',\n        );\n      }\n      // For insertions we don't need to clone. It's already new state node.\n      if (visitPhase !== INSERT_APPEARING_PAIR) {\n        appendChild(hostParentClone, textInstance);\n        trackHostMutation();\n      }\n      break;\n    }\n    case HostPortal: {\n      // TODO: Consider what should happen to Portals. For now we exclude them.\n      break;\n    }\n    case OffscreenComponent: {\n      const newState                        = finishedWork.memoizedState;\n      const isHidden = newState !== null;\n      if (!isHidden) {\n        // Only insert nodes if this tree is going to be visible. No need to\n        // insert invisible content.\n        // Since there was no mutation to this node, it couldn't have changed\n        // visibility so we don't need to update visitPhase here.\n        recursivelyInsertNew(\n          finishedWork,\n          hostParentClone,\n          parentViewTransition,\n          visitPhase,\n        );\n      }\n      break;\n    }\n    case ViewTransitionComponent:\n      const prevMutationContext = pushMutationContext();\n      const viewTransitionState                      = finishedWork.stateNode;\n      // TODO: If this was already cloned by a previous pass we can reuse those clones.\n      viewTransitionState.clones = null;\n      let nextPhase;\n      if (visitPhase === INSERT_EXIT) {\n        // This was an Enter of a ViewTransition. We now move onto inserting the inner\n        // HostComponents and finding inner pairs.\n        nextPhase = INSERT_APPEND;\n      } else {\n        nextPhase = visitPhase;\n      }\n      recursivelyInsertNew(\n        finishedWork,\n        hostParentClone,\n        viewTransitionState,\n        nextPhase,\n      );\n      // After we've inserted the new nodes into the \"clones\" set we can apply share\n      // or exit transitions to them.\n      if (visitPhase === INSERT_EXIT) {\n        applyExitViewTransition(finishedWork);\n      } else if (\n        visitPhase === INSERT_APPEARING_PAIR ||\n        visitPhase === INSERT_APPEND\n      ) {\n        applyAppearingPairViewTransition(finishedWork);\n      }\n      popMutationContext(prevMutationContext);\n      break;\n    default: {\n      recursivelyInsertNew(\n        finishedWork,\n        hostParentClone,\n        parentViewTransition,\n        visitPhase,\n      );\n      break;\n    }\n  }\n}\n\nfunction recursivelyInsertClonesFromExistingTree(\n  parentFiber       ,\n  hostParentClone          ,\n  parentViewTransition                            ,\n  visitPhase            ,\n)       {\n  let child = parentFiber.child;\n  while (child !== null) {\n    switch (child.tag) {\n      case HostComponent: {\n        const instance           = child.stateNode;\n        let nextPhase            ;\n        switch (visitPhase) {\n          case CLONE_EXIT:\n          case CLONE_UNHIDE:\n          case CLONE_APPEARING_PAIR:\n            // If this was an unhide, we need to keep going if there are any named\n            // pairs in this subtree, since they might need to be marked.\n            nextPhase =\n              (child.subtreeFlags & ViewTransitionNamedStatic) !== NoFlags\n                ? CLONE_APPEARING_PAIR\n                : CLONE_UNCHANGED;\n            break;\n          default:\n            // We've found any \"layout\" View Transitions at this point so we can bail.\n            nextPhase = CLONE_UNCHANGED;\n        }\n        let clone          ;\n        if (nextPhase !== CLONE_UNCHANGED) {\n          // We might need a handle on these clones, so we need to do a shallow clone\n          // and keep going.\n          clone = cloneMutableInstance(instance, false);\n          recursivelyInsertClonesFromExistingTree(\n            child,\n            clone,\n            null,\n            nextPhase,\n          );\n        } else {\n          // If we have no mutations in this subtree, and we don't need a handle on the\n          // clones, then we can do a deep clone instead and bailout.\n          clone = cloneMutableInstance(instance, true);\n          // TODO: We may need to transfer some DOM state such as scroll position\n          // for the deep clones.\n          // TODO: If there's a manual view-transition-name inside the clone we\n          // should ideally remove it from the original and then restore it in mutation\n          // phase. Otherwise it leads to duplicate names.\n        }\n        appendChild(hostParentClone, clone);\n        if (parentViewTransition !== null) {\n          if (parentViewTransition.clones === null) {\n            parentViewTransition.clones = [clone];\n          } else {\n            parentViewTransition.clones.push(clone);\n          }\n        }\n        if (visitPhase === CLONE_EXIT || visitPhase === CLONE_UNHIDE) {\n          unhideInstance(clone, child.memoizedProps);\n          trackHostMutation();\n        }\n        break;\n      }\n      case HostText: {\n        const textInstance               = child.stateNode;\n        if (textInstance === null) {\n          throw new Error(\n            'This should have a text node initialized. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n        }\n        const clone = cloneMutableTextInstance(textInstance);\n        appendChild(hostParentClone, clone);\n        if (visitPhase === CLONE_EXIT || visitPhase === CLONE_UNHIDE) {\n          unhideTextInstance(clone, child.memoizedProps);\n          trackHostMutation();\n        }\n        break;\n      }\n      case HostPortal: {\n        // TODO: Consider what should happen to Portals. For now we exclude them.\n        break;\n      }\n      case OffscreenComponent: {\n        const newState                        = child.memoizedState;\n        const isHidden = newState !== null;\n        if (!isHidden) {\n          // Only insert clones if this tree is going to be visible. No need to\n          // clone invisible content.\n          // TODO: If this is visible but detached it should still be cloned.\n          // Since there was no mutation to this node, it couldn't have changed\n          // visibility so we don't need to update visitPhase here.\n          recursivelyInsertClonesFromExistingTree(\n            child,\n            hostParentClone,\n            parentViewTransition,\n            visitPhase,\n          );\n        }\n        break;\n      }\n      case ViewTransitionComponent:\n        const prevMutationContext = pushMutationContext();\n        const viewTransitionState                      = child.stateNode;\n        // TODO: If this was already cloned by a previous pass we can reuse those clones.\n        viewTransitionState.clones = null;\n        // \"Existing\" view transitions are in subtrees that didn't update so\n        // this is a \"current\". We normally clear this upon rerendering\n        // but we use this flag to track changes from layout in the commit.\n        // So we need it to be cleared before we do that.\n        // TODO: Use some other temporary state to track this.\n        child.flags &= ~Update;\n        let nextPhase;\n        if (visitPhase === CLONE_EXIT) {\n          // This was an Enter of a ViewTransition. We now move onto unhiding the inner\n          // HostComponents and finding inner pairs.\n          nextPhase = CLONE_UNHIDE;\n          // TODO: Mark the name and find a pair.\n        } else if (visitPhase === CLONE_UPDATE) {\n          // If the tree had no mutations and we've found the top most ViewTransition\n          // then this is the one we might apply the \"layout\" state too if it has changed\n          // position. After we've found its HostComponents we can bail out.\n          nextPhase = CLONE_UNCHANGED;\n        } else {\n          nextPhase = visitPhase;\n        }\n        recursivelyInsertClonesFromExistingTree(\n          child,\n          hostParentClone,\n          viewTransitionState,\n          nextPhase,\n        );\n        // After we've collected the cloned instances, we can apply exit or share transitions\n        // to them.\n        if (visitPhase === CLONE_EXIT) {\n          applyExitViewTransition(child);\n        } else if (\n          visitPhase === CLONE_APPEARING_PAIR ||\n          visitPhase === CLONE_UNHIDE\n        ) {\n          applyAppearingPairViewTransition(child);\n        } else if (visitPhase === CLONE_UPDATE) {\n          applyNestedViewTransition(child);\n        }\n        popMutationContext(prevMutationContext);\n        break;\n      default: {\n        recursivelyInsertClonesFromExistingTree(\n          child,\n          hostParentClone,\n          parentViewTransition,\n          visitPhase,\n        );\n        break;\n      }\n    }\n    child = child.sibling;\n  }\n}\n\nfunction recursivelyInsertClones(\n  parentFiber       ,\n  hostParentClone          ,\n  parentViewTransition                            ,\n  visitPhase            ,\n) {\n  const deletions = parentFiber.deletions;\n  if (deletions !== null) {\n    for (let i = 0; i < deletions.length; i++) {\n      const childToDelete = deletions[i];\n      trackEnterViewTransitions(childToDelete);\n      // Normally we would only mark something as triggering a mutation if there was\n      // actually a HostInstance below here. If this tree didn't contain a HostInstances\n      // we shouldn't trigger a mutation even though a virtual component was deleted.\n      trackHostMutation();\n    }\n  }\n\n  if (\n    parentFiber.alternate === null ||\n    (parentFiber.subtreeFlags & MutationMask) !== NoFlags\n  ) {\n    // If we have mutations or if this is a newly inserted tree, clone as we go.\n    let child = parentFiber.child;\n    while (child !== null) {\n      insertDestinationClonesOfFiber(\n        child,\n        hostParentClone,\n        parentViewTransition,\n        visitPhase,\n      );\n      child = child.sibling;\n    }\n  } else {\n    // Once we reach a subtree with no more mutations we can bail out.\n    // However, we must still insert deep clones of the HostComponents.\n    recursivelyInsertClonesFromExistingTree(\n      parentFiber,\n      hostParentClone,\n      parentViewTransition,\n      visitPhase,\n    );\n  }\n}\n\nfunction insertDestinationClonesOfFiber(\n  finishedWork       ,\n  hostParentClone          ,\n  parentViewTransition                            ,\n  visitPhase            ,\n) {\n  const current = finishedWork.alternate;\n  if (current === null) {\n    // This is a newly mounted subtree. Insert any HostComponents and trigger\n    // Enter transitions.\n    recursivelyInsertNewFiber(\n      finishedWork,\n      hostParentClone,\n      parentViewTransition,\n      INSERT_EXIT,\n    );\n    return;\n  }\n\n  const flags = finishedWork.flags;\n  // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconciliation, because those can be set on all fiber types.\n  switch (finishedWork.tag) {\n    case HostHoistable: {\n      if (supportsResources) {\n        // TODO: Hoistables should get optimistically inserted and then removed.\n        recursivelyInsertClones(\n          finishedWork,\n          hostParentClone,\n          parentViewTransition,\n          visitPhase,\n        );\n        break;\n      }\n      // Fall through\n    }\n    case HostSingleton: {\n      if (supportsSingletons) {\n        recursivelyInsertClones(\n          finishedWork,\n          hostParentClone,\n          parentViewTransition,\n          visitPhase,\n        );\n        if (__DEV__) {\n          // We cannot apply mutations to Host Singletons since by definition\n          // they cannot be cloned. Therefore we warn in DEV if this commit\n          // had any effect.\n          if (flags & Update) {\n            const newProps = finishedWork.memoizedProps;\n            const oldProps = current.memoizedProps;\n            const instance = finishedWork.stateNode;\n            const type = finishedWork.type;\n            const prev = pushMutationContext();\n\n            try {\n              // Since we currently don't have a separate diffing algorithm for\n              // individual properties, the Update flag can be a false positive.\n              // We have to apply the new props first o detect any mutations and\n              // then revert them.\n              commitUpdate(instance, type, oldProps, newProps, finishedWork);\n              if (viewTransitionMutationContext) {\n                console.error(\n                  'startGestureTransition() caused something to mutate <%s>. ' +\n                    'This is not possible in the current implementation. ' +\n                    \"Make sure that the swipe doesn't update any state which \" +\n                    'causes <%s> to change.',\n                  finishedWork.type,\n                  finishedWork.type,\n                );\n              }\n              // Revert\n              commitUpdate(instance, type, newProps, oldProps, finishedWork);\n            } finally {\n              popMutationContext(prev);\n            }\n          }\n        }\n        break;\n      }\n      // Fall through\n    }\n    case HostComponent: {\n      const instance           = finishedWork.stateNode;\n      let clone          ;\n      if (finishedWork.child === null) {\n        // This node is terminal. We still do a deep clone in case this has user\n        // inserted content, text content or dangerouslySetInnerHTML.\n        clone = cloneMutableInstance(instance, true);\n        if (finishedWork.flags & ContentReset) {\n          resetTextContent(clone);\n          trackHostMutation();\n        }\n      } else {\n        // If we have children we'll clone them as we walk the tree so we just\n        // do a shallow clone here.\n        clone = cloneMutableInstance(instance, false);\n      }\n\n      if (flags & Update) {\n        const newProps = finishedWork.memoizedProps;\n        const oldProps = current.memoizedProps;\n        const type = finishedWork.type;\n        // Apply the delta to the clone.\n        commitUpdate(clone, type, oldProps, newProps, finishedWork);\n      }\n\n      if (visitPhase === CLONE_EXIT || visitPhase === CLONE_UNHIDE) {\n        appendChild(hostParentClone, clone);\n        unhideInstance(clone, finishedWork.memoizedProps);\n        recursivelyInsertClones(\n          finishedWork,\n          clone,\n          null,\n          CLONE_APPEARING_PAIR,\n        );\n        trackHostMutation();\n      } else {\n        appendChild(hostParentClone, clone);\n        recursivelyInsertClones(finishedWork, clone, null, visitPhase);\n      }\n      if (parentViewTransition !== null) {\n        if (parentViewTransition.clones === null) {\n          parentViewTransition.clones = [clone];\n        } else {\n          parentViewTransition.clones.push(clone);\n        }\n      }\n      break;\n    }\n    case HostText: {\n      const textInstance               = finishedWork.stateNode;\n      if (textInstance === null) {\n        throw new Error(\n          'This should have a text node initialized. This error is likely ' +\n            'caused by a bug in React. Please file an issue.',\n        );\n      }\n      const clone = cloneMutableTextInstance(textInstance);\n      if (flags & Update) {\n        const newText         = finishedWork.memoizedProps;\n        const oldText         = current.memoizedProps;\n        commitTextUpdate(clone, newText, oldText);\n        trackHostMutation();\n      }\n      appendChild(hostParentClone, clone);\n      if (visitPhase === CLONE_EXIT || visitPhase === CLONE_UNHIDE) {\n        unhideTextInstance(clone, finishedWork.memoizedProps);\n        trackHostMutation();\n      }\n      break;\n    }\n    case HostPortal: {\n      // TODO: Consider what should happen to Portals. For now we exclude them.\n      break;\n    }\n    case OffscreenComponent: {\n      const newState                        = finishedWork.memoizedState;\n      const isHidden = newState !== null;\n      if (!isHidden) {\n        // Only insert clones if this tree is going to be visible. No need to\n        // clone invisible content.\n        // TODO: If this is visible but detached it should still be cloned.\n        let nextPhase;\n        if (visitPhase === CLONE_UPDATE && (flags & Visibility) !== NoFlags) {\n          // This is the root of an appear. We need to trigger Enter transitions.\n          nextPhase = CLONE_EXIT;\n        } else {\n          nextPhase = visitPhase;\n        }\n        recursivelyInsertClones(\n          finishedWork,\n          hostParentClone,\n          parentViewTransition,\n          nextPhase,\n        );\n      } else if (current !== null && current.memoizedState === null) {\n        // Was previously mounted as visible but is now hidden.\n        trackEnterViewTransitions(current);\n        // Normally we would only mark something as triggering a mutation if there was\n        // actually a HostInstance below here. If this tree didn't contain a HostInstances\n        // we shouldn't trigger a mutation even though a virtual component was hidden.\n        trackHostMutation();\n      }\n      break;\n    }\n    case ViewTransitionComponent:\n      const prevMutationContext = pushMutationContext();\n      const viewTransitionState                      = finishedWork.stateNode;\n      // TODO: If this was already cloned by a previous pass we can reuse those clones.\n      viewTransitionState.clones = null;\n      let nextPhase;\n      if (visitPhase === CLONE_EXIT) {\n        // This was an Enter of a ViewTransition. We now move onto unhiding the inner\n        // HostComponents and finding inner pairs.\n        nextPhase = CLONE_UNHIDE;\n        // TODO: Mark the name and find a pair.\n      } else {\n        nextPhase = visitPhase;\n      }\n      recursivelyInsertClones(\n        finishedWork,\n        hostParentClone,\n        viewTransitionState,\n        nextPhase,\n      );\n      if (viewTransitionMutationContext) {\n        // Track that this boundary had a mutation and therefore needs to animate\n        // whether it resized or not.\n        finishedWork.flags |= Update;\n      }\n      // After we've collected the cloned instances, we can apply exit or share transitions\n      // to them.\n      if (visitPhase === CLONE_EXIT) {\n        applyExitViewTransition(finishedWork);\n      } else if (\n        visitPhase === CLONE_APPEARING_PAIR ||\n        visitPhase === CLONE_UNHIDE\n      ) {\n        applyAppearingPairViewTransition(finishedWork);\n      } else if (visitPhase === CLONE_UPDATE) {\n        applyUpdateViewTransition(current, finishedWork);\n      }\n      popMutationContext(prevMutationContext);\n      break;\n    default: {\n      recursivelyInsertClones(\n        finishedWork,\n        hostParentClone,\n        parentViewTransition,\n        visitPhase,\n      );\n      break;\n    }\n  }\n}\n\n// Clone View Transition boundaries that have any mutations or might have had their\n// layout affected by child insertions.\nexport function insertDestinationClones(\n  root           ,\n  finishedWork       ,\n)       {\n  // We'll either not transition the root, or we'll transition the clone. Regardless\n  // we cancel the root view transition name.\n  const needsClone = detectMutationOrInsertClones(finishedWork);\n  if (needsClone) {\n    if (__DEV__) {\n      if (!didWarnForRootClone) {\n        didWarnForRootClone = true;\n        console.warn(\n          'startGestureTransition() caused something to mutate or relayout the root. ' +\n            'This currently requires a clone of the whole document. Make sure to ' +\n            'add a <ViewTransition> directly around an absolutely positioned DOM node ' +\n            'to minimize the impact of any changes caused by the Gesture Transition.',\n        );\n      }\n    }\n    // Clone the whole root\n    const rootClone = cloneRootViewTransitionContainer(root.containerInfo);\n    root.gestureClone = rootClone;\n    recursivelyInsertClones(finishedWork, rootClone, null, CLONE_UPDATE);\n  } else {\n    root.gestureClone = null;\n    cancelRootViewTransitionName(root.containerInfo);\n  }\n}\n\nfunction measureExitViewTransitions(placement       )       {\n  if (placement.tag === ViewTransitionComponent) {\n    // const state: ViewTransitionState = placement.stateNode;\n    const props                      = placement.memoizedProps;\n    const name = props.name;\n    if (name != null && name !== 'auto') {\n      // TODO: Find a pair\n    }\n  } else if ((placement.subtreeFlags & ViewTransitionStatic) !== NoFlags) {\n    // TODO: Check if this is a hidden Offscreen or a Portal.\n    let child = placement.child;\n    while (child !== null) {\n      measureExitViewTransitions(child);\n      child = child.sibling;\n    }\n  } else {\n    // We don't need to find pairs here because we would've already found and\n    // measured the pairs inside the deletion phase.\n  }\n}\n\nfunction recursivelyApplyViewTransitions(parentFiber       ) {\n  const deletions = parentFiber.deletions;\n  if (deletions !== null) {\n    for (let i = 0; i < deletions.length; i++) {\n      const childToDelete = deletions[i];\n      commitEnterViewTransitions(childToDelete, true);\n    }\n  }\n\n  if (\n    parentFiber.alternate === null ||\n    (parentFiber.subtreeFlags & MutationMask) !== NoFlags\n  ) {\n    // If we have mutations or if this is a newly inserted tree, clone as we go.\n    let child = parentFiber.child;\n    while (child !== null) {\n      applyViewTransitionsOnFiber(child);\n      child = child.sibling;\n    }\n  } else {\n    // Nothing has changed in this subtree, but the parent may have still affected\n    // its size and position. We need to measure the old and new state to see if\n    // we should animate its size and position.\n    measureNestedViewTransitions(parentFiber, true);\n  }\n}\n\nfunction applyViewTransitionsOnFiber(finishedWork       ) {\n  const current = finishedWork.alternate;\n  if (current === null) {\n    measureExitViewTransitions(finishedWork);\n    return;\n  }\n\n  const flags = finishedWork.flags;\n  // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconciliation, because those can be set on all fiber types.\n  switch (finishedWork.tag) {\n    case HostPortal: {\n      // TODO: Consider what should happen to Portals. For now we exclude them.\n      break;\n    }\n    case OffscreenComponent: {\n      if (flags & Visibility) {\n        const newState                        = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        if (!isHidden) {\n          measureExitViewTransitions(finishedWork);\n        } else if (current !== null && current.memoizedState === null) {\n          // Was previously mounted as visible but is now hidden.\n          commitEnterViewTransitions(current, true);\n        }\n      }\n      break;\n    }\n    case ViewTransitionComponent: {\n      const prevContextChanged = viewTransitionContextChanged;\n      const prevCancelableChildren = pushViewTransitionCancelableScope();\n      viewTransitionContextChanged = false;\n      recursivelyApplyViewTransitions(finishedWork);\n\n      if (viewTransitionContextChanged) {\n        finishedWork.flags |= Update;\n      }\n\n      const inViewport = measureUpdateViewTransition(\n        current,\n        finishedWork,\n        true,\n      );\n\n      if ((finishedWork.flags & Update) === NoFlags || !inViewport) {\n        // If this boundary didn't update, then we may be able to cancel its children.\n        // We bubble them up to the parent set to be determined later if we can cancel.\n        // Similarly, if old and new state was outside the viewport, we can skip it\n        // even if it did update.\n        if (prevCancelableChildren === null) {\n          // Bubbling up this whole set to the parent.\n        } else {\n          // Merge with parent set.\n          // $FlowFixMe[method-unbinding]\n          prevCancelableChildren.push.apply(\n            prevCancelableChildren,\n            viewTransitionCancelableChildren,\n          );\n          popViewTransitionCancelableScope(prevCancelableChildren);\n        }\n        // TODO: If this doesn't end up canceled, because a parent animates,\n        // then we should probably issue an event since this instance is part of it.\n      } else {\n        // TODO: Schedule gesture events.\n        // If this boundary did update, we cannot cancel its children so those are dropped.\n        popViewTransitionCancelableScope(prevCancelableChildren);\n      }\n\n      if ((finishedWork.flags & AffectedParentLayout) !== NoFlags) {\n        // This boundary changed size in a way that may have caused its parent to\n        // relayout. We need to bubble this information up to the parent.\n        viewTransitionContextChanged = true;\n      } else {\n        // Otherwise, we restore it to whatever the parent had found so far.\n        viewTransitionContextChanged = prevContextChanged;\n      }\n\n      const viewTransitionState                      = finishedWork.stateNode;\n      viewTransitionState.clones = null; // Reset\n      break;\n    }\n    default: {\n      recursivelyApplyViewTransitions(finishedWork);\n      break;\n    }\n  }\n}\n\n// Revert insertions and apply view transition names to the \"new\" (current) state.\nexport function applyDepartureTransitions(\n  root           ,\n  finishedWork       ,\n)       {\n  // First measure and apply view-transition-names to the \"new\" states.\n  viewTransitionContextChanged = false;\n  pushViewTransitionCancelableScope();\n\n  recursivelyApplyViewTransitions(finishedWork);\n\n  // Then remove the clones.\n  const rootClone = root.gestureClone;\n  if (rootClone !== null) {\n    root.gestureClone = null;\n    removeRootViewTransitionClone(root.containerInfo, rootClone);\n  }\n\n  if (!viewTransitionContextChanged) {\n    // If we didn't leak any resizing out to the root, we don't have to transition\n    // the root itself. This means that we can now safely cancel any cancellations\n    // that bubbled all the way up.\n    const cancelableChildren = viewTransitionCancelableChildren;\n    if (cancelableChildren !== null) {\n      for (let i = 0; i < cancelableChildren.length; i += 3) {\n        cancelViewTransitionName(\n          ((cancelableChildren[i]     )          ),\n          ((cancelableChildren[i + 1]     )        ),\n          ((cancelableChildren[i + 2]     )       ),\n        );\n      }\n    }\n    // We also cancel the root itself. First we restore the name to the documentElement\n    // and then we cancel it.\n    restoreRootViewTransitionName(root.containerInfo);\n    cancelRootViewTransitionName(root.containerInfo);\n  }\n  popViewTransitionCancelableScope(null);\n}\n\nfunction recursivelyRestoreViewTransitions(parentFiber       ) {\n  const deletions = parentFiber.deletions;\n  if (deletions !== null) {\n    for (let i = 0; i < deletions.length; i++) {\n      const childToDelete = deletions[i];\n      restoreEnterOrExitViewTransitions(childToDelete);\n    }\n  }\n\n  if (\n    parentFiber.alternate === null ||\n    (parentFiber.subtreeFlags & MutationMask) !== NoFlags\n  ) {\n    // If we have mutations or if this is a newly inserted tree, clone as we go.\n    let child = parentFiber.child;\n    while (child !== null) {\n      restoreViewTransitionsOnFiber(child);\n      child = child.sibling;\n    }\n  } else {\n    // Nothing has changed in this subtree, but the parent may have still affected\n    // its size and position. We need to measure the old and new state to see if\n    // we should animate its size and position.\n    restoreNestedViewTransitions(parentFiber);\n  }\n}\n\nfunction restoreViewTransitionsOnFiber(finishedWork       ) {\n  const current = finishedWork.alternate;\n  if (current === null) {\n    restoreEnterOrExitViewTransitions(finishedWork);\n    return;\n  }\n\n  const flags = finishedWork.flags;\n  // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconciliation, because those can be set on all fiber types.\n  switch (finishedWork.tag) {\n    case HostPortal: {\n      // TODO: Consider what should happen to Portals. For now we exclude them.\n      break;\n    }\n    case OffscreenComponent: {\n      if (flags & Visibility) {\n        const newState                        = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        if (!isHidden) {\n          restoreEnterOrExitViewTransitions(finishedWork);\n        } else if (current !== null && current.memoizedState === null) {\n          // Was previously mounted as visible but is now hidden.\n          restoreEnterOrExitViewTransitions(current);\n        }\n      }\n      break;\n    }\n    case ViewTransitionComponent:\n      restoreUpdateViewTransitionForGesture(current, finishedWork);\n      recursivelyRestoreViewTransitions(finishedWork);\n      break;\n    default: {\n      recursivelyRestoreViewTransitions(finishedWork);\n      break;\n    }\n  }\n}\n\n// Revert transition names and start/adjust animations on the started View Transition.\nexport function startGestureAnimations(\n  root           ,\n  finishedWork       ,\n)       {\n  restoreViewTransitionsOnFiber(finishedWork);\n  restoreRootViewTransitionName(root.containerInfo);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                 \n                                                      \n\nimport {readContext} from './ReactFiberNewContext';\nimport {CacheContext} from './ReactFiberCacheComponent';\n\nimport {current as currentOwner} from './ReactCurrentFiber';\n\nfunction getCacheForType   (resourceType         )    {\n  const cache        = readContext(CacheContext);\n  let cacheForType           = (cache.data.get(resourceType)     );\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.data.set(resourceType, cacheForType);\n  }\n  return cacheForType;\n}\n\nexport const DefaultAsyncDispatcher                  = ({\n  getCacheForType,\n}     );\n\nif (__DEV__) {\n  DefaultAsyncDispatcher.getOwner = ()               => {\n    return currentOwner;\n  };\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                   \n                                                 \n\nimport {\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostText,\n} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {\n  findFiberRoot,\n  getBoundingRect,\n  getInstanceFromNode,\n  getTextContent,\n  isHiddenSubtree,\n  matchAccessibilityRole,\n  setFocusIfFocusable,\n  setupIntersectionObserver,\n  supportsTestSelectors,\n} from './ReactFiberConfig';\n\nlet COMPONENT_TYPE                  = 0b000;\nlet HAS_PSEUDO_CLASS_TYPE                  = 0b001;\nlet ROLE_TYPE                  = 0b010;\nlet TEST_NAME_TYPE                  = 0b011;\nlet TEXT_TYPE                  = 0b100;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\n                            \n\n                          \n                 \n                                    \n  \n\n                               \n                 \n                         \n  \n\n                     \n                 \n                \n  \n\n                     \n                 \n                \n  \n\n                         \n                 \n                \n  \n\n               \n                     \n                          \n                \n                \n                     \n\nexport function createComponentSelector(\n  component                            ,\n)                    {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component,\n  };\n}\n\nexport function createHasPseudoClassSelector(\n  selectors                 ,\n)                         {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors,\n  };\n}\n\nexport function createRoleSelector(role        )               {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role,\n  };\n}\n\nexport function createTextSelector(text        )               {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text,\n  };\n}\n\nexport function createTestNameSelector(id        )                   {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id,\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot          )        {\n  const maybeFiber = getInstanceFromNode((hostRoot     ));\n  if (maybeFiber != null) {\n    if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n      throw new Error(\n        'Invalid host root specified. Should be either a React container or a node with a testname attribute.',\n      );\n    }\n\n    return ((maybeFiber     )       );\n  } else {\n    const fiberRoot = findFiberRoot(hostRoot);\n\n    if (fiberRoot === null) {\n      throw new Error(\n        'Could not find React container within specified host subtree.',\n      );\n    }\n\n    // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n    return ((fiberRoot     ).stateNode.current       );\n  }\n}\n\nfunction matchSelector(fiber       , selector          )          {\n  const tag = fiber.tag;\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n      break;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(\n        fiber,\n        ((selector     )                        ).value,\n      );\n    case ROLE_TYPE:\n      if (\n        tag === HostComponent ||\n        tag === HostHoistable ||\n        tag === HostSingleton\n      ) {\n        const node = fiber.stateNode;\n        if (\n          matchAccessibilityRole(node, ((selector     )              ).value)\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEXT_TYPE:\n      if (\n        tag === HostComponent ||\n        tag === HostText ||\n        tag === HostHoistable ||\n        tag === HostSingleton\n      ) {\n        const textContent = getTextContent(fiber);\n        if (\n          textContent !== null &&\n          textContent.indexOf(((selector     )              ).value) >= 0\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEST_NAME_TYPE:\n      if (\n        tag === HostComponent ||\n        tag === HostHoistable ||\n        tag === HostSingleton\n      ) {\n        const dataTestID = fiber.memoizedProps['data-testname'];\n        if (\n          typeof dataTestID === 'string' &&\n          dataTestID.toLowerCase() ===\n            ((selector     )                  ).value.toLowerCase()\n        ) {\n          return true;\n        }\n      }\n      break;\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector          )                {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      const displayName = getComponentNameFromType(selector.value) || 'Unknown';\n      return `<${displayName}>`;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return `:has(${selectorToString(selector) || ''})`;\n    case ROLE_TYPE:\n      return `[role=\"${((selector     )              ).value}\"]`;\n    case TEXT_TYPE:\n      return `\"${((selector     )              ).value}\"`;\n    case TEST_NAME_TYPE:\n      return `[data-testname=\"${((selector     )                  ).value}\"]`;\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n}\n\nfunction findPaths(root       , selectors                 )               {\n  const matchingFibers               = [];\n\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]     )       );\n    const tag = fiber.tag;\n    let selectorIndex = ((stack[index++]     )        );\n    let selector = selectors[selectorIndex];\n\n    if (\n      (tag === HostComponent ||\n        tag === HostHoistable ||\n        tag === HostSingleton) &&\n      isHiddenSubtree(fiber)\n    ) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n}\n\n// Same as findPaths but with eager bailout on first match\nfunction hasMatchingPaths(root       , selectors                 )          {\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]     )       );\n    const tag = fiber.tag;\n    let selectorIndex = ((stack[index++]     )        );\n    let selector = selectors[selectorIndex];\n\n    if (\n      (tag === HostComponent ||\n        tag === HostHoistable ||\n        tag === HostSingleton) &&\n      isHiddenSubtree(fiber)\n    ) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function findAllNodes(\n  hostRoot          ,\n  selectors                 ,\n)                  {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const instanceRoots                  = [];\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const node = ((stack[index++]     )       );\n    const tag = node.tag;\n    if (\n      tag === HostComponent ||\n      tag === HostHoistable ||\n      tag === HostSingleton\n    ) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n      instanceRoots.push(node.stateNode);\n    } else {\n      let child = node.child;\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\n\nexport function getFindAllNodesFailureDescription(\n  hostRoot          ,\n  selectors                 ,\n)                {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n\n  let maxSelectorIndex         = 0;\n  const matchedNames = [];\n\n  // The logic of this loop should be kept in sync with findPaths()\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]     )       );\n    const tag = fiber.tag;\n    let selectorIndex = ((stack[index++]     )        );\n    const selector = selectors[selectorIndex];\n\n    if (\n      (tag === HostComponent ||\n        tag === HostHoistable ||\n        tag === HostSingleton) &&\n      isHiddenSubtree(fiber)\n    ) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    const unmatchedNames = [];\n    for (let i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return (\n      'findAllNodes was able to match part of the selector:\\n' +\n      `  ${matchedNames.join(' > ')}\\n\\n` +\n      'No matching component was found for:\\n' +\n      `  ${unmatchedNames.join(' > ')}`\n    );\n  }\n\n  return null;\n}\n\n                            \n            \n            \n                \n                 \n  \n\nexport function findBoundingRects(\n  hostRoot          ,\n  selectors                 ,\n)                      {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const boundingRects                      = [];\n  for (let i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (let i = boundingRects.length - 1; i > 0; i--) {\n    const targetRect = boundingRects[i];\n    const targetLeft = targetRect.x;\n    const targetRight = targetLeft + targetRect.width;\n    const targetTop = targetRect.y;\n    const targetBottom = targetTop + targetRect.height;\n\n    for (let j = i - 1; j >= 0; j--) {\n      if (i !== j) {\n        const otherRect = boundingRects[j];\n        const otherLeft = otherRect.x;\n        const otherRight = otherLeft + otherRect.width;\n        const otherTop = otherRect.y;\n        const otherBottom = otherTop + otherRect.height;\n\n        // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (\n          targetLeft >= otherLeft &&\n          targetTop >= otherTop &&\n          targetRight <= otherRight &&\n          targetBottom <= otherBottom\n        ) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetLeft === otherLeft &&\n          targetRect.width === otherRect.width &&\n          !(otherBottom < targetTop) &&\n          !(otherTop > targetBottom)\n        ) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetTop === otherTop &&\n          targetRect.height === otherRect.height &&\n          !(otherRight < targetLeft) &&\n          !(otherLeft > targetRight)\n        ) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\n\nexport function focusWithin(\n  hostRoot          ,\n  selectors                 ,\n)          {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]     )       );\n    const tag = fiber.tag;\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n    if (\n      tag === HostComponent ||\n      tag === HostHoistable ||\n      tag === HostSingleton\n    ) {\n      const node = fiber.stateNode;\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n    let child = fiber.child;\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\n\nconst commitHooks                  = [];\n\nexport function onCommitRoot()       {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(commitHook => commitHook());\n  }\n}\n\n                                                 \n\n                                           \n                                                            \n          \n\nexport function observeVisibleRects(\n  hostRoot          ,\n  selectors                 ,\n  callback                                                                     ,\n  options                              ,\n)                           {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const {disconnect, observe, unobserve} = setupIntersectionObserver(\n    instanceRoots,\n    callback,\n    options,\n  );\n\n  // When React mutates the host environment, we may need to change what we're listening to.\n  const commitHook = () => {\n    const nextInstanceRoots = findAllNodes(hostRoot, selectors);\n\n    instanceRoots.forEach(target => {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n\n    nextInstanceRoots.forEach(target => {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n\n  return {\n    disconnect: () => {\n      // Stop listening for React mutations:\n      const index = commitHooks.indexOf(commitHook);\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      }\n\n      // Disconnect the host observer:\n      disconnect();\n    },\n  };\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\nimport {requestPostPaintCallback} from './ReactFiberConfig';\n\nlet postPaintCallbackScheduled = false;\nlet callbacks                                           = [];\n\nexport function schedulePostPaintCallback(callback                           ) {\n  callbacks.push(callback);\n  if (!postPaintCallbackScheduled) {\n    postPaintCallbackScheduled = true;\n    requestPostPaintCallback(endTime => {\n      for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](endTime);\n      }\n      postPaintCallbackScheduled = false;\n      callbacks = [];\n    });\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\n\n                                                          \n                                                           \n                                                  \n                                                                 \n                                                                 \n                                                                    \n                                                               \n             \n                             \n                    \n                  \n                                            \n                                                                      \n             \n           \n                         \n                        \n                            \n                                                \nimport {\n  getViewTransitionName,\n                           \n} from './ReactFiberViewTransitionComponent';\n                                                                   \n\nimport {\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableSchedulingProfiler,\n  enableUpdaterTracking,\n  enableTransitionTracing,\n  disableLegacyContext,\n  alwaysThrottleRetries,\n  enableInfiniteRenderLoopDetection,\n  disableLegacyMode,\n  disableDefaultPropsExceptForClasses,\n  enableComponentPerformanceTrack,\n  enableYieldingBeforePassive,\n  enableThrottledScheduling,\n  enableViewTransition,\n  enableGestureTransition,\n  enableDefaultTransitionIndicator,\n} from 'shared/ReactFeatureFlags';\nimport {resetOwnerStackLimit} from 'shared/ReactOwnerStackReset';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport is from 'shared/objectIs';\n\nimport reportGlobalError from 'shared/reportGlobalError';\n\nimport {\n  // Aliased because `act` will override and push to an internal queue\n  scheduleCallback as Scheduler_scheduleCallback,\n  shouldYield,\n  requestPaint,\n  now,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\nimport {\n  logBlockingStart,\n  logTransitionStart,\n  logRenderPhase,\n  logInterruptedRenderPhase,\n  logSuspendedRenderPhase,\n  logRecoveredRenderPhase,\n  logErroredRenderPhase,\n  logInconsistentRender,\n  logSuspendedWithDelayPhase,\n  logSuspenseThrottlePhase,\n  logSuspendedCommitPhase,\n  logCommitPhase,\n  logPaintYieldPhase,\n  logPassiveCommitPhase,\n  logYieldTime,\n  logActionYieldTime,\n  logSuspendedYieldTime,\n  setCurrentTrackFromLanes,\n  markAllLanesInOrder,\n} from './ReactFiberPerformanceTrack';\n\nimport {\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  afterActiveInstanceBlur,\n  startSuspendingCommit,\n  suspendOnActiveViewTransition,\n  waitForCommitToBeReady,\n  preloadInstance,\n  preloadResource,\n  supportsHydration,\n  setCurrentUpdatePriority,\n  getCurrentUpdatePriority,\n  resolveUpdatePriority,\n  trackSchedulerEvent,\n  startViewTransition,\n  startGestureTransition,\n  stopViewTransition,\n  createViewTransitionInstance,\n  flushHydrationEvents,\n} from './ReactFiberConfig';\n\nimport {createWorkInProgress, resetWorkInProgress} from './ReactFiber';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {getIsHydrating} from './ReactFiberHydrationContext';\nimport {\n  NoMode,\n  ProfileMode,\n  ConcurrentMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  NoStrictPassiveEffectsMode,\n} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  ClassComponent,\n  ActivityComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n} from './ReactWorkTags';\nimport {ConcurrentRoot, LegacyRoot} from './ReactRootTags';\n                                             \nimport {\n  NoFlags,\n  Incomplete,\n  StoreConsistency,\n  HostEffectMask,\n  ForceClientRender,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  PlacementDEV,\n  Visibility,\n  MountPassiveDev,\n  MountLayoutDev,\n  DidDefer,\n  ShouldSuspendCommit,\n  MaySuspendCommit,\n  ScheduleRetry,\n  PassiveTransitionMask,\n} from './ReactFiberFlags';\nimport {\n  NoLanes,\n  NoLane,\n  SyncLane,\n  claimNextRetryLane,\n  includesSyncLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  includesBlockingLane,\n  includesTransitionLane,\n  includesExpiredLane,\n  getNextLanes,\n  getEntangledLanes,\n  getLanesToRetrySynchronouslyOnError,\n  upgradePendingLanesToSync,\n  markRootSuspended as _markRootSuspended,\n  markRootUpdated as _markRootUpdated,\n  markRootPinged as _markRootPinged,\n  markRootFinished,\n  addFiberToLanesMap,\n  movePendingFibersToMemoized,\n  addTransitionToLanesMap,\n  getTransitionsForLanes,\n  includesSomeLane,\n  OffscreenLane,\n  SyncUpdateLanes,\n  UpdateLanes,\n  claimNextTransitionLane,\n  checkIfRootIsPrerendering,\n  includesOnlyViewTransitionEligibleLanes,\n  isGestureRender,\n  GestureLane,\n} from './ReactFiberLane';\nimport {\n  DiscreteEventPriority,\n  DefaultEventPriority,\n  lowerEventPriority,\n  lanesToEventPriority,\n  eventPriorityToLane,\n} from './ReactEventPriorities';\nimport {requestCurrentTransition} from './ReactFiberTransition';\nimport {\n  SelectiveHydrationException,\n  beginWork,\n  replayFunctionComponent,\n} from './ReactFiberBeginWork';\nimport {completeWork} from './ReactFiberCompleteWork';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n  initializeClassErrorUpdate,\n} from './ReactFiberThrow';\nimport {\n  commitBeforeMutationEffects,\n  shouldFireAfterActiveInstanceBlur,\n  commitAfterMutationEffects,\n  commitLayoutEffects,\n  commitMutationEffects,\n  commitPassiveMountEffects,\n  commitPassiveUnmountEffects,\n  disappearLayoutEffects,\n  reconnectPassiveEffects,\n  reappearLayoutEffects,\n  disconnectPassiveEffect,\n  invokeLayoutEffectMountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectUnmountInDEV,\n  accumulateSuspenseyCommit,\n} from './ReactFiberCommitWork';\nimport {resetShouldStartViewTransition} from './ReactFiberCommitViewTransitions';\nimport {shouldStartViewTransition} from './ReactFiberCommitViewTransitions';\nimport {\n  insertDestinationClones,\n  applyDepartureTransitions,\n  startGestureAnimations,\n} from './ReactFiberApplyGesture';\nimport {enqueueUpdate} from './ReactFiberClassUpdateQueue';\nimport {resetContextDependencies} from './ReactFiberNewContext';\nimport {\n  resetHooksAfterThrow,\n  resetHooksOnUnwind,\n  ContextOnlyDispatcher,\n} from './ReactFiberHooks';\nimport {DefaultAsyncDispatcher} from './ReactFiberAsyncDispatcher';\nimport {\n  createCapturedValueAtFiber,\n                     \n} from './ReactCapturedValue';\nimport {\n  enqueueConcurrentRenderForLane,\n  finishQueueingConcurrentUpdates,\n  getConcurrentlyUpdatedLanes,\n} from './ReactFiberConcurrentUpdates';\n\nimport {\n  blockingClampTime,\n  blockingUpdateTime,\n  blockingUpdateTask,\n  blockingEventTime,\n  blockingEventType,\n  blockingEventIsRepeat,\n  blockingSpawnedUpdate,\n  blockingSuspendedTime,\n  transitionClampTime,\n  transitionStartTime,\n  transitionUpdateTime,\n  transitionUpdateTask,\n  transitionEventTime,\n  transitionEventType,\n  transitionEventIsRepeat,\n  transitionSuspendedTime,\n  clearBlockingTimers,\n  clearTransitionTimers,\n  clampBlockingTimers,\n  clampTransitionTimers,\n  markNestedUpdateScheduled,\n  renderStartTime,\n  commitStartTime,\n  commitEndTime,\n  commitErrors,\n  recordRenderTime,\n  recordCommitTime,\n  recordCommitEndTime,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDuration,\n  stopProfilerTimerIfRunningAndRecordIncompleteDuration,\n  trackSuspendedTime,\n  startYieldTimer,\n  yieldStartTime,\n  yieldReason,\n  startPingTimerByLanes,\n  recordEffectError,\n  resetCommitErrors,\n} from './ReactProfilerTimer';\n\n// DEV stuff\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  resetCurrentFiber,\n  runWithFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  isDevToolsPresent,\n  markCommitStarted,\n  markCommitStopped,\n  markComponentRenderStopped,\n  markComponentSuspended,\n  markComponentErrored,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n  onCommitRoot as onCommitRootDevTools,\n  onPostCommitRoot as onPostCommitRootDevTools,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\nimport {releaseCache} from './ReactFiberCacheComponent';\nimport {\n  isLegacyActEnvironment,\n  isConcurrentActEnvironment,\n} from './ReactFiberAct';\nimport {processTransitionCallbacks} from './ReactFiberTracingMarkerComponent';\nimport {\n  SuspenseException,\n  SuspenseActionException,\n  SuspenseyCommitException,\n  getSuspendedThenable,\n  isThenableResolved,\n} from './ReactFiberThenable';\nimport {schedulePostPaintCallback} from './ReactPostPaintCallback';\nimport {\n  getSuspenseHandler,\n  getShellBoundary,\n} from './ReactFiberSuspenseContext';\nimport {resolveDefaultPropsOnNonClassComponent} from './ReactFiberLazyComponent';\nimport {resetChildReconcilerOnUnwind} from './ReactChildFiber';\nimport {\n  ensureRootIsScheduled,\n  flushSyncWorkOnAllRoots,\n  flushSyncWorkOnLegacyRootsOnly,\n  requestTransitionLane,\n} from './ReactFiberRootScheduler';\nimport {getMaskedContext, getUnmaskedContext} from './ReactFiberContext';\nimport {logUncaughtError} from './ReactFiberErrorLogger';\nimport {\n  deleteScheduledGesture,\n  stopCompletedGestures,\n} from './ReactFiberGestureScheduler';\nimport {claimQueuedTransitionTypes} from './ReactFiberTransitionTypes';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\n                               \n\nexport const NoContext = /*             */ 0b000;\nconst BatchedContext = /*               */ 0b001;\nexport const RenderContext = /*         */ 0b010;\nexport const CommitContext = /*         */ 0b100;\n\n                                                \nconst RootInProgress = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootSuspendedAtTheShell = 6;\nconst RootCompleted = 5;\n\n// Describes where we are in the React execution stack\nlet executionContext                   = NoContext;\n// The root we're working on\nlet workInProgressRoot                   = null;\n// The fiber we're working on\nlet workInProgress               = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes        = NoLanes;\n\n                                                                           \nconst NotSuspended                  = 0;\nconst SuspendedOnError                  = 1;\nconst SuspendedOnData                  = 2;\nconst SuspendedOnImmediate                  = 3;\nconst SuspendedOnInstance                  = 4;\nconst SuspendedOnInstanceAndReadyToContinue                  = 5;\nconst SuspendedOnDeprecatedThrowPromise                  = 6;\nconst SuspendedAndReadyToContinue                  = 7;\nconst SuspendedOnHydration                  = 8;\nconst SuspendedOnAction                  = 9;\n\n// When this is true, the work-in-progress fiber just suspended (or errored) and\n// we've yet to unwind the stack. In some cases, we may yield to the main thread\n// after this happens. If the fiber is pinged before we resume, we can retry\n// immediately instead of unwinding the stack.\nlet workInProgressSuspendedReason                  = NotSuspended;\nlet workInProgressThrownValue        = null;\n\n// Tracks whether any siblings were skipped during the unwind phase after\n// something suspends. Used to determine whether to schedule another render\n// to prewarm the skipped siblings.\nlet workInProgressRootDidSkipSuspendedSiblings          = false;\n// Whether the work-in-progress render is the result of a prewarm/prerender.\n// This tells us whether or not we should render the siblings after\n// something suspends.\nlet workInProgressRootIsPrerendering          = false;\n\n// Whether a ping listener was attached during this render. This is slightly\n// different that whether something suspended, because we don't add multiple\n// listeners to a promise we've already seen (per root and lane).\nlet workInProgressRootDidAttachPingListener          = false;\n\n// A contextual version of workInProgressRootRenderLanes. It is a superset of\n// the lanes that we started working on at the root. When we enter a subtree\n// that is currently hidden, we add the lanes that would have committed if\n// the hidden tree hadn't been deferred. This is modified by the\n// HiddenContext module.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with entangledRenderLanes.\nexport let entangledRenderLanes        = NoLanes;\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus                 = RootInProgress;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes        = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootInterleavedUpdatedLanes        = NoLanes;\n// Lanes that were updated during the render phase (*not* an interleaved event).\nlet workInProgressRootRenderPhaseUpdatedLanes        = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes        = NoLanes;\n// If this render scheduled deferred work, this is the lane of the deferred task.\nlet workInProgressDeferredLane       = NoLane;\n// Represents the retry lanes that were spawned by this render and have not\n// been pinged since, implying that they are still suspended.\nlet workInProgressSuspendedRetryLanes        = NoLanes;\n// Errors that are thrown during the render phase.\nlet workInProgressRootConcurrentErrors                                     =\n  null;\n// These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\nlet workInProgressRootRecoverableErrors                                     =\n  null;\n\n// Tracks when an update occurs during the render phase.\nlet workInProgressRootDidIncludeRecursiveRenderUpdate          = false;\n// Thacks when an update occurs during the commit phase. It's a separate\n// variable from the one for renders because the commit phase may run\n// concurrently to a render phase.\nlet didIncludeCommitPhaseUpdate          = false;\n// The most recent time we either committed a fallback, or when a fallback was\n// filled in with the resolved UI. This lets us throttle the appearance of new\n// content as it streams in, to minimize jank.\n// TODO: Think of a better name for this variable?\nlet globalMostRecentFallbackTime         = 0;\nconst FALLBACK_THROTTLE_MS         = 300;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime         = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nlet workInProgressTransitions                           = null;\nexport function getWorkInProgressTransitions()                           {\n  return workInProgressTransitions;\n}\n\nlet currentPendingTransitionCallbacks                                    = null;\nlet currentEndTime                = null;\n\nexport function addTransitionStartCallbackToPendingTransition(\n  transition            ,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: [],\n        transitionProgress: null,\n        transitionComplete: null,\n        markerProgress: null,\n        markerIncomplete: null,\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionStart === null) {\n      currentPendingTransitionCallbacks.transitionStart =\n        ([]                   );\n    }\n\n    currentPendingTransitionCallbacks.transitionStart.push(transition);\n  }\n}\n\nexport function addMarkerProgressCallbackToPendingTransition(\n  markerName        ,\n  transitions                 ,\n  pendingBoundaries                   ,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = ({\n        transitionStart: null,\n        transitionProgress: null,\n        transitionComplete: null,\n        markerProgress: new Map(),\n        markerIncomplete: null,\n        markerComplete: null,\n      }                            );\n    }\n\n    if (currentPendingTransitionCallbacks.markerProgress === null) {\n      currentPendingTransitionCallbacks.markerProgress = new Map();\n    }\n\n    currentPendingTransitionCallbacks.markerProgress.set(markerName, {\n      pendingBoundaries,\n      transitions,\n    });\n  }\n}\n\nexport function addMarkerIncompleteCallbackToPendingTransition(\n  markerName        ,\n  transitions                 ,\n  aborts                        ,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: null,\n        transitionComplete: null,\n        markerProgress: null,\n        markerIncomplete: new Map(),\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.markerIncomplete === null) {\n      currentPendingTransitionCallbacks.markerIncomplete = new Map();\n    }\n\n    currentPendingTransitionCallbacks.markerIncomplete.set(markerName, {\n      transitions,\n      aborts,\n    });\n  }\n}\n\nexport function addMarkerCompleteCallbackToPendingTransition(\n  markerName        ,\n  transitions                 ,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: null,\n        transitionComplete: null,\n        markerProgress: null,\n        markerIncomplete: null,\n        markerComplete: new Map(),\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.markerComplete === null) {\n      currentPendingTransitionCallbacks.markerComplete = new Map();\n    }\n\n    currentPendingTransitionCallbacks.markerComplete.set(\n      markerName,\n      transitions,\n    );\n  }\n}\n\nexport function addTransitionProgressCallbackToPendingTransition(\n  transition            ,\n  boundaries                   ,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: new Map(),\n        transitionComplete: null,\n        markerProgress: null,\n        markerIncomplete: null,\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionProgress === null) {\n      currentPendingTransitionCallbacks.transitionProgress = new Map();\n    }\n\n    currentPendingTransitionCallbacks.transitionProgress.set(\n      transition,\n      boundaries,\n    );\n  }\n}\n\nexport function addTransitionCompleteCallbackToPendingTransition(\n  transition            ,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionProgress: null,\n        transitionComplete: [],\n        markerProgress: null,\n        markerIncomplete: null,\n        markerComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionComplete === null) {\n      currentPendingTransitionCallbacks.transitionComplete =\n        ([]                   );\n    }\n\n    currentPendingTransitionCallbacks.transitionComplete.push(transition);\n  }\n}\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime()         {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet legacyErrorBoundariesThatAlreadyFailed                    = null;\n\n                                       \nconst IMMEDIATE_COMMIT = 0;\nconst SUSPENDED_COMMIT = 1;\nconst THROTTLED_COMMIT = 2;\n\nconst NO_PENDING_EFFECTS = 0;\nconst PENDING_MUTATION_PHASE = 1;\nconst PENDING_LAYOUT_PHASE = 2;\nconst PENDING_AFTER_MUTATION_PHASE = 3;\nconst PENDING_SPAWNED_WORK = 4;\nconst PENDING_PASSIVE_PHASE = 5;\nconst PENDING_GESTURE_MUTATION_PHASE = 6;\nconst PENDING_GESTURE_ANIMATION_PHASE = 7;\nlet pendingEffectsStatus                                = 0;\nlet pendingEffectsRoot            = (null     );\nlet pendingFinishedWork        = (null     );\nlet pendingEffectsLanes        = NoLanes;\nlet pendingEffectsRemainingLanes        = NoLanes;\nlet pendingEffectsRenderEndTime         = -0; // Profiling-only\nlet pendingPassiveTransitions                           = null;\nlet pendingRecoverableErrors                                     = null;\nlet pendingViewTransition                               = null;\nlet pendingViewTransitionEvents                                               =\n  null;\nlet pendingTransitionTypes                         = null;\nlet pendingDidIncludeRenderPhaseUpdate          = false;\nlet pendingSuspendedCommitReason                        = IMMEDIATE_COMMIT; // Profiling-only\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount         = 0;\nlet rootWithNestedUpdates                   = null;\nlet isFlushingPassiveEffects = false;\nlet didScheduleUpdateDuringPassiveEffects = false;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount         = 0;\nlet rootWithPassiveNestedUpdates                   = null;\n\nlet isRunningInsertionEffect = false;\n\nexport function getWorkInProgressRoot()                   {\n  return workInProgressRoot;\n}\n\nexport function getCommittingRoot()                   {\n  return pendingEffectsRoot;\n}\n\nexport function getWorkInProgressRootRenderLanes()        {\n  return workInProgressRootRenderLanes;\n}\n\nexport function hasPendingCommitEffects()          {\n  return (\n    pendingEffectsStatus !== NO_PENDING_EFFECTS &&\n    pendingEffectsStatus !== PENDING_PASSIVE_PHASE\n  );\n}\n\nexport function getRootWithPendingPassiveEffects()                   {\n  return pendingEffectsStatus === PENDING_PASSIVE_PHASE\n    ? pendingEffectsRoot\n    : null;\n}\n\nexport function getPendingPassiveEffectsLanes()        {\n  return pendingEffectsLanes;\n}\n\nexport function getPendingTransitionTypes()                         {\n  return pendingTransitionTypes;\n}\n\nexport function isWorkLoopSuspendedOnData()          {\n  return (\n    workInProgressSuspendedReason === SuspendedOnData ||\n    workInProgressSuspendedReason === SuspendedOnAction\n  );\n}\n\nexport function getCurrentTime()         {\n  return now();\n}\n\nexport function requestUpdateLane(fiber       )       {\n  // Special cases\n  const mode = fiber.mode;\n  if (!disableLegacyMode && (mode & ConcurrentMode) === NoMode) {\n    return (SyncLane      );\n  } else if (\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  const transition = requestCurrentTransition();\n  if (transition !== null) {\n    if (enableGestureTransition) {\n      if (transition.gesture) {\n        throw new Error(\n          'Cannot setState on regular state inside a startGestureTransition. ' +\n            'Gestures can only update the useOptimistic() hook. There should be no ' +\n            'side-effects associated with starting a Gesture until its Action is ' +\n            'invoked. Move side-effects to the Action instead.',\n        );\n      }\n    }\n    if (__DEV__) {\n      if (!transition._updatedFibers) {\n        transition._updatedFibers = new Set();\n      }\n      transition._updatedFibers.add(fiber);\n    }\n\n    return requestTransitionLane(transition);\n  }\n\n  return eventPriorityToLane(resolveUpdatePriority());\n}\n\nfunction requestRetryLane(fiber       ) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" \u2014 a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if (!disableLegacyMode && (mode & ConcurrentMode) === NoMode) {\n    return (SyncLane      );\n  }\n\n  return claimNextRetryLane();\n}\n\nexport function requestDeferredLane()       {\n  if (workInProgressDeferredLane === NoLane) {\n    // If there are multiple useDeferredValue hooks in the same render, the\n    // tasks that they spawn should all be batched together, so they should all\n    // receive the same lane.\n\n    // Check the priority of the current render to decide the priority of the\n    // deferred task.\n\n    // OffscreenLane is used for prerendering, but we also use OffscreenLane\n    // for incremental hydration. It's given the lowest priority because the\n    // initial HTML is the same as the final UI. But useDeferredValue during\n    // hydration is an exception \u2014 we need to upgrade the UI to the final\n    // value. So if we're currently hydrating, we treat it like a transition.\n    const isPrerendering =\n      includesSomeLane(workInProgressRootRenderLanes, OffscreenLane) &&\n      !getIsHydrating();\n    if (isPrerendering) {\n      // There's only one OffscreenLane, so if it contains deferred work, we\n      // should just reschedule using the same lane.\n      workInProgressDeferredLane = OffscreenLane;\n    } else {\n      // Everything else is spawned as a transition.\n      workInProgressDeferredLane = claimNextTransitionLane();\n    }\n  }\n\n  // Mark the parent Suspense boundary so it knows to spawn the deferred lane.\n  const suspenseHandler = getSuspenseHandler();\n  if (suspenseHandler !== null) {\n    // TODO: As an optimization, we shouldn't entangle the lanes at the root; we\n    // can entangle them using the baseLanes of the Suspense boundary instead.\n    // We only need to do something special if there's no Suspense boundary.\n    suspenseHandler.flags |= DidDefer;\n  }\n\n  return workInProgressDeferredLane;\n}\n\nexport function scheduleViewTransitionEvent(\n  fiber       ,\n  callback                                                                   ,\n)       {\n  if (enableViewTransition) {\n    if (callback != null) {\n      const state                      = fiber.stateNode;\n      let instance = state.ref;\n      if (instance === null) {\n        instance = state.ref = createViewTransitionInstance(\n          getViewTransitionName(fiber.memoizedProps, state),\n        );\n      }\n      if (pendingViewTransitionEvents === null) {\n        pendingViewTransitionEvents = [];\n      }\n      pendingViewTransitionEvents.push(callback.bind(null, instance));\n    }\n  }\n}\n\nexport function peekDeferredLane()       {\n  return workInProgressDeferredLane;\n}\n\nexport function scheduleUpdateOnFiber(\n  root           ,\n  fiber       ,\n  lane      ,\n) {\n  if (__DEV__) {\n    if (isRunningInsertionEffect) {\n      console.error('useInsertionEffect must not schedule updates.');\n    }\n  }\n\n  if (__DEV__) {\n    if (isFlushingPassiveEffects) {\n      didScheduleUpdateDuringPassiveEffects = true;\n    }\n  }\n\n  // Check if the work loop is currently suspended and waiting for data to\n  // finish loading.\n  if (\n    // Suspended render phase\n    (root === workInProgressRoot &&\n      (workInProgressSuspendedReason === SuspendedOnData ||\n        workInProgressSuspendedReason === SuspendedOnAction)) ||\n    // Suspended commit phase\n    root.cancelPendingCommit !== null\n  ) {\n    // The incoming update might unblock the current render. Interrupt the\n    // current attempt and restart from the top.\n    prepareFreshStack(root, NoLanes);\n    const didAttemptEntireTree = false;\n    markRootSuspended(\n      root,\n      workInProgressRootRenderLanes,\n      workInProgressDeferredLane,\n      didAttemptEntireTree,\n    );\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane);\n\n  if (\n    (executionContext & RenderContext) !== NoLanes &&\n    root === workInProgressRoot\n  ) {\n    // This update was dispatched during the render phase. This is a mistake\n    // if the update originates from user space (with the exception of local\n    // hook updates, which are handled differently and don't reach this\n    // function), but there are some internal React features that use this as\n    // an implementation detail, like selective hydration.\n    warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n    // Track lanes that were updated during the render phase\n    workInProgressRootRenderPhaseUpdatedLanes = mergeLanes(\n      workInProgressRootRenderPhaseUpdatedLanes,\n      lane,\n    );\n  } else {\n    // This is a normal update, scheduled from outside the render phase. For\n    // example, during an input event.\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        addFiberToLanesMap(root, fiber, lane);\n      }\n    }\n\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n    if (enableTransitionTracing) {\n      const transition = ReactSharedInternals.T;\n      if (transition !== null && transition.name != null) {\n        if (transition.startTime === -1) {\n          transition.startTime = now();\n        }\n\n        addTransitionToLanesMap(root, transition, lane);\n      }\n    }\n\n    if (root === workInProgressRoot) {\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root.\n      if ((executionContext & RenderContext) === NoContext) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(\n          workInProgressRootInterleavedUpdatedLanes,\n          lane,\n        );\n      }\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        const didAttemptEntireTree = false;\n        markRootSuspended(\n          root,\n          workInProgressRootRenderLanes,\n          workInProgressDeferredLane,\n          didAttemptEntireTree,\n        );\n      }\n    }\n\n    ensureRootIsScheduled(root);\n    if (\n      lane === SyncLane &&\n      executionContext === NoContext &&\n      !disableLegacyMode &&\n      (fiber.mode & ConcurrentMode) === NoMode\n    ) {\n      if (__DEV__ && ReactSharedInternals.isBatchingLegacy) {\n        // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      } else {\n        // Flush the synchronous work now, unless we're already working or inside\n        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n        // scheduleCallbackForFiber to preserve the ability to schedule a callback\n        // without immediately flushing it. We only do this for user-initiated\n        // updates, to preserve historical behavior of legacy mode.\n        resetRenderTimer();\n        flushSyncWorkOnLegacyRootsOnly();\n      }\n    }\n  }\n}\n\nexport function scheduleInitialHydrationOnRoot(root           , lane      ) {\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\n  // schedule the initial hydration of a root that has just been created. Most\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\n  //\n  // The main reason for this separate path, though, is to distinguish the\n  // initial children from subsequent updates. In fully client-rendered roots\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n  // updates, but hydration roots are special because the initial render must\n  // match what was rendered on the server.\n  const current = root.current;\n  current.lanes = lane;\n  markRootUpdated(root, lane);\n  ensureRootIsScheduled(root);\n}\n\nexport function isUnsafeClassRenderPhaseUpdate(fiber       )          {\n  // Check if this is a render phase update. Only called by class components,\n  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n  return (executionContext & RenderContext) !== NoContext;\n}\n\nexport function performWorkOnRoot(\n  root           ,\n  lanes       ,\n  forceSync         ,\n)       {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    if (workInProgressRootRenderLanes !== NoLanes && workInProgress !== null) {\n      const yieldedFiber = workInProgress;\n      // We've returned from yielding to the event loop. Let's log the time it took.\n      const yieldEndTime = now();\n      switch (yieldReason) {\n        case SuspendedOnImmediate:\n        case SuspendedOnData:\n          logSuspendedYieldTime(yieldStartTime, yieldEndTime, yieldedFiber);\n          break;\n        case SuspendedOnAction:\n          logActionYieldTime(yieldStartTime, yieldEndTime, yieldedFiber);\n          break;\n        default:\n          logYieldTime(yieldStartTime, yieldEndTime);\n      }\n    }\n  }\n\n  // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  const shouldTimeSlice =\n    (!forceSync &&\n      !includesBlockingLane(lanes) &&\n      !includesExpiredLane(root, lanes)) ||\n    // If we're prerendering, then we should use the concurrent work loop\n    // even if the lanes are synchronous, so that prerendering never blocks\n    // the main thread.\n    // TODO: We should consider doing this whenever a sync lane is suspended,\n    // even for regular pings.\n    checkIfRootIsPrerendering(root, lanes);\n\n  let exitStatus = shouldTimeSlice\n    ? renderRootConcurrent(root, lanes)\n    : renderRootSync(root, lanes, true);\n\n  let renderWasConcurrent = shouldTimeSlice;\n\n  do {\n    if (exitStatus === RootInProgress) {\n      // Render phase is still in progress.\n      if (workInProgressRootIsPrerendering && !shouldTimeSlice) {\n        // We're in prerendering mode, but time slicing is not enabled. This\n        // happens when something suspends during a synchronous update. Exit the\n        // the work loop. When we resume, we'll use the concurrent work loop so\n        // that prerendering is non-blocking.\n        //\n        // Mark the root as suspended. Usually we do this at the end of the\n        // render phase, but we do it here so that we resume in\n        // prerendering mode.\n        // TODO: Consider always calling markRootSuspended immediately.\n        // Needs to be *after* we attach a ping listener, though.\n        const didAttemptEntireTree = false;\n        markRootSuspended(root, lanes, NoLane, didAttemptEntireTree);\n      }\n      if (enableProfilerTimer && enableComponentPerformanceTrack) {\n        // We're about to yield. Let's keep track of how long we yield to the event loop.\n        // We also stash the suspended reason at the time we yielded since it might have\n        // changed when we resume such as when it gets pinged.\n        startYieldTimer(workInProgressSuspendedReason);\n      }\n      break;\n    } else {\n      let renderEndTime = 0;\n      if (enableProfilerTimer && enableComponentPerformanceTrack) {\n        renderEndTime = now();\n      }\n\n      // The render completed.\n\n      // Check if this render may have yielded to a concurrent event, and if so,\n      // confirm that any newly rendered stores are consistent.\n      // TODO: It's possible that even a concurrent render may never have yielded\n      // to the main thread, if it was fast enough, or if it expired. We could\n      // skip the consistency check in that case, too.\n      const finishedWork        = (root.current.alternate     );\n      if (\n        renderWasConcurrent &&\n        !isRenderConsistentWithExternalStores(finishedWork)\n      ) {\n        if (enableProfilerTimer && enableComponentPerformanceTrack) {\n          setCurrentTrackFromLanes(lanes);\n          logInconsistentRender(renderStartTime, renderEndTime);\n          finalizeRender(lanes, renderEndTime);\n        }\n        // A store was mutated in an interleaved event. Render again,\n        // synchronously, to block further mutations.\n        exitStatus = renderRootSync(root, lanes, false);\n        // We assume the tree is now consistent because we didn't yield to any\n        // concurrent events.\n        renderWasConcurrent = false;\n        // Need to check the exit status again.\n        continue;\n      }\n\n      // Check if something threw\n      if (\n        (disableLegacyMode || root.tag !== LegacyRoot) &&\n        exitStatus === RootErrored\n      ) {\n        const lanesThatJustErrored = lanes;\n        const errorRetryLanes = getLanesToRetrySynchronouslyOnError(\n          root,\n          lanesThatJustErrored,\n        );\n        if (errorRetryLanes !== NoLanes) {\n          if (enableProfilerTimer && enableComponentPerformanceTrack) {\n            setCurrentTrackFromLanes(lanes);\n            logErroredRenderPhase(renderStartTime, renderEndTime, lanes);\n            finalizeRender(lanes, renderEndTime);\n          }\n          lanes = errorRetryLanes;\n          exitStatus = recoverFromConcurrentError(\n            root,\n            lanesThatJustErrored,\n            errorRetryLanes,\n          );\n          renderWasConcurrent = false;\n          // Need to check the exit status again.\n          if (exitStatus !== RootErrored) {\n            // The root did not error this time. Restart the exit algorithm\n            // from the beginning.\n            // TODO: Refactor the exit algorithm to be less confusing. Maybe\n            // more branches + recursion instead of a loop. I think the only\n            // thing that causes it to be a loop is the RootSuspendedAtTheShell\n            // check. If that's true, then we don't need a loop/recursion\n            // at all.\n            continue;\n          } else {\n            // The root errored yet again. Proceed to commit the tree.\n            if (enableProfilerTimer && enableComponentPerformanceTrack) {\n              renderEndTime = now();\n            }\n          }\n        }\n      }\n      if (exitStatus === RootFatalErrored) {\n        if (enableProfilerTimer && enableComponentPerformanceTrack) {\n          setCurrentTrackFromLanes(lanes);\n          logErroredRenderPhase(renderStartTime, renderEndTime, lanes);\n          finalizeRender(lanes, renderEndTime);\n        }\n        prepareFreshStack(root, NoLanes);\n        // Since this is a fatal error, we're going to pretend we attempted\n        // the entire tree, to avoid scheduling a prerender.\n        const didAttemptEntireTree = true;\n        markRootSuspended(root, lanes, NoLane, didAttemptEntireTree);\n        break;\n      }\n\n      // We now have a consistent tree. The next step is either to commit it,\n      // or, if something suspended, wait to commit it after a timeout.\n      finishConcurrentRender(\n        root,\n        exitStatus,\n        finishedWork,\n        lanes,\n        renderEndTime,\n      );\n    }\n    break;\n  } while (true);\n\n  ensureRootIsScheduled(root);\n}\n\nfunction recoverFromConcurrentError(\n  root           ,\n  originallyAttemptedLanes       ,\n  errorRetryLanes       ,\n) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n\n  // Before rendering again, save the errors from the previous attempt.\n  const errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n  const wasRootDehydrated = supportsHydration && isRootDehydrated(root);\n  if (wasRootDehydrated) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    const rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n  }\n\n  const exitStatus = renderRootSync(root, errorRetryLanes, false);\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n\n    if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {\n      // During the synchronous render, we attached additional ping listeners.\n      // This is highly suggestive of an uncached promise (though it's not the\n      // only reason this would happen). If it was an uncached promise, then\n      // it may have masked a downstream error from ocurring without actually\n      // fixing it. Example:\n      //\n      //    use(Promise.resolve('uncached'))\n      //    throw new Error('Oops!')\n      //\n      // When this happens, there's a conflict between blocking potential\n      // concurrent data races and unwrapping uncached promise values. We\n      // have to choose one or the other. Because the data race recovery is\n      // a last ditch effort, we'll disable it.\n      root.errorRecoveryDisabledLanes = mergeLanes(\n        root.errorRecoveryDisabledLanes,\n        originallyAttemptedLanes,\n      );\n\n      // Mark the current render as suspended and force it to restart. Once\n      // these lanes finish successfully, we'll re-enable the error recovery\n      // mechanism for subsequent updates.\n      workInProgressRootInterleavedUpdatedLanes |= originallyAttemptedLanes;\n      return RootSuspendedWithDelay;\n    }\n\n    // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n    const errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt;\n    // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  } else {\n    // The UI failed to recover.\n  }\n  return exitStatus;\n}\n\nexport function queueRecoverableErrors(errors                             ) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    // $FlowFixMe[method-unbinding]\n    workInProgressRootRecoverableErrors.push.apply(\n      workInProgressRootRecoverableErrors,\n      errors,\n    );\n  }\n}\n\nfunction finishConcurrentRender(\n  root           ,\n  exitStatus                ,\n  finishedWork       ,\n  lanes       ,\n  renderEndTime        , // Profiling-only\n) {\n  // TODO: The fact that most of these branches are identical suggests that some\n  // of the exit statuses are not best modeled as exit statuses and should be\n  // tracked orthogonally.\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored: {\n      throw new Error('Root did not complete. This is a bug in React.');\n    }\n    case RootSuspendedWithDelay: {\n      if (!includesOnlyTransitions(lanes)) {\n        // Commit the placeholder.\n        break;\n      }\n    }\n    // Fallthrough\n    case RootSuspendedAtTheShell: {\n      // This is a transition, so we should exit without committing a\n      // placeholder and without scheduling a timeout. Delay indefinitely\n      // until we receive more data.\n      if (enableProfilerTimer && enableComponentPerformanceTrack) {\n        setCurrentTrackFromLanes(lanes);\n        logSuspendedRenderPhase(renderStartTime, renderEndTime, lanes);\n        finalizeRender(lanes, renderEndTime);\n        trackSuspendedTime(lanes, renderEndTime);\n      }\n      const didAttemptEntireTree = !workInProgressRootDidSkipSuspendedSiblings;\n      markRootSuspended(\n        root,\n        lanes,\n        workInProgressDeferredLane,\n        didAttemptEntireTree,\n      );\n      return;\n    }\n    case RootErrored: {\n      // This render errored. Ignore any recoverable errors because we weren't actually\n      // able to recover. Instead, whatever the final errors were is the ones we log.\n      // This ensures that we only log the actual client side error if it's just a plain\n      // error thrown from a component on the server and the client.\n      workInProgressRootRecoverableErrors = null;\n      break;\n    }\n    case RootSuspended:\n    case RootCompleted: {\n      break;\n    }\n    default: {\n      throw new Error('Unknown root exit status.');\n    }\n  }\n\n  if (shouldForceFlushFallbacksInDEV()) {\n    // We're inside an `act` scope. Commit immediately.\n    commitRoot(\n      root,\n      finishedWork,\n      lanes,\n      workInProgressRootRecoverableErrors,\n      workInProgressTransitions,\n      workInProgressRootDidIncludeRecursiveRenderUpdate,\n      workInProgressDeferredLane,\n      workInProgressRootInterleavedUpdatedLanes,\n      workInProgressSuspendedRetryLanes,\n      exitStatus,\n      IMMEDIATE_COMMIT,\n      renderStartTime,\n      renderEndTime,\n    );\n  } else {\n    if (\n      includesOnlyRetries(lanes) &&\n      (alwaysThrottleRetries || exitStatus === RootSuspended)\n    ) {\n      // This render only included retries, no updates. Throttle committing\n      // retries so that we don't show too many loading states too quickly.\n      const msUntilTimeout =\n        globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n\n      // Don't bother with a very short suspense time.\n      if (msUntilTimeout > 10) {\n        const didAttemptEntireTree =\n          !workInProgressRootDidSkipSuspendedSiblings;\n        markRootSuspended(\n          root,\n          lanes,\n          workInProgressDeferredLane,\n          didAttemptEntireTree,\n        );\n\n        const nextLanes = getNextLanes(root, NoLanes, true);\n        if (nextLanes !== NoLanes) {\n          // There's additional work we can do on this root. We might as well\n          // attempt to work on that while we're suspended.\n          return;\n        }\n\n        // The render is suspended, it hasn't timed out, and there's no\n        // lower priority work to do. Instead of committing the fallback\n        // immediately, wait for more data to arrive.\n        // TODO: Combine retry throttling with Suspensey commits. Right now they\n        // run one after the other.\n        root.timeoutHandle = scheduleTimeout(\n          commitRootWhenReady.bind(\n            null,\n            root,\n            finishedWork,\n            workInProgressRootRecoverableErrors,\n            workInProgressTransitions,\n            workInProgressRootDidIncludeRecursiveRenderUpdate,\n            lanes,\n            workInProgressDeferredLane,\n            workInProgressRootInterleavedUpdatedLanes,\n            workInProgressSuspendedRetryLanes,\n            workInProgressRootDidSkipSuspendedSiblings,\n            exitStatus,\n            THROTTLED_COMMIT,\n            renderStartTime,\n            renderEndTime,\n          ),\n          msUntilTimeout,\n        );\n        return;\n      }\n    }\n    commitRootWhenReady(\n      root,\n      finishedWork,\n      workInProgressRootRecoverableErrors,\n      workInProgressTransitions,\n      workInProgressRootDidIncludeRecursiveRenderUpdate,\n      lanes,\n      workInProgressDeferredLane,\n      workInProgressRootInterleavedUpdatedLanes,\n      workInProgressSuspendedRetryLanes,\n      workInProgressRootDidSkipSuspendedSiblings,\n      exitStatus,\n      IMMEDIATE_COMMIT,\n      renderStartTime,\n      renderEndTime,\n    );\n  }\n}\n\nfunction commitRootWhenReady(\n  root           ,\n  finishedWork       ,\n  recoverableErrors                                    ,\n  transitions                          ,\n  didIncludeRenderPhaseUpdate         ,\n  lanes       ,\n  spawnedLane      ,\n  updatedLanes       ,\n  suspendedRetryLanes       ,\n  didSkipSuspendedSiblings         ,\n  exitStatus                ,\n  suspendedCommitReason                       , // Profiling-only\n  completedRenderStartTime        , // Profiling-only\n  completedRenderEndTime        , // Profiling-only\n) {\n  root.timeoutHandle = noTimeout;\n\n  // TODO: Combine retry throttling with Suspensey commits. Right now they run\n  // one after the other.\n  const BothVisibilityAndMaySuspendCommit = Visibility | MaySuspendCommit;\n  const subtreeFlags = finishedWork.subtreeFlags;\n  const isViewTransitionEligible =\n    enableViewTransition && includesOnlyViewTransitionEligibleLanes(lanes); // TODO: Use a subtreeFlag to optimize.\n  const isGestureTransition = enableGestureTransition && isGestureRender(lanes);\n  const maySuspendCommit =\n    subtreeFlags & ShouldSuspendCommit ||\n    (subtreeFlags & BothVisibilityAndMaySuspendCommit) ===\n      BothVisibilityAndMaySuspendCommit;\n  if (isViewTransitionEligible || maySuspendCommit || isGestureTransition) {\n    // Before committing, ask the renderer whether the host tree is ready.\n    // If it's not, we'll wait until it notifies us.\n    startSuspendingCommit();\n    // This will walk the completed fiber tree and attach listeners to all\n    // the suspensey resources. The renderer is responsible for accumulating\n    // all the load events. This all happens in a single synchronous\n    // transaction, so it track state in its own module scope.\n    // This will also track any newly added or appearing ViewTransition\n    // components for the purposes of forming pairs.\n    accumulateSuspenseyCommit(finishedWork, lanes);\n    if (isViewTransitionEligible || isGestureTransition) {\n      // If we're stopping gestures we don't have to wait for any pending\n      // view transition. We'll stop it when we commit.\n      if (!enableGestureTransition || root.stoppingGestures === null) {\n        suspendOnActiveViewTransition(root.containerInfo);\n      }\n    }\n    // At the end, ask the renderer if it's ready to commit, or if we should\n    // suspend. If it's not ready, it will return a callback to subscribe to\n    // a ready event.\n    const schedulePendingCommit = waitForCommitToBeReady();\n    if (schedulePendingCommit !== null) {\n      // NOTE: waitForCommitToBeReady returns a subscribe function so that we\n      // only allocate a function if the commit isn't ready yet. The other\n      // pattern would be to always pass a callback to waitForCommitToBeReady.\n\n      // Not yet ready to commit. Delay the commit until the renderer notifies\n      // us that it's ready. This will be canceled if we start work on the\n      // root again.\n      root.cancelPendingCommit = schedulePendingCommit(\n        commitRoot.bind(\n          null,\n          root,\n          finishedWork,\n          lanes,\n          recoverableErrors,\n          transitions,\n          didIncludeRenderPhaseUpdate,\n          spawnedLane,\n          updatedLanes,\n          suspendedRetryLanes,\n          exitStatus,\n          SUSPENDED_COMMIT,\n          completedRenderStartTime,\n          completedRenderEndTime,\n        ),\n      );\n      const didAttemptEntireTree = !didSkipSuspendedSiblings;\n      markRootSuspended(root, lanes, spawnedLane, didAttemptEntireTree);\n      return;\n    }\n  }\n\n  // Otherwise, commit immediately.;\n  commitRoot(\n    root,\n    finishedWork,\n    lanes,\n    recoverableErrors,\n    transitions,\n    didIncludeRenderPhaseUpdate,\n    spawnedLane,\n    updatedLanes,\n    suspendedRetryLanes,\n    exitStatus,\n    suspendedCommitReason,\n    completedRenderStartTime,\n    completedRenderEndTime,\n  );\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork       )          {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  let node        = finishedWork;\n  while (true) {\n    const tag = node.tag;\n    if (\n      (tag === FunctionComponent ||\n        tag === ForwardRef ||\n        tag === SimpleMemoComponent) &&\n      node.flags & StoreConsistency\n    ) {\n      const updateQueue                                      =\n        (node.updateQueue     );\n      if (updateQueue !== null) {\n        const checks = updateQueue.stores;\n        if (checks !== null) {\n          for (let i = 0; i < checks.length; i++) {\n            const check = checks[i];\n            const getSnapshot = check.getSnapshot;\n            const renderedValue = check.value;\n            try {\n              if (!is(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n    const child = node.child;\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n    if (node === finishedWork) {\n      return true;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n  return true;\n}\n\n// The extra indirections around markRootUpdated and markRootSuspended is\n// needed to avoid a circular dependency between this module and\n// ReactFiberLane. There's probably a better way to split up these modules and\n// avoid this problem. Perhaps all the root-marking functions should move into\n// the work loop.\n\nfunction markRootUpdated(root           , updatedLanes       ) {\n  _markRootUpdated(root, updatedLanes);\n\n  if (enableInfiniteRenderLoopDetection) {\n    // Check for recursive updates\n    if (executionContext & RenderContext) {\n      workInProgressRootDidIncludeRecursiveRenderUpdate = true;\n    } else if (executionContext & CommitContext) {\n      didIncludeCommitPhaseUpdate = true;\n    }\n\n    throwIfInfiniteUpdateLoopDetected();\n  }\n}\n\nfunction markRootPinged(root           , pingedLanes       ) {\n  _markRootPinged(root, pingedLanes);\n\n  if (enableInfiniteRenderLoopDetection) {\n    // Check for recursive pings. Pings are conceptually different from updates in\n    // other contexts but we call it an \"update\" in this context because\n    // repeatedly pinging a suspended render can cause a recursive render loop.\n    // The relevant property is that it can result in a new render attempt\n    // being scheduled.\n    if (executionContext & RenderContext) {\n      workInProgressRootDidIncludeRecursiveRenderUpdate = true;\n    } else if (executionContext & CommitContext) {\n      didIncludeCommitPhaseUpdate = true;\n    }\n\n    throwIfInfiniteUpdateLoopDetected();\n  }\n}\n\nfunction markRootSuspended(\n  root           ,\n  suspendedLanes       ,\n  spawnedLane      ,\n  didAttemptEntireTree         ,\n) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(\n    suspendedLanes,\n    workInProgressRootInterleavedUpdatedLanes,\n  );\n  _markRootSuspended(root, suspendedLanes, spawnedLane, didAttemptEntireTree);\n}\n\nexport function flushRoot(root           , lanes       ) {\n  if (lanes !== NoLanes) {\n    upgradePendingLanesToSync(root, lanes);\n    ensureRootIsScheduled(root);\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      // TODO: For historical reasons this flushes all sync work across all\n      // roots. It shouldn't really matter either way, but we could change this\n      // to only flush the given root.\n      flushSyncWorkOnAllRoots();\n    }\n  }\n}\n\nexport function getExecutionContext()                   {\n  return executionContext;\n}\n\nexport function deferredUpdates   (fn         )    {\n  const prevTransition = ReactSharedInternals.T;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    setCurrentUpdatePriority(DefaultEventPriority);\n    ReactSharedInternals.T = null;\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactSharedInternals.T = prevTransition;\n  }\n}\n\nexport function batchedUpdates      (fn        , a   )    {\n  if (disableLegacyMode) {\n    // batchedUpdates is a no-op now, but there's still some internal react-dom\n    // code calling it, that we can't remove until we remove legacy mode.\n    return fn(a);\n  } else {\n    const prevExecutionContext = executionContext;\n    executionContext |= BatchedContext;\n    try {\n      return fn(a);\n    } finally {\n      executionContext = prevExecutionContext;\n      // If there were legacy sync updates, flush them at the end of the outer\n      // most batchedUpdates-like method.\n      if (\n        executionContext === NoContext &&\n        // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n        !(__DEV__ && ReactSharedInternals.isBatchingLegacy)\n      ) {\n        resetRenderTimer();\n        flushSyncWorkOnLegacyRootsOnly();\n      }\n    }\n  }\n}\n\nexport function discreteUpdates               (\n  fn                   ,\n  a   ,\n  b   ,\n  c   ,\n  d   ,\n)    {\n  const prevTransition = ReactSharedInternals.T;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    ReactSharedInternals.T = null;\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactSharedInternals.T = prevTransition;\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\n                                                            \n                                                     \nexport function flushSyncFromReconciler   (fn                  )           {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (\n    pendingEffectsStatus !== NO_PENDING_EFFECTS &&\n    !disableLegacyMode &&\n    pendingEffectsRoot.tag === LegacyRoot &&\n    (executionContext & (RenderContext | CommitContext)) === NoContext\n  ) {\n    flushPendingEffects();\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  const prevTransition = ReactSharedInternals.T;\n  const previousPriority = getCurrentUpdatePriority();\n\n  try {\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    ReactSharedInternals.T = null;\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactSharedInternals.T = prevTransition;\n\n    executionContext = prevExecutionContext;\n    // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncWorkOnAllRoots();\n    }\n  }\n}\n\n// If called outside of a render or commit will flush all sync work on all roots\n// Returns whether the the call was during a render or not\nexport function flushSyncWork()          {\n  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n    flushSyncWorkOnAllRoots();\n    return false;\n  }\n  return true;\n}\n\nexport function isAlreadyRendering()          {\n  // Used by the renderer to print a warning if certain APIs are called from\n  // the wrong context, and for profiling warnings.\n  return (executionContext & (RenderContext | CommitContext)) !== NoContext;\n}\n\nexport function isInvalidExecutionContextForEventFunction()          {\n  // Used to throw if certain APIs are called from the wrong context.\n  return (executionContext & RenderContext) !== NoContext;\n}\n\n// This is called by the HiddenContext module when we enter or leave a\n// hidden subtree. The stack logic is managed there because that's the only\n// place that ever modifies it. Which module it lives in doesn't matter for\n// performance because this function will get inlined regardless\nexport function setEntangledRenderLanes(newEntangledRenderLanes       ) {\n  entangledRenderLanes = newEntangledRenderLanes;\n}\n\nexport function getEntangledRenderLanes()        {\n  return entangledRenderLanes;\n}\n\nfunction resetWorkInProgressStack() {\n  if (workInProgress === null) return;\n  let interruptedWork;\n  if (workInProgressSuspendedReason === NotSuspended) {\n    // Normal case. Work-in-progress hasn't started yet. Unwind all\n    // its parents.\n    interruptedWork = workInProgress.return;\n  } else {\n    // Work-in-progress is in suspended state. Reset the work loop and unwind\n    // both the suspended fiber and all its parents.\n    resetSuspendedWorkLoopOnUnwind(workInProgress);\n    interruptedWork = workInProgress;\n  }\n  while (interruptedWork !== null) {\n    const current = interruptedWork.alternate;\n    unwindInterruptedWork(\n      current,\n      interruptedWork,\n      workInProgressRootRenderLanes,\n    );\n    interruptedWork = interruptedWork.return;\n  }\n  workInProgress = null;\n}\n\nfunction finalizeRender(lanes       , finalizationTime        )       {\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    if (includesSyncLane(lanes) || includesBlockingLane(lanes)) {\n      clampBlockingTimers(finalizationTime);\n    }\n    if (includesTransitionLane(lanes)) {\n      clampTransitionTimers(finalizationTime);\n    }\n  }\n}\n\nfunction prepareFreshStack(root           , lanes       )        {\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    // The order of tracks within a group are determined by the earliest start time.\n    // Are tracks should show up in priority order and we should ideally always show\n    // every track. This is a hack to ensure that we're displaying all tracks in the\n    // right order. Ideally we could do this only once but because calls that aren't\n    // recorded aren't considered for ordering purposes, we need to keep adding these\n    // over and over again in case recording has just started. We can't tell when\n    // recording starts.\n    markAllLanesInOrder();\n\n    const previousRenderStartTime = renderStartTime;\n    // Starting a new render. Log the end of any previous renders and the\n    // blocked time before the render started.\n    recordRenderTime();\n    // If this was a restart, e.g. due to an interrupting update, then there's no space\n    // in the track to log the cause since we'll have rendered all the way up until the\n    // restart so we need to clamp that.\n    if (\n      workInProgressRootRenderLanes !== NoLanes &&\n      previousRenderStartTime > 0\n    ) {\n      setCurrentTrackFromLanes(workInProgressRootRenderLanes);\n      if (\n        workInProgressRootExitStatus === RootSuspended ||\n        workInProgressRootExitStatus === RootSuspendedWithDelay\n      ) {\n        // If the root was already suspended when it got interrupted and restarted,\n        // then this is considered a prewarm and not an interrupted render because\n        // we couldn't have shown anything anyway so it's not a bad thing that we\n        // got interrupted.\n        logSuspendedRenderPhase(\n          previousRenderStartTime,\n          renderStartTime,\n          lanes,\n        );\n      } else {\n        logInterruptedRenderPhase(\n          previousRenderStartTime,\n          renderStartTime,\n          lanes,\n        );\n      }\n      finalizeRender(workInProgressRootRenderLanes, renderStartTime);\n    }\n\n    if (includesSyncLane(lanes) || includesBlockingLane(lanes)) {\n      const clampedUpdateTime =\n        blockingUpdateTime >= 0 && blockingUpdateTime < blockingClampTime\n          ? blockingClampTime\n          : blockingUpdateTime;\n      const clampedEventTime =\n        blockingEventTime >= 0 && blockingEventTime < blockingClampTime\n          ? blockingClampTime\n          : blockingEventTime;\n      if (blockingSuspendedTime >= 0) {\n        setCurrentTrackFromLanes(lanes);\n        logSuspendedWithDelayPhase(\n          blockingSuspendedTime,\n          // Clamp the suspended time to the first event/update.\n          clampedEventTime >= 0\n            ? clampedEventTime\n            : clampedUpdateTime >= 0\n              ? clampedUpdateTime\n              : renderStartTime,\n          lanes,\n        );\n      }\n      logBlockingStart(\n        clampedUpdateTime,\n        clampedEventTime,\n        blockingEventType,\n        blockingEventIsRepeat,\n        blockingSpawnedUpdate,\n        renderStartTime,\n        lanes,\n        blockingUpdateTask,\n      );\n      clearBlockingTimers();\n    }\n    if (includesTransitionLane(lanes)) {\n      const clampedStartTime =\n        transitionStartTime >= 0 && transitionStartTime < transitionClampTime\n          ? transitionClampTime\n          : transitionStartTime;\n      const clampedUpdateTime =\n        transitionUpdateTime >= 0 && transitionUpdateTime < transitionClampTime\n          ? transitionClampTime\n          : transitionUpdateTime;\n      const clampedEventTime =\n        transitionEventTime >= 0 && transitionEventTime < transitionClampTime\n          ? transitionClampTime\n          : transitionEventTime;\n      if (transitionSuspendedTime >= 0) {\n        setCurrentTrackFromLanes(lanes);\n        logSuspendedWithDelayPhase(\n          transitionSuspendedTime,\n          // Clamp the suspended time to the first event/update.\n          clampedEventTime >= 0\n            ? clampedEventTime\n            : clampedUpdateTime >= 0\n              ? clampedUpdateTime\n              : renderStartTime,\n          lanes,\n        );\n      }\n      logTransitionStart(\n        clampedStartTime,\n        clampedUpdateTime,\n        clampedEventTime,\n        transitionEventType,\n        transitionEventIsRepeat,\n        renderStartTime,\n        transitionUpdateTask,\n      );\n      clearTransitionTimers();\n    }\n  }\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe[incompatible-call] Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n  const cancelPendingCommit = root.cancelPendingCommit;\n  if (cancelPendingCommit !== null) {\n    root.cancelPendingCommit = null;\n    cancelPendingCommit();\n  }\n\n  resetWorkInProgressStack();\n  workInProgressRoot = root;\n  const rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = lanes;\n  workInProgressSuspendedReason = NotSuspended;\n  workInProgressThrownValue = null;\n  workInProgressRootDidSkipSuspendedSiblings = false;\n  workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);\n  workInProgressRootDidAttachPingListener = false;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootRenderPhaseUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressDeferredLane = NoLane;\n  workInProgressSuspendedRetryLanes = NoLanes;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n  workInProgressRootDidIncludeRecursiveRenderUpdate = false;\n\n  // Get the lanes that are entangled with whatever we're about to render. We\n  // track these separately so we can distinguish the priority of the render\n  // task from the priority of the lanes it is entangled with. For example, a\n  // transition may not be allowed to finish unless it includes the Sync lane,\n  // which is currently suspended. We should be able to render the Transition\n  // and Sync lane in the same batch, but at Transition priority, because the\n  // Sync lane already suspended.\n  entangledRenderLanes = getEntangledLanes(root, lanes);\n\n  finishQueueingConcurrentUpdates();\n\n  if (__DEV__) {\n    resetOwnerStackLimit();\n\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n\n  return rootWorkInProgress;\n}\n\nfunction resetSuspendedWorkLoopOnUnwind(fiber       ) {\n  // Reset module-level state that was set during the render phase.\n  resetContextDependencies();\n  resetHooksOnUnwind(fiber);\n  resetChildReconcilerOnUnwind();\n}\n\nfunction handleThrow(root           , thrownValue     )       {\n  // A component threw an exception. Usually this is because it suspended, but\n  // it also includes regular program errors.\n  //\n  // We're either going to unwind the stack to show a Suspense or error\n  // boundary, or we're going to replay the component again. Like after a\n  // promise resolves.\n  //\n  // Until we decide whether we're going to unwind or replay, we should preserve\n  // the current state of the work loop without resetting anything.\n  //\n  // If we do decide to unwind the stack, module-level variables will be reset\n  // in resetSuspendedWorkLoopOnUnwind.\n\n  // These should be reset immediately because they're only supposed to be set\n  // when React is executing user code.\n  resetHooksAfterThrow();\n  if (__DEV__) {\n    resetCurrentFiber();\n  }\n\n  if (\n    thrownValue === SuspenseException ||\n    thrownValue === SuspenseActionException\n  ) {\n    // This is a special type of exception used for Suspense. For historical\n    // reasons, the rest of the Suspense implementation expects the thrown value\n    // to be a thenable, because before `use` existed that was the (unstable)\n    // API for suspending. This implementation detail can change later, once we\n    // deprecate the old API in favor of `use`.\n    thrownValue = getSuspendedThenable();\n    // TODO: Suspending the work loop during the render phase is\n    // currently not compatible with sibling prerendering. We will add\n    // this optimization back in a later step.\n    // Don't suspend work loop, except to check if the data has\n    // immediately resolved (i.e. in a microtask). Otherwise, trigger the\n    // nearest Suspense fallback.\n    workInProgressSuspendedReason = SuspendedOnImmediate;\n  } else if (thrownValue === SuspenseyCommitException) {\n    thrownValue = getSuspendedThenable();\n    workInProgressSuspendedReason = SuspendedOnInstance;\n  } else if (thrownValue === SelectiveHydrationException) {\n    // An update flowed into a dehydrated boundary. Before we can apply the\n    // update, we need to finish hydrating. Interrupt the work-in-progress\n    // render so we can restart at the hydration lane.\n    //\n    // The ideal implementation would be able to switch contexts without\n    // unwinding the current stack.\n    //\n    // We could name this something more general but as of now it's the only\n    // case where we think this should happen.\n    workInProgressSuspendedReason = SuspendedOnHydration;\n  } else {\n    // This is a regular error.\n    const isWakeable =\n      thrownValue !== null &&\n      typeof thrownValue === 'object' &&\n      typeof thrownValue.then === 'function';\n\n    workInProgressSuspendedReason = isWakeable\n      ? // A wakeable object was thrown by a legacy Suspense implementation.\n        // This has slightly different behavior than suspending with `use`.\n        SuspendedOnDeprecatedThrowPromise\n      : // This is a regular error. If something earlier in the component already\n        // suspended, we must clear the thenable state to unblock the work loop.\n        SuspendedOnError;\n  }\n\n  workInProgressThrownValue = thrownValue;\n\n  const erroredWork = workInProgress;\n  if (erroredWork === null) {\n    // This is a fatal error\n    workInProgressRootExitStatus = RootFatalErrored;\n    logUncaughtError(\n      root,\n      createCapturedValueAtFiber(thrownValue, root.current),\n    );\n    return;\n  }\n\n  if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n    // Record the time spent rendering before an error was thrown. This\n    // avoids inaccurate Profiler durations in the case of a\n    // suspended render.\n    stopProfilerTimerIfRunningAndRecordDuration(erroredWork);\n  }\n\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n    switch (workInProgressSuspendedReason) {\n      case SuspendedOnError: {\n        markComponentErrored(\n          erroredWork,\n          thrownValue,\n          workInProgressRootRenderLanes,\n        );\n        break;\n      }\n      case SuspendedOnData:\n      case SuspendedOnAction:\n      case SuspendedOnImmediate:\n      case SuspendedOnDeprecatedThrowPromise:\n      case SuspendedAndReadyToContinue: {\n        const wakeable           = (thrownValue     );\n        markComponentSuspended(\n          erroredWork,\n          wakeable,\n          workInProgressRootRenderLanes,\n        );\n        break;\n      }\n      case SuspendedOnInstance: {\n        // This is conceptually like a suspend, but it's not associated with\n        // a particular wakeable. It's associated with a host resource (e.g.\n        // a CSS file or an image) that hasn't loaded yet. DevTools doesn't\n        // handle this currently.\n        break;\n      }\n      case SuspendedOnHydration: {\n        // This is conceptually like a suspend, but it's not associated with\n        // a particular wakeable. DevTools doesn't seem to care about this case,\n        // currently. It's similar to if the component were interrupted, which\n        // we don't mark with a special function.\n        break;\n      }\n    }\n  }\n}\n\nexport function shouldRemainOnPreviousScreen()          {\n  // This is asking whether it's better to suspend the transition and remain\n  // on the previous screen, versus showing a fallback as soon as possible. It\n  // takes into account both the priority of render and also whether showing a\n  // fallback would produce a desirable user experience.\n\n  const handler = getSuspenseHandler();\n  if (handler === null) {\n    // There's no Suspense boundary that can provide a fallback. We have no\n    // choice but to remain on the previous screen.\n    // NOTE: We do this even for sync updates, for lack of any better option. In\n    // the future, we may change how we handle this, like by putting the whole\n    // root into a \"detached\" mode.\n    return true;\n  }\n\n  // TODO: Once `use` has fully replaced the `throw promise` pattern, we should\n  // be able to remove the equivalent check in finishConcurrentRender, and rely\n  // just on this one.\n  if (includesOnlyTransitions(workInProgressRootRenderLanes)) {\n    if (getShellBoundary() === null) {\n      // We're rendering inside the \"shell\" of the app. Activating the nearest\n      // fallback would cause visible content to disappear. It's better to\n      // suspend the transition and remain on the previous screen.\n      return true;\n    } else {\n      // We're rendering content that wasn't part of the previous screen.\n      // Rather than block the transition, it's better to show a fallback as\n      // soon as possible. The appearance of any nested fallbacks will be\n      // throttled to avoid jank.\n      return false;\n    }\n  }\n\n  if (\n    includesOnlyRetries(workInProgressRootRenderLanes) ||\n    // In this context, an OffscreenLane counts as a Retry\n    // TODO: It's become increasingly clear that Retries and Offscreen are\n    // deeply connected. They probably can be unified further.\n    includesSomeLane(workInProgressRootRenderLanes, OffscreenLane)\n  ) {\n    // During a retry, we can suspend rendering if the nearest Suspense boundary\n    // is the boundary of the \"shell\", because we're guaranteed not to block\n    // any new content from appearing.\n    //\n    // The reason we must check if this is a retry is because it guarantees\n    // that suspending the work loop won't block an actual update, because\n    // retries don't \"update\" anything; they fill in fallbacks that were left\n    // behind by a previous transition.\n    return handler === getShellBoundary();\n  }\n\n  // For all other Lanes besides Transitions and Retries, we should not wait\n  // for the data to load.\n  return false;\n}\n\nfunction pushDispatcher(container     ) {\n  const prevDispatcher = ReactSharedInternals.H;\n  ReactSharedInternals.H = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher     ) {\n  ReactSharedInternals.H = prevDispatcher;\n}\n\nfunction pushAsyncDispatcher() {\n  const prevAsyncDispatcher = ReactSharedInternals.A;\n  ReactSharedInternals.A = DefaultAsyncDispatcher;\n  return prevAsyncDispatcher;\n}\n\nfunction popAsyncDispatcher(prevAsyncDispatcher     ) {\n  ReactSharedInternals.A = prevAsyncDispatcher;\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane              )       {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend()       {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible()       {\n  workInProgressRootExitStatus = RootSuspendedWithDelay;\n\n  if (\n    !workInProgressRootDidSkipSuspendedSiblings &&\n    // Check if the root will be blocked from committing.\n    // TODO: Consider aligning this better with the rest of the logic. Maybe\n    // we should only set the exit status to RootSuspendedWithDelay if this\n    // condition is true? And remove the equivalent checks elsewhere.\n    (includesOnlyTransitions(workInProgressRootRenderLanes) ||\n      getSuspenseHandler() === null)\n  ) {\n    // This render may not have originally been scheduled as a prerender, but\n    // something suspended inside the visible part of the tree, which means we\n    // won't be able to commit a fallback anyway. Let's proceed as if this were\n    // a prerender so that we can warm up the siblings without scheduling a\n    // separate pass.\n    workInProgressRootIsPrerendering = true;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)) &&\n    workInProgressRoot !== null\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    // TODO: Consider unwinding immediately, using the\n    // SuspendedOnHydration mechanism.\n    const didAttemptEntireTree = false;\n    markRootSuspended(\n      workInProgressRoot,\n      workInProgressRootRenderLanes,\n      workInProgressDeferredLane,\n      didAttemptEntireTree,\n    );\n  }\n}\n\nexport function renderDidError() {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n}\n\nexport function queueConcurrentError(error                      ) {\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet()          {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n}\n\n// TODO: Over time, this function and renderRootConcurrent have become more\n// and more similar. Not sure it makes sense to maintain forked paths. Consider\n// unifying them again.\nfunction renderRootSync(\n  root           ,\n  lanes       ,\n  shouldYieldForPrerendering         ,\n)                 {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher(root.containerInfo);\n  const prevAsyncDispatcher = pushAsyncDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n    prepareFreshStack(root, lanes);\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  let didSuspendInShell = false;\n  let exitStatus = workInProgressRootExitStatus;\n  outer: do {\n    try {\n      if (\n        workInProgressSuspendedReason !== NotSuspended &&\n        workInProgress !== null\n      ) {\n        // The work loop is suspended. During a synchronous render, we don't\n        // yield to the main thread. Immediately unwind the stack. This will\n        // trigger either a fallback or an error boundary.\n        // TODO: For discrete and \"default\" updates (anything that's not\n        // flushSync), we want to wait for the microtasks the flush before\n        // unwinding. Will probably implement this using renderRootConcurrent,\n        // or merge renderRootSync and renderRootConcurrent into the same\n        // function and fork the behavior some other way.\n        const unitOfWork = workInProgress;\n        const thrownValue = workInProgressThrownValue;\n        switch (workInProgressSuspendedReason) {\n          case SuspendedOnHydration: {\n            // Selective hydration. An update flowed into a dehydrated tree.\n            // Interrupt the current render so the work loop can switch to the\n            // hydration lane.\n            // TODO: I think we might not need to reset the stack here; we can\n            // just yield and reset the stack when we re-enter the work loop,\n            // like normal.\n            resetWorkInProgressStack();\n            exitStatus = RootSuspendedAtTheShell;\n            break outer;\n          }\n          case SuspendedOnImmediate:\n          case SuspendedOnData:\n          case SuspendedOnAction:\n          case SuspendedOnDeprecatedThrowPromise: {\n            if (getSuspenseHandler() === null) {\n              didSuspendInShell = true;\n            }\n            const reason = workInProgressSuspendedReason;\n            workInProgressSuspendedReason = NotSuspended;\n            workInProgressThrownValue = null;\n            throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);\n            if (\n              shouldYieldForPrerendering &&\n              workInProgressRootIsPrerendering\n            ) {\n              // We've switched into prerendering mode. This implies that we\n              // suspended outside of a Suspense boundary, which means this\n              // render will be blocked from committing. Yield to the main\n              // thread so we can switch to prerendering using the concurrent\n              // work loop.\n              exitStatus = RootInProgress;\n              break outer;\n            }\n            break;\n          }\n          default: {\n            // Unwind then continue with the normal work loop.\n            const reason = workInProgressSuspendedReason;\n            workInProgressSuspendedReason = NotSuspended;\n            workInProgressThrownValue = null;\n            throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);\n            break;\n          }\n        }\n      }\n      workLoopSync();\n      exitStatus = workInProgressRootExitStatus;\n      break;\n    } catch (thrownValue) {\n      handleThrow(root, thrownValue);\n    }\n  } while (true);\n\n  // Check if something suspended in the shell. We use this to detect an\n  // infinite ping loop caused by an uncached promise.\n  //\n  // Only increment this counter once per synchronous render attempt across the\n  // whole tree. Even if there are many sibling components that suspend, this\n  // counter only gets incremented once.\n  if (didSuspendInShell) {\n    root.shellSuspendCounter++;\n  }\n\n  resetContextDependencies();\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n  popAsyncDispatcher(prevAsyncDispatcher);\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  if (workInProgress !== null) {\n    // Did not complete the tree. This can happen if something suspended in\n    // the shell.\n  } else {\n    // Normal case. We completed the whole tree.\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // It's safe to process the queue now that the render phase is complete.\n    finishQueueingConcurrentUpdates();\n  }\n\n  return exitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Perform work without checking if we need to yield between fiber.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root           , lanes       ) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher(root.containerInfo);\n  const prevAsyncDispatcher = pushAsyncDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  } else {\n    // This is a continuation of an existing work-in-progress.\n    //\n    // If we were previously in prerendering mode, check if we received any new\n    // data during an interleaved event.\n    workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  outer: do {\n    try {\n      if (\n        workInProgressSuspendedReason !== NotSuspended &&\n        workInProgress !== null\n      ) {\n        // The work loop is suspended. We need to either unwind the stack or\n        // replay the suspended component.\n        const unitOfWork = workInProgress;\n        const thrownValue = workInProgressThrownValue;\n        resumeOrUnwind: switch (workInProgressSuspendedReason) {\n          case SuspendedOnError: {\n            // Unwind then continue with the normal work loop.\n            workInProgressSuspendedReason = NotSuspended;\n            workInProgressThrownValue = null;\n            throwAndUnwindWorkLoop(\n              root,\n              unitOfWork,\n              thrownValue,\n              SuspendedOnError,\n            );\n            break;\n          }\n          case SuspendedOnData:\n          case SuspendedOnAction: {\n            const thenable                  = (thrownValue     );\n            if (isThenableResolved(thenable)) {\n              // The data resolved. Try rendering the component again.\n              workInProgressSuspendedReason = NotSuspended;\n              workInProgressThrownValue = null;\n              replaySuspendedUnitOfWork(unitOfWork);\n              break;\n            }\n            // The work loop is suspended on data. We should wait for it to\n            // resolve before continuing to render.\n            // TODO: Handle the case where the promise resolves synchronously.\n            // Usually this is handled when we instrument the promise to add a\n            // `status` field, but if the promise already has a status, we won't\n            // have added a listener until right here.\n            const onResolution = () => {\n              // Check if the root is still suspended on this promise.\n              if (\n                (workInProgressSuspendedReason === SuspendedOnData ||\n                  workInProgressSuspendedReason === SuspendedOnAction) &&\n                workInProgressRoot === root\n              ) {\n                // Mark the root as ready to continue rendering.\n                workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n              }\n              // Ensure the root is scheduled. We should do this even if we're\n              // currently working on a different root, so that we resume\n              // rendering later.\n              ensureRootIsScheduled(root);\n            };\n            thenable.then(onResolution, onResolution);\n            break outer;\n          }\n          case SuspendedOnImmediate: {\n            // If this fiber just suspended, it's possible the data is already\n            // cached. Yield to the main thread to give it a chance to ping. If\n            // it does, we can retry immediately without unwinding the stack.\n            workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n            break outer;\n          }\n          case SuspendedOnInstance: {\n            workInProgressSuspendedReason =\n              SuspendedOnInstanceAndReadyToContinue;\n            break outer;\n          }\n          case SuspendedAndReadyToContinue: {\n            const thenable                  = (thrownValue     );\n            if (isThenableResolved(thenable)) {\n              // The data resolved. Try rendering the component again.\n              workInProgressSuspendedReason = NotSuspended;\n              workInProgressThrownValue = null;\n              replaySuspendedUnitOfWork(unitOfWork);\n            } else {\n              // Otherwise, unwind then continue with the normal work loop.\n              workInProgressSuspendedReason = NotSuspended;\n              workInProgressThrownValue = null;\n              throwAndUnwindWorkLoop(\n                root,\n                unitOfWork,\n                thrownValue,\n                SuspendedAndReadyToContinue,\n              );\n            }\n            break;\n          }\n          case SuspendedOnInstanceAndReadyToContinue: {\n            let resource                  = null;\n            switch (workInProgress.tag) {\n              case HostHoistable: {\n                resource = workInProgress.memoizedState;\n              }\n              // intentional fallthrough\n              case HostComponent:\n              case HostSingleton: {\n                // Before unwinding the stack, check one more time if the\n                // instance is ready. It may have loaded when React yielded to\n                // the main thread.\n\n                // Assigning this to a constant so Flow knows the binding won't\n                // be mutated by `preloadInstance`.\n                const hostFiber = workInProgress;\n                const type = hostFiber.type;\n                const props = hostFiber.pendingProps;\n                const isReady = resource\n                  ? preloadResource(resource)\n                  : preloadInstance(hostFiber.stateNode, type, props);\n                if (isReady) {\n                  // The data resolved. Resume the work loop as if nothing\n                  // suspended. Unlike when a user component suspends, we don't\n                  // have to replay anything because the host fiber\n                  // already completed.\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  const sibling = hostFiber.sibling;\n                  if (sibling !== null) {\n                    workInProgress = sibling;\n                  } else {\n                    const returnFiber = hostFiber.return;\n                    if (returnFiber !== null) {\n                      workInProgress = returnFiber;\n                      completeUnitOfWork(returnFiber);\n                    } else {\n                      workInProgress = null;\n                    }\n                  }\n                  break resumeOrUnwind;\n                }\n                break;\n              }\n              default: {\n                // This will fail gracefully but it's not correct, so log a\n                // warning in dev.\n                if (__DEV__) {\n                  console.error(\n                    'Unexpected type of fiber triggered a suspensey commit. ' +\n                      'This is a bug in React.',\n                  );\n                }\n                break;\n              }\n            }\n            // Otherwise, unwind then continue with the normal work loop.\n            workInProgressSuspendedReason = NotSuspended;\n            workInProgressThrownValue = null;\n            throwAndUnwindWorkLoop(\n              root,\n              unitOfWork,\n              thrownValue,\n              SuspendedOnInstanceAndReadyToContinue,\n            );\n            break;\n          }\n          case SuspendedOnDeprecatedThrowPromise: {\n            // Suspended by an old implementation that uses the `throw promise`\n            // pattern. The newer replaying behavior can cause subtle issues\n            // like infinite ping loops. So we maintain the old behavior and\n            // always unwind.\n            workInProgressSuspendedReason = NotSuspended;\n            workInProgressThrownValue = null;\n            throwAndUnwindWorkLoop(\n              root,\n              unitOfWork,\n              thrownValue,\n              SuspendedOnDeprecatedThrowPromise,\n            );\n            break;\n          }\n          case SuspendedOnHydration: {\n            // Selective hydration. An update flowed into a dehydrated tree.\n            // Interrupt the current render so the work loop can switch to the\n            // hydration lane.\n            resetWorkInProgressStack();\n            workInProgressRootExitStatus = RootSuspendedAtTheShell;\n            break outer;\n          }\n          default: {\n            throw new Error(\n              'Unexpected SuspendedReason. This is a bug in React.',\n            );\n          }\n        }\n      }\n\n      if (__DEV__ && ReactSharedInternals.actQueue !== null) {\n        // `act` special case: If we're inside an `act` scope, don't consult\n        // `shouldYield`. Always keep working until the render is complete.\n        // This is not just an optimization: in a unit test environment, we\n        // can't trust the result of `shouldYield`, because the host I/O is\n        // likely mocked.\n        workLoopSync();\n      } else if (enableThrottledScheduling) {\n        workLoopConcurrent(includesNonIdleWork(lanes));\n      } else {\n        workLoopConcurrentByScheduler();\n      }\n      break;\n    } catch (thrownValue) {\n      handleThrow(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  popDispatcher(prevDispatcher);\n  popAsyncDispatcher(prevAsyncDispatcher);\n  executionContext = prevExecutionContext;\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootInProgress;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // It's safe to process the queue now that the render phase is complete.\n    finishQueueingConcurrentUpdates();\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent(nonIdle         ) {\n  // We yield every other \"frame\" when rendering Transition or Retries. Those are blocking\n  // revealing new content. The purpose of this yield is not to avoid the overhead of yielding,\n  // which is very low, but rather to intentionally block any frequently occuring other main\n  // thread work like animations from starving our work. In other words, the purpose of this\n  // is to reduce the framerate of animations to 30 frames per second.\n  // For Idle work we yield every 5ms to keep animations going smooth.\n  if (workInProgress !== null) {\n    const yieldAfter = now() + (nonIdle ? 25 : 5);\n    do {\n      // $FlowFixMe[incompatible-call] flow doesn't know that now() is side-effect free\n      performUnitOfWork(workInProgress);\n    } while (workInProgress !== null && now() < yieldAfter);\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrentByScheduler() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    // $FlowFixMe[incompatible-call] flow doesn't know that shouldYield() is side-effect free\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork       )       {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    if (__DEV__) {\n      next = runWithFiberInDEV(\n        unitOfWork,\n        beginWork,\n        current,\n        unitOfWork,\n        entangledRenderLanes,\n      );\n    } else {\n      next = beginWork(current, unitOfWork, entangledRenderLanes);\n    }\n    stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);\n  } else {\n    if (__DEV__) {\n      next = runWithFiberInDEV(\n        unitOfWork,\n        beginWork,\n        current,\n        unitOfWork,\n        entangledRenderLanes,\n      );\n    } else {\n      next = beginWork(current, unitOfWork, entangledRenderLanes);\n    }\n  }\n\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n}\n\nfunction replaySuspendedUnitOfWork(unitOfWork       )       {\n  // This is a fork of performUnitOfWork specifcally for replaying a fiber that\n  // just suspended.\n  let next;\n  if (__DEV__) {\n    next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);\n  } else {\n    next = replayBeginWork(unitOfWork);\n  }\n\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n}\n\nfunction replayBeginWork(unitOfWork       )               {\n  // This is a fork of beginWork specifcally for replaying a fiber that\n  // just suspended.\n\n  const current = unitOfWork.alternate;\n\n  let next;\n  const isProfilingMode =\n    enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode;\n  if (isProfilingMode) {\n    startProfilerTimer(unitOfWork);\n  }\n  switch (unitOfWork.tag) {\n    case SimpleMemoComponent:\n    case FunctionComponent: {\n      // Resolve `defaultProps`. This logic is copied from `beginWork`.\n      // TODO: Consider moving this switch statement into that module. Also,\n      // could maybe use this as an opportunity to say `use` doesn't work with\n      // `defaultProps` :)\n      const Component = unitOfWork.type;\n      const unresolvedProps = unitOfWork.pendingProps;\n      const resolvedProps =\n        disableDefaultPropsExceptForClasses ||\n        unitOfWork.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultPropsOnNonClassComponent(Component, unresolvedProps);\n      let context     ;\n      if (!disableLegacyContext) {\n        const unmaskedContext = getUnmaskedContext(unitOfWork, Component, true);\n        context = getMaskedContext(unitOfWork, unmaskedContext);\n      }\n      next = replayFunctionComponent(\n        current,\n        unitOfWork,\n        resolvedProps,\n        Component,\n        context,\n        workInProgressRootRenderLanes,\n      );\n      break;\n    }\n    case ForwardRef: {\n      // Resolve `defaultProps`. This logic is copied from `beginWork`.\n      // TODO: Consider moving this switch statement into that module. Also,\n      // could maybe use this as an opportunity to say `use` doesn't work with\n      // `defaultProps` :)\n      const Component = unitOfWork.type.render;\n      const unresolvedProps = unitOfWork.pendingProps;\n      const resolvedProps =\n        disableDefaultPropsExceptForClasses ||\n        unitOfWork.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultPropsOnNonClassComponent(Component, unresolvedProps);\n\n      next = replayFunctionComponent(\n        current,\n        unitOfWork,\n        resolvedProps,\n        Component,\n        unitOfWork.ref,\n        workInProgressRootRenderLanes,\n      );\n      break;\n    }\n    case HostComponent: {\n      // Some host components are stateful (that's how we implement form\n      // actions) but we don't bother to reuse the memoized state because it's\n      // not worth the extra code. The main reason to reuse the previous hooks\n      // is to reuse uncached promises, but we happen to know that the only\n      // promises that a host component might suspend on are definitely cached\n      // because they are controlled by us. So don't bother.\n      resetHooksOnUnwind(unitOfWork);\n      // Fallthrough to the next branch.\n    }\n    default: {\n      // Other types besides function components are reset completely before\n      // being replayed. Currently this only happens when a Usable type is\n      // reconciled \u2014 the reconciler will suspend.\n      //\n      // We reset the fiber back to its original state; however, this isn't\n      // a full \"unwind\" because we're going to reuse the promises that were\n      // reconciled previously. So it's intentional that we don't call\n      // resetSuspendedWorkLoopOnUnwind here.\n      unwindInterruptedWork(current, unitOfWork, workInProgressRootRenderLanes);\n      unitOfWork = workInProgress = resetWorkInProgress(\n        unitOfWork,\n        entangledRenderLanes,\n      );\n      next = beginWork(current, unitOfWork, entangledRenderLanes);\n      break;\n    }\n  }\n  if (isProfilingMode) {\n    stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);\n  }\n\n  return next;\n}\n\nfunction throwAndUnwindWorkLoop(\n  root           ,\n  unitOfWork       ,\n  thrownValue       ,\n  suspendedReason                 ,\n) {\n  // This is a fork of performUnitOfWork specifcally for unwinding a fiber\n  // that threw an exception.\n  //\n  // Return to the normal work loop. This will unwind the stack, and potentially\n  // result in showing a fallback.\n  resetSuspendedWorkLoopOnUnwind(unitOfWork);\n\n  const returnFiber = unitOfWork.return;\n  try {\n    // Find and mark the nearest Suspense or error boundary that can handle\n    // this \"exception\".\n    const didFatal = throwException(\n      root,\n      returnFiber,\n      unitOfWork,\n      thrownValue,\n      workInProgressRootRenderLanes,\n    );\n    if (didFatal) {\n      panicOnRootError(root, thrownValue);\n      return;\n    }\n  } catch (error) {\n    // We had trouble processing the error. An example of this happening is\n    // when accessing the `componentDidCatch` property of an error boundary\n    // throws an error. A weird edge case. There's a regression test for this.\n    // To prevent an infinite loop, bubble the error up to the next parent.\n    if (returnFiber !== null) {\n      workInProgress = returnFiber;\n      throw error;\n    } else {\n      panicOnRootError(root, thrownValue);\n      return;\n    }\n  }\n\n  if (unitOfWork.flags & Incomplete) {\n    // Unwind the stack until we reach the nearest boundary.\n    let skipSiblings;\n\n    if (\n      // The current algorithm for both hydration and error handling assumes\n      // that the tree is rendered sequentially. So we always skip the siblings.\n      getIsHydrating() ||\n      suspendedReason === SuspendedOnError\n    ) {\n      skipSiblings = true;\n      // We intentionally don't set workInProgressRootDidSkipSuspendedSiblings,\n      // because we don't want to trigger another prerender attempt.\n    } else if (\n      // Check whether this is a prerender\n      !workInProgressRootIsPrerendering &&\n      // Offscreen rendering is also a form of speculative rendering\n      !includesSomeLane(workInProgressRootRenderLanes, OffscreenLane)\n    ) {\n      // This is not a prerender. Skip the siblings during this render. A\n      // separate prerender will be scheduled for later.\n      skipSiblings = true;\n      workInProgressRootDidSkipSuspendedSiblings = true;\n\n      // Because we're skipping the siblings, schedule an immediate retry of\n      // this boundary.\n      //\n      // The reason we do this is because a prerender is only scheduled when\n      // the root is blocked from committing, i.e. RootSuspendedWithDelay.\n      // When the root is not blocked, as in the case when we render a\n      // fallback, the original lane is considered to be finished, and\n      // therefore no longer in need of being prerendered. However, there's\n      // still a pending retry that will happen once the data streams in.\n      // We should start rendering that even before the data streams in so we\n      // can prerender the siblings.\n      if (\n        suspendedReason === SuspendedOnData ||\n        suspendedReason === SuspendedOnAction ||\n        suspendedReason === SuspendedOnImmediate ||\n        suspendedReason === SuspendedOnDeprecatedThrowPromise\n      ) {\n        const boundary = getSuspenseHandler();\n        if (boundary !== null && boundary.tag === SuspenseComponent) {\n          boundary.flags |= ScheduleRetry;\n        }\n      }\n    } else {\n      // This is a prerender. Don't skip the siblings.\n      skipSiblings = false;\n    }\n\n    unwindUnitOfWork(unitOfWork, skipSiblings);\n  } else {\n    // Although the fiber suspended, we're intentionally going to commit it in\n    // an inconsistent state. We can do this safely in cases where we know the\n    // inconsistent tree will be hidden.\n    //\n    // This currently only applies to Legacy Suspense implementation, but we may\n    // port a version of this to concurrent roots, too, when performing a\n    // synchronous render. Because that will allow us to mutate the tree as we\n    // go instead of buffering mutations until the end. Though it's unclear if\n    // this particular path is how that would be implemented.\n    completeUnitOfWork(unitOfWork);\n  }\n}\n\nexport function markSpawnedRetryLane(lane      )       {\n  // Keep track of the retry lanes that were spawned by a fallback during the\n  // current render and were not later pinged. This will represent the lanes\n  // that are known to still be suspended.\n  workInProgressSuspendedRetryLanes = mergeLanes(\n    workInProgressSuspendedRetryLanes,\n    lane,\n  );\n}\n\nfunction panicOnRootError(root           , error       ) {\n  // There's no ancestor that can handle this exception. This should never\n  // happen because the root is supposed to capture all errors that weren't\n  // caught by an error boundary. This is a fatal error, or panic condition,\n  // because we've run out of ways to recover.\n  workInProgressRootExitStatus = RootFatalErrored;\n  logUncaughtError(root, createCapturedValueAtFiber(error, root.current));\n  // Set `workInProgress` to null. This represents advancing to the next\n  // sibling, or the parent if there are no siblings. But since the root\n  // has no siblings nor a parent, we set it to null. Usually this is\n  // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n  // intentionally not calling those, we need set it here.\n  // TODO: Consider calling `unwindWork` to pop the contexts.\n  workInProgress = null;\n}\n\nfunction completeUnitOfWork(unitOfWork       )       {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork        = unitOfWork;\n  do {\n    if ((completedWork.flags & Incomplete) !== NoFlags) {\n      // This fiber did not complete, because one of its children did not\n      // complete. Switch to unwinding the stack instead of completing it.\n      //\n      // The reason \"unwind\" and \"complete\" is interleaved is because when\n      // something suspends, we continue rendering the siblings even though\n      // they will be replaced by a fallback.\n      const skipSiblings = workInProgressRootDidSkipSuspendedSiblings;\n      unwindUnitOfWork(completedWork, skipSiblings);\n      return;\n    }\n\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    let next;\n    startProfilerTimer(completedWork);\n    if (__DEV__) {\n      next = runWithFiberInDEV(\n        completedWork,\n        completeWork,\n        current,\n        completedWork,\n        entangledRenderLanes,\n      );\n    } else {\n      next = completeWork(current, completedWork, entangledRenderLanes);\n    }\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // Update render duration assuming we didn't error.\n      stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);\n    }\n    if (next !== null) {\n      // Completing this fiber spawned new work. Work on that next.\n      workInProgress = next;\n      return;\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    // $FlowFixMe[incompatible-type] we bail out when we get a null\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction unwindUnitOfWork(unitOfWork       , skipSiblings         )       {\n  let incompleteWork        = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = incompleteWork.alternate;\n\n    // This fiber did not complete because something threw. Pop values off\n    // the stack without entering the complete phase. If this is a boundary,\n    // capture values if possible.\n    const next = unwindWork(current, incompleteWork, entangledRenderLanes);\n\n    // Because this fiber did not complete, don't reset its lanes.\n\n    if (next !== null) {\n      // Found a boundary that can handle this exception. Re-renter the\n      // begin phase. This branch will return us to the normal work loop.\n      //\n      // Since we're restarting, remove anything that is not a host effect\n      // from the effect tag.\n      next.flags &= HostEffectMask;\n      workInProgress = next;\n      return;\n    }\n\n    // Keep unwinding until we reach either a boundary or the root.\n\n    if (enableProfilerTimer && (incompleteWork.mode & ProfileMode) !== NoMode) {\n      // Record the render duration for the fiber that errored.\n      stopProfilerTimerIfRunningAndRecordIncompleteDuration(incompleteWork);\n\n      // Include the time spent working on failed children before continuing.\n      let actualDuration = incompleteWork.actualDuration;\n      let child = incompleteWork.child;\n      while (child !== null) {\n        // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n        actualDuration += child.actualDuration;\n        child = child.sibling;\n      }\n      incompleteWork.actualDuration = actualDuration;\n    }\n\n    // TODO: Once we stop prerendering siblings, instead of resetting the parent\n    // of the node being unwound, we should be able to reset node itself as we\n    // unwind the stack. Saves an additional null check.\n    const returnFiber = incompleteWork.return;\n    if (returnFiber !== null) {\n      // Mark the parent fiber as incomplete and clear its subtree flags.\n      // TODO: Once we stop prerendering siblings, we may be able to get rid of\n      // the Incomplete flag because unwinding to the nearest boundary will\n      // happen synchronously.\n      returnFiber.flags |= Incomplete;\n      returnFiber.subtreeFlags = NoFlags;\n      returnFiber.deletions = null;\n    }\n\n    if (!skipSiblings) {\n      const siblingFiber = incompleteWork.sibling;\n      if (siblingFiber !== null) {\n        // This branch will return us to the normal work loop.\n        workInProgress = siblingFiber;\n        return;\n      }\n    }\n\n    // Otherwise, return to the parent\n    // $FlowFixMe[incompatible-type] we bail out when we get a null\n    incompleteWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = incompleteWork;\n  } while (incompleteWork !== null);\n\n  // We've unwound all the way to the root.\n  workInProgressRootExitStatus = RootSuspendedAtTheShell;\n  workInProgress = null;\n}\n\nfunction commitRoot(\n  root           ,\n  finishedWork              ,\n  lanes       ,\n  recoverableErrors                                    ,\n  transitions                          ,\n  didIncludeRenderPhaseUpdate         ,\n  spawnedLane      ,\n  updatedLanes       ,\n  suspendedRetryLanes       ,\n  exitStatus                ,\n  suspendedCommitReason                       , // Profiling-only\n  completedRenderStartTime        , // Profiling-only\n  completedRenderEndTime        , // Profiling-only\n)       {\n  root.cancelPendingCommit = null;\n\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPendingEffects();\n  } while (pendingEffectsStatus !== NO_PENDING_EFFECTS);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    // Log the previous render phase once we commit. I.e. we weren't interrupted.\n    setCurrentTrackFromLanes(lanes);\n    if (exitStatus === RootErrored) {\n      logErroredRenderPhase(\n        completedRenderStartTime,\n        completedRenderEndTime,\n        lanes,\n      );\n    } else if (recoverableErrors !== null) {\n      const hydrationFailed =\n        finishedWork !== null &&\n        finishedWork.alternate !== null &&\n        (finishedWork.alternate.memoizedState           ).isDehydrated &&\n        (finishedWork.flags & ForceClientRender) !== NoFlags;\n      logRecoveredRenderPhase(\n        completedRenderStartTime,\n        completedRenderEndTime,\n        lanes,\n        recoverableErrors,\n        hydrationFailed,\n      );\n    } else {\n      logRenderPhase(completedRenderStartTime, completedRenderEndTime, lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n    if (enableGestureTransition) {\n      // Stop any gestures that were completed and is now being reverted.\n      if (root.stoppingGestures !== null) {\n        stopCompletedGestures(root);\n      }\n    }\n    return;\n  } else {\n    if (__DEV__) {\n      if (lanes === NoLanes) {\n        console.error(\n          'finishedLanes should not be empty during a commit. This is a ' +\n            'bug in React.',\n        );\n      }\n    }\n  }\n\n  if (finishedWork === root.current) {\n    throw new Error(\n      'Cannot commit the same tree as before. This error is likely caused by ' +\n        'a bug in React. Please file an issue.',\n    );\n  }\n\n  // Check which lanes no longer have any work scheduled on them, and mark\n  // those as finished.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n\n  // Make sure to account for lanes that were updated by a concurrent event\n  // during the render phase; don't mark them as finished.\n  const concurrentlyUpdatedLanes = getConcurrentlyUpdatedLanes();\n  remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes);\n\n  if (enableGestureTransition && root.pendingGestures === null) {\n    // Gestures don't clear their lanes while the gesture is still active but it\n    // might not be scheduled to do any more renders and so we shouldn't schedule\n    // any more gesture lane work until a new gesture is scheduled.\n    remainingLanes &= ~GestureLane;\n  }\n\n  markRootFinished(\n    root,\n    lanes,\n    remainingLanes,\n    spawnedLane,\n    updatedLanes,\n    suspendedRetryLanes,\n  );\n\n  // Reset this before firing side effects so we can detect recursive updates.\n  didIncludeCommitPhaseUpdate = false;\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // workInProgressX might be overwritten, so we want\n  // to store it in pendingPassiveX until they get processed\n  // We need to pass this through as an argument to commitRoot\n  // because workInProgressX might have changed between\n  // the previous render and commit if we throttle the commit\n  // with setTimeout\n  pendingFinishedWork = finishedWork;\n  pendingEffectsRoot = root;\n  pendingEffectsLanes = lanes;\n  pendingEffectsRemainingLanes = remainingLanes;\n  pendingPassiveTransitions = transitions;\n  pendingRecoverableErrors = recoverableErrors;\n  pendingDidIncludeRenderPhaseUpdate = didIncludeRenderPhaseUpdate;\n  if (enableProfilerTimer) {\n    pendingEffectsRenderEndTime = completedRenderEndTime;\n    pendingSuspendedCommitReason = suspendedCommitReason;\n  }\n\n  if (enableGestureTransition && isGestureRender(lanes)) {\n    // This is a special kind of render that doesn't commit regular effects.\n    commitGestureOnRoot(\n      root,\n      finishedWork,\n      recoverableErrors,\n      enableProfilerTimer\n        ? suspendedCommitReason === IMMEDIATE_COMMIT\n          ? completedRenderEndTime\n          : commitStartTime\n        : 0,\n    );\n    return;\n  }\n\n  // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n  let passiveSubtreeMask;\n  if (enableViewTransition) {\n    pendingViewTransitionEvents = null;\n    if (includesOnlyViewTransitionEligibleLanes(lanes)) {\n      // Claim any pending Transition Types for this commit.\n      pendingTransitionTypes = claimQueuedTransitionTypes(root);\n      passiveSubtreeMask = PassiveTransitionMask;\n    } else {\n      pendingTransitionTypes = null;\n      passiveSubtreeMask = PassiveMask;\n    }\n  } else {\n    passiveSubtreeMask = PassiveMask;\n  }\n  if (\n    // If this subtree rendered with profiling this commit, we need to visit it to log it.\n    (enableProfilerTimer &&\n      enableComponentPerformanceTrack &&\n      finishedWork.actualDuration !== 0) ||\n    (finishedWork.subtreeFlags & passiveSubtreeMask) !== NoFlags ||\n    (finishedWork.flags & passiveSubtreeMask) !== NoFlags\n  ) {\n    if (enableYieldingBeforePassive) {\n      // We don't schedule a separate task for flushing passive effects.\n      // Instead, we just rely on ensureRootIsScheduled below to schedule\n      // a callback for us to flush the passive effects.\n    } else {\n      // So we can clear these now to allow a new callback to be scheduled.\n      root.callbackNode = null;\n      root.callbackPriority = NoLane;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        if (enableProfilerTimer && enableComponentPerformanceTrack) {\n          // Track the currently executing event if there is one so we can ignore this\n          // event when logging events.\n          trackSchedulerEvent();\n        }\n        flushPassiveEffects(true);\n        // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n        return null;\n      });\n    }\n  } else {\n    // If we don't have passive effects, we're not going to need to perform more work\n    // so we can clear the callback now.\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n  }\n\n  if (enableProfilerTimer) {\n    // Mark the current commit time to be shared by all Profilers in this\n    // batch. This enables them to be grouped later.\n    resetCommitErrors();\n    recordCommitTime();\n    if (enableComponentPerformanceTrack) {\n      if (suspendedCommitReason === SUSPENDED_COMMIT) {\n        logSuspendedCommitPhase(completedRenderEndTime, commitStartTime);\n      } else if (suspendedCommitReason === THROTTLED_COMMIT) {\n        logSuspenseThrottlePhase(completedRenderEndTime, commitStartTime);\n      }\n    }\n  }\n\n  resetShouldStartViewTransition();\n\n  // The commit phase is broken into several sub-phases. We do a separate pass\n  // of the effect list for each phase: all mutation effects come before all\n  // layout effects, and so on.\n\n  // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n  const subtreeHasBeforeMutationEffects =\n    (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask)) !==\n    NoFlags;\n  const rootHasBeforeMutationEffect =\n    (finishedWork.flags & (BeforeMutationMask | MutationMask)) !== NoFlags;\n\n  if (subtreeHasBeforeMutationEffects || rootHasBeforeMutationEffect) {\n    const prevTransition = ReactSharedInternals.T;\n    ReactSharedInternals.T = null;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n    try {\n      // The first phase a \"before mutation\" phase. We use this phase to read the\n      // state of the host tree right before we mutate it. This is where\n      // getSnapshotBeforeUpdate is called.\n      commitBeforeMutationEffects(root, finishedWork, lanes);\n    } finally {\n      // Reset the priority to the previous non-sync value.\n      executionContext = prevExecutionContext;\n      setCurrentUpdatePriority(previousPriority);\n      ReactSharedInternals.T = prevTransition;\n    }\n  }\n\n  let willStartViewTransition = shouldStartViewTransition;\n  if (enableGestureTransition) {\n    // Stop any gestures that were completed and is now being committed.\n    if (root.stoppingGestures !== null) {\n      stopCompletedGestures(root);\n      // If we are in the process of stopping some gesture we shouldn't start\n      // a View Transition because that would start from the previous state to\n      // the next state.\n      willStartViewTransition = false;\n    }\n  }\n\n  pendingEffectsStatus = PENDING_MUTATION_PHASE;\n  if (enableViewTransition && willStartViewTransition) {\n    pendingViewTransition = startViewTransition(\n      root.containerInfo,\n      pendingTransitionTypes,\n      flushMutationEffects,\n      flushLayoutEffects,\n      flushAfterMutationEffects,\n      flushSpawnedWork,\n      flushPassiveEffects,\n      reportViewTransitionError,\n    );\n  } else {\n    // Flush synchronously.\n    flushMutationEffects();\n    flushLayoutEffects();\n    // Skip flushAfterMutationEffects\n    flushSpawnedWork();\n  }\n}\n\nfunction reportViewTransitionError(error       ) {\n  // Report errors that happens while preparing a View Transition.\n  if (pendingEffectsStatus === NO_PENDING_EFFECTS) {\n    return;\n  }\n  const root = pendingEffectsRoot;\n  const onRecoverableError = root.onRecoverableError;\n  onRecoverableError(error, makeErrorInfo(null));\n}\n\nfunction flushAfterMutationEffects()       {\n  if (pendingEffectsStatus !== PENDING_AFTER_MUTATION_PHASE) {\n    return;\n  }\n  pendingEffectsStatus = NO_PENDING_EFFECTS;\n  const root = pendingEffectsRoot;\n  const finishedWork = pendingFinishedWork;\n  const lanes = pendingEffectsLanes;\n  commitAfterMutationEffects(root, finishedWork, lanes);\n  pendingEffectsStatus = PENDING_SPAWNED_WORK;\n}\n\nfunction flushMutationEffects()       {\n  if (pendingEffectsStatus !== PENDING_MUTATION_PHASE) {\n    return;\n  }\n  pendingEffectsStatus = NO_PENDING_EFFECTS;\n\n  const root = pendingEffectsRoot;\n  const finishedWork = pendingFinishedWork;\n  const lanes = pendingEffectsLanes;\n  const subtreeMutationHasEffects =\n    (finishedWork.subtreeFlags & MutationMask) !== NoFlags;\n  const rootMutationHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;\n\n  if (subtreeMutationHasEffects || rootMutationHasEffect) {\n    const prevTransition = ReactSharedInternals.T;\n    ReactSharedInternals.T = null;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n    try {\n      // The next phase is the mutation phase, where we mutate the host tree.\n      commitMutationEffects(root, finishedWork, lanes);\n\n      if (enableCreateEventHandleAPI) {\n        if (shouldFireAfterActiveInstanceBlur) {\n          afterActiveInstanceBlur();\n        }\n      }\n      resetAfterCommit(root.containerInfo);\n    } finally {\n      // Reset the priority to the previous non-sync value.\n      executionContext = prevExecutionContext;\n      setCurrentUpdatePriority(previousPriority);\n      ReactSharedInternals.T = prevTransition;\n    }\n  }\n\n  // The work-in-progress tree is now the current tree. This must come after\n  // the mutation phase, so that the previous tree is still current during\n  // componentWillUnmount, but before the layout phase, so that the finished\n  // work is current during componentDidMount/Update.\n  root.current = finishedWork;\n  pendingEffectsStatus = PENDING_LAYOUT_PHASE;\n}\n\nfunction flushLayoutEffects()       {\n  if (pendingEffectsStatus !== PENDING_LAYOUT_PHASE) {\n    return;\n  }\n  pendingEffectsStatus = NO_PENDING_EFFECTS;\n\n  const root = pendingEffectsRoot;\n  const finishedWork = pendingFinishedWork;\n  const lanes = pendingEffectsLanes;\n\n  if (enableDefaultTransitionIndicator) {\n    const cleanUpIndicator = root.pendingIndicator;\n    if (cleanUpIndicator !== null && root.indicatorLanes === NoLanes) {\n      // We have now committed all Transitions that needed the default indicator\n      // so we can now run the clean up function. We do this in the layout phase\n      // so it has the same semantics as if you did it with a useLayoutEffect or\n      // if it was reset automatically with useOptimistic.\n      const prevTransition = ReactSharedInternals.T;\n      ReactSharedInternals.T = null;\n      const previousPriority = getCurrentUpdatePriority();\n      setCurrentUpdatePriority(DiscreteEventPriority);\n      const prevExecutionContext = executionContext;\n      executionContext |= CommitContext;\n      root.pendingIndicator = null;\n      try {\n        cleanUpIndicator();\n      } catch (x) {\n        reportGlobalError(x);\n      } finally {\n        // Reset the priority to the previous non-sync value.\n        executionContext = prevExecutionContext;\n        setCurrentUpdatePriority(previousPriority);\n        ReactSharedInternals.T = prevTransition;\n      }\n    }\n  }\n\n  const subtreeHasLayoutEffects =\n    (finishedWork.subtreeFlags & LayoutMask) !== NoFlags;\n  const rootHasLayoutEffect = (finishedWork.flags & LayoutMask) !== NoFlags;\n\n  if (subtreeHasLayoutEffects || rootHasLayoutEffect) {\n    const prevTransition = ReactSharedInternals.T;\n    ReactSharedInternals.T = null;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n    try {\n      // The next phase is the layout phase, where we call effects that read\n      // the host tree after it's been mutated. The idiomatic use case for this is\n      // layout, but class component lifecycles also fire here for legacy reasons.\n      if (enableSchedulingProfiler) {\n        markLayoutEffectsStarted(lanes);\n      }\n      commitLayoutEffects(finishedWork, root, lanes);\n      if (enableSchedulingProfiler) {\n        markLayoutEffectsStopped();\n      }\n    } finally {\n      // Reset the priority to the previous non-sync value.\n      executionContext = prevExecutionContext;\n      setCurrentUpdatePriority(previousPriority);\n      ReactSharedInternals.T = prevTransition;\n    }\n  }\n  pendingEffectsStatus = PENDING_AFTER_MUTATION_PHASE;\n}\n\nfunction flushSpawnedWork()       {\n  if (\n    pendingEffectsStatus !== PENDING_SPAWNED_WORK &&\n    // If a startViewTransition times out, we might flush this earlier than\n    // after mutation phase. In that case, we just skip the after mutation phase.\n    pendingEffectsStatus !== PENDING_AFTER_MUTATION_PHASE\n  ) {\n    return;\n  }\n  pendingEffectsStatus = NO_PENDING_EFFECTS;\n\n  pendingViewTransition = null; // The view transition has now fully started.\n\n  // Tell Scheduler to yield at the end of the frame, so the browser has an\n  // opportunity to paint.\n  requestPaint();\n\n  const root = pendingEffectsRoot;\n  const finishedWork = pendingFinishedWork;\n  const lanes = pendingEffectsLanes;\n  const completedRenderEndTime = pendingEffectsRenderEndTime;\n  const recoverableErrors = pendingRecoverableErrors;\n  const didIncludeRenderPhaseUpdate = pendingDidIncludeRenderPhaseUpdate;\n  const suspendedCommitReason = pendingSuspendedCommitReason;\n\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    recordCommitEndTime();\n    logCommitPhase(\n      suspendedCommitReason === IMMEDIATE_COMMIT\n        ? completedRenderEndTime\n        : commitStartTime,\n      commitEndTime,\n      commitErrors,\n    );\n  }\n\n  const passiveSubtreeMask =\n    enableViewTransition && includesOnlyViewTransitionEligibleLanes(lanes)\n      ? PassiveTransitionMask\n      : PassiveMask;\n  const rootDidHavePassiveEffects = // If this subtree rendered with profiling this commit, we need to visit it to log it.\n    (enableProfilerTimer &&\n      enableComponentPerformanceTrack &&\n      finishedWork.actualDuration !== 0) ||\n    (finishedWork.subtreeFlags & passiveSubtreeMask) !== NoFlags ||\n    (finishedWork.flags & passiveSubtreeMask) !== NoFlags;\n\n  if (rootDidHavePassiveEffects) {\n    pendingEffectsStatus = PENDING_PASSIVE_PHASE;\n  } else {\n    pendingEffectsStatus = NO_PENDING_EFFECTS;\n    pendingEffectsRoot = (null     ); // Clear for GC purposes.\n    pendingFinishedWork = (null     ); // Clear for GC purposes.\n    // There were no passive effects, so we can immediately release the cache\n    // pool for this render.\n    releaseRootPooledCache(root, root.pendingLanes);\n    if (__DEV__) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n    }\n  }\n\n  // Read this again, since an effect might have updated it\n  let remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed \u2014 that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (__DEV__) {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root, false);\n    }\n  }\n\n  const renderPriority = lanesToEventPriority(lanes);\n  onCommitRootDevTools(finishedWork.stateNode, renderPriority);\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  if (recoverableErrors !== null) {\n    const prevTransition = ReactSharedInternals.T;\n    const previousUpdateLanePriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    ReactSharedInternals.T = null;\n    try {\n      // There were errors during this render, but recovered from them without\n      // needing to surface it to the UI. We log them here.\n      const onRecoverableError = root.onRecoverableError;\n      for (let i = 0; i < recoverableErrors.length; i++) {\n        const recoverableError = recoverableErrors[i];\n        const errorInfo = makeErrorInfo(recoverableError.stack);\n        if (__DEV__) {\n          runWithFiberInDEV(\n            recoverableError.source,\n            onRecoverableError,\n            recoverableError.value,\n            errorInfo,\n          );\n        } else {\n          onRecoverableError(recoverableError.value, errorInfo);\n        }\n      }\n    } finally {\n      ReactSharedInternals.T = prevTransition;\n      setCurrentUpdatePriority(previousUpdateLanePriority);\n    }\n  }\n\n  if (enableViewTransition) {\n    // We should now be after the startViewTransition's .ready call which is late enough\n    // to start animating any pseudo-elements. We do this before flushing any passive\n    // effects or spawned sync work since this is still part of the previous commit.\n    // Even though conceptually it's like its own task between layout effets and passive.\n    const pendingEvents = pendingViewTransitionEvents;\n    let pendingTypes = pendingTransitionTypes;\n    pendingTransitionTypes = null;\n    if (pendingEvents !== null) {\n      pendingViewTransitionEvents = null;\n      if (pendingTypes === null) {\n        // Normalize the type. This is lazily created only for events.\n        pendingTypes = [];\n      }\n      for (let i = 0; i < pendingEvents.length; i++) {\n        const viewTransitionEvent = pendingEvents[i];\n        viewTransitionEvent(pendingTypes);\n      }\n    }\n  }\n\n  // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n  if (\n    includesSyncLane(pendingEffectsLanes) &&\n    (disableLegacyMode || root.tag !== LegacyRoot)\n  ) {\n    flushPendingEffects();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root);\n\n  // Read this again, since a passive effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if this render scheduled a cascading synchronous update. This is a\n  // heurstic to detect infinite update loops. We are intentionally excluding\n  // hydration lanes in this check, because render triggered by selective\n  // hydration is conceptually not an update.\n  if (\n    // Check if there was a recursive update spawned by this render, in either\n    // the render phase or the commit phase. We track these explicitly because\n    // we can't infer from the remaining lanes alone.\n    (enableInfiniteRenderLoopDetection &&\n      (didIncludeRenderPhaseUpdate || didIncludeCommitPhaseUpdate)) ||\n    // Was the finished render the result of an update (not hydration)?\n    (includesSomeLane(lanes, UpdateLanes) &&\n      // Did it schedule a sync update?\n      includesSomeLane(remainingLanes, SyncUpdateLanes))\n  ) {\n    if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n      markNestedUpdateScheduled();\n    }\n\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    if (!rootDidHavePassiveEffects) {\n      finalizeRender(lanes, commitEndTime);\n    }\n  }\n\n  // Eagerly flush any event replaying that we unblocked within this commit.\n  // This ensures that those are observed before we render any new changes.\n  if (supportsHydration) {\n    flushHydrationEvents();\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncWorkOnAllRoots();\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  if (enableTransitionTracing) {\n    // We process transitions during passive effects. However, passive effects can be\n    // processed synchronously during the commit phase as well as asynchronously after\n    // paint. At the end of the commit phase, we schedule a callback that will be called\n    // after the next paint. If the transitions have already been processed (passive\n    // effect phase happened synchronously), we will schedule a callback to process\n    // the transitions. However, if we don't have any pending transition callbacks, this\n    // means that the transitions have yet to be processed (passive effects processed after paint)\n    // so we will store the end time of paint so that we can process the transitions\n    // and then call the callback via the correct end time.\n    const prevRootTransitionCallbacks = root.transitionCallbacks;\n    if (prevRootTransitionCallbacks !== null) {\n      schedulePostPaintCallback(endTime => {\n        const prevPendingTransitionCallbacks =\n          currentPendingTransitionCallbacks;\n        if (prevPendingTransitionCallbacks !== null) {\n          currentPendingTransitionCallbacks = null;\n          scheduleCallback(IdleSchedulerPriority, () => {\n            processTransitionCallbacks(\n              prevPendingTransitionCallbacks,\n              endTime,\n              prevRootTransitionCallbacks,\n            );\n          });\n        } else {\n          currentEndTime = endTime;\n        }\n      });\n    }\n  }\n}\n\nfunction commitGestureOnRoot(\n  root           ,\n  finishedWork       ,\n  recoverableErrors                                    ,\n  renderEndTime        , // Profiling-only\n)       {\n  // We assume that the gesture we just rendered was the first one in the queue.\n  const finishedGesture = root.pendingGestures;\n  if (finishedGesture === null) {\n    // We must have already cancelled this gesture before we had a chance to\n    // render it. Let's schedule work on the next set of lanes.\n    ensureRootIsScheduled(root);\n    return;\n  }\n  deleteScheduledGesture(root, finishedGesture);\n\n  const prevTransition = ReactSharedInternals.T;\n  ReactSharedInternals.T = null;\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(DiscreteEventPriority);\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  try {\n    insertDestinationClones(root, finishedWork);\n  } finally {\n    // Reset the priority to the previous non-sync value.\n    executionContext = prevExecutionContext;\n    setCurrentUpdatePriority(previousPriority);\n    ReactSharedInternals.T = prevTransition;\n  }\n  pendingTransitionTypes = finishedGesture.types;\n  pendingEffectsStatus = PENDING_GESTURE_MUTATION_PHASE;\n\n  pendingViewTransition = finishedGesture.running = startGestureTransition(\n    root.containerInfo,\n    finishedGesture.provider,\n    finishedGesture.rangeStart,\n    finishedGesture.rangeEnd,\n    pendingTransitionTypes,\n    flushGestureMutations,\n    flushGestureAnimations,\n    reportViewTransitionError,\n  );\n}\n\nfunction flushGestureMutations()       {\n  if (!enableGestureTransition) {\n    return;\n  }\n  if (pendingEffectsStatus !== PENDING_GESTURE_MUTATION_PHASE) {\n    return;\n  }\n  pendingEffectsStatus = NO_PENDING_EFFECTS;\n  const root = pendingEffectsRoot;\n  const finishedWork = pendingFinishedWork;\n\n  const prevTransition = ReactSharedInternals.T;\n  ReactSharedInternals.T = null;\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(DiscreteEventPriority);\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  try {\n    applyDepartureTransitions(root, finishedWork);\n  } finally {\n    // Reset the priority to the previous non-sync value.\n    executionContext = prevExecutionContext;\n    setCurrentUpdatePriority(previousPriority);\n    ReactSharedInternals.T = prevTransition;\n  }\n\n  pendingEffectsStatus = PENDING_GESTURE_ANIMATION_PHASE;\n}\n\nfunction flushGestureAnimations()       {\n  if (!enableGestureTransition) {\n    return;\n  }\n  // If we get canceled before we start we might not have applied\n  // mutations yet. We need to apply them first.\n  flushGestureMutations();\n  if (pendingEffectsStatus !== PENDING_GESTURE_ANIMATION_PHASE) {\n    return;\n  }\n  pendingEffectsStatus = NO_PENDING_EFFECTS;\n  const root = pendingEffectsRoot;\n  const finishedWork = pendingFinishedWork;\n  pendingEffectsRoot = (null     ); // Clear for GC purposes.\n  pendingFinishedWork = (null     ); // Clear for GC purposes.\n  pendingEffectsLanes = NoLanes;\n\n  pendingViewTransition = null; // The view transition has now fully started.\n\n  const prevTransition = ReactSharedInternals.T;\n  ReactSharedInternals.T = null;\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(DiscreteEventPriority);\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  try {\n    startGestureAnimations(root, finishedWork);\n  } finally {\n    // Reset the priority to the previous non-sync value.\n    executionContext = prevExecutionContext;\n    setCurrentUpdatePriority(previousPriority);\n    ReactSharedInternals.T = prevTransition;\n  }\n\n  // Now that we've rendered this lane. Start working on the next lane.\n  ensureRootIsScheduled(root);\n}\n\nfunction makeErrorInfo(componentStack         ) {\n  const errorInfo = {\n    componentStack,\n  };\n  if (__DEV__) {\n    Object.defineProperty((errorInfo     ), 'digest', {\n      get() {\n        console.error(\n          'You are accessing \"digest\" from the errorInfo object passed to onRecoverableError.' +\n            ' This property is no longer provided as part of errorInfo but can be accessed as a property' +\n            ' of the Error instance itself.',\n        );\n      },\n    });\n  }\n  return errorInfo;\n}\n\nfunction releaseRootPooledCache(root           , remainingLanes       ) {\n  const pooledCacheLanes = (root.pooledCacheLanes &= remainingLanes);\n  if (pooledCacheLanes === NoLanes) {\n    // None of the remaining work relies on the cache pool. Clear it so\n    // subsequent requests get a new cache\n    const pooledCache = root.pooledCache;\n    if (pooledCache != null) {\n      root.pooledCache = null;\n      releaseCache(pooledCache);\n    }\n  }\n}\n\nlet didWarnAboutInterruptedViewTransitions = false;\n\nexport function flushPendingEffects(wasDelayedCommit          )          {\n  // Returns whether passive effects were flushed.\n  if (enableViewTransition && pendingViewTransition !== null) {\n    // If we forced a flush before the View Transition full started then we skip it.\n    // This ensures that we're not running a partial animation.\n    stopViewTransition(pendingViewTransition);\n    if (__DEV__) {\n      if (!didWarnAboutInterruptedViewTransitions) {\n        didWarnAboutInterruptedViewTransitions = true;\n        console.warn(\n          'A flushSync update cancelled a View Transition because it was called ' +\n            'while the View Transition was still preparing. To preserve the synchronous ' +\n            'semantics, React had to skip the View Transition. If you can, try to avoid ' +\n            \"flushSync() in a scenario that's likely to interfere.\",\n        );\n      }\n    }\n    pendingViewTransition = null;\n  }\n  flushGestureMutations();\n  flushGestureAnimations();\n  flushMutationEffects();\n  flushLayoutEffects();\n  // Skip flushAfterMutation if we're forcing this early.\n  flushSpawnedWork();\n  return flushPassiveEffects(wasDelayedCommit);\n}\n\nfunction flushPassiveEffects(wasDelayedCommit          )          {\n  if (pendingEffectsStatus !== PENDING_PASSIVE_PHASE) {\n    return false;\n  }\n  // TODO: Merge flushPassiveEffectsImpl into this function. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  // Cache the root since pendingEffectsRoot is cleared in\n  // flushPassiveEffectsImpl\n  const root = pendingEffectsRoot;\n  // Cache and clear the remaining lanes flag; it must be reset since this\n  // method can be called from various places, not always from commitRoot\n  // where the remaining lanes are known\n  const remainingLanes = pendingEffectsRemainingLanes;\n  pendingEffectsRemainingLanes = NoLanes;\n\n  const renderPriority = lanesToEventPriority(pendingEffectsLanes);\n  const priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n  const prevTransition = ReactSharedInternals.T;\n  const previousPriority = getCurrentUpdatePriority();\n\n  try {\n    setCurrentUpdatePriority(priority);\n    ReactSharedInternals.T = null;\n    return flushPassiveEffectsImpl(wasDelayedCommit);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactSharedInternals.T = prevTransition;\n\n    // Once passive effects have run for the tree - giving components a\n    // chance to retain cache instances they use - release the pooled\n    // cache at the root (if there is one)\n    releaseRootPooledCache(root, remainingLanes);\n  }\n}\n\nfunction flushPassiveEffectsImpl(wasDelayedCommit                ) {\n  // Cache and clear the transitions flag\n  const transitions = pendingPassiveTransitions;\n  pendingPassiveTransitions = null;\n\n  const root = pendingEffectsRoot;\n  const lanes = pendingEffectsLanes;\n  pendingEffectsStatus = NO_PENDING_EFFECTS;\n  pendingEffectsRoot = (null     ); // Clear for GC purposes.\n  pendingFinishedWork = (null     ); // Clear for GC purposes.\n  // TODO: This is sometimes out of sync with pendingEffectsRoot.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n  pendingEffectsLanes = NoLanes;\n\n  if (enableYieldingBeforePassive) {\n    // We've finished our work for this render pass.\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n  }\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Cannot flush passive effects while already rendering.');\n  }\n\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    // We're about to log a lot of profiling for this commit.\n    // We set this once so we don't have to recompute it for every log.\n    setCurrentTrackFromLanes(lanes);\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = true;\n    didScheduleUpdateDuringPassiveEffects = false;\n  }\n\n  let passiveEffectStartTime = 0;\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    resetCommitErrors();\n    passiveEffectStartTime = now();\n    logPaintYieldPhase(\n      commitEndTime,\n      passiveEffectStartTime,\n      !!wasDelayedCommit,\n    );\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(\n    root,\n    root.current,\n    lanes,\n    transitions,\n    pendingEffectsRenderEndTime,\n  );\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  if (__DEV__) {\n    commitDoubleInvokeEffectsInDEV(root, true);\n  }\n\n  executionContext = prevExecutionContext;\n\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    const passiveEffectsEndTime = now();\n    logPassiveCommitPhase(\n      passiveEffectStartTime,\n      passiveEffectsEndTime,\n      commitErrors,\n    );\n    finalizeRender(lanes, passiveEffectsEndTime);\n  }\n\n  flushSyncWorkOnAllRoots();\n\n  if (enableTransitionTracing) {\n    const prevPendingTransitionCallbacks = currentPendingTransitionCallbacks;\n    const prevRootTransitionCallbacks = root.transitionCallbacks;\n    const prevEndTime = currentEndTime;\n    if (\n      prevPendingTransitionCallbacks !== null &&\n      prevRootTransitionCallbacks !== null &&\n      prevEndTime !== null\n    ) {\n      currentPendingTransitionCallbacks = null;\n      currentEndTime = null;\n      scheduleCallback(IdleSchedulerPriority, () => {\n        processTransitionCallbacks(\n          prevPendingTransitionCallbacks,\n          prevEndTime,\n          prevRootTransitionCallbacks,\n        );\n      });\n    }\n  }\n\n  if (__DEV__) {\n    // If additional passive effects were scheduled, increment a counter. If this\n    // exceeds the limit, we'll fire a warning.\n    if (didScheduleUpdateDuringPassiveEffects) {\n      if (root === rootWithPassiveNestedUpdates) {\n        nestedPassiveUpdateCount++;\n      } else {\n        nestedPassiveUpdateCount = 0;\n        rootWithPassiveNestedUpdates = root;\n      }\n    } else {\n      nestedPassiveUpdateCount = 0;\n    }\n    isFlushingPassiveEffects = false;\n    didScheduleUpdateDuringPassiveEffects = false;\n  }\n\n  if (enableYieldingBeforePassive) {\n    // Next, we reschedule any remaining work in a new task since it's a new\n    // sequence of work. We wait until the end to do this in case the passive\n    // effect schedules higher priority work than we had remaining. That way\n    // we don't schedule an early callback that gets cancelled anyway.\n    ensureRootIsScheduled(root);\n  }\n\n  // TODO: Move to commitPassiveMountEffects\n  onPostCommitRootDevTools(root);\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance       )          {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance       ) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber       ,\n  sourceFiber       ,\n  error       ,\n) {\n  const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    recordEffectError(errorInfo);\n  }\n  const update = createRootErrorUpdate(\n    rootFiber.stateNode,\n    errorInfo,\n    (SyncLane      ),\n  );\n  const root = enqueueUpdate(rootFiber, update, (SyncLane      ));\n  if (root !== null) {\n    markRootUpdated(root, SyncLane);\n    ensureRootIsScheduled(root);\n  }\n}\n\nexport function captureCommitPhaseError(\n  sourceFiber       ,\n  nearestMountedAncestor              ,\n  error       ,\n) {\n  if (__DEV__) {\n    setIsRunningInsertionEffect(false);\n  }\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = nearestMountedAncestor;\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n        if (enableProfilerTimer && enableComponentPerformanceTrack) {\n          recordEffectError(errorInfo);\n        }\n        const update = createClassErrorUpdate((SyncLane      ));\n        const root = enqueueUpdate(fiber, update, (SyncLane      ));\n        if (root !== null) {\n          initializeClassErrorUpdate(update, root, fiber, errorInfo);\n          markRootUpdated(root, SyncLane);\n          ensureRootIsScheduled(root);\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n\n  if (__DEV__) {\n    console.error(\n      'Internal React error: Attempted to capture a commit phase error ' +\n        'inside a detached tree. This indicates a bug in React. Potential ' +\n        'causes include deleting the same fiber more than once, committing an ' +\n        'already-finished tree, or an inconsistent return pointer.\\n\\n' +\n        'Error message:\\n\\n%s',\n      error,\n    );\n  }\n}\n\nexport function attachPingListener(\n  root           ,\n  wakeable          ,\n  lanes       ,\n) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set       ();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    workInProgressRootDidAttachPingListener = true;\n\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction pingSuspendedRoot(\n  root           ,\n  wakeable          ,\n  pingedLanes       ,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  markRootPinged(root, pingedLanes);\n\n  if (enableProfilerTimer && enableComponentPerformanceTrack) {\n    startPingTimerByLanes(pingedLanes);\n  }\n\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n    // TODO: Attach different listeners depending on whether the listener was\n    // attached during prerendering. Prerender pings should not interrupt\n    // normal renders.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Force a restart from the root by unwinding the stack. Unless this is\n      // being called from the render phase, because that would cause a crash.\n      if ((executionContext & RenderContext) === NoContext) {\n        prepareFreshStack(root, NoLanes);\n      } else {\n        // TODO: If this does happen during the render phase, we should throw\n        // the special internal exception that we use to interrupt the stack for\n        // selective hydration. That was temporarily reverted but we once we add\n        // it back we can use it here.\n      }\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n\n    // If something pings the work-in-progress render, any work that suspended\n    // up to this point may now be unblocked; in other words, no\n    // longer suspended.\n    //\n    // Unlike the broader check above, we only need do this if the lanes match\n    // exactly. If the lanes don't exactly match, that implies the promise\n    // was created by an older render.\n    if (workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes) {\n      workInProgressSuspendedRetryLanes = NoLanes;\n    }\n  }\n\n  ensureRootIsScheduled(root);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber       , retryLane      ) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane);\n    ensureRootIsScheduled(root);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber       ) {\n  const suspenseState                       = boundaryFiber.memoizedState;\n  let retryLane       = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber       , wakeable          ) {\n  let retryLane       = NoLane; // Default\n  let retryCache                                          ;\n  switch (boundaryFiber.tag) {\n    case ActivityComponent:\n    case SuspenseComponent:\n      retryCache = boundaryFiber.stateNode;\n      const suspenseState                                       =\n        boundaryFiber.memoizedState;\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n      break;\n    case SuspenseListComponent:\n      retryCache = boundaryFiber.stateNode;\n      break;\n    case OffscreenComponent: {\n      const instance                    = boundaryFiber.stateNode;\n      retryCache = instance._retryCache;\n      break;\n    }\n    default:\n      throw new Error(\n        'Pinged unknown suspense boundary type. ' +\n          'This is probably a bug in React.',\n      );\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function throwIfInfiniteUpdateLoopDetected() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    nestedPassiveUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    rootWithPassiveNestedUpdates = null;\n\n    if (enableInfiniteRenderLoopDetection) {\n      if (executionContext & RenderContext && workInProgressRoot !== null) {\n        // We're in the render phase. Disable the concurrent error recovery\n        // mechanism to ensure that the error we're about to throw gets handled.\n        // We need it to trigger the nearest error boundary so that the infinite\n        // update loop is broken.\n        workInProgressRoot.errorRecoveryDisabledLanes = mergeLanes(\n          workInProgressRoot.errorRecoveryDisabledLanes,\n          workInProgressRootRenderLanes,\n        );\n      }\n    }\n\n    throw new Error(\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n  }\n}\n\nfunction recursivelyTraverseAndDoubleInvokeEffectsInDEV(\n  root           ,\n  parentFiber       ,\n  isInStrictMode         ,\n) {\n  if ((parentFiber.subtreeFlags & (PlacementDEV | Visibility)) === NoFlags) {\n    // Parent's descendants have already had effects double invoked.\n    // Early exit to avoid unnecessary tree traversal.\n    return;\n  }\n  let child = parentFiber.child;\n  while (child !== null) {\n    doubleInvokeEffectsInDEVIfNecessary(root, child, isInStrictMode);\n    child = child.sibling;\n  }\n}\n\n// Unconditionally disconnects and connects passive and layout effects.\nfunction doubleInvokeEffectsOnFiber(\n  root           ,\n  fiber       ,\n  shouldDoubleInvokePassiveEffects          = true,\n) {\n  setIsStrictModeForDevtools(true);\n  try {\n    disappearLayoutEffects(fiber);\n    if (shouldDoubleInvokePassiveEffects) {\n      disconnectPassiveEffect(fiber);\n    }\n    reappearLayoutEffects(root, fiber.alternate, fiber, false);\n    if (shouldDoubleInvokePassiveEffects) {\n      reconnectPassiveEffects(root, fiber, NoLanes, null, false, 0);\n    }\n  } finally {\n    setIsStrictModeForDevtools(false);\n  }\n}\n\nfunction doubleInvokeEffectsInDEVIfNecessary(\n  root           ,\n  fiber       ,\n  parentIsInStrictMode         ,\n) {\n  const isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;\n  const isInStrictMode = parentIsInStrictMode || isStrictModeFiber;\n\n  // First case: the fiber **is not** of type OffscreenComponent. No\n  // special rules apply to double invoking effects.\n  if (fiber.tag !== OffscreenComponent) {\n    if (fiber.flags & PlacementDEV) {\n      if (isInStrictMode) {\n        runWithFiberInDEV(\n          fiber,\n          doubleInvokeEffectsOnFiber,\n          root,\n          fiber,\n          (fiber.mode & NoStrictPassiveEffectsMode) === NoMode,\n        );\n      }\n    } else {\n      recursivelyTraverseAndDoubleInvokeEffectsInDEV(\n        root,\n        fiber,\n        isInStrictMode,\n      );\n    }\n    return;\n  }\n\n  // Second case: the fiber **is** of type OffscreenComponent.\n  // This branch contains cases specific to Offscreen.\n  if (fiber.memoizedState === null) {\n    // Only consider Offscreen that is visible.\n    // TODO (Offscreen) Handle manual mode.\n    if (isInStrictMode && fiber.flags & Visibility) {\n      // Double invoke effects on Offscreen's subtree only\n      // if it is visible and its visibility has changed.\n      runWithFiberInDEV(fiber, doubleInvokeEffectsOnFiber, root, fiber);\n    } else if (fiber.subtreeFlags & PlacementDEV) {\n      // Something in the subtree could have been suspended.\n      // We need to continue traversal and find newly inserted fibers.\n      runWithFiberInDEV(\n        fiber,\n        recursivelyTraverseAndDoubleInvokeEffectsInDEV,\n        root,\n        fiber,\n        isInStrictMode,\n      );\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(\n  root           ,\n  hasPassiveEffects         ,\n) {\n  if (__DEV__) {\n    if (disableLegacyMode || root.tag !== LegacyRoot) {\n      let doubleInvokeEffects = true;\n\n      if (\n        (disableLegacyMode || root.tag === ConcurrentRoot) &&\n        !(root.current.mode & (StrictLegacyMode | StrictEffectsMode))\n      ) {\n        doubleInvokeEffects = false;\n      }\n      recursivelyTraverseAndDoubleInvokeEffectsInDEV(\n        root,\n        root.current,\n        doubleInvokeEffects,\n      );\n    } else {\n      // TODO: Is this runWithFiberInDEV needed since the other effect functions do it too?\n      runWithFiberInDEV(\n        root.current,\n        legacyCommitDoubleInvokeEffectsInDEV,\n        root.current,\n        hasPassiveEffects,\n      );\n    }\n  }\n}\n\nfunction legacyCommitDoubleInvokeEffectsInDEV(\n  fiber       ,\n  hasPassiveEffects         ,\n) {\n  // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n  // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n  // Maybe not a big deal since this is DEV only behavior.\n\n  invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n  if (hasPassiveEffects) {\n    invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n  }\n\n  invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n  if (hasPassiveEffects) {\n    invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n  }\n}\n\nfunction invokeEffectsInDev(\n  firstChild       ,\n  fiberFlags       ,\n  invokeEffectFn                        ,\n) {\n  let current               = firstChild;\n  let subtreeRoot = null;\n  while (current != null) {\n    const primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n    if (\n      current !== subtreeRoot &&\n      current.child != null &&\n      primarySubtreeFlag !== NoFlags\n    ) {\n      current = current.child;\n    } else {\n      if ((current.flags & fiberFlags) !== NoFlags) {\n        invokeEffectFn(current);\n      }\n\n      if (current.sibling !== null) {\n        current = current.sibling;\n      } else {\n        current = subtreeRoot = current.return;\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent                     = null;\nexport function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber       ) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!disableLegacyMode && !(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      // $FlowFixMe[incompatible-use] found when upgrading Flow\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    runWithFiberInDEV(fiber, () => {\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    });\n  }\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set        ();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber       ) {\n  if (__DEV__) {\n    if (ReactCurrentDebugFiberIsRenderingInDEV) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentNameFromFiber(fiber) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://react.dev/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport function restorePendingUpdaters(root           , lanes       )       {\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      const memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(schedulingFiber => {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      });\n\n      // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\n\nconst fakeActCallbackNode = {};\n// $FlowFixMe[missing-local-annot]\nfunction scheduleCallback(priorityLevel     , callback) {\n  if (__DEV__) {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    const actQueue = ReactSharedInternals.actQueue;\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return Scheduler_scheduleCallback(priorityLevel, callback);\n    }\n  } else {\n    // In production, always call Scheduler. This function will be stripped out.\n    return Scheduler_scheduleCallback(priorityLevel, callback);\n  }\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && ReactSharedInternals.actQueue !== null;\n}\n\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber       )       {\n  if (__DEV__) {\n    if (disableLegacyMode || fiber.mode & ConcurrentMode) {\n      if (!isConcurrentActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n    } else {\n      // Legacy mode has additional cases where we suppress a warning.\n      if (!isLegacyActEnvironment(fiber)) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n      if (executionContext !== NoContext) {\n        // Legacy mode doesn't warn if the update is batched, i.e.\n        // batchedUpdates or flushSync.\n        return;\n      }\n      if (\n        fiber.tag !== FunctionComponent &&\n        fiber.tag !== ForwardRef &&\n        fiber.tag !== SimpleMemoComponent\n      ) {\n        // For backwards compatibility with pre-hooks code, legacy mode only\n        // warns for updates that originate from a hook.\n        return;\n      }\n    }\n\n    if (ReactSharedInternals.actQueue === null) {\n      runWithFiberInDEV(fiber, () => {\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://react.dev/link/wrap-tests-with-act',\n          getComponentNameFromFiber(fiber),\n        );\n      });\n    }\n  }\n}\n\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root           )       {\n  if (__DEV__) {\n    if (\n      (disableLegacyMode || root.tag !== LegacyRoot) &&\n      isConcurrentActEnvironment() &&\n      ReactSharedInternals.actQueue === null\n    ) {\n      console.error(\n        'A suspended resource finished loading inside a test, but the event ' +\n          'was not wrapped in act(...).\\n\\n' +\n          'When testing, code that resolves suspended data should be wrapped ' +\n          'into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* finish loading suspended data */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://react.dev/link/wrap-tests-with-act',\n      );\n    }\n  }\n}\n\nexport function setIsRunningInsertionEffect(isRunning         )       {\n  if (__DEV__) {\n    isRunningInsertionEffect = isRunning;\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                          \n             \n                \n              \n             \n                      \n                \n                           \n                                                \n                                             \n                                             \n                                                  \n                                            \n                                                                           \n             \n                    \n                 \n                    \n                                        \n                                                                             \n                                                                              \n\nimport {\n  supportsResources,\n  supportsSingletons,\n  isHostHoistableType,\n  isHostSingletonType,\n} from './ReactFiberConfig';\nimport {\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableLegacyHidden,\n  enableTransitionTracing,\n  enableDO_NOT_USE_disableStrictPassiveEffect,\n  enableRenderableContext,\n  disableLegacyMode,\n  enableObjectFiber,\n  enableViewTransition,\n  enableSuspenseyImages,\n} from 'shared/ReactFeatureFlags';\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  HostHoistable,\n  HostSingleton,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  TracingMarkerComponent,\n  Throw,\n  ViewTransitionComponent,\n  ActivityComponent,\n} from './ReactWorkTags';\nimport {OffscreenVisible} from './ReactFiberOffscreenComponent';\nimport {getComponentNameFromOwner} from 'react-reconciler/src/getComponentNameFromFiber';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading';\nimport {NoLanes} from './ReactFiberLane';\nimport {\n  NoMode,\n  ConcurrentMode,\n  ProfileMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  NoStrictPassiveEffectsMode,\n  SuspenseyImagesMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_CONSUMER_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n  REACT_ELEMENT_TYPE,\n  REACT_VIEW_TRANSITION_TYPE,\n  REACT_ACTIVITY_TYPE,\n} from 'shared/ReactSymbols';\nimport {TransitionTracingMarker} from './ReactFiberTracingMarkerComponent';\nimport {getHostContext} from './ReactFiberHostContext';\n                                                                \nimport isArray from 'shared/isArray';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\n\n                    \n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    // eslint-disable-next-line no-new\n    new Map([[nonExtensibleObject, null]]);\n    // eslint-disable-next-line no-new\n    new Set([nonExtensibleObject]);\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(\n                   \n  tag         ,\n  pendingProps       ,\n  key               ,\n  mode            ,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n  this.refCleanup = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n\n    this.actualDuration = -0;\n    this.actualStartTime = -1.1;\n    this.selfBaseDuration = -0;\n    this.treeBaseDuration = -0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugInfo = null;\n    this._debugOwner = null;\n    this._debugStack = null;\n    this._debugTask = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nfunction createFiberImplClass(\n  tag         ,\n  pendingProps       ,\n  key               ,\n  mode            ,\n)        {\n  // $FlowFixMe[invalid-constructor]: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n}\n\nfunction createFiberImplObject(\n  tag         ,\n  pendingProps       ,\n  key               ,\n  mode            ,\n)        {\n  const fiber        = {\n    // Instance\n    // tag, key - defined at the bottom as dynamic properties\n    elementType: null,\n    type: null,\n    stateNode: null,\n\n    // Fiber\n    return: null,\n    child: null,\n    sibling: null,\n    index: 0,\n\n    ref: null,\n    refCleanup: null,\n\n    // pendingProps - defined at the bottom as dynamic properties\n    memoizedProps: null,\n    updateQueue: null,\n    memoizedState: null,\n    dependencies: null,\n\n    // Effects\n    flags: NoFlags,\n    subtreeFlags: NoFlags,\n    deletions: null,\n\n    lanes: NoLanes,\n    childLanes: NoLanes,\n\n    alternate: null,\n\n    // dynamic properties at the end for more efficient hermes bytecode\n    tag,\n    key,\n    pendingProps,\n    mode,\n  };\n\n  if (enableProfilerTimer) {\n    fiber.actualDuration = -0;\n    fiber.actualStartTime = -1.1;\n    fiber.selfBaseDuration = -0;\n    fiber.treeBaseDuration = -0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n    fiber._debugInfo = null;\n    fiber._debugOwner = null;\n    fiber._debugStack = null;\n    fiber._debugTask = null;\n    fiber._debugNeedsRemount = false;\n    fiber._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(fiber);\n    }\n  }\n  return fiber;\n}\n\nconst createFiber = enableObjectFiber\n  ? createFiberImplObject\n  : createFiberImplClass;\n\nfunction shouldConstruct(Component          ) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type     )          {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function isFunctionClassComponent(\n  type                                ,\n)          {\n  return shouldConstruct(type);\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current       , pendingProps     )        {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugStack = current._debugStack;\n      workInProgress._debugTask = current._debugTask;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effects are no longer valid.\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = -0;\n      workInProgress.actualStartTime = -1.1;\n    }\n  }\n\n  // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : __DEV__\n        ? {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n            _debugThenableState: currentDependencies._debugThenableState,\n          }\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n  workInProgress.refCleanup = current.refCleanup;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugInfo = current._debugInfo;\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(\n  workInProgress       ,\n  renderLanes       ,\n)        {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement;\n\n  // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : __DEV__\n          ? {\n              lanes: currentDependencies.lanes,\n              firstContext: currentDependencies.firstContext,\n              _debugThenableState: currentDependencies._debugThenableState,\n            }\n          : {\n              lanes: currentDependencies.lanes,\n              firstContext: currentDependencies.firstContext,\n            };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(\n  tag         ,\n  isStrictMode         ,\n)        {\n  let mode;\n  if (disableLegacyMode || tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point\u2013\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\n// TODO: Get rid of this helper. Only createFiberFromElement should exist.\nexport function createFiberFromTypeAndProps(\n  type     , // React$ElementType\n  key               ,\n  pendingProps     ,\n  owner                                   ,\n  mode            ,\n  lanes       ,\n)        {\n  let fiberTag = FunctionComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    if (supportsResources && supportsSingletons) {\n      const hostContext = getHostContext();\n      fiberTag = isHostHoistableType(type, pendingProps, hostContext)\n        ? HostHoistable\n        : isHostSingletonType(type)\n          ? HostSingleton\n          : HostComponent;\n    } else if (supportsResources) {\n      const hostContext = getHostContext();\n      fiberTag = isHostHoistableType(type, pendingProps, hostContext)\n        ? HostHoistable\n        : HostComponent;\n    } else if (supportsSingletons) {\n      fiberTag = isHostSingletonType(type) ? HostSingleton : HostComponent;\n    } else {\n      fiberTag = HostComponent;\n    }\n  } else {\n    getTag: switch (type) {\n      case REACT_ACTIVITY_TYPE:\n        return createFiberFromActivity(pendingProps, mode, lanes, key);\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n        if (disableLegacyMode || (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n          if (\n            enableDO_NOT_USE_disableStrictPassiveEffect &&\n            pendingProps.DO_NOT_USE_disableStrictPassiveEffect\n          ) {\n            mode |= NoStrictPassiveEffectsMode;\n          }\n        }\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        if (enableLegacyHidden) {\n          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n        }\n      // Fall through\n      case REACT_VIEW_TRANSITION_TYPE:\n        if (enableViewTransition) {\n          return createFiberFromViewTransition(pendingProps, mode, lanes, key);\n        }\n      // Fall through\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // Fall through\n      case REACT_TRACING_MARKER_TYPE:\n        if (enableTransitionTracing) {\n          return createFiberFromTracingMarker(pendingProps, mode, lanes, key);\n        }\n      // Fall through\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              if (!enableRenderableContext) {\n                fiberTag = ContextProvider;\n                break getTag;\n              }\n            // Fall through\n            case REACT_CONTEXT_TYPE:\n              if (enableRenderableContext) {\n                fiberTag = ContextProvider;\n                break getTag;\n              } else {\n                fiberTag = ContextConsumer;\n                break getTag;\n              }\n            case REACT_CONSUMER_TYPE:\n              if (enableRenderableContext) {\n                fiberTag = ContextConsumer;\n                break getTag;\n              }\n            // Fall through\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n          }\n        }\n        let info = '';\n        let typeString;\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and named imports.\";\n          }\n\n          if (type === null) {\n            typeString = 'null';\n          } else if (isArray(type)) {\n            typeString = 'array';\n          } else if (\n            type !== undefined &&\n            type.$$typeof === REACT_ELEMENT_TYPE\n          ) {\n            typeString = `<${\n              getComponentNameFromType(type.type) || 'Unknown'\n            } />`;\n            info =\n              ' Did you accidentally export a JSX literal instead of a component?';\n          } else {\n            typeString = typeof type;\n          }\n\n          const ownerName = owner ? getComponentNameFromOwner(owner) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        } else {\n          typeString = type === null ? 'null' : typeof type;\n        }\n\n        // The type is invalid but it's conceptually a child that errored and not the\n        // current component itself so we create a virtual child that throws in its\n        // begin phase. This is the same thing we do in ReactChildFiber if we throw\n        // but we do it here so that we can assign the debug owner and stack from the\n        // element itself. That way the error stack will point to the JSX callsite.\n        fiberTag = Throw;\n        pendingProps = new Error(\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            `but got: ${typeString}.${info}`,\n        );\n        resolvedType = null;\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromElement(\n  element              ,\n  mode            ,\n  lanes       ,\n)        {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugOwner = element._owner;\n    fiber._debugStack = element._debugStack;\n    fiber._debugTask = element._debugTask;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements               ,\n  mode            ,\n  lanes       ,\n  key               ,\n)        {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope            ,\n  pendingProps     ,\n  mode            ,\n  lanes       ,\n  key               ,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps     ,\n  mode            ,\n  lanes       ,\n  key               ,\n)        {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error(\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n        typeof pendingProps.id,\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps     ,\n  mode            ,\n  lanes       ,\n  key               ,\n)        {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps     ,\n  mode            ,\n  lanes       ,\n  key               ,\n)        {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps                ,\n  mode            ,\n  lanes       ,\n  key               ,\n)        {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.lanes = lanes;\n  const primaryChildInstance                    = {\n    _visibility: OffscreenVisible,\n    _pendingMarkers: null,\n    _retryCache: null,\n    _transitions: null,\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\nexport function createFiberFromActivity(\n  pendingProps               ,\n  mode            ,\n  lanes       ,\n  key               ,\n)        {\n  const fiber = createFiber(ActivityComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_ACTIVITY_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromViewTransition(\n  pendingProps                     ,\n  mode            ,\n  lanes       ,\n  key               ,\n)        {\n  if (!enableSuspenseyImages) {\n    // Render a ViewTransition component opts into SuspenseyImages mode even\n    // when the flag is off.\n    mode |= SuspenseyImagesMode;\n  }\n  const fiber = createFiber(ViewTransitionComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_VIEW_TRANSITION_TYPE;\n  fiber.lanes = lanes;\n  const instance                      = {\n    autoName: null,\n    paired: null,\n    clones: null,\n    ref: null,\n  };\n  fiber.stateNode = instance;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps                   ,\n  mode            ,\n  lanes       ,\n  key               ,\n)        {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  // Adding a stateNode for legacy hidden because it's currently using\n  // the offscreen implementation, which depends on a state node\n  const instance                    = {\n    _visibility: OffscreenVisible,\n    _pendingMarkers: null,\n    _transitions: null,\n    _retryCache: null,\n  };\n  fiber.stateNode = instance;\n  return fiber;\n}\n\nexport function createFiberFromTracingMarker(\n  pendingProps     ,\n  mode            ,\n  lanes       ,\n  key               ,\n)        {\n  const fiber = createFiber(TracingMarkerComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_TRACING_MARKER_TYPE;\n  fiber.lanes = lanes;\n  const tracingMarkerInstance                        = {\n    tag: TransitionTracingMarker,\n    transitions: null,\n    pendingBoundaries: null,\n    aborts: null,\n    name: pendingProps.name,\n  };\n  fiber.stateNode = tracingMarkerInstance;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content        ,\n  mode            ,\n  lanes       ,\n)        {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode                                     ,\n)        {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal             ,\n  mode            ,\n  lanes       ,\n)        {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\nexport function createFiberFromThrow(\n  error       ,\n  mode            ,\n  lanes       ,\n)        {\n  const fiber = createFiber(Throw, error, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                     \n             \n            \n                             \n                             \n                              \n                                             \n                                                      \n                                                  \n\nimport {noTimeout} from './ReactFiberConfig';\nimport {createHostRootFiber} from './ReactFiber';\nimport {\n  NoLane,\n  NoLanes,\n  NoTimestamp,\n  TotalLanes,\n  createLaneMap,\n} from './ReactFiberLane';\nimport {\n  enableSuspenseCallback,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableUpdaterTracking,\n  enableTransitionTracing,\n  disableLegacyMode,\n  enableViewTransition,\n  enableGestureTransition,\n  enableDefaultTransitionIndicator,\n} from 'shared/ReactFeatureFlags';\nimport {initializeUpdateQueue} from './ReactFiberClassUpdateQueue';\nimport {LegacyRoot, ConcurrentRoot} from './ReactRootTags';\nimport {createCache, retainCache} from './ReactFiberCacheComponent';\n\n                         \n               \n                        \n               \n  \n\nfunction FiberRootNode(\n                   \n  containerInfo     ,\n  // $FlowFixMe[missing-local-annot]\n  tag,\n  hydrate     ,\n  identifierPrefix     ,\n  onUncaughtError     ,\n  onCaughtError     ,\n  onRecoverableError     ,\n  onDefaultTransitionIndicator     ,\n  formState                                 ,\n) {\n  this.tag = disableLegacyMode ? ConcurrentRoot : tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.timeoutHandle = noTimeout;\n  this.cancelPendingCommit = null;\n  this.context = null;\n  this.pendingContext = null;\n  this.next = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.warmLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  if (enableDefaultTransitionIndicator) {\n    this.indicatorLanes = NoLanes;\n  }\n  this.errorRecoveryDisabledLanes = NoLanes;\n  this.shellSuspendCounter = 0;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  this.hiddenUpdates = createLaneMap(null);\n\n  this.identifierPrefix = identifierPrefix;\n  this.onUncaughtError = onUncaughtError;\n  this.onCaughtError = onCaughtError;\n  this.onRecoverableError = onRecoverableError;\n\n  if (enableDefaultTransitionIndicator) {\n    this.onDefaultTransitionIndicator = onDefaultTransitionIndicator;\n    this.pendingIndicator = null;\n  }\n\n  this.pooledCache = null;\n  this.pooledCacheLanes = NoLanes;\n\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  this.formState = formState;\n\n  if (enableViewTransition) {\n    this.transitionTypes = null;\n  }\n\n  if (enableGestureTransition) {\n    this.pendingGestures = null;\n    this.stoppingGestures = null;\n    this.gestureClone = null;\n  }\n\n  this.incompleteTransitions = new Map();\n  if (enableTransitionTracing) {\n    this.transitionCallbacks = null;\n    this.transitionLanes = createLaneMap(null);\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    this.effectDuration = -0;\n    this.passiveEffectDuration = -0;\n  }\n\n  if (enableUpdaterTracking) {\n    this.memoizedUpdaters = new Set();\n    const pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  if (__DEV__) {\n    if (disableLegacyMode) {\n      // TODO: This varies by each renderer.\n      this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n    } else {\n      switch (tag) {\n        case ConcurrentRoot:\n          this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n          break;\n        case LegacyRoot:\n          this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n          break;\n      }\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo           ,\n  tag         ,\n  hydrate         ,\n  initialChildren               ,\n  hydrationCallbacks                                   ,\n  isStrictMode         ,\n  // TODO: We have several of these arguments that are conceptually part of the\n  // host config, but because they are passed in at runtime, we have to thread\n  // them through the root constructor. Perhaps we should put them all into a\n  // single type, like a DynamicHostConfig that is defined by the renderer.\n  identifierPrefix        ,\n  formState                                 ,\n  onUncaughtError   \n                 \n                                           \n           ,\n  onCaughtError   \n                 \n                \n                                \n                                                  \n      \n           ,\n  onRecoverableError   \n                 \n                                           \n           ,\n  onDefaultTransitionIndicator                           ,\n  transitionCallbacks                                   ,\n)            {\n  // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions\n  const root            = (new FiberRootNode(\n    containerInfo,\n    tag,\n    hydrate,\n    identifierPrefix,\n    onUncaughtError,\n    onCaughtError,\n    onRecoverableError,\n    onDefaultTransitionIndicator,\n    formState,\n  )     );\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  if (enableTransitionTracing) {\n    root.transitionCallbacks = transitionCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  const initialCache = createCache();\n  retainCache(initialCache);\n\n  // The pooledCache is a fresh cache instance that is used temporarily\n  // for newly mounted boundaries during a render. In general, the\n  // pooledCache is always cleared from the root at the end of a render:\n  // it is either released when render commits, or moved to an Offscreen\n  // component if rendering suspends. Because the lifetime of the pooled\n  // cache is distinct from the main memoizedState.cache, it must be\n  // retained separately.\n  root.pooledCache = initialCache;\n  retainCache(initialCache);\n  const initialState            = {\n    element: initialChildren,\n    isDehydrated: hydrate,\n    cache: initialCache,\n  };\n  uninitializedFiber.memoizedState = initialState;\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n             \n        \n            \n                             \n                             \n                              \n                                             \n             \n            \n                 \n                           \n                            \n                                                                     \n                                           \n                                                                 \n                                                                 \n\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  HostSingleton,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n  ActivityComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport isArray from 'shared/isArray';\nimport {\n  enableSchedulingProfiler,\n  enableHydrationLaneScheduling,\n  disableLegacyMode,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  getPublicInstance,\n  rendererVersion,\n  rendererPackageName,\n  extraDevToolsConfig,\n} from './ReactFiberConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext';\nimport {createFiberRoot} from './ReactFiberRoot';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {\n  injectInternals,\n  markRenderScheduled,\n  onScheduleRoot,\n  injectProfilingHooks,\n} from './ReactFiberDevToolsHook';\nimport {startUpdateTimerByLane} from './ReactProfilerTimer';\nimport {\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  scheduleInitialHydrationOnRoot,\n  flushRoot,\n  batchedUpdates,\n  flushSyncFromReconciler,\n  flushSyncWork,\n  isAlreadyRendering,\n  deferredUpdates,\n  discreteUpdates,\n  flushPendingEffects,\n} from './ReactFiberWorkLoop';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactFiberClassUpdateQueue';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  runWithFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  SelectiveHydrationLane,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n  getBumpedLaneForHydrationByLane,\n} from './ReactFiberLane';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n} from './ReactFiberHotReloading';\nimport ReactVersion from 'shared/ReactVersion';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPseudoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\nexport {startHostTransition} from './ReactFiberHooks';\nexport {\n  defaultOnUncaughtError,\n  defaultOnCaughtError,\n  defaultOnRecoverableError,\n} from './ReactFiberErrorLogger';\nimport {getLabelForLane, TotalLanes} from 'react-reconciler/src/ReactFiberLane';\nimport {registerDefaultIndicator} from './ReactFiberAsyncAction';\n\n                            \n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = ({}                     );\n}\n\nfunction getContextForSubtree(\n  parentComponent                            ,\n)         {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component        )                        {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      throw new Error('Unable to find node on an unmounted component.');\n    } else {\n      const keys = Object.keys(component).join(',');\n      throw new Error(\n        `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return getPublicInstance(hostFiber.stateNode);\n}\n\nfunction findHostInstanceWithWarning(\n  component        ,\n  methodName        ,\n)                        {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        throw new Error('Unable to find node on an unmounted component.');\n      } else {\n        const keys = Object.keys(component).join(',');\n        throw new Error(\n          `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictLegacyMode) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n        runWithFiberInDEV(hostFiber, () => {\n          if (fiber.mode & StrictLegacyMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://react.dev/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://react.dev/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        });\n      }\n    }\n    return getPublicInstance(hostFiber.stateNode);\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo           ,\n  tag         ,\n  hydrationCallbacks                                   ,\n  isStrictMode         ,\n  // TODO: Remove `concurrentUpdatesByDefaultOverride`. It is now ignored.\n  concurrentUpdatesByDefaultOverride                ,\n  identifierPrefix        ,\n  onUncaughtError   \n                 \n                                           \n           ,\n  onCaughtError   \n                 \n                \n                                \n                                                  \n      \n           ,\n  onRecoverableError   \n                 \n                                           \n           ,\n  onDefaultTransitionIndicator                           ,\n  transitionCallbacks                                   ,\n)             {\n  const hydrate = false;\n  const initialChildren = null;\n  const root = createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    identifierPrefix,\n    null,\n    onUncaughtError,\n    onCaughtError,\n    onRecoverableError,\n    onDefaultTransitionIndicator,\n    transitionCallbacks,\n  );\n  registerDefaultIndicator(onDefaultTransitionIndicator);\n  return root;\n}\n\nexport function createHydrationContainer(\n  initialChildren               ,\n  // TODO: Remove `callback` when we delete legacy mode.\n  callback           ,\n  containerInfo           ,\n  tag         ,\n  hydrationCallbacks                                   ,\n  isStrictMode         ,\n  // TODO: Remove `concurrentUpdatesByDefaultOverride`. It is now ignored.\n  concurrentUpdatesByDefaultOverride                ,\n  identifierPrefix        ,\n  onUncaughtError   \n                 \n                                           \n           ,\n  onCaughtError   \n                 \n                \n                                \n                                                  \n      \n           ,\n  onRecoverableError   \n                 \n                                           \n           ,\n  onDefaultTransitionIndicator                           ,\n  transitionCallbacks                                   ,\n  formState                                 ,\n)             {\n  const hydrate = true;\n  const root = createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    identifierPrefix,\n    formState,\n    onUncaughtError,\n    onCaughtError,\n    onRecoverableError,\n    onDefaultTransitionIndicator,\n    transitionCallbacks,\n  );\n\n  registerDefaultIndicator(onDefaultTransitionIndicator);\n\n  // TODO: Move this to FiberRoot constructor\n  root.context = getContextForSubtree(null);\n\n  // Schedule the initial render. In a hydration root, this is different from\n  // a regular update because the initial render must match was was rendered\n  // on the server.\n  // NOTE: This update intentionally doesn't have a payload. We're only using\n  // the update to schedule work on the root fiber (and, for legacy roots, to\n  // enqueue the callback if one is provided).\n  const current = root.current;\n  let lane = requestUpdateLane(current);\n  if (enableHydrationLaneScheduling) {\n    lane = getBumpedLaneForHydrationByLane(lane);\n  }\n  const update = createUpdate(lane);\n  update.callback =\n    callback !== undefined && callback !== null ? callback : null;\n  enqueueUpdate(current, update, lane);\n  scheduleInitialHydrationOnRoot(root, lane);\n\n  return root;\n}\n\nexport function updateContainer(\n  element               ,\n  container            ,\n  parentComponent                            ,\n  callback           ,\n)       {\n  const current = container.current;\n  const lane = requestUpdateLane(current);\n  updateContainerImpl(\n    current,\n    lane,\n    element,\n    container,\n    parentComponent,\n    callback,\n  );\n  return lane;\n}\n\nexport function updateContainerSync(\n  element               ,\n  container            ,\n  parentComponent                            ,\n  callback           ,\n)       {\n  if (!disableLegacyMode && container.tag === LegacyRoot) {\n    flushPendingEffects();\n  }\n  const current = container.current;\n  updateContainerImpl(\n    current,\n    SyncLane,\n    element,\n    container,\n    parentComponent,\n    callback,\n  );\n  return SyncLane;\n}\n\nfunction updateContainerImpl(\n  rootFiber       ,\n  lane      ,\n  element               ,\n  container            ,\n  parentComponent                            ,\n  callback           ,\n)       {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentNameFromFiber(ReactCurrentFiberCurrent) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  const root = enqueueUpdate(rootFiber, update, lane);\n  if (root !== null) {\n    startUpdateTimerByLane(lane, 'root.render()');\n    scheduleUpdateOnFiber(root, rootFiber, lane);\n    entangleTransitions(root, rootFiber, lane);\n  }\n}\n\nexport {\n  batchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushSyncFromReconciler,\n  flushSyncWork,\n  isAlreadyRendering,\n  flushPendingEffects as flushPassiveEffects,\n};\n\nexport function getPublicRootInstance(\n  container            ,\n)                                                    {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostSingleton:\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber       )       {\n  switch (fiber.tag) {\n    case HostRoot: {\n      const root            = fiber.stateNode;\n      if (isRootDehydrated(root)) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    }\n    case ActivityComponent:\n    case SuspenseComponent: {\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n      flushSyncWork();\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = SyncLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n    }\n  }\n}\n\nfunction markRetryLaneImpl(fiber       , retryLane      ) {\n  const suspenseState                                       =\n    fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thenables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber       , retryLane      ) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptContinuousHydration(fiber       )       {\n  if (fiber.tag !== SuspenseComponent && fiber.tag !== ActivityComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const lane = SelectiveHydrationLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, lane);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber       )       {\n  if (fiber.tag !== SuspenseComponent && fiber.tag !== ActivityComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  let lane = requestUpdateLane(fiber);\n  if (enableHydrationLaneScheduling) {\n    lane = getBumpedLaneForHydrationByLane(lane);\n  }\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, lane);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber       ,\n)                        {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return getPublicInstance(hostFiber.stateNode);\n}\n\nlet shouldErrorImpl                    = fiber => null;\n\nexport function shouldError(fiber       )           {\n  return shouldErrorImpl(fiber);\n}\n\nlet shouldSuspendImpl = (fiber       ) => false;\n\nexport function shouldSuspend(fiber       )          {\n  return shouldSuspendImpl(fiber);\n}\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setErrorHandler = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj                     ,\n    path                        ,\n    index        ,\n  )             => {\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(((key     )        ), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe[incompatible-use] number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj                     ,\n    path                        ,\n  )                      => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj                     ,\n    oldPath                        ,\n    newPath                        ,\n    index        ,\n  )             => {\n    const oldKey = oldPath[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe[incompatible-use] number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (isArray(updated)) {\n        updated.splice(((oldKey     )        ), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe[incompatible-use] number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe[incompatible-use] number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj                     ,\n    oldPath                        ,\n    newPath                        ,\n  )                      => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj                     ,\n    path                        ,\n    index        ,\n    value     ,\n  )             => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe[incompatible-use] number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj                     ,\n    path                        ,\n    value     ,\n  )                      => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber       , id        ) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber       ,\n    id        ,\n    path                        ,\n    value     ,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber       ,\n    id        ,\n    path                        ,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber       ,\n    id        ,\n    oldPath                        ,\n    newPath                        ,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber       , path                        , value     ) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane);\n    }\n  };\n  overridePropsDeletePath = (fiber       , path                        ) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane);\n    }\n  };\n  overridePropsRenamePath = (\n    fiber       ,\n    oldPath                        ,\n    newPath                        ,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane);\n    }\n  };\n\n  scheduleUpdate = (fiber       ) => {\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane);\n    }\n  };\n\n  setErrorHandler = (newShouldErrorImpl                   ) => {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl                  ) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nfunction getLaneLabelMap()                           {\n  if (enableSchedulingProfiler) {\n    const map                    = new Map();\n\n    let lane = 1;\n    for (let index = 0; index < TotalLanes; index++) {\n      const label = ((getLabelForLane(lane)     )        );\n      map.set(lane, label);\n      lane *= 2;\n    }\n\n    return map;\n  } else {\n    return null;\n  }\n}\n\nexport function injectIntoDevTools()          {\n  const internals         = {\n    bundleType: __DEV__ ? 1 : 0, // Might add PROFILE later.\n    version: rendererVersion,\n    rendererPackageName: rendererPackageName,\n    currentDispatcherRef: ReactSharedInternals,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion,\n  };\n  if (extraDevToolsConfig !== null) {\n    internals.rendererConfig = (extraDevToolsConfig                          );\n  }\n  if (__DEV__) {\n    internals.overrideHookState = overrideHookState;\n    internals.overrideHookStateDeletePath = overrideHookStateDeletePath;\n    internals.overrideHookStateRenamePath = overrideHookStateRenamePath;\n    internals.overrideProps = overrideProps;\n    internals.overridePropsDeletePath = overridePropsDeletePath;\n    internals.overridePropsRenamePath = overridePropsRenamePath;\n    internals.scheduleUpdate = scheduleUpdate;\n    internals.setErrorHandler = setErrorHandler;\n    internals.setSuspenseHandler = setSuspenseHandler;\n    // React Refresh\n    internals.scheduleRefresh = scheduleRefresh;\n    internals.scheduleRoot = scheduleRoot;\n    internals.setRefreshHandler = setRefreshHandler;\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    internals.getCurrentFiber = getCurrentFiberForDevTools;\n  }\n  if (enableSchedulingProfiler) {\n    // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n    // This gives DevTools a way to feature detect that isn't tied to version number\n    // (since profiling and timeline are controlled by different feature flags).\n    internals.getLaneLabelMap = getLaneLabelMap;\n    internals.injectProfilingHooks = injectProfilingHooks;\n  }\n  return injectInternals(internals);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                      \n\nexport const IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;\nexport const IS_NON_DELEGATED = 1 << 1;\nexport const IS_CAPTURE_PHASE = 1 << 2;\nexport const IS_PASSIVE = 1 << 3;\nexport const IS_LEGACY_FB_SUPPORT_MODE = 1 << 4;\n\nexport const SHOULD_NOT_DEFER_CLICK_FOR_FB_SUPPORT_MODE =\n  IS_LEGACY_FB_SUPPORT_MODE | IS_CAPTURE_PHASE;\n\n// We do not want to defer if the event system has already been\n// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when\n// we call willDeferLaterForLegacyFBSupport, thus not bailing out\n// will result in endless cycles like an infinite loop.\n// We also don't want to defer during event replaying.\nexport const SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS =\n  IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {TEXT_NODE} from '../client/HTMLNodeType';\n\n/**\n * Gets the target node from a native browser event by accounting for\n * inconsistencies in browser DOM APIs.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {DOMEventTarget} Target node.\n */\nfunction getEventTarget(nativeEvent) {\n  // Fallback to nativeEvent.srcElement for IE9\n  // https://github.com/facebook/react/issues/12506\n  let target = nativeEvent.target || nativeEvent.srcElement || window;\n\n  // Normalize SVG <use> element events #4963\n  if (target.correspondingUseElement) {\n    target = target.correspondingUseElement;\n  }\n\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\n  // @see http://www.quirksmode.org/js/events_properties.html\n  return target.nodeType === TEXT_NODE ? target.parentNode : target;\n}\n\nexport default getEventTarget;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                             \n                                                           \n\nimport noop from 'shared/noop';\n\n// This should line up with NoEventPriority from react-reconciler/src/ReactEventPriorities\n// but we can't depend on the react-reconciler from this isomorphic code.\nexport const NoEventPriority                = (0     );\n\n                          \n                                                    \n                                               \n              \n          \n        \n                                                      \n                                  \n  \n\nfunction requestFormReset(element                 ) {\n  throw new Error(\n    'Invalid form element. requestFormReset must be passed a form that was ' +\n      'rendered by React.',\n  );\n}\n\nconst DefaultDispatcher                 = {\n  f /* flushSyncWork */: noop,\n  r /* requestFormReset */: requestFormReset,\n  D /* prefetchDNS */: noop,\n  C /* preconnect */: noop,\n  L /* preload */: noop,\n  m /* preloadModule */: noop,\n  X /* preinitScript */: noop,\n  S /* preinitStyle */: noop,\n  M /* preinitModuleScript */: noop,\n};\n\nconst Internals                    = {\n  d /* ReactDOMCurrentDispatcher */: DefaultDispatcher,\n  p /* currentUpdatePriority */: NoEventPriority,\n  findDOMNode: null,\n};\n\nexport default Internals;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                     \n\nimport ReactVersion from 'shared/ReactVersion';\n\nimport {isValidContainer} from 'react-dom-bindings/src/client/ReactDOMContainer';\nimport {createPortal as createPortalImpl} from 'react-reconciler/src/ReactPortal';\nimport {flushSync} from './ReactDOMFlushSync';\n\nimport {\n  prefetchDNS,\n  preconnect,\n  preload,\n  preloadModule,\n  preinit,\n  preinitModule,\n} from './ReactDOMFloat';\nimport {\n  requestFormReset,\n  useFormStatus,\n  useFormState,\n} from 'react-dom-bindings/src/shared/ReactDOMFormActions';\n\nif (__DEV__) {\n  if (\n    typeof Map !== 'function' ||\n    // $FlowFixMe[prop-missing] Flow incorrectly thinks Map has no prototype\n    Map.prototype == null ||\n    typeof Map.prototype.forEach !== 'function' ||\n    typeof Set !== 'function' ||\n    // $FlowFixMe[prop-missing] Flow incorrectly thinks Set has no prototype\n    Set.prototype == null ||\n    typeof Set.prototype.clear !== 'function' ||\n    typeof Set.prototype.forEach !== 'function'\n  ) {\n    console.error(\n      'React depends on Map and Set built-in types. Make sure that you load a ' +\n        'polyfill in older browsers. https://reactjs.org/link/react-polyfills',\n    );\n  }\n}\n\nfunction batchedUpdates      (fn             , a   )    {\n  // batchedUpdates is now just a passthrough noop\n  return fn(a);\n}\n\nfunction createPortal(\n  children               ,\n  container                            ,\n  key          = null,\n)               {\n  if (!isValidContainer(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  // TODO: pass ReactDOM portal implementation as third argument\n  // $FlowFixMe[incompatible-return] The Flow type is opaque but there's no way to actually create it.\n  return createPortalImpl(children, container, null, key);\n}\n\nexport {\n  ReactVersion as version,\n  createPortal,\n  flushSync,\n  batchedUpdates as unstable_batchedUpdates,\n  prefetchDNS,\n  preconnect,\n  preload,\n  preloadModule,\n  preinit,\n  preinitModule,\n  requestFormReset,\n  useFormStatus,\n  useFormState,\n};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport * as ReactDOM from 'react-dom';\n\nconst ReactDOMSharedInternals =\n  ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;\n\nexport default ReactDOMSharedInternals;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                        \n                                               \n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport ReactDOMSharedInternals from 'shared/ReactDOMSharedInternals';\n\n                              \n                 \n             \n               \n               \n   \n\n                           \n                \n                 \n                 \n                                                             \n   \n\n                                                                  \n\n// Since the \"not pending\" value is always the same, we can reuse the\n// same object across all transitions.\nconst sharedNotPendingObject = {\n  pending: false,\n  data: null,\n  method: null,\n  action: null,\n};\n\nexport const NotPending             = __DEV__\n  ? Object.freeze(sharedNotPendingObject)\n  : sharedNotPendingObject;\n\nfunction resolveDispatcher() {\n  // Copied from react/src/ReactHooks.js. It's the same thing but in a\n  // different package.\n  const dispatcher = ReactSharedInternals.H;\n  if (__DEV__) {\n    if (dispatcher === null) {\n      console.error(\n        'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n          ' one of the following reasons:\\n' +\n          '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n          '2. You might be breaking the Rules of Hooks\\n' +\n          '3. You might have more than one copy of React in the same app\\n' +\n          'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.',\n      );\n    }\n  }\n  // Will result in a null access error if accessed outside render phase. We\n  // intentionally don't throw our own error because this is in a hot path.\n  // Also helps ensure this is inlined.\n  return ((dispatcher     )            );\n}\n\nexport function useFormStatus()             {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useHostTransitionStatus();\n}\n\nexport function useFormState      (\n  action                      ,\n  initialState            ,\n  permalink         ,\n)                                     {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useFormState(action, initialState, permalink);\n}\n\nexport function requestFormReset(form                 ) {\n  ReactDOMSharedInternals.d /* ReactDOMCurrentDispatcher */\n    .r(/* requestFormReset */ form);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nexport function setSrcObject(domElement         , tag        , value     ) {\n  // We optimistically create the URL regardless of object type. This lets us\n  // support cross-realms and any type that the browser supports like new types.\n  const url = URL.createObjectURL((value     ));\n  const loadEvent = tag === 'img' ? 'load' : 'loadstart';\n  const cleanUp = () => {\n    // Once the object has started loading, then it's already collected by the\n    // browser and it won't refer to it by the URL anymore so we can now revoke it.\n    URL.revokeObjectURL(url);\n    domElement.removeEventListener(loadEvent, cleanUp);\n    domElement.removeEventListener('error', cleanUp);\n  };\n  domElement.addEventListener(loadEvent, cleanUp);\n  domElement.addEventListener('error', cleanUp);\n  domElement.setAttribute('src', url);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                             \n\nimport {getEventPriority} from '../events/ReactDOMEventListener';\nimport {\n  NoEventPriority,\n  DefaultEventPriority,\n} from 'react-reconciler/src/ReactEventPriorities';\n\nimport ReactDOMSharedInternals from 'shared/ReactDOMSharedInternals';\n\nexport function setCurrentUpdatePriority(\n  newPriority               ,\n  // Closure will consistently not inline this function when it has arity 1\n  // however when it has arity 2 even if the second arg is omitted at every\n  // callsite it seems to inline it even when the internal length of the function\n  // is much longer. I hope this is consistent enough to rely on across builds\n  IntentionallyUnusedArgument        ,\n)       {\n  ReactDOMSharedInternals.p /* currentUpdatePriority */ = newPriority;\n}\n\nexport function getCurrentUpdatePriority()                {\n  return ReactDOMSharedInternals.p; /* currentUpdatePriority */\n}\n\nexport function resolveUpdatePriority()                {\n  const updatePriority = ReactDOMSharedInternals.p; /* currentUpdatePriority */\n  if (updatePriority !== NoEventPriority) {\n    return updatePriority;\n  }\n  const currentEvent = window.event;\n  if (currentEvent === undefined) {\n    return DefaultEventPriority;\n  }\n  return getEventPriority(currentEvent.type);\n}\n\nexport function runWithPriority   (priority               , fn         )    {\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    setCurrentUpdatePriority(priority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                  \n\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\n\nexport const allNativeEvents                    = new Set();\n\nif (enableCreateEventHandleAPI) {\n  allNativeEvents.add('beforeblur');\n  allNativeEvents.add('afterblur');\n}\n\n/**\n * Mapping from registration name to event name\n */\nexport const registrationNameDependencies   \n                                                  \n  = {};\n\n/**\n * Mapping from lowercase registration names to the properly cased version,\n * used to warn in the case of missing event handlers. Available\n * only in __DEV__.\n * @type {Object}\n */\nexport const possibleRegistrationNames   \n                                   \n  = __DEV__ ? {} : (null     );\n// Trust the developer to only use possibleRegistrationNames in __DEV__\n\nexport function registerTwoPhaseEvent(\n  registrationName        ,\n  dependencies                     ,\n)       {\n  registerDirectEvent(registrationName, dependencies);\n  registerDirectEvent(registrationName + 'Capture', dependencies);\n}\n\nexport function registerDirectEvent(\n  registrationName        ,\n  dependencies                     ,\n) {\n  if (__DEV__) {\n    if (registrationNameDependencies[registrationName]) {\n      console.error(\n        'EventRegistry: More than one plugin attempted to publish the same ' +\n          'registration name, `%s`.',\n        registrationName,\n      );\n    }\n  }\n\n  registrationNameDependencies[registrationName] = dependencies;\n\n  if (__DEV__) {\n    const lowerCasedName = registrationName.toLowerCase();\n    possibleRegistrationNames[lowerCasedName] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n\n  for (let i = 0; i < dependencies.length; i++) {\n    allNativeEvents.add(dependencies[i]);\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst ATTRIBUTE_NAME_START_CHAR =\n  ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nexport const ATTRIBUTE_NAME_CHAR         =\n  ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\n\nconst VALID_ATTRIBUTE_NAME_REGEX         = new RegExp(\n  '^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$',\n);\n\nconst illegalAttributeNameCache                      = {};\nconst validatedAttributeNameCache                      = {};\n\nexport default function isAttributeNameSafe(attributeName        )          {\n  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\n    return true;\n  }\n  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\n    return false;\n  }\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n  illegalAttributeNameCache[attributeName] = true;\n  if (__DEV__) {\n    console.error('Invalid attribute name: `%s`', attributeName);\n  }\n  return false;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport isAttributeNameSafe from '../shared/isAttributeNameSafe';\nimport {enableTrustedTypesIntegration} from 'shared/ReactFeatureFlags';\nimport {checkAttributeStringCoercion} from 'shared/CheckStringCoercion';\nimport {getFiberCurrentPropsFromNode} from './ReactDOMComponentTree';\nimport {trackHostMutation} from 'react-reconciler/src/ReactFiberMutationTracking';\n\n/**\n * Get the value for a attribute on a node. Only used in DEV for SSR validation.\n * The third argument is used as a hint of what the expected value is. Some\n * attributes have multiple equivalent values.\n */\nexport function getValueForAttribute(\n  node         ,\n  name        ,\n  expected       ,\n)        {\n  if (__DEV__) {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n    if (!node.hasAttribute(name)) {\n      // shouldRemoveAttribute\n      switch (typeof expected) {\n        case 'function':\n        case 'symbol':\n          return expected;\n        case 'boolean': {\n          const prefix = name.toLowerCase().slice(0, 5);\n          if (prefix !== 'data-' && prefix !== 'aria-') {\n            return expected;\n          }\n        }\n      }\n      return expected === undefined ? undefined : null;\n    }\n    const value = node.getAttribute(name);\n    if (__DEV__) {\n      checkAttributeStringCoercion(expected, name);\n    }\n    if (value === '' + (expected     )) {\n      return expected;\n    }\n    return value;\n  }\n}\n\nexport function getValueForAttributeOnCustomComponent(\n  node         ,\n  name        ,\n  expected       ,\n)        {\n  if (__DEV__) {\n    if (!isAttributeNameSafe(name)) {\n      return;\n    }\n    if (!node.hasAttribute(name)) {\n      // shouldRemoveAttribute\n      switch (typeof expected) {\n        case 'symbol':\n        case 'object':\n          // Symbols and objects are ignored when they're emitted so\n          // it would be expected that they end up not having an attribute.\n          return expected;\n        case 'function':\n          return expected;\n        case 'boolean':\n          if (expected === false) {\n            return expected;\n          }\n      }\n      return expected === undefined ? undefined : null;\n    }\n    const value = node.getAttribute(name);\n\n    if (value === '' && expected === true) {\n      return true;\n    }\n\n    if (__DEV__) {\n      checkAttributeStringCoercion(expected, name);\n    }\n    if (value === '' + (expected     )) {\n      return expected;\n    }\n    return value;\n  }\n}\n\nexport function setValueForAttribute(\n  node         ,\n  name        ,\n  value       ,\n) {\n  if (isAttributeNameSafe(name)) {\n    // If the prop isn't in the special list, treat it as a simple attribute.\n    // shouldRemoveAttribute\n    if (value === null) {\n      node.removeAttribute(name);\n      return;\n    }\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n        node.removeAttribute(name);\n        return;\n      case 'boolean': {\n        const prefix = name.toLowerCase().slice(0, 5);\n        if (prefix !== 'data-' && prefix !== 'aria-') {\n          node.removeAttribute(name);\n          return;\n        }\n      }\n    }\n    if (__DEV__) {\n      checkAttributeStringCoercion(value, name);\n    }\n    node.setAttribute(\n      name,\n      enableTrustedTypesIntegration ? (value     ) : '' + (value     ),\n    );\n  }\n}\n\nexport function setValueForKnownAttribute(\n  node         ,\n  name        ,\n  value       ,\n) {\n  if (value === null) {\n    node.removeAttribute(name);\n    return;\n  }\n  switch (typeof value) {\n    case 'undefined':\n    case 'function':\n    case 'symbol':\n    case 'boolean': {\n      node.removeAttribute(name);\n      return;\n    }\n  }\n  if (__DEV__) {\n    checkAttributeStringCoercion(value, name);\n  }\n  node.setAttribute(\n    name,\n    enableTrustedTypesIntegration ? (value     ) : '' + (value     ),\n  );\n}\n\nexport function setValueForNamespacedAttribute(\n  node         ,\n  namespace        ,\n  name        ,\n  value       ,\n) {\n  if (value === null) {\n    node.removeAttribute(name);\n    return;\n  }\n  switch (typeof value) {\n    case 'undefined':\n    case 'function':\n    case 'symbol':\n    case 'boolean': {\n      node.removeAttribute(name);\n      return;\n    }\n  }\n  if (__DEV__) {\n    checkAttributeStringCoercion(value, name);\n  }\n  node.setAttributeNS(\n    namespace,\n    name,\n    enableTrustedTypesIntegration ? (value     ) : '' + (value     ),\n  );\n}\n\nexport function setValueForPropertyOnCustomComponent(\n  node         ,\n  name        ,\n  value       ,\n) {\n  if (name[0] === 'o' && name[1] === 'n') {\n    const useCapture = name.endsWith('Capture');\n    const eventName = name.slice(2, useCapture ? name.length - 7 : undefined);\n\n    const prevProps = getFiberCurrentPropsFromNode(node);\n    // $FlowFixMe[invalid-computed-prop]\n    const prevValue = prevProps != null ? prevProps[name] : null;\n    if (typeof prevValue === 'function') {\n      node.removeEventListener(eventName, prevValue, useCapture);\n    }\n    if (typeof value === 'function') {\n      if (typeof prevValue !== 'function' && prevValue !== null) {\n        // If we previously assigned a non-function type into this node, then\n        // remove it when switching to event listener mode.\n        if (name in (node     )) {\n          (node     )[name] = null;\n        } else if (node.hasAttribute(name)) {\n          node.removeAttribute(name);\n        }\n      }\n      // $FlowFixMe[incompatible-cast] value can't be casted to EventListener.\n      node.addEventListener(eventName, (value               ), useCapture);\n      return;\n    }\n  }\n\n  trackHostMutation();\n\n  if (name in (node     )) {\n    (node     )[name] = value;\n    return;\n  }\n\n  if (value === true) {\n    node.setAttribute(name, '');\n    return;\n  }\n\n  // From here, it's the same as any attribute\n  setValueForAttribute(node, name, value);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {checkFormFieldValueStringCoercion} from 'shared/CheckStringCoercion';\n\n                                  \n           \n          \n          \n          \n          \n        \n         \n\n// Flow does not allow string concatenation of most non-string types. To work\n// around this limitation, we use an opaque type that can only be obtained by\n// passing the value through getToStringValue first.\nexport function toString(value               )         {\n  // The coercion safety check is performed in getToStringValue().\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + (value     );\n}\n\nexport function getToStringValue(value       )                {\n  switch (typeof value) {\n    case 'bigint':\n    case 'boolean':\n    case 'number':\n    case 'string':\n    case 'undefined':\n      return value;\n    case 'object':\n      if (__DEV__) {\n        checkFormFieldValueStringCoercion(value);\n      }\n      return value;\n    default:\n      // function, symbol are assigned as empty strings\n      return '';\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {checkFormFieldValueStringCoercion} from 'shared/CheckStringCoercion';\n\n                     \n                     \n                                \n                       \n  \n                                                            \n                                \n \n\nfunction isCheckable(elem                  ) {\n  const type = elem.type;\n  const nodeName = elem.nodeName;\n  return (\n    nodeName &&\n    nodeName.toLowerCase() === 'input' &&\n    (type === 'checkbox' || type === 'radio')\n  );\n}\n\nfunction getTracker(node                         ) {\n  return node._valueTracker;\n}\n\nfunction detachTracker(node                         ) {\n  node._valueTracker = null;\n}\n\nfunction getValueFromNode(node                  )         {\n  let value = '';\n  if (!node) {\n    return value;\n  }\n\n  if (isCheckable(node)) {\n    value = node.checked ? 'true' : 'false';\n  } else {\n    value = node.value;\n  }\n\n  return value;\n}\n\nfunction trackValueOnNode(\n  node     ,\n  valueField                     ,\n  currentValue        ,\n)                {\n  const descriptor = Object.getOwnPropertyDescriptor(\n    node.constructor.prototype,\n    valueField,\n  );\n\n  // if someone has already defined a value or Safari, then bail\n  // and don't track value will cause over reporting of changes,\n  // but it's better then a hard failure\n  // (needed for certain tests that spyOn input values and Safari)\n  if (\n    node.hasOwnProperty(valueField) ||\n    typeof descriptor === 'undefined' ||\n    typeof descriptor.get !== 'function' ||\n    typeof descriptor.set !== 'function'\n  ) {\n    return;\n  }\n  const {get, set} = descriptor;\n  Object.defineProperty(node, valueField, {\n    configurable: true,\n    // $FlowFixMe[missing-this-annot]\n    get: function () {\n      return get.call(this);\n    },\n    // $FlowFixMe[missing-local-annot]\n    // $FlowFixMe[missing-this-annot]\n    set: function (value) {\n      if (__DEV__) {\n        checkFormFieldValueStringCoercion(value);\n      }\n      currentValue = '' + value;\n      set.call(this, value);\n    },\n  });\n  // We could've passed this the first time\n  // but it triggers a bug in IE11 and Edge 14/15.\n  // Calling defineProperty() again should be equivalent.\n  // https://github.com/facebook/react/issues/11768\n  Object.defineProperty(node, valueField, {\n    enumerable: descriptor.enumerable,\n  });\n\n  const tracker = {\n    getValue() {\n      return currentValue;\n    },\n    setValue(value        ) {\n      if (__DEV__) {\n        checkFormFieldValueStringCoercion(value);\n      }\n      currentValue = '' + value;\n    },\n    stopTracking() {\n      detachTracker(node);\n      delete node[valueField];\n    },\n  };\n  return tracker;\n}\n\nexport function track(node                         ) {\n  if (getTracker(node)) {\n    return;\n  }\n\n  const valueField = isCheckable(node) ? 'checked' : 'value';\n  // This is read from the DOM so always safe to coerce. We really shouldn't\n  // be coercing to a string at all. It's just historical.\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  const initialValue = '' + (node[valueField]     );\n  node._valueTracker = trackValueOnNode(node, valueField, initialValue);\n}\n\nexport function trackHydrated(\n  node                         ,\n  initialValue        ,\n  initialChecked         ,\n)          {\n  // For hydration, the initial value is not the current value but the value\n  // that we last observed which is what the initial server render was.\n  if (getTracker(node)) {\n    return false;\n  }\n\n  let valueField;\n  let expectedValue;\n  if (isCheckable(node)) {\n    valueField = 'checked';\n    // eslint-disable-next-line react-internal/safe-string-coercion\n    expectedValue = '' + (initialChecked     );\n  } else {\n    valueField = 'value';\n    expectedValue = initialValue;\n  }\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  const currentValue = '' + (node[valueField]     );\n  node._valueTracker = trackValueOnNode(node, valueField, expectedValue);\n  return currentValue !== expectedValue;\n}\n\nexport function updateValueIfChanged(node                         )          {\n  if (!node) {\n    return false;\n  }\n\n  const tracker = getTracker(node);\n  // if there is no tracker at this point it's unlikely\n  // that trying again will succeed\n  if (!tracker) {\n    return true;\n  }\n\n  const lastValue = tracker.getValue();\n  const nextValue = getValueFromNode(node);\n  if (nextValue !== lastValue) {\n    tracker.setValue(nextValue);\n    return true;\n  }\n  return false;\n}\n\nexport function stopTracking(node                         ) {\n  const tracker = getTracker(node);\n  if (tracker) {\n    tracker.stopTracking();\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nexport default function getActiveElement(doc           )           {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n// When passing user input into querySelector(All) the embedded string must not alter\n// the semantics of the query. This escape function is safe to use when we know the\n// provided value is going to be wrapped in double quotes as part of an attribute selector\n// Do not use it anywhere else\n// we escape double quotes and backslashes\nconst escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\\n\\\"\\\\]/g;\nexport default function escapeSelectorAttributeValueInsideDoubleQuotes(\n  value        ,\n)         {\n  return value.replace(\n    escapeSelectorAttributeValueInsideDoubleQuotesRegex,\n    ch => '\\\\' + ch.charCodeAt(0).toString(16) + ' ',\n  );\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nimport {getCurrentFiberOwnerNameInDevOrNull} from 'react-reconciler/src/ReactCurrentFiber';\n\nimport {getFiberCurrentPropsFromNode} from './ReactDOMComponentTree';\nimport {getToStringValue, toString} from './ToStringValue';\nimport {track, trackHydrated, updateValueIfChanged} from './inputValueTracking';\nimport getActiveElement from './getActiveElement';\nimport {\n  disableInputAttributeSyncing,\n  enableHydrationChangeEvent,\n} from 'shared/ReactFeatureFlags';\nimport {checkAttributeStringCoercion} from 'shared/CheckStringCoercion';\n\n                                                   \nimport escapeSelectorAttributeValueInsideDoubleQuotes from './escapeSelectorAttributeValueInsideDoubleQuotes';\nimport {queueChangeEvent} from '../events/ReactDOMEventReplaying';\n\nlet didWarnValueDefaultValue = false;\nlet didWarnCheckedDefaultChecked = false;\n\n/**\n * Implements an <input> host component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\n\nexport function validateInputProps(element         , props        ) {\n  if (__DEV__) {\n    // Normally we check for undefined and null the same, but explicitly specifying both\n    // properties, at all is probably worth warning for. We could move this either direction\n    // and just make it ok to pass null or just check hasOwnProperty.\n    if (\n      props.checked !== undefined &&\n      props.defaultChecked !== undefined &&\n      !didWarnCheckedDefaultChecked\n    ) {\n      console.error(\n        '%s contains an input of type %s with both checked and defaultChecked props. ' +\n          'Input elements must be either controlled or uncontrolled ' +\n          '(specify either the checked prop, or the defaultChecked prop, but not ' +\n          'both). Decide between using a controlled or uncontrolled input ' +\n          'element and remove one of these props. More info: ' +\n          'https://react.dev/link/controlled-components',\n        getCurrentFiberOwnerNameInDevOrNull() || 'A component',\n        props.type,\n      );\n      didWarnCheckedDefaultChecked = true;\n    }\n    if (\n      props.value !== undefined &&\n      props.defaultValue !== undefined &&\n      !didWarnValueDefaultValue\n    ) {\n      console.error(\n        '%s contains an input of type %s with both value and defaultValue props. ' +\n          'Input elements must be either controlled or uncontrolled ' +\n          '(specify either the value prop, or the defaultValue prop, but not ' +\n          'both). Decide between using a controlled or uncontrolled input ' +\n          'element and remove one of these props. More info: ' +\n          'https://react.dev/link/controlled-components',\n        getCurrentFiberOwnerNameInDevOrNull() || 'A component',\n        props.type,\n      );\n      didWarnValueDefaultValue = true;\n    }\n  }\n}\n\nexport function updateInput(\n  element         ,\n  value         ,\n  defaultValue         ,\n  lastDefaultValue         ,\n  checked          ,\n  defaultChecked          ,\n  type         ,\n  name         ,\n) {\n  const node                   = (element     );\n\n  // Temporarily disconnect the input from any radio buttons.\n  // Changing the type or name as the same time as changing the checked value\n  // needs to be atomically applied. We can only ensure that by disconnecting\n  // the name while do the mutations and then reapply the name after that's done.\n  node.name = '';\n\n  if (\n    type != null &&\n    typeof type !== 'function' &&\n    typeof type !== 'symbol' &&\n    typeof type !== 'boolean'\n  ) {\n    if (__DEV__) {\n      checkAttributeStringCoercion(type, 'type');\n    }\n    node.type = type;\n  } else {\n    node.removeAttribute('type');\n  }\n\n  if (value != null) {\n    if (type === 'number') {\n      if (\n        // $FlowFixMe[incompatible-type]\n        (value === 0 && node.value === '') ||\n        // We explicitly want to coerce to number here if possible.\n        // eslint-disable-next-line\n        node.value != (value     )\n      ) {\n        node.value = toString(getToStringValue(value));\n      }\n    } else if (node.value !== toString(getToStringValue(value))) {\n      node.value = toString(getToStringValue(value));\n    }\n  } else if (type === 'submit' || type === 'reset') {\n    // Submit/reset inputs need the attribute removed completely to avoid\n    // blank-text buttons.\n    node.removeAttribute('value');\n  }\n\n  if (disableInputAttributeSyncing) {\n    // When not syncing the value attribute, React only assigns a new value\n    // whenever the defaultValue React prop has changed. When not present,\n    // React does nothing\n    if (defaultValue != null) {\n      setDefaultValue(node, type, getToStringValue(defaultValue));\n    } else if (lastDefaultValue != null) {\n      node.removeAttribute('value');\n    }\n  } else {\n    // When syncing the value attribute, the value comes from a cascade of\n    // properties:\n    //  1. The value React property\n    //  2. The defaultValue React property\n    //  3. Otherwise there should be no change\n    if (value != null) {\n      setDefaultValue(node, type, getToStringValue(value));\n    } else if (defaultValue != null) {\n      setDefaultValue(node, type, getToStringValue(defaultValue));\n    } else if (lastDefaultValue != null) {\n      node.removeAttribute('value');\n    }\n  }\n\n  if (disableInputAttributeSyncing) {\n    // When not syncing the checked attribute, the attribute is directly\n    // controllable from the defaultValue React property. It needs to be\n    // updated as new props come in.\n    if (defaultChecked == null) {\n      node.removeAttribute('checked');\n    } else {\n      node.defaultChecked = !!defaultChecked;\n    }\n  } else {\n    // When syncing the checked attribute, it only changes when it needs\n    // to be removed, such as transitioning from a checkbox into a text input\n    if (checked == null && defaultChecked != null) {\n      node.defaultChecked = !!defaultChecked;\n    }\n  }\n\n  if (checked != null) {\n    // Important to set this even if it's not a change in order to update input\n    // value tracking with radio buttons\n    // TODO: Should really update input value tracking for the whole radio\n    // button group in an effect or something (similar to #27024)\n    node.checked =\n      checked && typeof checked !== 'function' && typeof checked !== 'symbol';\n  }\n\n  if (\n    name != null &&\n    typeof name !== 'function' &&\n    typeof name !== 'symbol' &&\n    typeof name !== 'boolean'\n  ) {\n    if (__DEV__) {\n      checkAttributeStringCoercion(name, 'name');\n    }\n    node.name = toString(getToStringValue(name));\n  } else {\n    node.removeAttribute('name');\n  }\n}\n\nexport function initInput(\n  element         ,\n  value         ,\n  defaultValue         ,\n  checked          ,\n  defaultChecked          ,\n  type         ,\n  name         ,\n  isHydrating         ,\n) {\n  const node                   = (element     );\n\n  if (\n    type != null &&\n    typeof type !== 'function' &&\n    typeof type !== 'symbol' &&\n    typeof type !== 'boolean'\n  ) {\n    if (__DEV__) {\n      checkAttributeStringCoercion(type, 'type');\n    }\n    node.type = type;\n  }\n\n  if (value != null || defaultValue != null) {\n    const isButton = type === 'submit' || type === 'reset';\n\n    // Avoid setting value attribute on submit/reset inputs as it overrides the\n    // default value provided by the browser. See: #12872\n    if (isButton && (value === undefined || value === null)) {\n      // We track the value just in case it changes type later on.\n      track((element     ));\n      return;\n    }\n\n    const defaultValueStr =\n      defaultValue != null ? toString(getToStringValue(defaultValue)) : '';\n    const initialValue =\n      value != null ? toString(getToStringValue(value)) : defaultValueStr;\n\n    // Do not assign value if it is already set. This prevents user text input\n    // from being lost during SSR hydration.\n    if (!isHydrating || enableHydrationChangeEvent) {\n      if (disableInputAttributeSyncing) {\n        // When not syncing the value attribute, the value property points\n        // directly to the React prop. Only assign it if it exists.\n        if (value != null) {\n          // Always assign on buttons so that it is possible to assign an\n          // empty string to clear button text.\n          //\n          // Otherwise, do not re-assign the value property if is empty. This\n          // potentially avoids a DOM write and prevents Firefox (~60.0.1) from\n          // prematurely marking required inputs as invalid. Equality is compared\n          // to the current value in case the browser provided value is not an\n          // empty string.\n          if (isButton || toString(getToStringValue(value)) !== node.value) {\n            node.value = toString(getToStringValue(value));\n          }\n        }\n      } else {\n        // When syncing the value attribute, the value property should use\n        // the wrapperState._initialValue property. This uses:\n        //\n        //   1. The value React property when present\n        //   2. The defaultValue React property when present\n        //   3. An empty string\n        if (initialValue !== node.value) {\n          node.value = initialValue;\n        }\n      }\n    }\n\n    if (disableInputAttributeSyncing) {\n      // When not syncing the value attribute, assign the value attribute\n      // directly from the defaultValue React property (when present)\n      if (defaultValue != null) {\n        node.defaultValue = defaultValueStr;\n      }\n    } else {\n      // Otherwise, the value attribute is synchronized to the property,\n      // so we assign defaultValue to the same thing as the value property\n      // assignment step above.\n      node.defaultValue = initialValue;\n    }\n  }\n\n  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug\n  // this is needed to work around a chrome bug where setting defaultChecked\n  // will sometimes influence the value of checked (even after detachment).\n  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416\n  // We need to temporarily unset name to avoid disrupting radio button groups.\n\n  const checkedOrDefault = checked != null ? checked : defaultChecked;\n  // TODO: This 'function' or 'symbol' check isn't replicated in other places\n  // so this semantic is inconsistent.\n  const initialChecked =\n    typeof checkedOrDefault !== 'function' &&\n    typeof checkedOrDefault !== 'symbol' &&\n    !!checkedOrDefault;\n\n  if (isHydrating && !enableHydrationChangeEvent) {\n    // Detach .checked from .defaultChecked but leave user input alone\n    node.checked = node.checked;\n  } else {\n    node.checked = !!initialChecked;\n  }\n\n  if (disableInputAttributeSyncing) {\n    // Only assign the checked attribute if it is defined. This saves\n    // a DOM write when controlling the checked attribute isn't needed\n    // (text inputs, submit/reset)\n    if (defaultChecked != null) {\n      node.defaultChecked = !node.defaultChecked;\n      node.defaultChecked = !!defaultChecked;\n    }\n  } else {\n    // When syncing the checked attribute, both the checked property and\n    // attribute are assigned at the same time using defaultChecked. This uses:\n    //\n    //   1. The checked React property when present\n    //   2. The defaultChecked React property when present\n    //   3. Otherwise, false\n    node.defaultChecked = !node.defaultChecked;\n    node.defaultChecked = !!initialChecked;\n  }\n\n  // Name needs to be set at the end so that it applies atomically to connected radio buttons.\n  if (\n    name != null &&\n    typeof name !== 'function' &&\n    typeof name !== 'symbol' &&\n    typeof name !== 'boolean'\n  ) {\n    if (__DEV__) {\n      checkAttributeStringCoercion(name, 'name');\n    }\n    node.name = name;\n  }\n  track((element     ));\n}\n\nexport function hydrateInput(\n  element         ,\n  value         ,\n  defaultValue         ,\n  checked          ,\n  defaultChecked          ,\n)       {\n  const node                   = (element     );\n\n  const defaultValueStr =\n    defaultValue != null ? toString(getToStringValue(defaultValue)) : '';\n  const initialValue =\n    value != null ? toString(getToStringValue(value)) : defaultValueStr;\n\n  const checkedOrDefault = checked != null ? checked : defaultChecked;\n  // TODO: This 'function' or 'symbol' check isn't replicated in other places\n  // so this semantic is inconsistent.\n  const initialChecked =\n    typeof checkedOrDefault !== 'function' &&\n    typeof checkedOrDefault !== 'symbol' &&\n    !!checkedOrDefault;\n\n  // Detach .checked from .defaultChecked but leave user input alone\n  node.checked = node.checked;\n\n  const changed = trackHydrated((node     ), initialValue, initialChecked);\n  if (changed) {\n    // If the current value is different, that suggests that the user\n    // changed it before hydration. Queue a replay of the change event.\n    // For radio buttons the change event only fires on the selected one.\n    if (node.type !== 'radio' || node.checked) {\n      queueChangeEvent(node);\n    }\n  }\n}\n\nexport function restoreControlledInputState(element         , props        ) {\n  const rootNode                   = (element     );\n  updateInput(\n    rootNode,\n    props.value,\n    props.defaultValue,\n    props.defaultValue,\n    props.checked,\n    props.defaultChecked,\n    props.type,\n    props.name,\n  );\n  const name = props.name;\n  if (props.type === 'radio' && name != null) {\n    let queryRoot          = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = ((queryRoot.parentNode     )         );\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form. It might not even be in the\n    // document. Let's just use the local `querySelectorAll` to ensure we don't\n    // miss anything.\n    if (__DEV__) {\n      checkAttributeStringCoercion(name, 'name');\n    }\n    const group = queryRoot.querySelectorAll(\n      'input[name=\"' +\n        escapeSelectorAttributeValueInsideDoubleQuotes('' + name) +\n        '\"][type=\"radio\"]',\n    );\n\n    for (let i = 0; i < group.length; i++) {\n      const otherNode = ((group[i]     )                  );\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React radio buttons with non-React ones.\n      const otherProps      = getFiberCurrentPropsFromNode(otherNode);\n\n      if (!otherProps) {\n        throw new Error(\n          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +\n            'same `name` is not supported.',\n        );\n      }\n\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      updateInput(\n        otherNode,\n        otherProps.value,\n        otherProps.defaultValue,\n        otherProps.defaultValue,\n        otherProps.checked,\n        otherProps.defaultChecked,\n        otherProps.type,\n        otherProps.name,\n      );\n    }\n\n    // If any updateInput() call set .checked to true, an input in this group\n    // (often, `rootNode` itself) may have become unchecked\n    for (let i = 0; i < group.length; i++) {\n      const otherNode = ((group[i]     )                  );\n      if (otherNode.form !== rootNode.form) {\n        continue;\n      }\n      updateValueIfChanged(otherNode);\n    }\n  }\n}\n\n// In Chrome, assigning defaultValue to certain input types triggers input validation.\n// For number inputs, the display value loses trailing decimal points. For email inputs,\n// Chrome raises \"The specified value <x> is not a valid email address\".\n//\n// Here we check to see if the defaultValue has actually changed, avoiding these problems\n// when the user is inputting text\n//\n// https://github.com/facebook/react/issues/7253\nexport function setDefaultValue(\n  node                  ,\n  type         ,\n  value               ,\n) {\n  if (\n    // Focused number inputs synchronize on blur. See ChangeEventPlugin.js\n    type !== 'number' ||\n    getActiveElement(node.ownerDocument) !== node\n  ) {\n    if (node.defaultValue !== toString(value)) {\n      node.defaultValue = toString(value);\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {Children} from 'react';\n\nlet didWarnSelectedSetOnOption = false;\nlet didWarnInvalidChild = false;\nlet didWarnInvalidInnerHTML = false;\n\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\nexport function validateOptionProps(element         , props        ) {\n  if (__DEV__) {\n    // If a value is not provided, then the children must be simple.\n    if (props.value == null) {\n      if (typeof props.children === 'object' && props.children !== null) {\n        Children.forEach(props.children, function (child) {\n          if (child == null) {\n            return;\n          }\n          if (\n            typeof child === 'string' ||\n            typeof child === 'number' ||\n            typeof child === 'bigint'\n          ) {\n            return;\n          }\n          if (!didWarnInvalidChild) {\n            didWarnInvalidChild = true;\n            console.error(\n              'Cannot infer the option value of complex children. ' +\n                'Pass a `value` prop or use a plain string as children to <option>.',\n            );\n          }\n        });\n      } else if (props.dangerouslySetInnerHTML != null) {\n        if (!didWarnInvalidInnerHTML) {\n          didWarnInvalidInnerHTML = true;\n          console.error(\n            'Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' +\n              'which value should be selected.',\n          );\n        }\n      }\n    }\n\n    // TODO: Remove support for `selected` in <option>.\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      console.error(\n        'Use the `defaultValue` or `value` props on <select> instead of ' +\n          'setting `selected` on <option>.',\n      );\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\nimport {getCurrentFiberOwnerNameInDevOrNull} from 'react-reconciler/src/ReactCurrentFiber';\n\nimport {getToStringValue, toString} from './ToStringValue';\nimport isArray from 'shared/isArray';\nimport {queueChangeEvent} from '../events/ReactDOMEventReplaying';\n\nlet didWarnValueDefaultValue;\n\nif (__DEV__) {\n  didWarnValueDefaultValue = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n  if (ownerName) {\n    return '\\n\\nCheck the render method of `' + ownerName + '`.';\n  }\n  return '';\n}\n\nconst valuePropNames = ['value', 'defaultValue'];\n\n/**\n * Validation function for `value` and `defaultValue`.\n */\nfunction checkSelectPropTypes(props     ) {\n  if (__DEV__) {\n    for (let i = 0; i < valuePropNames.length; i++) {\n      const propName = valuePropNames[i];\n      if (props[propName] == null) {\n        continue;\n      }\n      const propNameIsArray = isArray(props[propName]);\n      if (props.multiple && !propNameIsArray) {\n        console.error(\n          'The `%s` prop supplied to <select> must be an array if ' +\n            '`multiple` is true.%s',\n          propName,\n          getDeclarationErrorAddendum(),\n        );\n      } else if (!props.multiple && propNameIsArray) {\n        console.error(\n          'The `%s` prop supplied to <select> must be a scalar ' +\n            'value if `multiple` is false.%s',\n          propName,\n          getDeclarationErrorAddendum(),\n        );\n      }\n    }\n  }\n}\n\nfunction updateOptions(\n  node                   ,\n  multiple         ,\n  propValue     ,\n  setDefaultSelected         ,\n) {\n  const options                        = node.options;\n\n  if (multiple) {\n    const selectedValues = (propValue               );\n    const selectedValue                      = {};\n    for (let i = 0; i < selectedValues.length; i++) {\n      // Prefix to avoid chaos with special keys.\n      selectedValue['$' + selectedValues[i]] = true;\n    }\n    for (let i = 0; i < options.length; i++) {\n      const selected = selectedValue.hasOwnProperty('$' + options[i].value);\n      if (options[i].selected !== selected) {\n        options[i].selected = selected;\n      }\n      if (selected && setDefaultSelected) {\n        options[i].defaultSelected = true;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    const selectedValue = toString(getToStringValue(propValue));\n    let defaultSelected = null;\n    for (let i = 0; i < options.length; i++) {\n      if (options[i].value === selectedValue) {\n        options[i].selected = true;\n        if (setDefaultSelected) {\n          options[i].defaultSelected = true;\n        }\n        return;\n      }\n      if (defaultSelected === null && !options[i].disabled) {\n        defaultSelected = options[i];\n      }\n    }\n    if (defaultSelected !== null) {\n      defaultSelected.selected = true;\n    }\n  }\n}\n\n/**\n * Implements a <select> host component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\n\nexport function validateSelectProps(element         , props        ) {\n  if (__DEV__) {\n    checkSelectPropTypes(props);\n    if (\n      props.value !== undefined &&\n      props.defaultValue !== undefined &&\n      !didWarnValueDefaultValue\n    ) {\n      console.error(\n        'Select elements must be either controlled or uncontrolled ' +\n          '(specify either the value prop, or the defaultValue prop, but not ' +\n          'both). Decide between using a controlled or uncontrolled select ' +\n          'element and remove one of these props. More info: ' +\n          'https://react.dev/link/controlled-components',\n      );\n      didWarnValueDefaultValue = true;\n    }\n  }\n}\n\nexport function initSelect(\n  element         ,\n  value         ,\n  defaultValue         ,\n  multiple          ,\n) {\n  const node                    = (element     );\n  node.multiple = !!multiple;\n  if (value != null) {\n    updateOptions(node, !!multiple, value, false);\n  } else if (defaultValue != null) {\n    updateOptions(node, !!multiple, defaultValue, true);\n  }\n}\n\nexport function hydrateSelect(\n  element         ,\n  value         ,\n  defaultValue         ,\n  multiple          ,\n)       {\n  const node                    = (element     );\n  const options                        = node.options;\n\n  const propValue      = value != null ? value : defaultValue;\n\n  let changed = false;\n\n  if (multiple) {\n    const selectedValues = (propValue                );\n    const selectedValue                      = {};\n    if (selectedValues != null) {\n      for (let i = 0; i < selectedValues.length; i++) {\n        // Prefix to avoid chaos with special keys.\n        selectedValue['$' + selectedValues[i]] = true;\n      }\n    }\n    for (let i = 0; i < options.length; i++) {\n      const expectedSelected = selectedValue.hasOwnProperty(\n        '$' + options[i].value,\n      );\n      if (options[i].selected !== expectedSelected) {\n        changed = true;\n        break;\n      }\n    }\n  } else {\n    let selectedValue =\n      propValue == null ? null : toString(getToStringValue(propValue));\n    for (let i = 0; i < options.length; i++) {\n      if (selectedValue == null && !options[i].disabled) {\n        // We expect the first non-disabled option to be selected if the selected is null.\n        selectedValue = options[i].value;\n      }\n      const expectedSelected = options[i].value === selectedValue;\n      if (options[i].selected !== expectedSelected) {\n        changed = true;\n        break;\n      }\n    }\n  }\n  if (changed) {\n    // If the current selection is different than our initial that suggests that the user\n    // changed it before hydration. Queue a replay of the change event.\n    queueChangeEvent(node);\n  }\n}\n\nexport function updateSelect(\n  element         ,\n  value         ,\n  defaultValue         ,\n  multiple          ,\n  wasMultiple          ,\n) {\n  const node                    = (element     );\n\n  if (value != null) {\n    updateOptions(node, !!multiple, value, false);\n  } else if (!!wasMultiple !== !!multiple) {\n    // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n    if (defaultValue != null) {\n      updateOptions(node, !!multiple, defaultValue, true);\n    } else {\n      // Revert the select back to its default unselected state.\n      updateOptions(node, !!multiple, multiple ? [] : '', false);\n    }\n  }\n}\n\nexport function restoreControlledSelectState(element         , props        ) {\n  const node                    = (element     );\n  const value = props.value;\n\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport isArray from 'shared/isArray';\n\nimport {getCurrentFiberOwnerNameInDevOrNull} from 'react-reconciler/src/ReactCurrentFiber';\nimport {getToStringValue, toString} from './ToStringValue';\nimport {disableTextareaChildren} from 'shared/ReactFeatureFlags';\n\nimport {track, trackHydrated} from './inputValueTracking';\nimport {queueChangeEvent} from '../events/ReactDOMEventReplaying';\n\nlet didWarnValDefaultVal = false;\n\n/**\n * Implements a <textarea> host component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\n\nexport function validateTextareaProps(element         , props        ) {\n  if (__DEV__) {\n    if (\n      props.value !== undefined &&\n      props.defaultValue !== undefined &&\n      !didWarnValDefaultVal\n    ) {\n      console.error(\n        '%s contains a textarea with both value and defaultValue props. ' +\n          'Textarea elements must be either controlled or uncontrolled ' +\n          '(specify either the value prop, or the defaultValue prop, but not ' +\n          'both). Decide between using a controlled or uncontrolled textarea ' +\n          'and remove one of these props. More info: ' +\n          'https://react.dev/link/controlled-components',\n        getCurrentFiberOwnerNameInDevOrNull() || 'A component',\n      );\n      didWarnValDefaultVal = true;\n    }\n    if (props.children != null && props.value == null) {\n      console.error(\n        'Use the `defaultValue` or `value` props instead of setting ' +\n          'children on <textarea>.',\n      );\n    }\n  }\n}\n\nexport function updateTextarea(\n  element         ,\n  value         ,\n  defaultValue         ,\n) {\n  const node                      = (element     );\n  if (value != null) {\n    // Cast `value` to a string to ensure the value is set correctly. While\n    // browsers typically do this as necessary, jsdom doesn't.\n    const newValue = toString(getToStringValue(value));\n    // To avoid side effects (such as losing text selection), only set value if changed\n    if (newValue !== node.value) {\n      node.value = newValue;\n    }\n    // TOOO: This should respect disableInputAttributeSyncing flag.\n    if (defaultValue == null) {\n      if (node.defaultValue !== newValue) {\n        node.defaultValue = newValue;\n      }\n      return;\n    }\n  }\n  if (defaultValue != null) {\n    node.defaultValue = toString(getToStringValue(defaultValue));\n  } else {\n    node.defaultValue = '';\n  }\n}\n\nexport function initTextarea(\n  element         ,\n  value         ,\n  defaultValue         ,\n  children         ,\n) {\n  const node                      = (element     );\n\n  let initialValue = value;\n\n  // Only bother fetching default value if we're going to use it\n  if (initialValue == null) {\n    if (children != null) {\n      if (!disableTextareaChildren) {\n        if (defaultValue != null) {\n          throw new Error(\n            'If you supply `defaultValue` on a <textarea>, do not pass children.',\n          );\n        }\n\n        if (isArray(children)) {\n          if (children.length > 1) {\n            throw new Error('<textarea> can only have at most one child.');\n          }\n\n          children = children[0];\n        }\n\n        defaultValue = children;\n      }\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    initialValue = defaultValue;\n  }\n\n  const stringValue = getToStringValue(initialValue);\n  node.defaultValue = (stringValue     ); // This will be toString:ed.\n\n  // This is in postMount because we need access to the DOM node, which is not\n  // available until after the component has mounted.\n  const textContent = node.textContent;\n\n  // Only set node.value if textContent is equal to the expected\n  // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n  // will populate textContent as well.\n  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n  if (textContent === stringValue) {\n    if (textContent !== '' && textContent !== null) {\n      node.value = textContent;\n    }\n  }\n\n  track((element     ));\n}\n\nexport function hydrateTextarea(\n  element         ,\n  value         ,\n  defaultValue         ,\n)       {\n  const node                      = (element     );\n  let initialValue = value;\n  if (initialValue == null) {\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    initialValue = defaultValue;\n  }\n  // Track the value that we last observed which is the hydrated value so\n  // that any change event that fires will trigger onChange on the actual\n  // current value.\n  const stringValue = toString(getToStringValue(initialValue));\n  const changed = trackHydrated((node     ), stringValue, false);\n  if (changed) {\n    // If the current value is different, that suggests that the user\n    // changed it before hydration. Queue a replay of the change event.\n    queueChangeEvent(node);\n  }\n}\n\nexport function restoreControlledTextareaState(\n  element         ,\n  props        ,\n) {\n  // DOM component is still mounted; update\n  updateTextarea(element, props.value, props.defaultValue);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                   \n                                                                                     \n\nimport {\n  current,\n  runWithFiberInDEV,\n} from 'react-reconciler/src/ReactCurrentFiber';\nimport {\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostText,\n} from 'react-reconciler/src/ReactWorkTags';\n\nimport {describeDiff} from 'react-reconciler/src/ReactFiberHydrationDiffs';\n\nfunction describeAncestors(\n  ancestor       ,\n  child       ,\n  props                         ,\n)         {\n  let fiber               = child;\n  let node                           = null;\n  let distanceFromLeaf = 0;\n  while (fiber) {\n    if (fiber === ancestor) {\n      distanceFromLeaf = 0;\n    }\n    node = {\n      fiber: fiber,\n      children: node !== null ? [node] : [],\n      serverProps:\n        fiber === child ? props : fiber === ancestor ? null : undefined,\n      serverTail: [],\n      distanceFromLeaf: distanceFromLeaf,\n    };\n    distanceFromLeaf++;\n    fiber = fiber.return;\n  }\n  if (node !== null) {\n    // Describe the node using the hydration diff logic.\n    // Replace + with - to mark ancestor and child. It's kind of arbitrary.\n    return describeDiff(node).replaceAll(/^[+-]/gm, '>');\n  }\n  return '';\n}\n\n                          \n                               \n                 \n\n                 \n                     \n                          \n                        \n                           \n\n                                \n                              \n\n                     \n                             \n                             \n  \n\n// This validation code was written based on the HTML5 parsing spec:\n// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n//\n// Note: this does not catch all invalid nesting, nor does it try to (as it's\n// not clear what practical benefit doing so provides); instead, we warn only\n// for cases where the parser will give a parse tree differing from what React\n// intended. For example, <b><div></div></b> is invalid but we don't warn\n// because it still parses correctly; we do warn for other cases like nested\n// <p> tags where the beginning of the second element implicitly closes the\n// first, causing a confusing mess.\n\n// https://html.spec.whatwg.org/multipage/syntax.html#special\nconst specialTags = [\n  'address',\n  'applet',\n  'area',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'bgsound',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'embed',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'iframe',\n  'img',\n  'input',\n  'isindex',\n  'li',\n  'link',\n  'listing',\n  'main',\n  'marquee',\n  'menu',\n  'menuitem',\n  'meta',\n  'nav',\n  'noembed',\n  'noframes',\n  'noscript',\n  'object',\n  'ol',\n  'p',\n  'param',\n  'plaintext',\n  'pre',\n  'script',\n  'section',\n  'select',\n  'source',\n  'style',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'template',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul',\n  'wbr',\n  'xmp',\n];\n\n// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\nconst inScopeTags = [\n  'applet',\n  'caption',\n  'html',\n  'table',\n  'td',\n  'th',\n  'marquee',\n  'object',\n  'template',\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point\n  // TODO: Distinguish by namespace here -- for <title>, including it here\n  // errs on the side of fewer warnings\n  'foreignObject',\n  'desc',\n  'title',\n];\n\n// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope\nconst buttonScopeTags = __DEV__ ? inScopeTags.concat(['button']) : [];\n\n// https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags\nconst impliedEndTags = [\n  'dd',\n  'dt',\n  'li',\n  'option',\n  'optgroup',\n  'p',\n  'rp',\n  'rt',\n];\n\nconst emptyAncestorInfoDev                  = {\n  current: null,\n\n  formTag: null,\n  aTagInScope: null,\n  buttonTagInScope: null,\n  nobrTagInScope: null,\n  pTagInButtonScope: null,\n\n  listItemTagAutoclosing: null,\n  dlItemTagAutoclosing: null,\n\n  containerTagInScope: null,\n  implicitRootScope: false,\n};\n\nfunction updatedAncestorInfoDev(\n  oldInfo                        ,\n  tag        ,\n)                  {\n  if (__DEV__) {\n    const ancestorInfo = {...(oldInfo || emptyAncestorInfoDev)};\n    const info = {tag};\n\n    if (inScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.aTagInScope = null;\n      ancestorInfo.buttonTagInScope = null;\n      ancestorInfo.nobrTagInScope = null;\n    }\n    if (buttonScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.pTagInButtonScope = null;\n    }\n\n    if (\n      specialTags.indexOf(tag) !== -1 &&\n      tag !== 'address' &&\n      tag !== 'div' &&\n      tag !== 'p'\n    ) {\n      // See rules for 'li', 'dd', 'dt' start tags in\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n      ancestorInfo.listItemTagAutoclosing = null;\n      ancestorInfo.dlItemTagAutoclosing = null;\n    }\n\n    ancestorInfo.current = info;\n\n    if (tag === 'form') {\n      ancestorInfo.formTag = info;\n    }\n    if (tag === 'a') {\n      ancestorInfo.aTagInScope = info;\n    }\n    if (tag === 'button') {\n      ancestorInfo.buttonTagInScope = info;\n    }\n    if (tag === 'nobr') {\n      ancestorInfo.nobrTagInScope = info;\n    }\n    if (tag === 'p') {\n      ancestorInfo.pTagInButtonScope = info;\n    }\n    if (tag === 'li') {\n      ancestorInfo.listItemTagAutoclosing = info;\n    }\n    if (tag === 'dd' || tag === 'dt') {\n      ancestorInfo.dlItemTagAutoclosing = info;\n    }\n    if (tag === '#document' || tag === 'html') {\n      ancestorInfo.containerTagInScope = null;\n    } else if (!ancestorInfo.containerTagInScope) {\n      ancestorInfo.containerTagInScope = info;\n    }\n\n    if (\n      oldInfo === null &&\n      (tag === '#document' || tag === 'html' || tag === 'body')\n    ) {\n      // While <head> is also a singleton we don't want to support semantics where\n      // you can escape the head by rendering a body singleton so we treat it like a normal scope\n      ancestorInfo.implicitRootScope = true;\n    } else if (ancestorInfo.implicitRootScope === true) {\n      ancestorInfo.implicitRootScope = false;\n    }\n\n    return ancestorInfo;\n  } else {\n    return (null     );\n  }\n}\n\n/**\n * Returns whether\n */\nfunction isTagValidWithParent(\n  tag        ,\n  parentTag         ,\n  implicitRootScope         ,\n)          {\n  // First, let's check if we're in an unusual parsing mode...\n  switch (parentTag) {\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect\n    case 'select':\n      return (\n        tag === 'hr' ||\n        tag === 'option' ||\n        tag === 'optgroup' ||\n        tag === 'script' ||\n        tag === 'template' ||\n        tag === '#text'\n      );\n    case 'optgroup':\n      return tag === 'option' || tag === '#text';\n    // Strictly speaking, seeing an <option> doesn't mean we're in a <select>\n    // but\n    case 'option':\n      return tag === '#text';\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption\n    // No special behavior since these rules fall back to \"in body\" mode for\n    // all except special table nodes which cause bad parsing behavior anyway.\n\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr\n    case 'tr':\n      return (\n        tag === 'th' ||\n        tag === 'td' ||\n        tag === 'style' ||\n        tag === 'script' ||\n        tag === 'template'\n      );\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody\n    case 'tbody':\n    case 'thead':\n    case 'tfoot':\n      return (\n        tag === 'tr' ||\n        tag === 'style' ||\n        tag === 'script' ||\n        tag === 'template'\n      );\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup\n    case 'colgroup':\n      return tag === 'col' || tag === 'template';\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable\n    case 'table':\n      return (\n        tag === 'caption' ||\n        tag === 'colgroup' ||\n        tag === 'tbody' ||\n        tag === 'tfoot' ||\n        tag === 'thead' ||\n        tag === 'style' ||\n        tag === 'script' ||\n        tag === 'template'\n      );\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead\n    case 'head':\n      return (\n        tag === 'base' ||\n        tag === 'basefont' ||\n        tag === 'bgsound' ||\n        tag === 'link' ||\n        tag === 'meta' ||\n        tag === 'title' ||\n        tag === 'noscript' ||\n        tag === 'noframes' ||\n        tag === 'style' ||\n        tag === 'script' ||\n        tag === 'template'\n      );\n    // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element\n    case 'html':\n      if (implicitRootScope) {\n        // When our parent tag is html and we're in the root scope we will actually\n        // insert most tags into the body so we need to fall through to validating\n        // the specific tag with \"in body\" parsing mode below\n        break;\n      }\n      return tag === 'head' || tag === 'body' || tag === 'frameset';\n    case 'frameset':\n      return tag === 'frame';\n    case '#document':\n      if (implicitRootScope) {\n        // When our parent is the Document and we're in the root scope we will actually\n        // insert most tags into the body so we need to fall through to validating\n        // the specific tag with \"in body\" parsing mode below\n        break;\n      }\n      return tag === 'html';\n  }\n\n  // Probably in the \"in body\" parsing mode, so we outlaw only tag combos\n  // where the parsing rules cause implicit opens or closes to be added.\n  // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n  switch (tag) {\n    case 'h1':\n    case 'h2':\n    case 'h3':\n    case 'h4':\n    case 'h5':\n    case 'h6':\n      return (\n        parentTag !== 'h1' &&\n        parentTag !== 'h2' &&\n        parentTag !== 'h3' &&\n        parentTag !== 'h4' &&\n        parentTag !== 'h5' &&\n        parentTag !== 'h6'\n      );\n\n    case 'rp':\n    case 'rt':\n      return impliedEndTags.indexOf(parentTag) === -1;\n\n    case 'caption':\n    case 'col':\n    case 'colgroup':\n    case 'frameset':\n    case 'frame':\n    case 'tbody':\n    case 'td':\n    case 'tfoot':\n    case 'th':\n    case 'thead':\n    case 'tr':\n      // These tags are only valid with a few parents that have special child\n      // parsing rules -- if we're down here, then none of those matched and\n      // so we allow it only if we don't know what the parent is, as all other\n      // cases are invalid.\n      return parentTag == null;\n    case 'head':\n      // We support rendering <head> in the root when the container is\n      // #document, <html>, or <body>.\n      return implicitRootScope || parentTag === null;\n    case 'html':\n      // We support rendering <html> in the root when the container is\n      // #document\n      return (\n        (implicitRootScope && parentTag === '#document') || parentTag === null\n      );\n    case 'body':\n      // We support rendering <body> in the root when the container is\n      // #document or <html>\n      return (\n        (implicitRootScope &&\n          (parentTag === '#document' || parentTag === 'html')) ||\n        parentTag === null\n      );\n  }\n\n  return true;\n}\n\n/**\n * Returns whether\n */\nfunction findInvalidAncestorForTag(\n  tag        ,\n  ancestorInfo                 ,\n)        {\n  switch (tag) {\n    case 'address':\n    case 'article':\n    case 'aside':\n    case 'blockquote':\n    case 'center':\n    case 'details':\n    case 'dialog':\n    case 'dir':\n    case 'div':\n    case 'dl':\n    case 'fieldset':\n    case 'figcaption':\n    case 'figure':\n    case 'footer':\n    case 'header':\n    case 'hgroup':\n    case 'main':\n    case 'menu':\n    case 'nav':\n    case 'ol':\n    case 'p':\n    case 'section':\n    case 'summary':\n    case 'ul':\n    case 'pre':\n    case 'listing':\n    case 'table':\n    case 'hr':\n    case 'xmp':\n    case 'h1':\n    case 'h2':\n    case 'h3':\n    case 'h4':\n    case 'h5':\n    case 'h6':\n      return ancestorInfo.pTagInButtonScope;\n\n    case 'form':\n      return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;\n\n    case 'li':\n      return ancestorInfo.listItemTagAutoclosing;\n\n    case 'dd':\n    case 'dt':\n      return ancestorInfo.dlItemTagAutoclosing;\n\n    case 'button':\n      return ancestorInfo.buttonTagInScope;\n\n    case 'a':\n      // Spec says something about storing a list of markers, but it sounds\n      // equivalent to this check.\n      return ancestorInfo.aTagInScope;\n\n    case 'nobr':\n      return ancestorInfo.nobrTagInScope;\n  }\n\n  return null;\n}\n\nconst didWarn                      = {};\n\nfunction findAncestor(parent              , tagName        )               {\n  while (parent) {\n    switch (parent.tag) {\n      case HostComponent:\n      case HostHoistable:\n      case HostSingleton:\n        if (parent.type === tagName) {\n          return parent;\n        }\n    }\n    parent = parent.return;\n  }\n  return null;\n}\n\nfunction validateDOMNesting(\n  childTag        ,\n  ancestorInfo                 ,\n)          {\n  if (__DEV__) {\n    ancestorInfo = ancestorInfo || emptyAncestorInfoDev;\n    const parentInfo = ancestorInfo.current;\n    const parentTag = parentInfo && parentInfo.tag;\n\n    const invalidParent = isTagValidWithParent(\n      childTag,\n      parentTag,\n      ancestorInfo.implicitRootScope,\n    )\n      ? null\n      : parentInfo;\n    const invalidAncestor = invalidParent\n      ? null\n      : findInvalidAncestorForTag(childTag, ancestorInfo);\n    const invalidParentOrAncestor = invalidParent || invalidAncestor;\n    if (!invalidParentOrAncestor) {\n      return true;\n    }\n\n    const ancestorTag = invalidParentOrAncestor.tag;\n\n    const warnKey =\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      String(!!invalidParent) + '|' + childTag + '|' + ancestorTag;\n    if (didWarn[warnKey]) {\n      return false;\n    }\n    didWarn[warnKey] = true;\n\n    const child = current;\n    const ancestor = child ? findAncestor(child.return, ancestorTag) : null;\n\n    const ancestorDescription =\n      child !== null && ancestor !== null\n        ? describeAncestors(ancestor, child, null)\n        : '';\n\n    const tagDisplayName = '<' + childTag + '>';\n    if (invalidParent) {\n      let info = '';\n      if (ancestorTag === 'table' && childTag === 'tr') {\n        info +=\n          ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' +\n          'the browser.';\n      }\n      console.error(\n        'In HTML, %s cannot be a child of <%s>.%s\\n' +\n          'This will cause a hydration error.%s',\n        tagDisplayName,\n        ancestorTag,\n        info,\n        ancestorDescription,\n      );\n    } else {\n      console.error(\n        'In HTML, %s cannot be a descendant of <%s>.\\n' +\n          'This will cause a hydration error.%s',\n        tagDisplayName,\n        ancestorTag,\n        ancestorDescription,\n      );\n    }\n    if (child) {\n      // For debugging purposes find the nearest ancestor that caused the issue.\n      // The stack trace of this ancestor can be useful to find the cause.\n      // If the parent is a direct parent in the same owner, we don't bother.\n      const parent = child.return;\n      if (\n        ancestor !== null &&\n        parent !== null &&\n        (ancestor !== parent || parent._debugOwner !== child._debugOwner)\n      ) {\n        runWithFiberInDEV(ancestor, () => {\n          console.error(\n            // We repeat some context because this log might be taken out of context\n            // such as in React DevTools or grouped server logs.\n            '<%s> cannot contain a nested %s.\\n' +\n              'See this log for the ancestor stack trace.',\n            ancestorTag,\n            tagDisplayName,\n          );\n        });\n      }\n    }\n    return false;\n  }\n  return true;\n}\n\nfunction validateTextNesting(\n  childText        ,\n  parentTag        ,\n  implicitRootScope         ,\n)          {\n  if (__DEV__) {\n    if (implicitRootScope || isTagValidWithParent('#text', parentTag, false)) {\n      return true;\n    }\n\n    const warnKey = '#text|' + parentTag;\n    if (didWarn[warnKey]) {\n      return false;\n    }\n    didWarn[warnKey] = true;\n\n    const child = current;\n    const ancestor = child ? findAncestor(child, parentTag) : null;\n\n    const ancestorDescription =\n      child !== null && ancestor !== null\n        ? describeAncestors(\n            ancestor,\n            child,\n            child.tag !== HostText ? {children: null} : null,\n          )\n        : '';\n\n    if (/\\S/.test(childText)) {\n      console.error(\n        'In HTML, text nodes cannot be a child of <%s>.\\n' +\n          'This will cause a hydration error.%s',\n        parentTag,\n        ancestorDescription,\n      );\n    } else {\n      console.error(\n        'In HTML, whitespace text nodes cannot be a child of <%s>. ' +\n          \"Make sure you don't have any extra whitespace between tags on \" +\n          'each line of your source code.\\n' +\n          'This will cause a hydration error.%s',\n        parentTag,\n        ancestorDescription,\n      );\n    }\n    return false;\n  }\n  return true;\n}\n\nexport {updatedAncestorInfoDev, validateDOMNesting, validateTextNesting};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {TEXT_NODE} from './HTMLNodeType';\n\n/**\n * Set the textContent property of a node. For text updates, it's faster\n * to set the `nodeValue` of the Text node directly instead of using\n * `.textContent` which will remove the existing node and create a new one.\n *\n * @param {DOMElement} node\n * @param {string} text\n * @internal\n */\nfunction setTextContent(node         , text        )       {\n  if (text) {\n    const firstChild = node.firstChild;\n\n    if (\n      firstChild &&\n      firstChild === node.lastChild &&\n      firstChild.nodeType === TEXT_NODE\n    ) {\n      firstChild.nodeValue = text;\n      return;\n    }\n  }\n  node.textContent = text;\n}\n\nexport default setTextContent;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nconst unitlessNumbers = new Set([\n  'animationIterationCount',\n  'aspectRatio',\n  'borderImageOutset',\n  'borderImageSlice',\n  'borderImageWidth',\n  'boxFlex',\n  'boxFlexGroup',\n  'boxOrdinalGroup',\n  'columnCount',\n  'columns',\n  'flex',\n  'flexGrow',\n  'flexPositive',\n  'flexShrink',\n  'flexNegative',\n  'flexOrder',\n  'gridArea',\n  'gridRow',\n  'gridRowEnd',\n  'gridRowSpan',\n  'gridRowStart',\n  'gridColumn',\n  'gridColumnEnd',\n  'gridColumnSpan',\n  'gridColumnStart',\n  'fontWeight',\n  'lineClamp',\n  'lineHeight',\n  'opacity',\n  'order',\n  'orphans',\n  'scale',\n  'tabSize',\n  'widows',\n  'zIndex',\n  'zoom',\n  'fillOpacity', // SVG-related properties\n  'floodOpacity',\n  'stopOpacity',\n  'strokeDasharray',\n  'strokeDashoffset',\n  'strokeMiterlimit',\n  'strokeOpacity',\n  'strokeWidth',\n  'MozAnimationIterationCount', // Known Prefixed Properties\n  'MozBoxFlex', // TODO: Remove these since they shouldn't be used in modern code\n  'MozBoxFlexGroup',\n  'MozLineClamp',\n  'msAnimationIterationCount',\n  'msFlex',\n  'msZoom',\n  'msFlexGrow',\n  'msFlexNegative',\n  'msFlexOrder',\n  'msFlexPositive',\n  'msFlexShrink',\n  'msGridColumn',\n  'msGridColumnSpan',\n  'msGridRow',\n  'msGridRowSpan',\n  'WebkitAnimationIterationCount',\n  'WebkitBoxFlex',\n  'WebKitBoxFlexGroup',\n  'WebkitBoxOrdinalGroup',\n  'WebkitColumnCount',\n  'WebkitColumns',\n  'WebkitFlex',\n  'WebkitFlexGrow',\n  'WebkitFlexPositive',\n  'WebkitFlexShrink',\n  'WebkitLineClamp',\n]);\nexport default function (name        )          {\n  return unitlessNumbers.has(name);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {shorthandToLonghand} from './CSSShorthandProperty';\n\nimport hyphenateStyleName from '../shared/hyphenateStyleName';\nimport warnValidStyle from '../shared/warnValidStyle';\nimport isUnitlessNumber from '../shared/isUnitlessNumber';\nimport {checkCSSPropertyStringCoercion} from 'shared/CheckStringCoercion';\nimport {trackHostMutation} from 'react-reconciler/src/ReactFiberMutationTracking';\n\n/**\n * Operations for dealing with CSS properties.\n */\n\n/**\n * This creates a string that is expected to be equivalent to the style\n * attribute generated by server-side rendering. It by-passes warnings and\n * security checks so it's not safe to use this value for anything other than\n * comparison. It is only used in DEV for SSR validation.\n */\nexport function createDangerousStringForStyles(styles) {\n  if (__DEV__) {\n    let serialized = '';\n    let delimiter = '';\n    for (const styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      const value = styles[styleName];\n      if (value != null && typeof value !== 'boolean' && value !== '') {\n        const isCustomProperty = styleName.indexOf('--') === 0;\n        if (isCustomProperty) {\n          if (__DEV__) {\n            checkCSSPropertyStringCoercion(value, styleName);\n          }\n          serialized += delimiter + styleName + ':' + ('' + value).trim();\n        } else {\n          if (\n            typeof value === 'number' &&\n            value !== 0 &&\n            !isUnitlessNumber(styleName)\n          ) {\n            serialized +=\n              delimiter + hyphenateStyleName(styleName) + ':' + value + 'px';\n          } else {\n            if (__DEV__) {\n              checkCSSPropertyStringCoercion(value, styleName);\n            }\n            serialized +=\n              delimiter +\n              hyphenateStyleName(styleName) +\n              ':' +\n              ('' + value).trim();\n          }\n        }\n        delimiter = ';';\n      }\n    }\n    return serialized || null;\n  }\n}\n\nfunction setValueForStyle(style, styleName, value) {\n  const isCustomProperty = styleName.indexOf('--') === 0;\n  if (__DEV__) {\n    if (!isCustomProperty) {\n      warnValidStyle(styleName, value);\n    }\n  }\n\n  if (value == null || typeof value === 'boolean' || value === '') {\n    if (isCustomProperty) {\n      style.setProperty(styleName, '');\n    } else if (styleName === 'float') {\n      style.cssFloat = '';\n    } else {\n      style[styleName] = '';\n    }\n  } else if (isCustomProperty) {\n    style.setProperty(styleName, value);\n  } else if (\n    typeof value === 'number' &&\n    value !== 0 &&\n    !isUnitlessNumber(styleName)\n  ) {\n    style[styleName] = value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  } else {\n    if (styleName === 'float') {\n      style.cssFloat = value;\n    } else {\n      if (__DEV__) {\n        checkCSSPropertyStringCoercion(value, styleName);\n      }\n      style[styleName] = ('' + value).trim();\n    }\n  }\n}\n\n/**\n * Sets the value for multiple styles on a node.  If a value is specified as\n * '' (empty string), the corresponding style property will be unset.\n *\n * @param {DOMElement} node\n * @param {object} styles\n */\nexport function setValueForStyles(node, styles, prevStyles) {\n  if (styles != null && typeof styles !== 'object') {\n    throw new Error(\n      'The `style` prop expects a mapping from style properties to values, ' +\n        \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" +\n        'using JSX.',\n    );\n  }\n  if (__DEV__) {\n    if (styles) {\n      // Freeze the next style object so that we can assume it won't be\n      // mutated. We have already warned for this in the past.\n      Object.freeze(styles);\n    }\n  }\n\n  const style = node.style;\n\n  if (prevStyles != null) {\n    if (__DEV__) {\n      validateShorthandPropertyCollisionInDev(prevStyles, styles);\n    }\n\n    for (const styleName in prevStyles) {\n      if (\n        prevStyles.hasOwnProperty(styleName) &&\n        (styles == null || !styles.hasOwnProperty(styleName))\n      ) {\n        // Clear style\n        const isCustomProperty = styleName.indexOf('--') === 0;\n        if (isCustomProperty) {\n          style.setProperty(styleName, '');\n        } else if (styleName === 'float') {\n          style.cssFloat = '';\n        } else {\n          style[styleName] = '';\n        }\n        trackHostMutation();\n      }\n    }\n    for (const styleName in styles) {\n      const value = styles[styleName];\n      if (styles.hasOwnProperty(styleName) && prevStyles[styleName] !== value) {\n        setValueForStyle(style, styleName, value);\n        trackHostMutation();\n      }\n    }\n  } else {\n    for (const styleName in styles) {\n      if (styles.hasOwnProperty(styleName)) {\n        const value = styles[styleName];\n        setValueForStyle(style, styleName, value);\n      }\n    }\n  }\n}\n\nfunction isValueEmpty(value) {\n  return value == null || typeof value === 'boolean' || value === '';\n}\n\n/**\n * Given {color: 'red', overflow: 'hidden'} returns {\n *   color: 'color',\n *   overflowX: 'overflow',\n *   overflowY: 'overflow',\n * }. This can be read as \"the overflowY property was set by the overflow\n * shorthand\". That is, the values are the property that each was derived from.\n */\nfunction expandShorthandMap(styles) {\n  const expanded = {};\n  for (const key in styles) {\n    const longhands = shorthandToLonghand[key] || [key];\n    for (let i = 0; i < longhands.length; i++) {\n      expanded[longhands[i]] = key;\n    }\n  }\n  return expanded;\n}\n\n/**\n * When mixing shorthand and longhand property names, we warn during updates if\n * we expect an incorrect result to occur. In particular, we warn for:\n *\n * Updating a shorthand property (longhand gets overwritten):\n *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}\n *   becomes .style.font = 'baz'\n * Removing a shorthand property (longhand gets lost too):\n *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}\n *   becomes .style.font = ''\n * Removing a longhand property (should revert to shorthand; doesn't):\n *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}\n *   becomes .style.fontVariant = ''\n */\nfunction validateShorthandPropertyCollisionInDev(prevStyles, nextStyles) {\n  if (__DEV__) {\n    if (!nextStyles) {\n      return;\n    }\n\n    // Compute the diff as it would happen elsewhere.\n    const expandedUpdates = {};\n    if (prevStyles) {\n      for (const key in prevStyles) {\n        if (prevStyles.hasOwnProperty(key) && !nextStyles.hasOwnProperty(key)) {\n          const longhands = shorthandToLonghand[key] || [key];\n          for (let i = 0; i < longhands.length; i++) {\n            expandedUpdates[longhands[i]] = key;\n          }\n        }\n      }\n    }\n    for (const key in nextStyles) {\n      if (\n        nextStyles.hasOwnProperty(key) &&\n        (!prevStyles || prevStyles[key] !== nextStyles[key])\n      ) {\n        const longhands = shorthandToLonghand[key] || [key];\n        for (let i = 0; i < longhands.length; i++) {\n          expandedUpdates[longhands[i]] = key;\n        }\n      }\n    }\n\n    const expandedStyles = expandShorthandMap(nextStyles);\n    const warnedAbout = {};\n    for (const key in expandedUpdates) {\n      const originalKey = expandedUpdates[key];\n      const correctOriginalKey = expandedStyles[key];\n      if (correctOriginalKey && originalKey !== correctOriginalKey) {\n        const warningKey = originalKey + ',' + correctOriginalKey;\n        if (warnedAbout[warningKey]) {\n          continue;\n        }\n        warnedAbout[warningKey] = true;\n        console.error(\n          '%s a style property during rerender (%s) when a ' +\n            'conflicting property is set (%s) can lead to styling bugs. To ' +\n            \"avoid this, don't mix shorthand and non-shorthand properties \" +\n            'for the same value; instead, replace the shorthand with ' +\n            'separate values.',\n          isValueEmpty(nextStyles[originalKey]) ? 'Removing' : 'Updating',\n          originalKey,\n          correctOriginalKey,\n        );\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nfunction isCustomElement(tagName        , props        )          {\n  if (tagName.indexOf('-') === -1) {\n    return false;\n  }\n  switch (tagName) {\n    // These are reserved SVG and MathML elements.\n    // We don't mind this list too much because we expect it to never grow.\n    // The alternative is to track the namespace in a few places which is convoluted.\n    // https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-core-concepts\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      return false;\n    default:\n      return true;\n  }\n}\n\nexport default isCustomElement;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nconst aliases = new Map([\n  ['acceptCharset', 'accept-charset'],\n  ['htmlFor', 'for'],\n  ['httpEquiv', 'http-equiv'],\n  // HTML and SVG attributes, but the SVG attribute is case sensitive.],\n  ['crossOrigin', 'crossorigin'],\n  // This is a list of all SVG attributes that need special casing.\n  // Regular attributes that just accept strings.],\n  ['accentHeight', 'accent-height'],\n  ['alignmentBaseline', 'alignment-baseline'],\n  ['arabicForm', 'arabic-form'],\n  ['baselineShift', 'baseline-shift'],\n  ['capHeight', 'cap-height'],\n  ['clipPath', 'clip-path'],\n  ['clipRule', 'clip-rule'],\n  ['colorInterpolation', 'color-interpolation'],\n  ['colorInterpolationFilters', 'color-interpolation-filters'],\n  ['colorProfile', 'color-profile'],\n  ['colorRendering', 'color-rendering'],\n  ['dominantBaseline', 'dominant-baseline'],\n  ['enableBackground', 'enable-background'],\n  ['fillOpacity', 'fill-opacity'],\n  ['fillRule', 'fill-rule'],\n  ['floodColor', 'flood-color'],\n  ['floodOpacity', 'flood-opacity'],\n  ['fontFamily', 'font-family'],\n  ['fontSize', 'font-size'],\n  ['fontSizeAdjust', 'font-size-adjust'],\n  ['fontStretch', 'font-stretch'],\n  ['fontStyle', 'font-style'],\n  ['fontVariant', 'font-variant'],\n  ['fontWeight', 'font-weight'],\n  ['glyphName', 'glyph-name'],\n  ['glyphOrientationHorizontal', 'glyph-orientation-horizontal'],\n  ['glyphOrientationVertical', 'glyph-orientation-vertical'],\n  ['horizAdvX', 'horiz-adv-x'],\n  ['horizOriginX', 'horiz-origin-x'],\n  ['imageRendering', 'image-rendering'],\n  ['letterSpacing', 'letter-spacing'],\n  ['lightingColor', 'lighting-color'],\n  ['markerEnd', 'marker-end'],\n  ['markerMid', 'marker-mid'],\n  ['markerStart', 'marker-start'],\n  ['overlinePosition', 'overline-position'],\n  ['overlineThickness', 'overline-thickness'],\n  ['paintOrder', 'paint-order'],\n  ['panose-1', 'panose-1'],\n  ['pointerEvents', 'pointer-events'],\n  ['renderingIntent', 'rendering-intent'],\n  ['shapeRendering', 'shape-rendering'],\n  ['stopColor', 'stop-color'],\n  ['stopOpacity', 'stop-opacity'],\n  ['strikethroughPosition', 'strikethrough-position'],\n  ['strikethroughThickness', 'strikethrough-thickness'],\n  ['strokeDasharray', 'stroke-dasharray'],\n  ['strokeDashoffset', 'stroke-dashoffset'],\n  ['strokeLinecap', 'stroke-linecap'],\n  ['strokeLinejoin', 'stroke-linejoin'],\n  ['strokeMiterlimit', 'stroke-miterlimit'],\n  ['strokeOpacity', 'stroke-opacity'],\n  ['strokeWidth', 'stroke-width'],\n  ['textAnchor', 'text-anchor'],\n  ['textDecoration', 'text-decoration'],\n  ['textRendering', 'text-rendering'],\n  ['transformOrigin', 'transform-origin'],\n  ['underlinePosition', 'underline-position'],\n  ['underlineThickness', 'underline-thickness'],\n  ['unicodeBidi', 'unicode-bidi'],\n  ['unicodeRange', 'unicode-range'],\n  ['unitsPerEm', 'units-per-em'],\n  ['vAlphabetic', 'v-alphabetic'],\n  ['vHanging', 'v-hanging'],\n  ['vIdeographic', 'v-ideographic'],\n  ['vMathematical', 'v-mathematical'],\n  ['vectorEffect', 'vector-effect'],\n  ['vertAdvY', 'vert-adv-y'],\n  ['vertOriginX', 'vert-origin-x'],\n  ['vertOriginY', 'vert-origin-y'],\n  ['wordSpacing', 'word-spacing'],\n  ['writingMode', 'writing-mode'],\n  ['xmlnsXlink', 'xmlns:xlink'],\n  ['xHeight', 'x-height'],\n]);\n\nexport default function (name        )         {\n  return aliases.get(name) || name;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {ATTRIBUTE_NAME_CHAR} from './isAttributeNameSafe';\nimport validAriaProperties from './validAriaProperties';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst warnedProperties = {};\nconst rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\nconst rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\nfunction validateProperty(tagName, name) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    if (rARIACamel.test(name)) {\n      const ariaName = 'aria-' + name.slice(4).toLowerCase();\n      const correctName = validAriaProperties.hasOwnProperty(ariaName)\n        ? ariaName\n        : null;\n\n      // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n      if (correctName == null) {\n        console.error(\n          'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',\n          name,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n      // aria-* attributes should be lowercase; suggest the lowercase version.\n      if (name !== correctName) {\n        console.error(\n          'Invalid ARIA attribute `%s`. Did you mean `%s`?',\n          name,\n          correctName,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n    }\n\n    if (rARIA.test(name)) {\n      const lowerCasedName = name.toLowerCase();\n      const standardName = validAriaProperties.hasOwnProperty(lowerCasedName)\n        ? lowerCasedName\n        : null;\n\n      // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n      if (standardName == null) {\n        warnedProperties[name] = true;\n        return false;\n      }\n      // aria-* attributes should be lowercase; suggest the lowercase version.\n      if (name !== standardName) {\n        console.error(\n          'Unknown ARIA attribute `%s`. Did you mean `%s`?',\n          name,\n          standardName,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n    }\n  }\n\n  return true;\n}\n\nexport function validateProperties(type, props) {\n  if (__DEV__) {\n    const invalidProps = [];\n\n    for (const key in props) {\n      const isValid = validateProperty(type, key);\n      if (!isValid) {\n        invalidProps.push(key);\n      }\n    }\n\n    const unknownPropString = invalidProps\n      .map(prop => '`' + prop + '`')\n      .join(', ');\n\n    if (invalidProps.length === 1) {\n      console.error(\n        'Invalid aria prop %s on <%s> tag. ' +\n          'For details, see https://react.dev/link/invalid-aria-props',\n        unknownPropString,\n        type,\n      );\n    } else if (invalidProps.length > 1) {\n      console.error(\n        'Invalid aria props %s on <%s> tag. ' +\n          'For details, see https://react.dev/link/invalid-aria-props',\n        unknownPropString,\n        type,\n      );\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {ATTRIBUTE_NAME_CHAR} from './isAttributeNameSafe';\nimport isCustomElement from './isCustomElement';\nimport possibleStandardNames from './possibleStandardNames';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst warnedProperties = {};\nconst EVENT_NAME_REGEX = /^on./;\nconst INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\nconst rARIA = __DEV__\n  ? new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$')\n  : null;\nconst rARIACamel = __DEV__\n  ? new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$')\n  : null;\n\nfunction validateProperty(tagName, name, value, eventRegistry) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    const lowerCasedName = name.toLowerCase();\n    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\n      console.error(\n        'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' +\n          'All React events are normalized to bubble, so onFocusIn and onFocusOut ' +\n          'are not needed/supported by React.',\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    // Actions are special because unlike events they can have other value types.\n    if (typeof value === 'function') {\n      if (tagName === 'form' && name === 'action') {\n        return true;\n      }\n      if (tagName === 'input' && name === 'formAction') {\n        return true;\n      }\n      if (tagName === 'button' && name === 'formAction') {\n        return true;\n      }\n    }\n    // We can't rely on the event system being injected on the server.\n    if (eventRegistry != null) {\n      const {registrationNameDependencies, possibleRegistrationNames} =\n        eventRegistry;\n      if (registrationNameDependencies.hasOwnProperty(name)) {\n        return true;\n      }\n      const registrationName = possibleRegistrationNames.hasOwnProperty(\n        lowerCasedName,\n      )\n        ? possibleRegistrationNames[lowerCasedName]\n        : null;\n      if (registrationName != null) {\n        console.error(\n          'Invalid event handler property `%s`. Did you mean `%s`?',\n          name,\n          registrationName,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n      if (EVENT_NAME_REGEX.test(name)) {\n        console.error(\n          'Unknown event handler property `%s`. It will be ignored.',\n          name,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (EVENT_NAME_REGEX.test(name)) {\n      // If no event plugins have been injected, we are in a server environment.\n      // So we can't tell if the event name is correct for sure, but we can filter\n      // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n      if (INVALID_EVENT_NAME_REGEX.test(name)) {\n        console.error(\n          'Invalid event handler property `%s`. ' +\n            'React events use the camelCase naming convention, for example `onClick`.',\n          name,\n        );\n      }\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    // Let the ARIA attribute hook validate ARIA attributes\n    if (rARIA.test(name) || rARIACamel.test(name)) {\n      return true;\n    }\n\n    if (lowerCasedName === 'innerhtml') {\n      console.error(\n        'Directly setting property `innerHTML` is not permitted. ' +\n          'For more information, lookup documentation on `dangerouslySetInnerHTML`.',\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'aria') {\n      console.error(\n        'The `aria` attribute is reserved for future use in React. ' +\n          'Pass individual `aria-` attributes instead.',\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (\n      lowerCasedName === 'is' &&\n      value !== null &&\n      value !== undefined &&\n      typeof value !== 'string'\n    ) {\n      console.error(\n        'Received a `%s` for a string attribute `is`. If this is expected, cast ' +\n          'the value to a string.',\n        typeof value,\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'number' && isNaN(value)) {\n      console.error(\n        'Received NaN for the `%s` attribute. If this is expected, cast ' +\n          'the value to a string.',\n        name,\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    // Known attributes should match the casing specified in the property config.\n    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      const standardName = possibleStandardNames[lowerCasedName];\n      if (standardName !== name) {\n        console.error(\n          'Invalid DOM property `%s`. Did you mean `%s`?',\n          name,\n          standardName,\n        );\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (name !== lowerCasedName) {\n      // Unknown attributes should have lowercase casing since that's how they\n      // will be cased anyway with server rendering.\n      console.error(\n        'React does not recognize the `%s` prop on a DOM element. If you ' +\n          'intentionally want it to appear in the DOM as a custom ' +\n          'attribute, spell it as lowercase `%s` instead. ' +\n          'If you accidentally passed it from a parent component, remove ' +\n          'it from the DOM element.',\n        name,\n        lowerCasedName,\n      );\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    // Now that we've validated casing, do not validate\n    // data types for reserved props\n    switch (name) {\n      case 'dangerouslySetInnerHTML':\n      case 'children':\n      case 'style':\n      case 'suppressContentEditableWarning':\n      case 'suppressHydrationWarning':\n      case 'defaultValue': // Reserved\n      case 'defaultChecked':\n      case 'innerHTML':\n      case 'ref': {\n        return true;\n      }\n      case 'innerText': // Properties\n      case 'textContent':\n        return true;\n    }\n\n    switch (typeof value) {\n      case 'boolean': {\n        switch (name) {\n          case 'autoFocus':\n          case 'checked':\n          case 'multiple':\n          case 'muted':\n          case 'selected':\n          case 'contentEditable':\n          case 'spellCheck':\n          case 'draggable':\n          case 'value':\n          case 'autoReverse':\n          case 'externalResourcesRequired':\n          case 'focusable':\n          case 'preserveAlpha':\n          case 'allowFullScreen':\n          case 'async':\n          case 'autoPlay':\n          case 'controls':\n          case 'default':\n          case 'defer':\n          case 'disabled':\n          case 'disablePictureInPicture':\n          case 'disableRemotePlayback':\n          case 'formNoValidate':\n          case 'hidden':\n          case 'loop':\n          case 'noModule':\n          case 'noValidate':\n          case 'open':\n          case 'playsInline':\n          case 'readOnly':\n          case 'required':\n          case 'reversed':\n          case 'scoped':\n          case 'seamless':\n          case 'itemScope':\n          case 'capture':\n          case 'download':\n          case 'inert': {\n            // Boolean properties can accept boolean values\n            return true;\n          }\n          // fallthrough\n          default: {\n            const prefix = name.toLowerCase().slice(0, 5);\n            if (prefix === 'data-' || prefix === 'aria-') {\n              return true;\n            }\n            if (value) {\n              console.error(\n                'Received `%s` for a non-boolean attribute `%s`.\\n\\n' +\n                  'If you want to write it to the DOM, pass a string instead: ' +\n                  '%s=\"%s\" or %s={value.toString()}.',\n                value,\n                name,\n                name,\n                value,\n                name,\n              );\n            } else {\n              console.error(\n                'Received `%s` for a non-boolean attribute `%s`.\\n\\n' +\n                  'If you want to write it to the DOM, pass a string instead: ' +\n                  '%s=\"%s\" or %s={value.toString()}.\\n\\n' +\n                  'If you used to conditionally omit it with %s={condition && value}, ' +\n                  'pass %s={condition ? value : undefined} instead.',\n                value,\n                name,\n                name,\n                value,\n                name,\n                name,\n                name,\n              );\n            }\n            warnedProperties[name] = true;\n            return true;\n          }\n        }\n      }\n      case 'function':\n      case 'symbol':\n        // Warn when a known attribute is a bad type\n        warnedProperties[name] = true;\n        return false;\n      case 'string': {\n        // Warn when passing the strings 'false' or 'true' into a boolean prop\n        if (value === 'false' || value === 'true') {\n          switch (name) {\n            case 'checked':\n            case 'selected':\n            case 'multiple':\n            case 'muted':\n            case 'allowFullScreen':\n            case 'async':\n            case 'autoPlay':\n            case 'controls':\n            case 'default':\n            case 'defer':\n            case 'disabled':\n            case 'disablePictureInPicture':\n            case 'disableRemotePlayback':\n            case 'formNoValidate':\n            case 'hidden':\n            case 'loop':\n            case 'noModule':\n            case 'noValidate':\n            case 'open':\n            case 'playsInline':\n            case 'readOnly':\n            case 'required':\n            case 'reversed':\n            case 'scoped':\n            case 'seamless':\n            case 'itemScope':\n            case 'inert': {\n              break;\n            }\n            default: {\n              return true;\n            }\n          }\n          console.error(\n            'Received the string `%s` for the boolean attribute `%s`. ' +\n              '%s ' +\n              'Did you mean %s={%s}?',\n            value,\n            name,\n            value === 'false'\n              ? 'The browser will interpret it as a truthy value.'\n              : 'Although this works, it will not work as expected if you pass the string \"false\".',\n            name,\n            value,\n          );\n          warnedProperties[name] = true;\n          return true;\n        }\n      }\n    }\n    return true;\n  }\n}\n\nfunction warnUnknownProperties(type, props, eventRegistry) {\n  if (__DEV__) {\n    const unknownProps = [];\n    for (const key in props) {\n      const isValid = validateProperty(type, key, props[key], eventRegistry);\n      if (!isValid) {\n        unknownProps.push(key);\n      }\n    }\n\n    const unknownPropString = unknownProps\n      .map(prop => '`' + prop + '`')\n      .join(', ');\n    if (unknownProps.length === 1) {\n      console.error(\n        'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' +\n          'or pass a string or number value to keep it in the DOM. ' +\n          'For details, see https://react.dev/link/attribute-behavior ',\n        unknownPropString,\n        type,\n      );\n    } else if (unknownProps.length > 1) {\n      console.error(\n        'Invalid values for props %s on <%s> tag. Either remove them from the element, ' +\n          'or pass a string or number value to keep them in the DOM. ' +\n          'For details, see https://react.dev/link/attribute-behavior ',\n        unknownPropString,\n        type,\n      );\n    }\n  }\n}\n\nexport function validateProperties(type, props, eventRegistry) {\n  if (isCustomElement(type, props) || typeof props.is === 'string') {\n    return;\n  }\n  warnUnknownProperties(type, props, eventRegistry);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n// A javascript: URL can contain leading C0 control or \\u0020 SPACE,\n// and any newline or tab are filtered out as if they're not part of the URL.\n// https://url.spec.whatwg.org/#url-parsing\n// Tab or newline are defined as \\r\\n\\t:\n// https://infra.spec.whatwg.org/#ascii-tab-or-newline\n// A C0 control is a code point in the range \\u0000 NULL to \\u001F\n// INFORMATION SEPARATOR ONE, inclusive:\n// https://infra.spec.whatwg.org/#c0-control-or-space\n\nconst isJavaScriptProtocol =\n  /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n\nfunction sanitizeURL   (url   )             {\n  // We should never have symbols here because they get filtered out elsewhere.\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  if (isJavaScriptProtocol.test('' + (url     ))) {\n    // Return a different javascript: url that doesn't cause any side-effects and just\n    // throws if ever visited.\n    // eslint-disable-next-line no-script-url\n    return \"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')\";\n  }\n  return url;\n}\n\nexport default sanitizeURL;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n                                                               \n\n// This exists to avoid circular dependency between ReactDOMEventReplaying\n// and DOMPluginEventSystem.\n\nlet currentReplayingEvent = null;\n\nexport function setReplayingEvent(event                )       {\n  if (__DEV__) {\n    if (currentReplayingEvent !== null) {\n      console.error(\n        'Expected currently replaying event to be null. This error ' +\n          'is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n  currentReplayingEvent = event;\n}\n\nexport function resetReplayingEvent()       {\n  if (__DEV__) {\n    if (currentReplayingEvent === null) {\n      console.error(\n        'Expected currently replaying event to not be null. This error ' +\n          'is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n  currentReplayingEvent = null;\n}\n\nexport function isReplayingEvent(event                )          {\n  return event === currentReplayingEvent;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {\n  getInstanceFromNode,\n  getFiberCurrentPropsFromNode,\n} from '../client/ReactDOMComponentTree';\n\nimport {restoreControlledState} from 'react-dom-bindings/src/client/ReactDOMComponent';\n\n// Use to restore controlled state after a change event has fired.\n\nlet restoreTarget = null;\nlet restoreQueue = null;\n\nfunction restoreStateOfTarget(target      ) {\n  // We perform this translation at the end of the event loop so that we\n  // always receive the correct fiber here\n  const internalInstance = getInstanceFromNode(target);\n  if (!internalInstance) {\n    // Unmounted\n    return;\n  }\n\n  const stateNode = internalInstance.stateNode;\n  // Guard against Fiber being unmounted.\n  if (stateNode) {\n    const props = getFiberCurrentPropsFromNode(stateNode);\n    restoreControlledState(\n      internalInstance.stateNode,\n      internalInstance.type,\n      props,\n    );\n  }\n}\n\nexport function enqueueStateRestore(target      )       {\n  if (restoreTarget) {\n    if (restoreQueue) {\n      restoreQueue.push(target);\n    } else {\n      restoreQueue = [target];\n    }\n  } else {\n    restoreTarget = target;\n  }\n}\n\nexport function needsStateRestore()          {\n  return restoreTarget !== null || restoreQueue !== null;\n}\n\nexport function restoreStateIfNeeded() {\n  if (!restoreTarget) {\n    return;\n  }\n  const target = restoreTarget;\n  const queuedTargets = restoreQueue;\n  restoreTarget = null;\n  restoreQueue = null;\n\n  restoreStateOfTarget(target);\n  if (queuedTargets) {\n    for (let i = 0; i < queuedTargets.length; i++) {\n      restoreStateOfTarget(queuedTargets[i]);\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  needsStateRestore,\n  restoreStateIfNeeded,\n} from './ReactDOMControlledComponent';\n\nimport {\n  batchedUpdates as batchedUpdatesImpl,\n  discreteUpdates as discreteUpdatesImpl,\n  flushSyncWork,\n} from 'react-reconciler/src/ReactFiberReconciler';\n\n// Used as a way to call batchedUpdates when we don't have a reference to\n// the renderer. Such as when we're dispatching events or if third party\n// libraries need to call batchedUpdates. Eventually, this API will go away when\n// everything is batched by default. We'll then have a similar API to opt-out of\n// scheduled work and instead do synchronous work.\n\nlet isInsideEventHandler = false;\n\nfunction finishEventHandler() {\n  // Here we wait until all updates have propagated, which is important\n  // when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  // Then we restore state of any controlled component.\n  const controlledComponentsHavePendingUpdates = needsStateRestore();\n  if (controlledComponentsHavePendingUpdates) {\n    // If a controlled event was fired, we may need to restore the state of\n    // the DOM node back to the controlled value. This is necessary when React\n    // bails out of the update without touching the DOM.\n    // TODO: Restore state in the microtask, after the discrete updates flush,\n    // instead of early flushing them here.\n    // @TODO Should move to flushSyncWork once legacy mode is removed but since this flushSync\n    // flushes passive effects we can't do this yet.\n    flushSyncWork();\n    restoreStateIfNeeded();\n  }\n}\n\nexport function batchedUpdates(fn, a, b) {\n  if (isInsideEventHandler) {\n    // If we are currently inside another batch, we need to wait until it\n    // fully completes before restoring state.\n    return fn(a, b);\n  }\n  isInsideEventHandler = true;\n  try {\n    return batchedUpdatesImpl(fn, a, b);\n  } finally {\n    isInsideEventHandler = false;\n    finishEventHandler();\n  }\n}\n\n// TODO: Replace with flushSync\nexport function discreteUpdates(fn, a, b, c, d) {\n  return discreteUpdatesImpl(fn, a, b, c, d);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *      \n */\n\n                                                                   \n                                                         \n\nimport {getFiberCurrentPropsFromNode} from '../client/ReactDOMComponentTree';\n\nfunction isInteractive(tag        )          {\n  return (\n    tag === 'button' ||\n    tag === 'input' ||\n    tag === 'select' ||\n    tag === 'textarea'\n  );\n}\n\nfunction shouldPreventMouseEvent(\n  name        ,\n  type        ,\n  props       ,\n)          {\n  switch (name) {\n    case 'onClick':\n    case 'onClickCapture':\n    case 'onDoubleClick':\n    case 'onDoubleClickCapture':\n    case 'onMouseDown':\n    case 'onMouseDownCapture':\n    case 'onMouseMove':\n    case 'onMouseMoveCapture':\n    case 'onMouseUp':\n    case 'onMouseUpCapture':\n    case 'onMouseEnter':\n      return !!(props.disabled && isInteractive(type));\n    default:\n      return false;\n  }\n}\n\n/**\n * @param {object} inst The instance, which is the source of events.\n * @param {string} registrationName Name of listener (e.g. `onClick`).\n * @return {?function} The stored callback.\n */\nexport default function getListener(\n  inst       ,\n  registrationName        ,\n)                  {\n  const stateNode = inst.stateNode;\n  if (stateNode === null) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n  const props = getFiberCurrentPropsFromNode(stateNode);\n  if (props === null) {\n    // Work in progress.\n    return null;\n  }\n  // $FlowFixMe[invalid-computed-prop]\n  const listener = props[registrationName];\n  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {\n    return null;\n  }\n\n  if (listener && typeof listener !== 'function') {\n    throw new Error(\n      `Expected \\`${registrationName}\\` listener to be a function, instead got a value of \\`${typeof listener}\\` type.`,\n    );\n  }\n\n  return listener;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nexport const canUseDOM          = !!(\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n);\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {canUseDOM} from 'shared/ExecutionEnvironment';\n\nexport let passiveBrowserEventsSupported          = false;\n\n// Check if browser support events with passive listeners\n// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\nif (canUseDOM) {\n  try {\n    const options   \n                     \n      = {};\n    Object.defineProperty(options, 'passive', {\n      get: function () {\n        passiveBrowserEventsSupported = true;\n      },\n    });\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, options);\n  } catch (e) {\n    passiveBrowserEventsSupported = false;\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nexport function addEventBubbleListener(\n  target             ,\n  eventType        ,\n  listener          ,\n)           {\n  target.addEventListener(eventType, listener, false);\n  return listener;\n}\n\nexport function addEventCaptureListener(\n  target             ,\n  eventType        ,\n  listener          ,\n)           {\n  target.addEventListener(eventType, listener, true);\n  return listener;\n}\n\nexport function addEventCaptureListenerWithPassiveFlag(\n  target             ,\n  eventType        ,\n  listener          ,\n  passive         ,\n)           {\n  target.addEventListener(eventType, listener, {\n    capture: true,\n    passive,\n  });\n  return listener;\n}\n\nexport function addEventBubbleListenerWithPassiveFlag(\n  target             ,\n  eventType        ,\n  listener          ,\n  passive         ,\n)           {\n  target.addEventListener(eventType, listener, {\n    passive,\n  });\n  return listener;\n}\n\nexport function removeEventListener(\n  target             ,\n  eventType        ,\n  listener          ,\n  capture         ,\n)       {\n  target.removeEventListener(eventType, listener, capture);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * These variables store information about text content of a target node,\n * allowing comparison of content before and after a given event.\n *\n * Identify the node where selection currently begins, then observe\n * both its text content and its current position in the DOM. Since the\n * browser may natively replace the target node during composition, we can\n * use its position to find its replacement.\n *\n *\n */\n\nlet root = null;\nlet startText = null;\nlet fallbackText = null;\n\nexport function initialize(nativeEventTarget) {\n  root = nativeEventTarget;\n  startText = getText();\n  return true;\n}\n\nexport function reset() {\n  root = null;\n  startText = null;\n  fallbackText = null;\n}\n\nexport function getData() {\n  if (fallbackText) {\n    return fallbackText;\n  }\n\n  let start;\n  const startValue = startText;\n  const startLength = startValue.length;\n  let end;\n  const endValue = getText();\n  const endLength = endValue.length;\n\n  for (start = 0; start < startLength; start++) {\n    if (startValue[start] !== endValue[start]) {\n      break;\n    }\n  }\n\n  const minEnd = startLength - start;\n  for (end = 1; end <= minEnd; end++) {\n    if (startValue[startLength - end] !== endValue[endLength - end]) {\n      break;\n    }\n  }\n\n  const sliceTail = end > 1 ? 1 - end : undefined;\n  fallbackText = endValue.slice(start, sliceTail);\n  return fallbackText;\n}\n\nexport function getText() {\n  if ('value' in root) {\n    return root.value;\n  }\n  return root.textContent;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n/**\n * `charCode` represents the actual \"character code\" and is safe to use with\n * `String.fromCharCode`. As such, only keys that correspond to printable\n * characters produce a valid `charCode`, the only exception to this is Enter.\n * The Tab-key is considered non-printable and does not have a `charCode`,\n * presumably because it does not produce a tab-character in browsers.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {number} Normalized `charCode` property.\n */\nfunction getEventCharCode(nativeEvent               )         {\n  let charCode;\n  const keyCode = nativeEvent.keyCode;\n\n  if ('charCode' in nativeEvent) {\n    charCode = nativeEvent.charCode;\n\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.\n    if (charCode === 0 && keyCode === 13) {\n      charCode = 13;\n    }\n  } else {\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\n    charCode = keyCode;\n  }\n\n  // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)\n  // report Enter as charCode 10 when ctrl is pressed.\n  if (charCode === 10) {\n    charCode = 13;\n  }\n\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\n  // Must not discard the (non-)printable Enter-key.\n  if (charCode >= 32 || charCode === 13) {\n    return charCode;\n  }\n\n  return 0;\n}\n\nexport default getEventCharCode;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n/* eslint valid-typeof: 0 */\n\n                                                                   \n\nimport assign from 'shared/assign';\nimport getEventCharCode from './getEventCharCode';\n\n                           \n                                                                               \n  \n\nfunction functionThatReturnsTrue() {\n  return true;\n}\n\nfunction functionThatReturnsFalse() {\n  return false;\n}\n\n// This is intentionally a factory so that we have different returned constructors.\n// If we had a single constructor, it would be megamorphic and engines would deopt.\nfunction createSyntheticEvent(Interface                    ) {\n  /**\n   * Synthetic events are dispatched by event plugins, typically in response to a\n   * top-level event delegation handler.\n   *\n   * These systems should generally use pooling to reduce the frequency of garbage\n   * collection. The system should check `isPersistent` to determine whether the\n   * event should be released into the pool after being dispatched. Users that\n   * need a persisted event should invoke `persist`.\n   *\n   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n   * normalizing browser quirks. Subclasses do not necessarily have to implement a\n   * DOM interface; custom application-specific events can also subclass this.\n   */\n  // $FlowFixMe[missing-this-annot]\n  function SyntheticBaseEvent(\n    reactName               ,\n    reactEventType        ,\n    targetInst              ,\n    nativeEvent                                  ,\n    nativeEventTarget                    ,\n  ) {\n    this._reactName = reactName;\n    this._targetInst = targetInst;\n    this.type = reactEventType;\n    this.nativeEvent = nativeEvent;\n    this.target = nativeEventTarget;\n    this.currentTarget = null;\n\n    for (const propName in Interface) {\n      if (!Interface.hasOwnProperty(propName)) {\n        continue;\n      }\n      const normalize = Interface[propName];\n      if (normalize) {\n        this[propName] = normalize(nativeEvent);\n      } else {\n        this[propName] = nativeEvent[propName];\n      }\n    }\n\n    const defaultPrevented =\n      nativeEvent.defaultPrevented != null\n        ? nativeEvent.defaultPrevented\n        : nativeEvent.returnValue === false;\n    if (defaultPrevented) {\n      this.isDefaultPrevented = functionThatReturnsTrue;\n    } else {\n      this.isDefaultPrevented = functionThatReturnsFalse;\n    }\n    this.isPropagationStopped = functionThatReturnsFalse;\n    return this;\n  }\n\n  // $FlowFixMe[prop-missing] found when upgrading Flow\n  assign(SyntheticBaseEvent.prototype, {\n    // $FlowFixMe[missing-this-annot]\n    preventDefault: function () {\n      this.defaultPrevented = true;\n      const event = this.nativeEvent;\n      if (!event) {\n        return;\n      }\n\n      if (event.preventDefault) {\n        event.preventDefault();\n        // $FlowFixMe[illegal-typeof] - flow is not aware of `unknown` in IE\n      } else if (typeof event.returnValue !== 'unknown') {\n        event.returnValue = false;\n      }\n      this.isDefaultPrevented = functionThatReturnsTrue;\n    },\n\n    // $FlowFixMe[missing-this-annot]\n    stopPropagation: function () {\n      const event = this.nativeEvent;\n      if (!event) {\n        return;\n      }\n\n      if (event.stopPropagation) {\n        event.stopPropagation();\n        // $FlowFixMe[illegal-typeof] - flow is not aware of `unknown` in IE\n      } else if (typeof event.cancelBubble !== 'unknown') {\n        // The ChangeEventPlugin registers a \"propertychange\" event for\n        // IE. This event does not support bubbling or cancelling, and\n        // any references to cancelBubble throw \"Member not found\".  A\n        // typeof check of \"unknown\" circumvents this issue (and is also\n        // IE specific).\n        event.cancelBubble = true;\n      }\n\n      this.isPropagationStopped = functionThatReturnsTrue;\n    },\n\n    /**\n     * We release all dispatched `SyntheticEvent`s after each event loop, adding\n     * them back into the pool. This allows a way to hold onto a reference that\n     * won't be added back into the pool.\n     */\n    persist: function () {\n      // Modern event system doesn't use pooling.\n    },\n\n    /**\n     * Checks if this event should be released back into the pool.\n     *\n     * @return {boolean} True if this should not be released, false otherwise.\n     */\n    isPersistent: functionThatReturnsTrue,\n  });\n  return SyntheticBaseEvent;\n}\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst EventInterface = {\n  eventPhase: 0,\n  bubbles: 0,\n  cancelable: 0,\n  timeStamp: function (event                             ) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: 0,\n  isTrusted: 0,\n};\nexport const SyntheticEvent             = createSyntheticEvent(EventInterface);\n\nconst UIEventInterface                     = {\n  ...EventInterface,\n  view: 0,\n  detail: 0,\n};\nexport const SyntheticUIEvent             =\n  createSyntheticEvent(UIEventInterface);\n\nlet lastMovementX;\nlet lastMovementY;\nlet lastMouseEvent;\n\nfunction updateMouseMovementPolyfillState(event                             ) {\n  if (event !== lastMouseEvent) {\n    if (lastMouseEvent && event.type === 'mousemove') {\n      // $FlowFixMe[unsafe-arithmetic] assuming this is a number\n      lastMovementX = event.screenX - lastMouseEvent.screenX;\n      // $FlowFixMe[unsafe-arithmetic] assuming this is a number\n      lastMovementY = event.screenY - lastMouseEvent.screenY;\n    } else {\n      lastMovementX = 0;\n      lastMovementY = 0;\n    }\n    lastMouseEvent = event;\n  }\n}\n\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst MouseEventInterface                     = {\n  ...UIEventInterface,\n  screenX: 0,\n  screenY: 0,\n  clientX: 0,\n  clientY: 0,\n  pageX: 0,\n  pageY: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  getModifierState: getEventModifierState,\n  button: 0,\n  buttons: 0,\n  relatedTarget: function (event) {\n    if (event.relatedTarget === undefined)\n      return event.fromElement === event.srcElement\n        ? event.toElement\n        : event.fromElement;\n\n    return event.relatedTarget;\n  },\n  movementX: function (event) {\n    if ('movementX' in event) {\n      return event.movementX;\n    }\n    updateMouseMovementPolyfillState(event);\n    return lastMovementX;\n  },\n  movementY: function (event) {\n    if ('movementY' in event) {\n      return event.movementY;\n    }\n    // Don't need to call updateMouseMovementPolyfillState() here\n    // because it's guaranteed to have already run when movementX\n    // was copied.\n    return lastMovementY;\n  },\n};\nexport const SyntheticMouseEvent             =\n  createSyntheticEvent(MouseEventInterface);\n\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst DragEventInterface                     = {\n  ...MouseEventInterface,\n  dataTransfer: 0,\n};\nexport const SyntheticDragEvent             =\n  createSyntheticEvent(DragEventInterface);\n\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst FocusEventInterface                     = {\n  ...UIEventInterface,\n  relatedTarget: 0,\n};\nexport const SyntheticFocusEvent             =\n  createSyntheticEvent(FocusEventInterface);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent\n */\nconst AnimationEventInterface                     = {\n  ...EventInterface,\n  animationName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0,\n};\nexport const SyntheticAnimationEvent             = createSyntheticEvent(\n  AnimationEventInterface,\n);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nconst ClipboardEventInterface                     = {\n  ...EventInterface,\n  clipboardData: function (event) {\n    return 'clipboardData' in event\n      ? event.clipboardData\n      : window.clipboardData;\n  },\n};\nexport const SyntheticClipboardEvent             = createSyntheticEvent(\n  ClipboardEventInterface,\n);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\nconst CompositionEventInterface                     = {\n  ...EventInterface,\n  data: 0,\n};\nexport const SyntheticCompositionEvent             = createSyntheticEvent(\n  CompositionEventInterface,\n);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\n// Happens to share the same list for now.\nexport const SyntheticInputEvent = SyntheticCompositionEvent;\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nconst normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified',\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nconst translateToKey = {\n  '8': 'Backspace',\n  '9': 'Tab',\n  '12': 'Clear',\n  '13': 'Enter',\n  '16': 'Shift',\n  '17': 'Control',\n  '18': 'Alt',\n  '19': 'Pause',\n  '20': 'CapsLock',\n  '27': 'Escape',\n  '32': ' ',\n  '33': 'PageUp',\n  '34': 'PageDown',\n  '35': 'End',\n  '36': 'Home',\n  '37': 'ArrowLeft',\n  '38': 'ArrowUp',\n  '39': 'ArrowRight',\n  '40': 'ArrowDown',\n  '45': 'Insert',\n  '46': 'Delete',\n  '112': 'F1',\n  '113': 'F2',\n  '114': 'F3',\n  '115': 'F4',\n  '116': 'F5',\n  '117': 'F6',\n  '118': 'F7',\n  '119': 'F8',\n  '120': 'F9',\n  '121': 'F10',\n  '122': 'F11',\n  '123': 'F12',\n  '144': 'NumLock',\n  '145': 'ScrollLock',\n  '224': 'Meta',\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent                             ) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    const key =\n      // $FlowFixMe[invalid-computed-prop] unable to index with a `mixed` value\n      normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    const charCode = getEventCharCode(\n      // $FlowFixMe[incompatible-call] unable to narrow to `KeyboardEvent`\n      nativeEvent,\n    );\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    // $FlowFixMe[invalid-computed-prop] unable to index with a `mixed` value\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\nconst modifierKeyToProp = {\n  Alt: 'altKey',\n  Control: 'ctrlKey',\n  Meta: 'metaKey',\n  Shift: 'shiftKey',\n};\n\n// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support\n// getModifierState. If getModifierState is not supported, we map it to a set of\n// modifier keys exposed by the event. In this case, Lock-keys are not supported.\n// $FlowFixMe[missing-local-annot]\n// $FlowFixMe[missing-this-annot]\nfunction modifierStateGetter(keyArg) {\n  const syntheticEvent = this;\n  const nativeEvent = syntheticEvent.nativeEvent;\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n  const keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent                             ) {\n  return modifierStateGetter;\n}\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst KeyboardEventInterface = {\n  ...UIEventInterface,\n  key: getEventKey,\n  code: 0,\n  location: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  altKey: 0,\n  metaKey: 0,\n  repeat: 0,\n  locale: 0,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event                             ) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(\n        // $FlowFixMe[incompatible-call] unable to narrow to `KeyboardEvent`\n        event,\n      );\n    }\n    return 0;\n  },\n  keyCode: function (event                             ) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function (event                             ) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(\n        // $FlowFixMe[incompatible-call] unable to narrow to `KeyboardEvent`\n        event,\n      );\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n};\nexport const SyntheticKeyboardEvent             = createSyntheticEvent(\n  KeyboardEventInterface,\n);\n\n/**\n * @interface PointerEvent\n * @see http://www.w3.org/TR/pointerevents/\n */\nconst PointerEventInterface = {\n  ...MouseEventInterface,\n  pointerId: 0,\n  width: 0,\n  height: 0,\n  pressure: 0,\n  tangentialPressure: 0,\n  tiltX: 0,\n  tiltY: 0,\n  twist: 0,\n  pointerType: 0,\n  isPrimary: 0,\n};\nexport const SyntheticPointerEvent             = createSyntheticEvent(\n  PointerEventInterface,\n);\n\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\nconst TouchEventInterface = {\n  ...UIEventInterface,\n  touches: 0,\n  targetTouches: 0,\n  changedTouches: 0,\n  altKey: 0,\n  metaKey: 0,\n  ctrlKey: 0,\n  shiftKey: 0,\n  getModifierState: getEventModifierState,\n};\nexport const SyntheticTouchEvent             =\n  createSyntheticEvent(TouchEventInterface);\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent\n */\nconst TransitionEventInterface = {\n  ...EventInterface,\n  propertyName: 0,\n  elapsedTime: 0,\n  pseudoElement: 0,\n};\nexport const SyntheticTransitionEvent             = createSyntheticEvent(\n  TransitionEventInterface,\n);\n\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nconst WheelEventInterface = {\n  ...MouseEventInterface,\n  deltaX(event                             ) {\n    return 'deltaX' in event\n      ? event.deltaX\n      : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n        'wheelDeltaX' in event\n        ? // $FlowFixMe[unsafe-arithmetic] assuming this is a number\n          -event.wheelDeltaX\n        : 0;\n  },\n  deltaY(event                             ) {\n    return 'deltaY' in event\n      ? event.deltaY\n      : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n        'wheelDeltaY' in event\n        ? // $FlowFixMe[unsafe-arithmetic] assuming this is a number\n          -event.wheelDeltaY\n        : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n          'wheelDelta' in event\n          ? // $FlowFixMe[unsafe-arithmetic] assuming this is a number\n            -event.wheelDelta\n          : 0;\n  },\n  deltaZ: 0,\n\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: 0,\n};\nexport const SyntheticWheelEvent             =\n  createSyntheticEvent(WheelEventInterface);\n\nconst ToggleEventInterface = {\n  ...EventInterface,\n  newState: 0,\n  oldState: 0,\n};\nexport const SyntheticToggleEvent             =\n  createSyntheticEvent(ToggleEventInterface);\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                             \n                                                                   \n                                                                  \n                                                           \n                                                          \n                                                                    \n\nimport {canUseDOM} from 'shared/ExecutionEnvironment';\n\nimport {registerTwoPhaseEvent} from '../EventRegistry';\nimport {\n  getData as FallbackCompositionStateGetData,\n  initialize as FallbackCompositionStateInitialize,\n  reset as FallbackCompositionStateReset,\n} from '../FallbackCompositionState';\nimport {\n  SyntheticCompositionEvent,\n  SyntheticInputEvent,\n} from '../SyntheticEvent';\nimport {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n\nconst END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nconst START_KEYCODE = 229;\n\nconst canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;\n\nlet documentMode = null;\nif (canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nconst canUseTextInputEvent =\n  canUseDOM && 'TextEvent' in window && !documentMode;\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nconst useFallbackCompositionData =\n  canUseDOM &&\n  (!canUseCompositionEvent ||\n    (documentMode && documentMode > 8 && documentMode <= 11));\n\nconst SPACEBAR_CODE = 32;\nconst SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nfunction registerEvents() {\n  registerTwoPhaseEvent('onBeforeInput', [\n    'compositionend',\n    'keypress',\n    'textInput',\n    'paste',\n  ]);\n  registerTwoPhaseEvent('onCompositionEnd', [\n    'compositionend',\n    'focusout',\n    'keydown',\n    'keypress',\n    'keyup',\n    'mousedown',\n  ]);\n  registerTwoPhaseEvent('onCompositionStart', [\n    'compositionstart',\n    'focusout',\n    'keydown',\n    'keypress',\n    'keyup',\n    'mousedown',\n  ]);\n  registerTwoPhaseEvent('onCompositionUpdate', [\n    'compositionupdate',\n    'focusout',\n    'keydown',\n    'keypress',\n    'keyup',\n    'mousedown',\n  ]);\n}\n\n// Track whether we've ever handled a keypress on the space key.\nlet hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent     ) {\n  return (\n    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n    // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n    !(nativeEvent.ctrlKey && nativeEvent.altKey)\n  );\n}\n\n/**\n * Translate native top level events into event types.\n */\nfunction getCompositionEventType(domEventName              ) {\n  switch (domEventName) {\n    case 'compositionstart':\n      return 'onCompositionStart';\n    case 'compositionend':\n      return 'onCompositionEnd';\n    case 'compositionupdate':\n      return 'onCompositionUpdate';\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n */\nfunction isFallbackCompositionStart(\n  domEventName              ,\n  nativeEvent     ,\n)          {\n  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n */\nfunction isFallbackCompositionEnd(\n  domEventName              ,\n  nativeEvent     ,\n)          {\n  switch (domEventName) {\n    case 'keyup':\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case 'keydown':\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case 'keypress':\n    case 'mousedown':\n    case 'focusout':\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent     ) {\n  const detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n/**\n * Check if a composition event was triggered by Korean IME.\n * Our fallback mode does not work well with IE's Korean IME,\n * so just use native composition events when Korean IME is used.\n * Although CompositionEvent.locale property is deprecated,\n * it is available in IE, where our fallback mode is enabled.\n *\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isUsingKoreanIME(nativeEvent     ) {\n  return nativeEvent.locale === 'ko';\n}\n\n// Track the current IME composition status, if any.\nlet isComposing = false;\n\n/**\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(\n  dispatchQueue               ,\n  domEventName              ,\n  targetInst              ,\n  nativeEvent                ,\n  nativeEventTarget                    ,\n) {\n  let eventType;\n  let fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(domEventName);\n  } else if (!isComposing) {\n    if (isFallbackCompositionStart(domEventName, nativeEvent)) {\n      eventType = 'onCompositionStart';\n    }\n  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {\n    eventType = 'onCompositionEnd';\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!isComposing && eventType === 'onCompositionStart') {\n      isComposing = FallbackCompositionStateInitialize(nativeEventTarget);\n    } else if (eventType === 'onCompositionEnd') {\n      if (isComposing) {\n        fallbackData = FallbackCompositionStateGetData();\n      }\n    }\n  }\n\n  const listeners = accumulateTwoPhaseListeners(targetInst, eventType);\n  if (listeners.length > 0) {\n    const event                      = new SyntheticCompositionEvent(\n      eventType,\n      domEventName,\n      null,\n      nativeEvent,\n      nativeEventTarget,\n    );\n    dispatchQueue.push({event, listeners});\n    if (fallbackData) {\n      // Inject data generated from fallback path into the synthetic event.\n      // This matches the property of native CompositionEventInterface.\n      // $FlowFixMe[incompatible-use]\n      event.data = fallbackData;\n    } else {\n      const customData = getDataFromCustomEvent(nativeEvent);\n      if (customData !== null) {\n        // $FlowFixMe[incompatible-use]\n        event.data = customData;\n      }\n    }\n  }\n}\n\nfunction getNativeBeforeInputChars(\n  domEventName              ,\n  nativeEvent     ,\n)          {\n  switch (domEventName) {\n    case 'compositionend':\n      return getDataFromCustomEvent(nativeEvent);\n    case 'keypress':\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      const which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case 'textInput':\n      // Record the characters to be added to the DOM.\n      const chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to ignore it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n */\nfunction getFallbackBeforeInputChars(\n  domEventName              ,\n  nativeEvent     ,\n)          {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  // If composition event is available, we extract a string only at\n  // compositionevent, otherwise extract it at fallback events.\n  if (isComposing) {\n    if (\n      domEventName === 'compositionend' ||\n      (!canUseCompositionEvent &&\n        isFallbackCompositionEnd(domEventName, nativeEvent))\n    ) {\n      const chars = FallbackCompositionStateGetData();\n      FallbackCompositionStateReset();\n      isComposing = false;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (domEventName) {\n    case 'paste':\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case 'keypress':\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (!isKeypressCommand(nativeEvent)) {\n        // IE fires the `keypress` event when a user types an emoji via\n        // Touch keyboard of Windows.  In such a case, the `char` property\n        // holds an emoji character like `\\uD83D\\uDE0A`.  Because its length\n        // is 2, the property `which` does not represent an emoji correctly.\n        // In such a case, we directly return the `char` property instead of\n        // using `which`.\n        if (nativeEvent.char && nativeEvent.char.length > 1) {\n          return nativeEvent.char;\n        } else if (nativeEvent.which) {\n          return String.fromCharCode(nativeEvent.which);\n        }\n      }\n      return null;\n    case 'compositionend':\n      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)\n        ? null\n        : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(\n  dispatchQueue               ,\n  domEventName              ,\n  targetInst              ,\n  nativeEvent                ,\n  nativeEventTarget                    ,\n) {\n  let chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(domEventName, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  const listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');\n  if (listeners.length > 0) {\n    const event                      = new SyntheticInputEvent(\n      'onBeforeInput',\n      'beforeinput',\n      null,\n      nativeEvent,\n      nativeEventTarget,\n    );\n    dispatchQueue.push({event, listeners});\n    // $FlowFixMe[incompatible-use]\n    event.data = chars;\n  }\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nfunction extractEvents(\n  dispatchQueue               ,\n  domEventName              ,\n  targetInst              ,\n  nativeEvent                ,\n  nativeEventTarget                    ,\n  eventSystemFlags                  ,\n  targetContainer             ,\n)       {\n  extractCompositionEvent(\n    dispatchQueue,\n    domEventName,\n    targetInst,\n    nativeEvent,\n    nativeEventTarget,\n  );\n  extractBeforeInputEvent(\n    dispatchQueue,\n    domEventName,\n    targetInst,\n    nativeEvent,\n    nativeEventTarget,\n  );\n}\n\nexport {registerEvents, extractEvents};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n/**\n * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n */\nconst supportedInputTypes                                    = {\n  color: true,\n  date: true,\n  datetime: true,\n  'datetime-local': true,\n  email: true,\n  month: true,\n  number: true,\n  password: true,\n  range: true,\n  search: true,\n  tel: true,\n  text: true,\n  time: true,\n  url: true,\n  week: true,\n};\n\nfunction isTextInputElement(elem              )          {\n  const nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n\n  if (nodeName === 'input') {\n    return !!supportedInputTypes[((elem     )                  ).type];\n  }\n\n  if (nodeName === 'textarea') {\n    return true;\n  }\n\n  return false;\n}\n\nexport default isTextInputElement;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {canUseDOM} from 'shared/ExecutionEnvironment';\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nfunction isEventSupported(eventNameSuffix        )          {\n  if (!canUseDOM) {\n    return false;\n  }\n\n  const eventName = 'on' + eventNameSuffix;\n  let isSupported = eventName in document;\n\n  if (!isSupported) {\n    const element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof (element     )[eventName] === 'function';\n  }\n\n  return isSupported;\n}\n\nexport default isEventSupported;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n                                                                             \n                                                        \n                                                   \n                                                           \n                                                          \n                                                                   \n                                                                    \n\nimport {registerTwoPhaseEvent} from '../EventRegistry';\nimport {SyntheticEvent} from '../SyntheticEvent';\nimport isTextInputElement from '../isTextInputElement';\nimport {canUseDOM} from 'shared/ExecutionEnvironment';\n\nimport getEventTarget from '../getEventTarget';\nimport isEventSupported from '../isEventSupported';\nimport {getNodeFromInstance} from '../../client/ReactDOMComponentTree';\nimport {updateValueIfChanged} from '../../client/inputValueTracking';\nimport {setDefaultValue} from '../../client/ReactDOMInput';\nimport {enqueueStateRestore} from '../ReactDOMControlledComponent';\n\nimport {disableInputAttributeSyncing} from 'shared/ReactFeatureFlags';\nimport {batchedUpdates} from '../ReactDOMUpdateBatching';\nimport {\n  processDispatchQueue,\n  accumulateTwoPhaseListeners,\n} from '../DOMPluginEventSystem';\nimport isCustomElement from '../../shared/isCustomElement';\n\nfunction registerEvents() {\n  registerTwoPhaseEvent('onChange', [\n    'change',\n    'click',\n    'focusin',\n    'focusout',\n    'input',\n    'keydown',\n    'keyup',\n    'selectionchange',\n  ]);\n}\n\nfunction createAndAccumulateChangeEvent(\n  dispatchQueue               ,\n  inst              ,\n  nativeEvent                ,\n  target                    ,\n) {\n  // Flag this event loop as needing state restore.\n  enqueueStateRestore(((target     )      ));\n  const listeners = accumulateTwoPhaseListeners(inst, 'onChange');\n  if (listeners.length > 0) {\n    const event                      = new SyntheticEvent(\n      'onChange',\n      'change',\n      null,\n      nativeEvent,\n      target,\n    );\n    dispatchQueue.push({event, listeners});\n  }\n}\n/**\n * For IE shims\n */\nlet activeElement = null;\nlet activeElementInst = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem                         ) {\n  const nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return (\n    nodeName === 'select' ||\n    (nodeName === 'input' && (elem     ).type === 'file')\n  );\n}\n\nfunction manualDispatchChangeEvent(nativeEvent                ) {\n  const dispatchQueue                = [];\n  createAndAccumulateChangeEvent(\n    dispatchQueue,\n    activeElementInst,\n    nativeEvent,\n    getEventTarget(nativeEvent),\n  );\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  batchedUpdates(runEventInBatch, dispatchQueue);\n}\n\nfunction runEventInBatch(dispatchQueue               ) {\n  processDispatchQueue(dispatchQueue, 0);\n}\n\nfunction getInstIfValueChanged(targetInst        ) {\n  const targetNode = getNodeFromInstance(targetInst);\n  if (updateValueIfChanged(((targetNode     )                  ))) {\n    return targetInst;\n  }\n}\n\nfunction getTargetInstForChangeEvent(\n  domEventName              ,\n  targetInst              ,\n) {\n  if (domEventName === 'change') {\n    return targetInst;\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nlet isInputEventSupported = false;\nif (canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events.\n  isInputEventSupported =\n    isEventSupported('input') &&\n    (!document.documentMode || document.documentMode > 9);\n}\n\n/**\n * (For IE <=9) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(\n  target                         ,\n  targetInst              ,\n) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  (activeElement     ).attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For IE <=9) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n  (activeElement     ).detachEvent('onpropertychange', handlePropertyChange);\n  activeElement = null;\n  activeElementInst = null;\n}\n\n/**\n * (For IE <=9) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\n// $FlowFixMe[missing-local-annot]\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  if (getInstIfValueChanged(activeElementInst)) {\n    manualDispatchChangeEvent(nativeEvent);\n  }\n}\n\nfunction handleEventsForInputEventPolyfill(\n  domEventName              ,\n  target                         ,\n  targetInst              ,\n) {\n  if (domEventName === 'focusin') {\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(target, targetInst);\n  } else if (domEventName === 'focusout') {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetInstForInputEventPolyfill(\n  domEventName              ,\n  targetInst              ,\n) {\n  if (\n    domEventName === 'selectionchange' ||\n    domEventName === 'keyup' ||\n    domEventName === 'keydown'\n  ) {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    return getInstIfValueChanged(activeElementInst);\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem     ) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  const nodeName = elem.nodeName;\n  return (\n    nodeName &&\n    nodeName.toLowerCase() === 'input' &&\n    (elem.type === 'checkbox' || elem.type === 'radio')\n  );\n}\n\nfunction getTargetInstForClickEvent(\n  domEventName              ,\n  targetInst              ,\n) {\n  if (domEventName === 'click') {\n    return getInstIfValueChanged(targetInst);\n  }\n}\n\nfunction getTargetInstForInputOrChangeEvent(\n  domEventName              ,\n  targetInst              ,\n) {\n  if (domEventName === 'input' || domEventName === 'change') {\n    return getInstIfValueChanged(targetInst);\n  }\n}\n\nfunction handleControlledInputBlur(node                  , props     ) {\n  if (node.type !== 'number') {\n    return;\n  }\n\n  if (!disableInputAttributeSyncing) {\n    const isControlled = props.value != null;\n    if (isControlled) {\n      // If controlled, assign the value attribute to the current value on blur\n      setDefaultValue((node     ), 'number', (node     ).value);\n    }\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nfunction extractEvents(\n  dispatchQueue               ,\n  domEventName              ,\n  targetInst              ,\n  nativeEvent                ,\n  nativeEventTarget                    ,\n  eventSystemFlags                  ,\n  targetContainer                    ,\n) {\n  const targetNode = targetInst ? getNodeFromInstance(targetInst) : window;\n\n  let getTargetInstFunc, handleEventFunc;\n  if (shouldUseChangeEvent(targetNode)) {\n    getTargetInstFunc = getTargetInstForChangeEvent;\n  } else if (isTextInputElement(((targetNode     )             ))) {\n    if (isInputEventSupported) {\n      getTargetInstFunc = getTargetInstForInputOrChangeEvent;\n    } else {\n      getTargetInstFunc = getTargetInstForInputEventPolyfill;\n      handleEventFunc = handleEventsForInputEventPolyfill;\n    }\n  } else if (shouldUseClickEvent(targetNode)) {\n    getTargetInstFunc = getTargetInstForClickEvent;\n  } else if (\n    targetInst &&\n    isCustomElement(targetInst.elementType, targetInst.memoizedProps)\n  ) {\n    getTargetInstFunc = getTargetInstForChangeEvent;\n  }\n\n  if (getTargetInstFunc) {\n    const inst = getTargetInstFunc(domEventName, targetInst);\n    if (inst) {\n      createAndAccumulateChangeEvent(\n        dispatchQueue,\n        inst,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      return;\n    }\n  }\n\n  if (handleEventFunc) {\n    handleEventFunc(domEventName, targetNode, targetInst);\n  }\n\n  // When blurring, set the value attribute for number inputs\n  if (domEventName === 'focusout' && targetInst) {\n    // These props aren't necessarily the most current but we warn for changing\n    // between controlled and uncontrolled, so it doesn't matter and the previous\n    // code was also broken for changes.\n    const props = targetInst.memoizedProps;\n    handleControlledInputBlur(((targetNode     )                  ), props);\n  }\n}\n\nexport {registerEvents, extractEvents};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                        \n                                                   \n                                                           \n                                                          \n                                                                   \n                                                                         \n\nimport {registerDirectEvent} from '../EventRegistry';\nimport {isReplayingEvent} from '../CurrentReplayingEvent';\nimport {SyntheticMouseEvent, SyntheticPointerEvent} from '../SyntheticEvent';\nimport {\n  getClosestInstanceFromNode,\n  getNodeFromInstance,\n  isContainerMarkedAsRoot,\n} from '../../client/ReactDOMComponentTree';\nimport {accumulateEnterLeaveTwoPhaseListeners} from '../DOMPluginEventSystem';\n\nimport {\n  HostComponent,\n  HostSingleton,\n  HostText,\n} from 'react-reconciler/src/ReactWorkTags';\nimport {getNearestMountedFiber} from 'react-reconciler/src/ReactFiberTreeReflection';\n\nfunction registerEvents() {\n  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);\n  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);\n  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);\n  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);\n}\n\n/**\n * For almost every interaction we care about, there will be both a top-level\n * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n * we do not extract duplicate events. However, moving the mouse into the\n * browser from outside will not fire a `mouseout` event. In this case, we use\n * the `mouseover` top-level event.\n */\nfunction extractEvents(\n  dispatchQueue               ,\n  domEventName              ,\n  targetInst              ,\n  nativeEvent                ,\n  nativeEventTarget                    ,\n  eventSystemFlags                  ,\n  targetContainer             ,\n) {\n  const isOverEvent =\n    domEventName === 'mouseover' || domEventName === 'pointerover';\n  const isOutEvent =\n    domEventName === 'mouseout' || domEventName === 'pointerout';\n\n  if (isOverEvent && !isReplayingEvent(nativeEvent)) {\n    // If this is an over event with a target, we might have already dispatched\n    // the event in the out event of the other target. If this is replayed,\n    // then it's because we couldn't dispatch against this target previously\n    // so we have to do it now instead.\n    const related =\n      (nativeEvent     ).relatedTarget || (nativeEvent     ).fromElement;\n    if (related) {\n      // If the related node is managed by React, we can assume that we have\n      // already dispatched the corresponding events during its mouseout.\n      if (\n        getClosestInstanceFromNode(related) ||\n        isContainerMarkedAsRoot(related)\n      ) {\n        return;\n      }\n    }\n  }\n\n  if (!isOutEvent && !isOverEvent) {\n    // Must not be a mouse or pointer in or out - ignoring.\n    return;\n  }\n\n  let win;\n  // TODO: why is this nullable in the types but we read from it?\n  if ((nativeEventTarget     ).window === nativeEventTarget) {\n    // `nativeEventTarget` is probably a window object.\n    win = nativeEventTarget;\n  } else {\n    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n    const doc = (nativeEventTarget     ).ownerDocument;\n    if (doc) {\n      win = doc.defaultView || doc.parentWindow;\n    } else {\n      win = window;\n    }\n  }\n\n  let from;\n  let to;\n  if (isOutEvent) {\n    const related = nativeEvent.relatedTarget || (nativeEvent     ).toElement;\n    from = targetInst;\n    to = related ? getClosestInstanceFromNode((related     )) : null;\n    if (to !== null) {\n      const nearestMounted = getNearestMountedFiber(to);\n      const tag = to.tag;\n      if (\n        to !== nearestMounted ||\n        (tag !== HostComponent && tag !== HostSingleton && tag !== HostText)\n      ) {\n        to = null;\n      }\n    }\n  } else {\n    // Moving to a node from outside the window.\n    from = null;\n    to = targetInst;\n  }\n\n  if (from === to) {\n    // Nothing pertains to our managed components.\n    return;\n  }\n\n  let SyntheticEventCtor = SyntheticMouseEvent;\n  let leaveEventType = 'onMouseLeave';\n  let enterEventType = 'onMouseEnter';\n  let eventTypePrefix = 'mouse';\n  if (domEventName === 'pointerout' || domEventName === 'pointerover') {\n    SyntheticEventCtor = SyntheticPointerEvent;\n    leaveEventType = 'onPointerLeave';\n    enterEventType = 'onPointerEnter';\n    eventTypePrefix = 'pointer';\n  }\n\n  const fromNode = from == null ? win : getNodeFromInstance(from);\n  const toNode = to == null ? win : getNodeFromInstance(to);\n\n  const leave                           = new SyntheticEventCtor(\n    leaveEventType,\n    eventTypePrefix + 'leave',\n    from,\n    nativeEvent,\n    nativeEventTarget,\n  );\n  leave.target = fromNode;\n  leave.relatedTarget = toNode;\n\n  let enter                                  = null;\n\n  // We should only process this nativeEvent if we are processing\n  // the first ancestor. Next time, we will ignore the event.\n  const nativeTargetInst = getClosestInstanceFromNode((nativeEventTarget     ));\n  if (nativeTargetInst === targetInst) {\n    const enterEvent                           = new SyntheticEventCtor(\n      enterEventType,\n      eventTypePrefix + 'enter',\n      to,\n      nativeEvent,\n      nativeEventTarget,\n    );\n    enterEvent.target = toNode;\n    enterEvent.relatedTarget = fromNode;\n    enter = enterEvent;\n  }\n\n  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);\n}\n\nexport {registerEvents, extractEvents};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport getActiveElement from './getActiveElement';\n\nimport {getOffsets, setOffsets} from './ReactDOMSelection';\nimport {ELEMENT_NODE, TEXT_NODE} from './HTMLNodeType';\n\nfunction isTextNode(node) {\n  return node && node.nodeType === TEXT_NODE;\n}\n\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if ('contains' in outerNode) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nfunction isInDocument(node) {\n  return (\n    node &&\n    node.ownerDocument &&\n    containsNode(node.ownerDocument.documentElement, node)\n  );\n}\n\nfunction isSameOriginFrame(iframe) {\n  try {\n    // Accessing the contentDocument of a HTMLIframeElement can cause the browser\n    // to throw, e.g. if it has a cross-origin src attribute.\n    // Safari will show an error in the console when the access results in \"Blocked a frame with origin\". e.g:\n    // iframe.contentDocument.defaultView;\n    // A safety way is to access one of the cross origin properties: Window or Location\n    // Which might result in \"SecurityError\" DOM Exception and it is compatible to Safari.\n    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl\n\n    return typeof iframe.contentWindow.location.href === 'string';\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction getActiveElementDeep(containerInfo) {\n  let win =\n    containerInfo != null &&\n    containerInfo.ownerDocument != null &&\n    containerInfo.ownerDocument.defaultView != null\n      ? containerInfo.ownerDocument.defaultView\n      : window;\n  let element = getActiveElement(win.document);\n  while (element instanceof win.HTMLIFrameElement) {\n    if (isSameOriginFrame(element)) {\n      win = element.contentWindow;\n    } else {\n      return element;\n    }\n    element = getActiveElement(win.document);\n  }\n  return element;\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\n\n/**\n * @hasSelectionCapabilities: we get the element types that support selection\n * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`\n * and `selectionEnd` rows.\n */\nexport function hasSelectionCapabilities(elem) {\n  const nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n  return (\n    nodeName &&\n    ((nodeName === 'input' &&\n      (elem.type === 'text' ||\n        elem.type === 'search' ||\n        elem.type === 'tel' ||\n        elem.type === 'url' ||\n        elem.type === 'password')) ||\n      nodeName === 'textarea' ||\n      elem.contentEditable === 'true')\n  );\n}\n\nexport function getSelectionInformation(containerInfo) {\n  const focusedElem = getActiveElementDeep(containerInfo);\n  return {\n    focusedElem: focusedElem,\n    selectionRange: hasSelectionCapabilities(focusedElem)\n      ? getSelection(focusedElem)\n      : null,\n  };\n}\n\n/**\n * @restoreSelection: If any selection information was potentially lost,\n * restore it. This is useful when performing operations that could remove dom\n * nodes and place them back in, resulting in focus being lost.\n */\nexport function restoreSelection(priorSelectionInformation, containerInfo) {\n  const curFocusedElem = getActiveElementDeep(containerInfo);\n  const priorFocusedElem = priorSelectionInformation.focusedElem;\n  const priorSelectionRange = priorSelectionInformation.selectionRange;\n  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n    if (\n      priorSelectionRange !== null &&\n      hasSelectionCapabilities(priorFocusedElem)\n    ) {\n      setSelection(priorFocusedElem, priorSelectionRange);\n    }\n\n    // Focusing a node can change the scroll position, which is undesirable\n    const ancestors = [];\n    let ancestor = priorFocusedElem;\n    while ((ancestor = ancestor.parentNode)) {\n      if (ancestor.nodeType === ELEMENT_NODE) {\n        ancestors.push({\n          element: ancestor,\n          left: ancestor.scrollLeft,\n          top: ancestor.scrollTop,\n        });\n      }\n    }\n\n    if (typeof priorFocusedElem.focus === 'function') {\n      priorFocusedElem.focus();\n    }\n\n    for (let i = 0; i < ancestors.length; i++) {\n      const info = ancestors[i];\n      info.element.scrollLeft = info.left;\n      info.element.scrollTop = info.top;\n    }\n  }\n}\n\n/**\n * @getSelection: Gets the selection bounds of a focused textarea, input or\n * contentEditable node.\n * -@input: Look up selection bounds of this input\n * -@return {start: selectionStart, end: selectionEnd}\n */\nexport function getSelection(input) {\n  let selection;\n\n  if ('selectionStart' in input) {\n    // Modern browser with input or textarea.\n    selection = {\n      start: input.selectionStart,\n      end: input.selectionEnd,\n    };\n  } else {\n    // Content editable or old IE textarea.\n    selection = getOffsets(input);\n  }\n\n  return selection || {start: 0, end: 0};\n}\n\n/**\n * @setSelection: Sets the selection bounds of a textarea or input and focuses\n * the input.\n * -@input     Set selection bounds of this input or textarea\n * -@offsets   Object of same form that is returned from get*\n */\nexport function setSelection(input, offsets) {\n  const start = offsets.start;\n  let end = offsets.end;\n  if (end === undefined) {\n    end = start;\n  }\n\n  if ('selectionStart' in input) {\n    input.selectionStart = start;\n    input.selectionEnd = Math.min(end, input.value.length);\n  } else {\n    setOffsets(input, offsets);\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                        \n                                                   \n                                                           \n                                                          \n                                                                   \n                                                                    \n\nimport {canUseDOM} from 'shared/ExecutionEnvironment';\nimport {SyntheticEvent} from '../../events/SyntheticEvent';\nimport isTextInputElement from '../isTextInputElement';\nimport shallowEqual from 'shared/shallowEqual';\n\nimport {registerTwoPhaseEvent} from '../EventRegistry';\nimport getActiveElement from '../../client/getActiveElement';\nimport {getNodeFromInstance} from '../../client/ReactDOMComponentTree';\nimport {hasSelectionCapabilities} from '../../client/ReactInputSelection';\nimport {DOCUMENT_NODE} from '../../client/HTMLNodeType';\nimport {accumulateTwoPhaseListeners} from '../DOMPluginEventSystem';\n\nconst skipSelectionChangeEvent =\n  canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nfunction registerEvents() {\n  registerTwoPhaseEvent('onSelect', [\n    'focusout',\n    'contextmenu',\n    'dragend',\n    'focusin',\n    'keydown',\n    'keyup',\n    'mousedown',\n    'mouseup',\n    'selectionchange',\n  ]);\n}\n\nlet activeElement = null;\nlet activeElementInst = null;\nlet lastSelection = null;\nlet mouseDown = false;\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n */\nfunction getSelection(node     ) {\n  if ('selectionStart' in node && hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd,\n    };\n  } else {\n    const win =\n      (node.ownerDocument && node.ownerDocument.defaultView) || window;\n    const selection = win.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset,\n    };\n  }\n}\n\n/**\n * Get document associated with the event target.\n */\nfunction getEventTargetDocument(eventTarget     ) {\n  return eventTarget.window === eventTarget\n    ? eventTarget.document\n    : eventTarget.nodeType === DOCUMENT_NODE\n      ? eventTarget\n      : eventTarget.ownerDocument;\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @param {object} nativeEventTarget\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(\n  dispatchQueue               ,\n  nativeEvent                ,\n  nativeEventTarget                    ,\n) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  const doc = getEventTargetDocument(nativeEventTarget);\n\n  if (\n    mouseDown ||\n    activeElement == null ||\n    activeElement !== getActiveElement(doc)\n  ) {\n    return;\n  }\n\n  // Only fire when selection has actually changed.\n  const currentSelection = getSelection(activeElement);\n  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    const listeners = accumulateTwoPhaseListeners(\n      activeElementInst,\n      'onSelect',\n    );\n    if (listeners.length > 0) {\n      const event                      = new SyntheticEvent(\n        'onSelect',\n        'select',\n        null,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      dispatchQueue.push({event, listeners});\n      event.target = activeElement;\n    }\n  }\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nfunction extractEvents(\n  dispatchQueue               ,\n  domEventName              ,\n  targetInst              ,\n  nativeEvent                ,\n  nativeEventTarget                    ,\n  eventSystemFlags                  ,\n  targetContainer             ,\n) {\n  const targetNode = targetInst ? getNodeFromInstance(targetInst) : window;\n\n  switch (domEventName) {\n    // Track the input node that has focus.\n    case 'focusin':\n      if (\n        isTextInputElement((targetNode     )) ||\n        targetNode.contentEditable === 'true'\n      ) {\n        activeElement = targetNode;\n        activeElementInst = targetInst;\n        lastSelection = null;\n      }\n      break;\n    case 'focusout':\n      activeElement = null;\n      activeElementInst = null;\n      lastSelection = null;\n      break;\n    // Don't fire the event while the user is dragging. This matches the\n    // semantics of the native select event.\n    case 'mousedown':\n      mouseDown = true;\n      break;\n    case 'contextmenu':\n    case 'mouseup':\n    case 'dragend':\n      mouseDown = false;\n      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);\n      break;\n    // Chrome and IE fire non-standard event when selection is changed (and\n    // sometimes when it hasn't). IE's event fires out of order with respect\n    // to key and input events on deletion, so we discard it.\n    //\n    // Firefox doesn't support selectionchange, so check selection status\n    // after each key entry. The selection changes after keydown and before\n    // keyup, but we check on keydown as well in the case of holding down a\n    // key, when multiple keydown events are fired but only one keyup is.\n    // This is also our approach for IE handling, for the reason above.\n    case 'selectionchange':\n      if (skipSelectionChangeEvent) {\n        break;\n      }\n    // falls through\n    case 'keydown':\n    case 'keyup':\n      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);\n  }\n}\n\nexport {registerEvents, extractEvents};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {canUseDOM} from 'shared/ExecutionEnvironment';\n\n/**\n * Generate a mapping of standard vendor prefixes using the defined style property and event name.\n *\n * @param {string} styleProp\n * @param {string} eventName\n * @returns {object}\n */\nfunction makePrefixMap(styleProp, eventName) {\n  const prefixes = {};\n\n  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();\n  prefixes['Webkit' + styleProp] = 'webkit' + eventName;\n  prefixes['Moz' + styleProp] = 'moz' + eventName;\n\n  return prefixes;\n}\n\n/**\n * A list of event names to a configurable list of vendor prefixes.\n */\nconst vendorPrefixes = {\n  animationend: makePrefixMap('Animation', 'AnimationEnd'),\n  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),\n  animationstart: makePrefixMap('Animation', 'AnimationStart'),\n  transitionrun: makePrefixMap('Transition', 'TransitionRun'),\n  transitionstart: makePrefixMap('Transition', 'TransitionStart'),\n  transitioncancel: makePrefixMap('Transition', 'TransitionCancel'),\n  transitionend: makePrefixMap('Transition', 'TransitionEnd'),\n};\n\n/**\n * Event names that have already been detected and prefixed (if applicable).\n */\nconst prefixedEventNames = {};\n\n/**\n * Element to check for prefixes on.\n */\nlet style = {};\n\n/**\n * Bootstrap if a DOM exists.\n */\nif (canUseDOM) {\n  style = document.createElement('div').style;\n\n  // On some platforms, in particular some releases of Android 4.x,\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the\n  // style object but the events that fire will still be prefixed, so we need\n  // to check if the un-prefixed events are usable, and if not remove them from the map.\n  if (!('AnimationEvent' in window)) {\n    delete vendorPrefixes.animationend.animation;\n    delete vendorPrefixes.animationiteration.animation;\n    delete vendorPrefixes.animationstart.animation;\n  }\n\n  // Same as above\n  if (!('TransitionEvent' in window)) {\n    delete vendorPrefixes.transitionend.transition;\n  }\n}\n\n/**\n * Attempts to determine the correct vendor prefixed event name.\n *\n * @param {string} eventName\n * @returns {string}\n */\nfunction getVendorPrefixedEventName(eventName) {\n  if (prefixedEventNames[eventName]) {\n    return prefixedEventNames[eventName];\n  } else if (!vendorPrefixes[eventName]) {\n    return eventName;\n  }\n\n  const prefixMap = vendorPrefixes[eventName];\n\n  for (const styleProp in prefixMap) {\n    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {\n      return (prefixedEventNames[eventName] = prefixMap[styleProp]);\n    }\n  }\n\n  return eventName;\n}\n\nexport default getVendorPrefixedEventName;\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport getVendorPrefixedEventName from './getVendorPrefixedEventName';\n\n                          \n           \n                                                                       \n                                                                                \n                           \n                    \n                       \n                                                                        \n                 \n                  \n          \n             \n                    \n            \n            \n           \n           \n                    \n                      \n                       \n                 \n          \n         \n              \n              \n          \n             \n               \n              \n               \n              \n               \n          \n                    \n             \n               \n           \n           \n           \n             \n              \n                      \n                       \n                \n           \n             \n             \n              \n           \n          \n               \n                \n                    \n                        \n             \n               \n                \n                \n               \n              \n               \n             \n           \n           \n          \n             \n                   \n                 \n                  \n                  \n                 \n                \n                 \n               \n              \n              \n                \n           \n            \n            \n               \n            \n             \n            \n                 \n                     \n             \n            \n             \n                                                         \n                \n            \n                 \n              \n               \n                \n                                                                                \n                      \n                        \n                         \n                      \n                  \n             \n            \n\nexport const ANIMATION_END               =\n  getVendorPrefixedEventName('animationend');\nexport const ANIMATION_ITERATION               =\n  getVendorPrefixedEventName('animationiteration');\nexport const ANIMATION_START               =\n  getVendorPrefixedEventName('animationstart');\n\nexport const TRANSITION_RUN               =\n  getVendorPrefixedEventName('transitionrun');\nexport const TRANSITION_START               =\n  getVendorPrefixedEventName('transitionstart');\nexport const TRANSITION_CANCEL               =\n  getVendorPrefixedEventName('transitioncancel');\nexport const TRANSITION_END               =\n  getVendorPrefixedEventName('transitionend');\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                  \n\nimport {registerTwoPhaseEvent} from './EventRegistry';\nimport {\n  ANIMATION_END,\n  ANIMATION_ITERATION,\n  ANIMATION_START,\n  TRANSITION_RUN,\n  TRANSITION_START,\n  TRANSITION_CANCEL,\n  TRANSITION_END,\n} from './DOMEventNames';\n\nimport {\n  enableCreateEventHandleAPI,\n  enableScrollEndPolyfill,\n} from 'shared/ReactFeatureFlags';\n\nexport const topLevelEventsToReactNames                                   =\n  new Map();\n\n// NOTE: Capitalization is important in this list!\n//\n// E.g. it needs \"pointerDown\", not \"pointerdown\".\n// This is because we derive both React name (\"onPointerDown\")\n// and DOM name (\"pointerdown\") from the same list.\n//\n// Exceptions that don't match this convention are listed separately.\n//\n// prettier-ignore\nconst simpleEventPluginEvents = [\n  'abort',\n  'auxClick',\n  'beforeToggle',\n  'cancel',\n  'canPlay',\n  'canPlayThrough',\n  'click',\n  'close',\n  'contextMenu',\n  'copy',\n  'cut',\n  'drag',\n  'dragEnd',\n  'dragEnter',\n  'dragExit',\n  'dragLeave',\n  'dragOver',\n  'dragStart',\n  'drop',\n  'durationChange',\n  'emptied',\n  'encrypted',\n  'ended',\n  'error',\n  'gotPointerCapture',\n  'input',\n  'invalid',\n  'keyDown',\n  'keyPress',\n  'keyUp',\n  'load',\n  'loadedData',\n  'loadedMetadata',\n  'loadStart',\n  'lostPointerCapture',\n  'mouseDown',\n  'mouseMove',\n  'mouseOut',\n  'mouseOver',\n  'mouseUp',\n  'paste',\n  'pause',\n  'play',\n  'playing',\n  'pointerCancel',\n  'pointerDown',\n  'pointerMove',\n  'pointerOut',\n  'pointerOver',\n  'pointerUp',\n  'progress',\n  'rateChange',\n  'reset',\n  'resize',\n  'seeked',\n  'seeking',\n  'stalled',\n  'submit',\n  'suspend',\n  'timeUpdate',\n  'touchCancel',\n  'touchEnd',\n  'touchStart',\n  'volumeChange',\n  'scroll',\n  'toggle',\n  'touchMove',\n  'waiting',\n  'wheel',\n];\n\nif (!enableScrollEndPolyfill) {\n  simpleEventPluginEvents.push('scrollEnd');\n}\n\nif (enableCreateEventHandleAPI) {\n  // Special case: these two events don't have on* React handler\n  // and are only accessible via the createEventHandle API.\n  topLevelEventsToReactNames.set('beforeblur', null);\n  topLevelEventsToReactNames.set('afterblur', null);\n}\n\nfunction registerSimpleEvent(domEventName              , reactName        ) {\n  topLevelEventsToReactNames.set(domEventName, reactName);\n  registerTwoPhaseEvent(reactName, [domEventName]);\n}\n\nexport function registerSimpleEvents() {\n  for (let i = 0; i < simpleEventPluginEvents.length; i++) {\n    const eventName = ((simpleEventPluginEvents[i]     )        );\n    const domEventName = ((eventName.toLowerCase()     )              );\n    const capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);\n    registerSimpleEvent(domEventName, 'on' + capitalizedEvent);\n  }\n  // Special cases where event names don't match.\n  registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');\n  registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');\n  registerSimpleEvent(ANIMATION_START, 'onAnimationStart');\n  registerSimpleEvent('dblclick', 'onDoubleClick');\n  registerSimpleEvent('focusin', 'onFocus');\n  registerSimpleEvent('focusout', 'onBlur');\n\n  registerSimpleEvent(TRANSITION_RUN, 'onTransitionRun');\n  registerSimpleEvent(TRANSITION_START, 'onTransitionStart');\n  registerSimpleEvent(TRANSITION_CANCEL, 'onTransitionCancel');\n  registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                             \n                                                                   \n                                                                  \n                                                           \n                                                          \n                                                                    \n\nimport {\n  SyntheticEvent,\n  SyntheticKeyboardEvent,\n  SyntheticFocusEvent,\n  SyntheticMouseEvent,\n  SyntheticDragEvent,\n  SyntheticTouchEvent,\n  SyntheticAnimationEvent,\n  SyntheticTransitionEvent,\n  SyntheticUIEvent,\n  SyntheticWheelEvent,\n  SyntheticClipboardEvent,\n  SyntheticPointerEvent,\n  SyntheticToggleEvent,\n} from '../../events/SyntheticEvent';\n\nimport {\n  ANIMATION_END,\n  ANIMATION_ITERATION,\n  ANIMATION_START,\n  TRANSITION_END,\n} from '../DOMEventNames';\nimport {\n  topLevelEventsToReactNames,\n  registerSimpleEvents,\n} from '../DOMEventProperties';\nimport {\n  accumulateSinglePhaseListeners,\n  accumulateEventHandleNonManagedNodeListeners,\n} from '../DOMPluginEventSystem';\nimport {\n  IS_EVENT_HANDLE_NON_MANAGED_NODE,\n  IS_CAPTURE_PHASE,\n} from '../EventSystemFlags';\n\nimport getEventCharCode from '../getEventCharCode';\n\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\n\nfunction extractEvents(\n  dispatchQueue               ,\n  domEventName              ,\n  targetInst              ,\n  nativeEvent                ,\n  nativeEventTarget                    ,\n  eventSystemFlags                  ,\n  targetContainer             ,\n)       {\n  const reactName = topLevelEventsToReactNames.get(domEventName);\n  if (reactName === undefined) {\n    return;\n  }\n  let SyntheticEventCtor = SyntheticEvent;\n  let reactEventType         = domEventName;\n  switch (domEventName) {\n    case 'keypress':\n      // Firefox creates a keypress event for function keys too. This removes\n      // the unwanted keypress events. Enter is however both printable and\n      // non-printable. One would expect Tab to be as well (but it isn't).\n      // TODO: Fixed in https://bugzilla.mozilla.org/show_bug.cgi?id=968056. Can\n      // probably remove.\n      if (getEventCharCode(((nativeEvent     )               )) === 0) {\n        return;\n      }\n    /* falls through */\n    case 'keydown':\n    case 'keyup':\n      SyntheticEventCtor = SyntheticKeyboardEvent;\n      break;\n    case 'focusin':\n      reactEventType = 'focus';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n    case 'focusout':\n      reactEventType = 'blur';\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n    case 'beforeblur':\n    case 'afterblur':\n      SyntheticEventCtor = SyntheticFocusEvent;\n      break;\n    case 'click':\n      // Firefox creates a click event on right mouse clicks. This removes the\n      // unwanted click events.\n      // TODO: Fixed in https://phabricator.services.mozilla.com/D26793. Can\n      // probably remove.\n      if (nativeEvent.button === 2) {\n        return;\n      }\n    /* falls through */\n    case 'auxclick':\n    case 'dblclick':\n    case 'mousedown':\n    case 'mousemove':\n    case 'mouseup':\n    // TODO: Disabled elements should not respond to mouse events\n    /* falls through */\n    case 'mouseout':\n    case 'mouseover':\n    case 'contextmenu':\n      SyntheticEventCtor = SyntheticMouseEvent;\n      break;\n    case 'drag':\n    case 'dragend':\n    case 'dragenter':\n    case 'dragexit':\n    case 'dragleave':\n    case 'dragover':\n    case 'dragstart':\n    case 'drop':\n      SyntheticEventCtor = SyntheticDragEvent;\n      break;\n    case 'touchcancel':\n    case 'touchend':\n    case 'touchmove':\n    case 'touchstart':\n      SyntheticEventCtor = SyntheticTouchEvent;\n      break;\n    case ANIMATION_END:\n    case ANIMATION_ITERATION:\n    case ANIMATION_START:\n      SyntheticEventCtor = SyntheticAnimationEvent;\n      break;\n    case TRANSITION_END:\n      SyntheticEventCtor = SyntheticTransitionEvent;\n      break;\n    case 'scroll':\n    case 'scrollend':\n      SyntheticEventCtor = SyntheticUIEvent;\n      break;\n    case 'wheel':\n      SyntheticEventCtor = SyntheticWheelEvent;\n      break;\n    case 'copy':\n    case 'cut':\n    case 'paste':\n      SyntheticEventCtor = SyntheticClipboardEvent;\n      break;\n    case 'gotpointercapture':\n    case 'lostpointercapture':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'pointerup':\n      SyntheticEventCtor = SyntheticPointerEvent;\n      break;\n    case 'toggle':\n    case 'beforetoggle':\n      // MDN claims <details> should not receive ToggleEvent contradicting the spec: https://html.spec.whatwg.org/multipage/indices.html#event-toggle\n      SyntheticEventCtor = SyntheticToggleEvent;\n      break;\n    default:\n      // Unknown event. This is used by createEventHandle.\n      break;\n  }\n\n  const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n  if (\n    enableCreateEventHandleAPI &&\n    eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE\n  ) {\n    const listeners = accumulateEventHandleNonManagedNodeListeners(\n      // TODO: this cast may not make sense for events like\n      // \"focus\" where React listens to e.g. \"focusin\".\n      ((reactEventType     )              ),\n      targetContainer,\n      inCapturePhase,\n    );\n    if (listeners.length > 0) {\n      // Intentionally create event lazily.\n      const event                      = new SyntheticEventCtor(\n        reactName,\n        reactEventType,\n        null,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      dispatchQueue.push({event, listeners});\n    }\n  } else {\n    // Some events don't bubble in the browser.\n    // In the past, React has always bubbled them, but this can be surprising.\n    // We're going to try aligning closer to the browser behavior by not bubbling\n    // them in React either. We'll start by not bubbling onScroll, and then expand.\n    const accumulateTargetOnly =\n      !inCapturePhase &&\n      // TODO: ideally, we'd eventually add all events from\n      // nonDelegatedEvents list in DOMPluginEventSystem.\n      // Then we can remove this special list.\n      // This is a breaking change that can wait until React 18.\n      (domEventName === 'scroll' || domEventName === 'scrollend');\n\n    const listeners = accumulateSinglePhaseListeners(\n      targetInst,\n      reactName,\n      nativeEvent.type,\n      inCapturePhase,\n      accumulateTargetOnly,\n      nativeEvent,\n    );\n    if (listeners.length > 0) {\n      // Intentionally create event lazily.\n      const event                      = new SyntheticEventCtor(\n        reactName,\n        reactEventType,\n        null,\n        nativeEvent,\n        nativeEventTarget,\n      );\n      dispatchQueue.push({event, listeners});\n    }\n  }\n}\n\nexport {registerSimpleEvents as registerEvents, extractEvents};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                        \n                                                   \n                                                           \n                                                          \n                                                                   \n                                                                                  \n\nimport {enableTrustedTypesIntegration} from 'shared/ReactFeatureFlags';\nimport {getFiberCurrentPropsFromNode} from '../../client/ReactDOMComponentTree';\nimport {startHostTransition} from 'react-reconciler/src/ReactFiberReconciler';\nimport {didCurrentEventScheduleTransition} from 'react-reconciler/src/ReactFiberRootScheduler';\nimport sanitizeURL from 'react-dom-bindings/src/shared/sanitizeURL';\nimport {checkAttributeStringCoercion} from 'shared/CheckStringCoercion';\n\nimport {SyntheticEvent} from '../SyntheticEvent';\n\nfunction coerceFormActionProp(\n  actionProp       ,\n)                                                     {\n  // This should match the logic in ReactDOMComponent\n  if (\n    actionProp == null ||\n    typeof actionProp === 'symbol' ||\n    typeof actionProp === 'boolean'\n  ) {\n    return null;\n  } else if (typeof actionProp === 'function') {\n    return (actionProp     );\n  } else {\n    if (__DEV__) {\n      checkAttributeStringCoercion(actionProp, 'action');\n    }\n    return (sanitizeURL(\n      enableTrustedTypesIntegration ? actionProp : '' + (actionProp     ),\n    )     );\n  }\n}\n\nfunction createFormDataWithSubmitter(\n  form                 ,\n  submitter                                      ,\n) {\n  // The submitter's value should be included in the FormData.\n  // It should be in the document order in the form.\n  // Since the FormData constructor invokes the formdata event it also\n  // needs to be available before that happens so after construction it's too\n  // late. We use a temporary fake node for the duration of this event.\n  // TODO: FormData takes a second argument that it's the submitter but this\n  // is fairly new so not all browsers support it yet. Switch to that technique\n  // when available.\n  const temp = submitter.ownerDocument.createElement('input');\n  temp.name = submitter.name;\n  temp.value = submitter.value;\n  if (form.id) {\n    temp.setAttribute('form', form.id);\n  }\n  (submitter.parentNode     ).insertBefore(temp, submitter);\n  const formData = new FormData(form);\n  (temp.parentNode     ).removeChild(temp);\n  return formData;\n}\n\n/**\n * This plugin invokes action functions on forms, inputs and buttons if\n * the form doesn't prevent default.\n */\nfunction extractEvents(\n  dispatchQueue               ,\n  domEventName              ,\n  maybeTargetInst              ,\n  nativeEvent                ,\n  nativeEventTarget                    ,\n  eventSystemFlags                  ,\n  targetContainer             ,\n) {\n  if (domEventName !== 'submit') {\n    return;\n  }\n  if (!maybeTargetInst || maybeTargetInst.stateNode !== nativeEventTarget) {\n    // If we're inside a parent root that itself is a parent of this root, then\n    // its deepest target won't be the actual form that's being submitted.\n    return;\n  }\n  const formInst = maybeTargetInst;\n  const form                  = (nativeEventTarget     );\n  let action = coerceFormActionProp(\n    (getFiberCurrentPropsFromNode(form)     ).action,\n  );\n  let submitter                                                     =\n    (nativeEvent     ).submitter;\n  let submitterAction;\n  if (submitter) {\n    const submitterProps = getFiberCurrentPropsFromNode(submitter);\n    submitterAction = submitterProps\n      ? coerceFormActionProp((submitterProps     ).formAction)\n      : // The built-in Flow type is ?string, wider than the spec\n        ((submitter.getAttribute('formAction')     )               );\n    if (submitterAction !== null) {\n      // The submitter overrides the form action.\n      action = submitterAction;\n      // If the action is a function, we don't want to pass its name\n      // value to the FormData since it's controlled by the server.\n      submitter = null;\n    }\n  }\n\n  const event = new SyntheticEvent(\n    'action',\n    'action',\n    null,\n    nativeEvent,\n    nativeEventTarget,\n  );\n\n  function submitForm() {\n    if (nativeEvent.defaultPrevented) {\n      // An earlier event prevented form submission. If a transition update was\n      // also scheduled, we should trigger a pending form status \u2014 even if\n      // no action function was provided.\n      if (didCurrentEventScheduleTransition()) {\n        // We're going to set the pending form status, but because the submission\n        // was prevented, we should not fire the action function.\n        const formData = submitter\n          ? createFormDataWithSubmitter(form, submitter)\n          : new FormData(form);\n        const pendingState             = {\n          pending: true,\n          data: formData,\n          method: form.method,\n          action: action,\n        };\n        if (__DEV__) {\n          Object.freeze(pendingState);\n        }\n        startHostTransition(\n          formInst,\n          pendingState,\n          // Pass `null` as the action\n          // TODO: Consider splitting up startHostTransition into two separate\n          // functions, one that sets the form status and one that invokes\n          // the action.\n          null,\n          formData,\n        );\n      } else {\n        // No earlier event scheduled a transition. Exit without setting a\n        // pending form status.\n      }\n    } else if (typeof action === 'function') {\n      // A form action was provided. Prevent native navigation.\n      event.preventDefault();\n\n      // Dispatch the action and set a pending form status.\n      const formData = submitter\n        ? createFormDataWithSubmitter(form, submitter)\n        : new FormData(form);\n      const pendingState             = {\n        pending: true,\n        data: formData,\n        method: form.method,\n        action: action,\n      };\n      if (__DEV__) {\n        Object.freeze(pendingState);\n      }\n      startHostTransition(formInst, pendingState, action, formData);\n    } else {\n      // No earlier event prevented the default submission, and no action was\n      // provided. Exit without setting a pending form status.\n    }\n  }\n\n  dispatchQueue.push({\n    event,\n    listeners: [\n      {\n        instance: null,\n        listener: submitForm,\n        currentTarget: form,\n      },\n    ],\n  });\n}\n\nexport {extractEvents};\n\nexport function dispatchReplayedFormAction(\n  formInst       ,\n  form                 ,\n  action                                  ,\n  formData          ,\n)       {\n  const pendingState             = {\n    pending: true,\n    data: formData,\n    method: form.method,\n    action: action,\n  };\n  if (__DEV__) {\n    Object.freeze(pendingState);\n  }\n  startHostTransition(formInst, pendingState, action, formData);\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n                                                        \n                                                   \n                                                           \n                                                          \n                                                                   \n                                                                    \n\nimport {registerTwoPhaseEvent} from '../EventRegistry';\nimport {SyntheticUIEvent} from '../SyntheticEvent';\n\nimport {canUseDOM} from 'shared/ExecutionEnvironment';\nimport isEventSupported from '../isEventSupported';\n\nimport {IS_CAPTURE_PHASE} from '../EventSystemFlags';\n\nimport {batchedUpdates} from '../ReactDOMUpdateBatching';\nimport {\n  processDispatchQueue,\n  accumulateSinglePhaseListeners,\n  accumulateTwoPhaseListeners,\n} from '../DOMPluginEventSystem';\n\nimport {\n  getScrollEndTimer,\n  setScrollEndTimer,\n  clearScrollEndTimer,\n} from '../../client/ReactDOMComponentTree';\n\nimport {enableScrollEndPolyfill} from 'shared/ReactFeatureFlags';\n\nconst isScrollEndEventSupported =\n  enableScrollEndPolyfill && canUseDOM && isEventSupported('scrollend');\n\nlet isTouchStarted = false;\nlet isMouseDown = false;\n\nfunction registerEvents() {\n  registerTwoPhaseEvent('onScrollEnd', [\n    'scroll',\n    'scrollend',\n    'touchstart',\n    'touchcancel',\n    'touchend',\n    'mousedown',\n    'mouseup',\n  ]);\n}\n\nfunction manualDispatchScrollEndEvent(\n  inst       ,\n  nativeEvent                ,\n  target             ,\n) {\n  const dispatchQueue                = [];\n  const listeners = accumulateTwoPhaseListeners(inst, 'onScrollEnd');\n  if (listeners.length > 0) {\n    const event                      = new SyntheticUIEvent(\n      'onScrollEnd',\n      'scrollend',\n      null,\n      nativeEvent, // This will be the \"scroll\" event.\n      target,\n    );\n    dispatchQueue.push({event, listeners});\n  }\n  batchedUpdates(runEventInBatch, dispatchQueue);\n}\n\nfunction runEventInBatch(dispatchQueue               ) {\n  processDispatchQueue(dispatchQueue, 0);\n}\n\nfunction fireScrollEnd(\n  targetInst       ,\n  nativeEvent                ,\n  nativeEventTarget             ,\n)       {\n  clearScrollEndTimer(nativeEventTarget);\n  if (isMouseDown || isTouchStarted) {\n    // If mouse or touch is down, try again later in case this is due to having an\n    // active scroll but it's not currently moving.\n    debounceScrollEnd(targetInst, nativeEvent, nativeEventTarget);\n    return;\n  }\n  manualDispatchScrollEndEvent(targetInst, nativeEvent, nativeEventTarget);\n}\n\n// When scrolling slows down the frequency of new scroll events can be quite low.\n// This timeout seems high enough to cover those cases but short enough to not\n// fire the event way too late.\nconst DEBOUNCE_TIMEOUT = 200;\n\nfunction debounceScrollEnd(\n  targetInst              ,\n  nativeEvent                ,\n  nativeEventTarget             ,\n) {\n  const existingTimer = getScrollEndTimer(nativeEventTarget);\n  if (existingTimer != null) {\n    clearTimeout(existingTimer);\n  }\n  if (targetInst !== null) {\n    const newTimer = setTimeout(\n      fireScrollEnd.bind(null, targetInst, nativeEvent, nativeEventTarget),\n      DEBOUNCE_TIMEOUT,\n    );\n    setScrollEndTimer(nativeEventTarget, newTimer);\n  }\n}\n\n/**\n * This plugin creates an `onScrollEnd` event polyfill when the native one\n * is not available.\n */\nfunction extractEvents(\n  dispatchQueue               ,\n  domEventName              ,\n  targetInst              ,\n  nativeEvent                ,\n  nativeEventTarget                    ,\n  eventSystemFlags                  ,\n  targetContainer                    ,\n) {\n  if (!enableScrollEndPolyfill) {\n    return;\n  }\n\n  const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n\n  if (domEventName !== 'scrollend') {\n    if (!isScrollEndEventSupported && inCapturePhase) {\n      switch (domEventName) {\n        case 'scroll': {\n          if (nativeEventTarget !== null) {\n            debounceScrollEnd(targetInst, nativeEvent, nativeEventTarget);\n          }\n          break;\n        }\n        case 'touchstart': {\n          isTouchStarted = true;\n          break;\n        }\n        case 'touchcancel':\n        case 'touchend': {\n          // Note we cannot use pointer events for this because they get\n          // cancelled when native scrolling takes control.\n          isTouchStarted = false;\n          break;\n        }\n        case 'mousedown': {\n          isMouseDown = true;\n          break;\n        }\n        case 'mouseup': {\n          isMouseDown = false;\n          break;\n        }\n      }\n    }\n    return;\n  }\n\n  if (!isScrollEndEventSupported && nativeEventTarget !== null) {\n    const existingTimer = getScrollEndTimer(nativeEventTarget);\n    if (existingTimer != null) {\n      // If we do get a native scrollend event fired, we cancel the polyfill.\n      // This could happen if our feature detection is broken or if there's another\n      // polyfill calling dispatchEvent to fire it before we fire ours.\n      clearTimeout(existingTimer);\n      clearScrollEndTimer(nativeEventTarget);\n    } else {\n      // If we didn't receive a 'scroll' event first, we ignore this event to avoid\n      // double firing. Such as if we fired our onScrollEnd polyfill and then\n      // we also observed a native one afterwards.\n      return;\n    }\n  }\n\n  // In React onScrollEnd doesn't bubble.\n  const accumulateTargetOnly = !inCapturePhase;\n\n  const listeners = accumulateSinglePhaseListeners(\n    targetInst,\n    'onScrollEnd',\n    'scrollend',\n    inCapturePhase,\n    accumulateTargetOnly,\n    nativeEvent,\n  );\n\n  if (listeners.length > 0) {\n    // Intentionally create event lazily.\n    const event                      = new SyntheticUIEvent(\n      'onScrollEnd',\n      'scrollend',\n      null,\n      nativeEvent,\n      nativeEventTarget,\n    );\n    dispatchQueue.push({event, listeners});\n  }\n}\n\nexport {registerEvents, extractEvents};\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                  \n                                                         \n                                                       \n             \n                           \n                      \n                                   \n                                                                   \n\nimport {allNativeEvents} from './EventRegistry';\nimport {\n  SHOULD_NOT_DEFER_CLICK_FOR_FB_SUPPORT_MODE,\n  IS_LEGACY_FB_SUPPORT_MODE,\n  SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS,\n  IS_CAPTURE_PHASE,\n  IS_EVENT_HANDLE_NON_MANAGED_NODE,\n  IS_NON_DELEGATED,\n} from './EventSystemFlags';\nimport {isReplayingEvent} from './CurrentReplayingEvent';\n\nimport {\n  HostRoot,\n  HostPortal,\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostText,\n  ScopeComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport {getLowestCommonAncestor} from 'react-reconciler/src/ReactFiberTreeReflection';\n\nimport getEventTarget from './getEventTarget';\nimport {\n  getClosestInstanceFromNode,\n  getEventListenerSet,\n  getEventHandlerListeners,\n} from '../client/ReactDOMComponentTree';\nimport {COMMENT_NODE, DOCUMENT_NODE} from '../client/HTMLNodeType';\nimport {batchedUpdates} from './ReactDOMUpdateBatching';\nimport getListener from './getListener';\nimport {passiveBrowserEventsSupported} from './checkPassiveEvents';\n\nimport {\n  enableLegacyFBSupport,\n  enableCreateEventHandleAPI,\n  enableScopeAPI,\n  disableCommentsAsDOMContainers,\n  enableScrollEndPolyfill,\n} from 'shared/ReactFeatureFlags';\nimport {createEventListenerWrapperWithPriority} from './ReactDOMEventListener';\nimport {\n  removeEventListener,\n  addEventCaptureListener,\n  addEventBubbleListener,\n  addEventBubbleListenerWithPassiveFlag,\n  addEventCaptureListenerWithPassiveFlag,\n} from './EventListener';\nimport * as BeforeInputEventPlugin from './plugins/BeforeInputEventPlugin';\nimport * as ChangeEventPlugin from './plugins/ChangeEventPlugin';\nimport * as EnterLeaveEventPlugin from './plugins/EnterLeaveEventPlugin';\nimport * as SelectEventPlugin from './plugins/SelectEventPlugin';\nimport * as SimpleEventPlugin from './plugins/SimpleEventPlugin';\nimport * as FormActionEventPlugin from './plugins/FormActionEventPlugin';\nimport * as ScrollEndEventPlugin from './plugins/ScrollEndEventPlugin';\n\nimport reportGlobalError from 'shared/reportGlobalError';\n\nimport {runWithFiberInDEV} from 'react-reconciler/src/ReactCurrentFiber';\n\n                         \n                         \n                     \n                             \n  \n\n                      \n                             \n                                     \n  \n\n                                                 \n\n// TODO: remove top-level side effect.\nSimpleEventPlugin.registerEvents();\nEnterLeaveEventPlugin.registerEvents();\nChangeEventPlugin.registerEvents();\nSelectEventPlugin.registerEvents();\nBeforeInputEventPlugin.registerEvents();\nif (enableScrollEndPolyfill) {\n  ScrollEndEventPlugin.registerEvents();\n}\n\nfunction extractEvents(\n  dispatchQueue               ,\n  domEventName              ,\n  targetInst              ,\n  nativeEvent                ,\n  nativeEventTarget                    ,\n  eventSystemFlags                  ,\n  targetContainer             ,\n) {\n  // TODO: we should remove the concept of a \"SimpleEventPlugin\".\n  // This is the basic functionality of the event system. All\n  // the other plugins are essentially polyfills. So the plugin\n  // should probably be inlined somewhere and have its logic\n  // be core the to event system. This would potentially allow\n  // us to ship builds of React without the polyfilled plugins below.\n  SimpleEventPlugin.extractEvents(\n    dispatchQueue,\n    domEventName,\n    targetInst,\n    nativeEvent,\n    nativeEventTarget,\n    eventSystemFlags,\n    targetContainer,\n  );\n  const shouldProcessPolyfillPlugins =\n    (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;\n  // We don't process these events unless we are in the\n  // event's native \"bubble\" phase, which means that we're\n  // not in the capture phase. That's because we emulate\n  // the capture phase here still. This is a trade-off,\n  // because in an ideal world we would not emulate and use\n  // the phases properly, like we do with the SimpleEvent\n  // plugin. However, the plugins below either expect\n  // emulation (EnterLeave) or use state localized to that\n  // plugin (BeforeInput, Change, Select). The state in\n  // these modules complicates things, as you'll essentially\n  // get the case where the capture phase event might change\n  // state, only for the following bubble event to come in\n  // later and not trigger anything as the state now\n  // invalidates the heuristics of the event plugin. We\n  // could alter all these plugins to work in such ways, but\n  // that might cause other unknown side-effects that we\n  // can't foresee right now.\n  if (shouldProcessPolyfillPlugins) {\n    EnterLeaveEventPlugin.extractEvents(\n      dispatchQueue,\n      domEventName,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget,\n      eventSystemFlags,\n      targetContainer,\n    );\n    ChangeEventPlugin.extractEvents(\n      dispatchQueue,\n      domEventName,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget,\n      eventSystemFlags,\n      targetContainer,\n    );\n    SelectEventPlugin.extractEvents(\n      dispatchQueue,\n      domEventName,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget,\n      eventSystemFlags,\n      targetContainer,\n    );\n    BeforeInputEventPlugin.extractEvents(\n      dispatchQueue,\n      domEventName,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget,\n      eventSystemFlags,\n      targetContainer,\n    );\n    FormActionEventPlugin.extractEvents(\n      dispatchQueue,\n      domEventName,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget,\n      eventSystemFlags,\n      targetContainer,\n    );\n  }\n  if (enableScrollEndPolyfill) {\n    ScrollEndEventPlugin.extractEvents(\n      dispatchQueue,\n      domEventName,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget,\n      eventSystemFlags,\n      targetContainer,\n    );\n  }\n}\n\n// List of events that need to be individually attached to media elements.\nexport const mediaEventTypes                      = [\n  'abort',\n  'canplay',\n  'canplaythrough',\n  'durationchange',\n  'emptied',\n  'encrypted',\n  'ended',\n  'error',\n  'loadeddata',\n  'loadedmetadata',\n  'loadstart',\n  'pause',\n  'play',\n  'playing',\n  'progress',\n  'ratechange',\n  'resize',\n  'seeked',\n  'seeking',\n  'stalled',\n  'suspend',\n  'timeupdate',\n  'volumechange',\n  'waiting',\n];\n\n// We should not delegate these events to the container, but rather\n// set them on the actual target element itself. This is primarily\n// because these events do not consistently bubble in the DOM.\nexport const nonDelegatedEvents                    = new Set([\n  'beforetoggle',\n  'cancel',\n  'close',\n  'invalid',\n  'load',\n  'scroll',\n  'scrollend',\n  'toggle',\n  // In order to reduce bytes, we insert the above array of media events\n  // into this Set. Note: the \"error\" event isn't an exclusive media event,\n  // and can occur on other elements too. Rather than duplicate that event,\n  // we just take it from the media events array.\n  ...mediaEventTypes,\n]);\n\nfunction executeDispatch(\n  event                     ,\n  listener          ,\n  currentTarget             ,\n)       {\n  event.currentTarget = currentTarget;\n  try {\n    listener(event);\n  } catch (error) {\n    reportGlobalError(error);\n  }\n  event.currentTarget = null;\n}\n\nfunction processDispatchQueueItemsInOrder(\n  event                     ,\n  dispatchListeners                         ,\n  inCapturePhase         ,\n)       {\n  let previousInstance;\n  if (inCapturePhase) {\n    for (let i = dispatchListeners.length - 1; i >= 0; i--) {\n      const {instance, currentTarget, listener} = dispatchListeners[i];\n      if (instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n      if (__DEV__ && instance !== null) {\n        runWithFiberInDEV(\n          instance,\n          executeDispatch,\n          event,\n          listener,\n          currentTarget,\n        );\n      } else {\n        executeDispatch(event, listener, currentTarget);\n      }\n      previousInstance = instance;\n    }\n  } else {\n    for (let i = 0; i < dispatchListeners.length; i++) {\n      const {instance, currentTarget, listener} = dispatchListeners[i];\n      if (instance !== previousInstance && event.isPropagationStopped()) {\n        return;\n      }\n      if (__DEV__ && instance !== null) {\n        runWithFiberInDEV(\n          instance,\n          executeDispatch,\n          event,\n          listener,\n          currentTarget,\n        );\n      } else {\n        executeDispatch(event, listener, currentTarget);\n      }\n      previousInstance = instance;\n    }\n  }\n}\n\nexport function processDispatchQueue(\n  dispatchQueue               ,\n  eventSystemFlags                  ,\n)       {\n  const inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;\n  for (let i = 0; i < dispatchQueue.length; i++) {\n    const {event, listeners} = dispatchQueue[i];\n    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);\n    //  event system doesn't use pooling.\n  }\n}\n\nfunction dispatchEventsForPlugins(\n  domEventName              ,\n  eventSystemFlags                  ,\n  nativeEvent                ,\n  targetInst              ,\n  targetContainer             ,\n)       {\n  const nativeEventTarget = getEventTarget(nativeEvent);\n  const dispatchQueue                = [];\n  extractEvents(\n    dispatchQueue,\n    domEventName,\n    targetInst,\n    nativeEvent,\n    nativeEventTarget,\n    eventSystemFlags,\n    targetContainer,\n  );\n  processDispatchQueue(dispatchQueue, eventSystemFlags);\n}\n\nexport function listenToNonDelegatedEvent(\n  domEventName              ,\n  targetElement         ,\n)       {\n  if (__DEV__) {\n    if (!nonDelegatedEvents.has(domEventName)) {\n      console.error(\n        'Did not expect a listenToNonDelegatedEvent() call for \"%s\". ' +\n          'This is a bug in React. Please file an issue.',\n        domEventName,\n      );\n    }\n  }\n  const isCapturePhaseListener = false;\n  const listenerSet = getEventListenerSet(targetElement);\n  const listenerSetKey = getListenerSetKey(\n    domEventName,\n    isCapturePhaseListener,\n  );\n  if (!listenerSet.has(listenerSetKey)) {\n    addTrappedEventListener(\n      targetElement,\n      domEventName,\n      IS_NON_DELEGATED,\n      isCapturePhaseListener,\n    );\n    listenerSet.add(listenerSetKey);\n  }\n}\n\nexport function listenToNativeEvent(\n  domEventName              ,\n  isCapturePhaseListener         ,\n  target             ,\n)       {\n  if (__DEV__) {\n    if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {\n      console.error(\n        'Did not expect a listenToNativeEvent() call for \"%s\" in the bubble phase. ' +\n          'This is a bug in React. Please file an issue.',\n        domEventName,\n      );\n    }\n  }\n\n  let eventSystemFlags = 0;\n  if (isCapturePhaseListener) {\n    eventSystemFlags |= IS_CAPTURE_PHASE;\n  }\n  addTrappedEventListener(\n    target,\n    domEventName,\n    eventSystemFlags,\n    isCapturePhaseListener,\n  );\n}\n\n// This is only used by createEventHandle when the\n// target is not a DOM element. E.g. window.\nexport function listenToNativeEventForNonManagedEventTarget(\n  domEventName              ,\n  isCapturePhaseListener         ,\n  target             ,\n)       {\n  let eventSystemFlags = IS_EVENT_HANDLE_NON_MANAGED_NODE;\n  const listenerSet = getEventListenerSet(target);\n  const listenerSetKey = getListenerSetKey(\n    domEventName,\n    isCapturePhaseListener,\n  );\n  if (!listenerSet.has(listenerSetKey)) {\n    if (isCapturePhaseListener) {\n      eventSystemFlags |= IS_CAPTURE_PHASE;\n    }\n    addTrappedEventListener(\n      target,\n      domEventName,\n      eventSystemFlags,\n      isCapturePhaseListener,\n    );\n    listenerSet.add(listenerSetKey);\n  }\n}\n\nconst listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);\n\nexport function listenToAllSupportedEvents(rootContainerElement             ) {\n  if (!(rootContainerElement     )[listeningMarker]) {\n    (rootContainerElement     )[listeningMarker] = true;\n    allNativeEvents.forEach(domEventName => {\n      // We handle selectionchange separately because it\n      // doesn't bubble and needs to be on the document.\n      if (domEventName !== 'selectionchange') {\n        if (!nonDelegatedEvents.has(domEventName)) {\n          listenToNativeEvent(domEventName, false, rootContainerElement);\n        }\n        listenToNativeEvent(domEventName, true, rootContainerElement);\n      }\n    });\n    const ownerDocument =\n      (rootContainerElement     ).nodeType === DOCUMENT_NODE\n        ? rootContainerElement\n        : (rootContainerElement     ).ownerDocument;\n    if (ownerDocument !== null) {\n      // The selectionchange event also needs deduplication\n      // but it is attached to the document.\n      if (!(ownerDocument     )[listeningMarker]) {\n        (ownerDocument     )[listeningMarker] = true;\n        listenToNativeEvent('selectionchange', false, ownerDocument);\n      }\n    }\n  }\n}\n\nfunction addTrappedEventListener(\n  targetContainer             ,\n  domEventName              ,\n  eventSystemFlags                  ,\n  isCapturePhaseListener         ,\n  isDeferredListenerForLegacyFBSupport          ,\n) {\n  let listener = createEventListenerWrapperWithPriority(\n    targetContainer,\n    domEventName,\n    eventSystemFlags,\n  );\n  // If passive option is not supported, then the event will be\n  // active and not passive.\n  let isPassiveListener                 = undefined;\n  if (passiveBrowserEventsSupported) {\n    // Browsers introduced an intervention, making these events\n    // passive by default on document. React doesn't bind them\n    // to document anymore, but changing this now would undo\n    // the performance wins from the change. So we emulate\n    // the existing behavior manually on the roots now.\n    // https://github.com/facebook/react/issues/19651\n    if (\n      domEventName === 'touchstart' ||\n      domEventName === 'touchmove' ||\n      domEventName === 'wheel'\n    ) {\n      isPassiveListener = true;\n    }\n  }\n\n  targetContainer =\n    enableLegacyFBSupport && isDeferredListenerForLegacyFBSupport\n      ? (targetContainer     ).ownerDocument\n      : targetContainer;\n\n  let unsubscribeListener;\n  // When legacyFBSupport is enabled, it's for when we\n  // want to add a one time event listener to a container.\n  // This should only be used with enableLegacyFBSupport\n  // due to requirement to provide compatibility with\n  // internal FB www event tooling. This works by removing\n  // the event listener as soon as it is invoked. We could\n  // also attempt to use the {once: true} param on\n  // addEventListener, but that requires support and some\n  // browsers do not support this today, and given this is\n  // to support legacy code patterns, it's likely they'll\n  // need support for such browsers.\n  if (enableLegacyFBSupport && isDeferredListenerForLegacyFBSupport) {\n    const originalListener = listener;\n    // $FlowFixMe[missing-this-annot]\n    listener = function (...p) {\n      removeEventListener(\n        targetContainer,\n        domEventName,\n        unsubscribeListener,\n        isCapturePhaseListener,\n      );\n      return originalListener.apply(this, p);\n    };\n  }\n  // TODO: There are too many combinations here. Consolidate them.\n  if (isCapturePhaseListener) {\n    if (isPassiveListener !== undefined) {\n      unsubscribeListener = addEventCaptureListenerWithPassiveFlag(\n        targetContainer,\n        domEventName,\n        listener,\n        isPassiveListener,\n      );\n    } else {\n      unsubscribeListener = addEventCaptureListener(\n        targetContainer,\n        domEventName,\n        listener,\n      );\n    }\n  } else {\n    if (isPassiveListener !== undefined) {\n      unsubscribeListener = addEventBubbleListenerWithPassiveFlag(\n        targetContainer,\n        domEventName,\n        listener,\n        isPassiveListener,\n      );\n    } else {\n      unsubscribeListener = addEventBubbleListener(\n        targetContainer,\n        domEventName,\n        listener,\n      );\n    }\n  }\n}\n\nfunction deferClickToDocumentForLegacyFBSupport(\n  domEventName              ,\n  targetContainer             ,\n)       {\n  // We defer all click events with legacy FB support mode on.\n  // This means we add a one time event listener to trigger\n  // after the FB delegated listeners fire.\n  const isDeferredListenerForLegacyFBSupport = true;\n  addTrappedEventListener(\n    targetContainer,\n    domEventName,\n    IS_LEGACY_FB_SUPPORT_MODE,\n    false,\n    isDeferredListenerForLegacyFBSupport,\n  );\n}\n\nfunction isMatchingRootContainer(\n  grandContainer         ,\n  targetContainer             ,\n)          {\n  return (\n    grandContainer === targetContainer ||\n    (!disableCommentsAsDOMContainers &&\n      grandContainer.nodeType === COMMENT_NODE &&\n      grandContainer.parentNode === targetContainer)\n  );\n}\n\nexport function dispatchEventForPluginEventSystem(\n  domEventName              ,\n  eventSystemFlags                  ,\n  nativeEvent                ,\n  targetInst              ,\n  targetContainer             ,\n)       {\n  let ancestorInst = targetInst;\n  if (\n    (eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 &&\n    (eventSystemFlags & IS_NON_DELEGATED) === 0\n  ) {\n    const targetContainerNode = ((targetContainer     )      );\n\n    // If we are using the legacy FB support flag, we\n    // defer the event to the null with a one\n    // time event listener so we can defer the event.\n    if (\n      enableLegacyFBSupport &&\n      // If our event flags match the required flags for entering\n      // FB legacy mode and we are processing the \"click\" event,\n      // then we can defer the event to the \"document\", to allow\n      // for legacy FB support, where the expected behavior was to\n      // match React < 16 behavior of delegated clicks to the doc.\n      domEventName === 'click' &&\n      (eventSystemFlags & SHOULD_NOT_DEFER_CLICK_FOR_FB_SUPPORT_MODE) === 0 &&\n      !isReplayingEvent(nativeEvent)\n    ) {\n      deferClickToDocumentForLegacyFBSupport(domEventName, targetContainer);\n      return;\n    }\n    if (targetInst !== null) {\n      // The below logic attempts to work out if we need to change\n      // the target fiber to a different ancestor. We had similar logic\n      // in the legacy event system, except the big difference between\n      // systems is that the modern event system now has an event listener\n      // attached to each React Root and React Portal Root. Together,\n      // the DOM nodes representing these roots are the \"rootContainer\".\n      // To figure out which ancestor instance we should use, we traverse\n      // up the fiber tree from the target instance and attempt to find\n      // root boundaries that match that of our current \"rootContainer\".\n      // If we find that \"rootContainer\", we find the parent fiber\n      // sub-tree for that root and make that our ancestor instance.\n      let node               = targetInst;\n\n      mainLoop: while (true) {\n        if (node === null) {\n          return;\n        }\n        const nodeTag = node.tag;\n        if (nodeTag === HostRoot || nodeTag === HostPortal) {\n          let container = node.stateNode.containerInfo;\n          if (isMatchingRootContainer(container, targetContainerNode)) {\n            break;\n          }\n          if (nodeTag === HostPortal) {\n            // The target is a portal, but it's not the rootContainer we're looking for.\n            // Normally portals handle their own events all the way down to the root.\n            // So we should be able to stop now. However, we don't know if this portal\n            // was part of *our* root.\n            let grandNode = node.return;\n            while (grandNode !== null) {\n              const grandTag = grandNode.tag;\n              if (grandTag === HostRoot || grandTag === HostPortal) {\n                const grandContainer = grandNode.stateNode.containerInfo;\n                if (\n                  isMatchingRootContainer(grandContainer, targetContainerNode)\n                ) {\n                  // This is the rootContainer we're looking for and we found it as\n                  // a parent of the Portal. That means we can ignore it because the\n                  // Portal will bubble through to us.\n                  return;\n                }\n              }\n              grandNode = grandNode.return;\n            }\n          }\n          // Now we need to find it's corresponding host fiber in the other\n          // tree. To do this we can use getClosestInstanceFromNode, but we\n          // need to validate that the fiber is a host instance, otherwise\n          // we need to traverse up through the DOM till we find the correct\n          // node that is from the other tree.\n          while (container !== null) {\n            const parentNode = getClosestInstanceFromNode(container);\n            if (parentNode === null) {\n              return;\n            }\n            const parentTag = parentNode.tag;\n            if (\n              parentTag === HostComponent ||\n              parentTag === HostText ||\n              parentTag === HostHoistable ||\n              parentTag === HostSingleton\n            ) {\n              node = ancestorInst = parentNode;\n              continue mainLoop;\n            }\n            container = container.parentNode;\n          }\n        }\n        node = node.return;\n      }\n    }\n  }\n\n  batchedUpdates(() =>\n    dispatchEventsForPlugins(\n      domEventName,\n      eventSystemFlags,\n      nativeEvent,\n      ancestorInst,\n      targetContainer,\n    ),\n  );\n}\n\nfunction createDispatchListener(\n  instance              ,\n  listener          ,\n  currentTarget             ,\n)                   {\n  return {\n    instance,\n    listener,\n    currentTarget,\n  };\n}\n\nexport function accumulateSinglePhaseListeners(\n  targetFiber              ,\n  reactName               ,\n  nativeEventType        ,\n  inCapturePhase         ,\n  accumulateTargetOnly         ,\n  nativeEvent                ,\n)                          {\n  const captureName = reactName !== null ? reactName + 'Capture' : null;\n  const reactEventName = inCapturePhase ? captureName : reactName;\n  let listeners                          = [];\n\n  let instance = targetFiber;\n  let lastHostComponent = null;\n\n  // Accumulate all instances and listeners via the target -> root path.\n  while (instance !== null) {\n    const {stateNode, tag} = instance;\n    // Handle listeners that are on HostComponents (i.e. <div>)\n    if (\n      (tag === HostComponent ||\n        tag === HostHoistable ||\n        tag === HostSingleton) &&\n      stateNode !== null\n    ) {\n      lastHostComponent = stateNode;\n\n      // createEventHandle listeners\n      if (enableCreateEventHandleAPI) {\n        const eventHandlerListeners =\n          getEventHandlerListeners(lastHostComponent);\n        if (eventHandlerListeners !== null) {\n          eventHandlerListeners.forEach(entry => {\n            if (\n              entry.type === nativeEventType &&\n              entry.capture === inCapturePhase\n            ) {\n              listeners.push(\n                createDispatchListener(\n                  instance,\n                  entry.callback,\n                  (lastHostComponent     ),\n                ),\n              );\n            }\n          });\n        }\n      }\n\n      // Standard React on* listeners, i.e. onClick or onClickCapture\n      if (reactEventName !== null) {\n        const listener = getListener(instance, reactEventName);\n        if (listener != null) {\n          listeners.push(\n            createDispatchListener(instance, listener, lastHostComponent),\n          );\n        }\n      }\n    } else if (\n      enableCreateEventHandleAPI &&\n      enableScopeAPI &&\n      tag === ScopeComponent &&\n      lastHostComponent !== null &&\n      stateNode !== null\n    ) {\n      // Scopes\n      const reactScopeInstance = stateNode;\n      const eventHandlerListeners =\n        getEventHandlerListeners(reactScopeInstance);\n      if (eventHandlerListeners !== null) {\n        eventHandlerListeners.forEach(entry => {\n          if (\n            entry.type === nativeEventType &&\n            entry.capture === inCapturePhase\n          ) {\n            listeners.push(\n              createDispatchListener(\n                instance,\n                entry.callback,\n                (lastHostComponent     ),\n              ),\n            );\n          }\n        });\n      }\n    }\n    // If we are only accumulating events for the target, then we don't\n    // continue to propagate through the React fiber tree to find other\n    // listeners.\n    if (accumulateTargetOnly) {\n      break;\n    }\n    // If we are processing the onBeforeBlur event, then we need to take\n    // into consideration that part of the React tree might have been hidden\n    // or deleted (as we're invoking this event during commit). We can find\n    // this out by checking if intercept fiber set on the event matches the\n    // current instance fiber. In which case, we should clear all existing\n    // listeners.\n    if (enableCreateEventHandleAPI && nativeEvent.type === 'beforeblur') {\n      // $FlowFixMe[prop-missing] internal field\n      const detachedInterceptFiber = nativeEvent._detachedInterceptFiber;\n      if (\n        detachedInterceptFiber !== null &&\n        (detachedInterceptFiber === instance ||\n          detachedInterceptFiber === instance.alternate)\n      ) {\n        listeners = [];\n      }\n    }\n    instance = instance.return;\n  }\n  return listeners;\n}\n\n// We should only use this function for:\n// - BeforeInputEventPlugin\n// - ChangeEventPlugin\n// - SelectEventPlugin\n// - ScrollEndEventPlugin\n// This is because we only process these plugins\n// in the bubble phase, so we need to accumulate two\n// phase event listeners (via emulation).\nexport function accumulateTwoPhaseListeners(\n  targetFiber              ,\n  reactName        ,\n)                          {\n  const captureName = reactName + 'Capture';\n  const listeners                          = [];\n  let instance = targetFiber;\n\n  // Accumulate all instances and listeners via the target -> root path.\n  while (instance !== null) {\n    const {stateNode, tag} = instance;\n    // Handle listeners that are on HostComponents (i.e. <div>)\n    if (\n      (tag === HostComponent ||\n        tag === HostHoistable ||\n        tag === HostSingleton) &&\n      stateNode !== null\n    ) {\n      const currentTarget = stateNode;\n      const captureListener = getListener(instance, captureName);\n      if (captureListener != null) {\n        listeners.unshift(\n          createDispatchListener(instance, captureListener, currentTarget),\n        );\n      }\n      const bubbleListener = getListener(instance, reactName);\n      if (bubbleListener != null) {\n        listeners.push(\n          createDispatchListener(instance, bubbleListener, currentTarget),\n        );\n      }\n    }\n    if (instance.tag === HostRoot) {\n      return listeners;\n    }\n    instance = instance.return;\n  }\n  // If we didn't reach the root it means we're unmounted and shouldn't\n  // dispatch any events on the target.\n  return [];\n}\n\nfunction getParent(inst              )               {\n  if (inst === null) {\n    return null;\n  }\n  do {\n    // $FlowFixMe[incompatible-use] found when upgrading Flow\n    inst = inst.return;\n    // TODO: If this is a HostRoot we might want to bail out.\n    // That is depending on if we want nested subtrees (layers) to bubble\n    // events to their parent. We could also go through parentNode on the\n    // host node but that wouldn't work for React Native and doesn't let us\n    // do the portal feature.\n  } while (inst && inst.tag !== HostComponent && inst.tag !== HostSingleton);\n  if (inst) {\n    return inst;\n  }\n  return null;\n}\n\nfunction accumulateEnterLeaveListenersForEvent(\n  dispatchQueue               ,\n  event                          ,\n  target       ,\n  common              ,\n  inCapturePhase         ,\n)       {\n  const registrationName = event._reactName;\n  const listeners                          = [];\n\n  let instance               = target;\n  while (instance !== null) {\n    if (instance === common) {\n      break;\n    }\n    const {alternate, stateNode, tag} = instance;\n    if (alternate !== null && alternate === common) {\n      break;\n    }\n    if (\n      (tag === HostComponent ||\n        tag === HostHoistable ||\n        tag === HostSingleton) &&\n      stateNode !== null\n    ) {\n      const currentTarget = stateNode;\n      if (inCapturePhase) {\n        const captureListener = getListener(instance, registrationName);\n        if (captureListener != null) {\n          listeners.unshift(\n            createDispatchListener(instance, captureListener, currentTarget),\n          );\n        }\n      } else if (!inCapturePhase) {\n        const bubbleListener = getListener(instance, registrationName);\n        if (bubbleListener != null) {\n          listeners.push(\n            createDispatchListener(instance, bubbleListener, currentTarget),\n          );\n        }\n      }\n    }\n    instance = instance.return;\n  }\n  if (listeners.length !== 0) {\n    dispatchQueue.push({event, listeners});\n  }\n}\n\n// We should only use this function for:\n// - EnterLeaveEventPlugin\n// This is because we only process this plugin\n// in the bubble phase, so we need to accumulate two\n// phase event listeners.\nexport function accumulateEnterLeaveTwoPhaseListeners(\n  dispatchQueue               ,\n  leaveEvent                          ,\n  enterEvent                                 ,\n  from              ,\n  to              ,\n)       {\n  const common =\n    from && to ? getLowestCommonAncestor(from, to, getParent) : null;\n\n  if (from !== null) {\n    accumulateEnterLeaveListenersForEvent(\n      dispatchQueue,\n      leaveEvent,\n      from,\n      common,\n      false,\n    );\n  }\n  if (to !== null && enterEvent !== null) {\n    accumulateEnterLeaveListenersForEvent(\n      dispatchQueue,\n      enterEvent,\n      to,\n      common,\n      true,\n    );\n  }\n}\n\nexport function accumulateEventHandleNonManagedNodeListeners(\n  reactEventType              ,\n  currentTarget             ,\n  inCapturePhase         ,\n)                          {\n  const listeners                          = [];\n\n  const eventListeners = getEventHandlerListeners(currentTarget);\n  if (eventListeners !== null) {\n    eventListeners.forEach(entry => {\n      if (entry.type === reactEventType && entry.capture === inCapturePhase) {\n        listeners.push(\n          createDispatchListener(null, entry.callback, currentTarget),\n        );\n      }\n    });\n  }\n  return listeners;\n}\n\nexport function getListenerSetKey(\n  domEventName              ,\n  capture         ,\n)         {\n  return `${domEventName}__${capture ? 'capture' : 'bubble'}`;\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                       \n\nimport {HostContextNamespaceNone} from './ReactFiberConfigDOM';\n\nimport {\n  registrationNameDependencies,\n  possibleRegistrationNames,\n} from '../events/EventRegistry';\n\nimport {checkHtmlStringCoercion} from 'shared/CheckStringCoercion';\nimport {checkAttributeStringCoercion} from 'shared/CheckStringCoercion';\nimport {checkControlledValueProps} from '../shared/ReactControlledValuePropTypes';\n\nimport {\n  getValueForAttribute,\n  getValueForAttributeOnCustomComponent,\n  setValueForPropertyOnCustomComponent,\n  setValueForKnownAttribute,\n  setValueForAttribute,\n  setValueForNamespacedAttribute,\n} from './DOMPropertyOperations';\nimport {\n  validateInputProps,\n  initInput,\n  updateInput,\n  restoreControlledInputState,\n} from './ReactDOMInput';\nimport {validateOptionProps} from './ReactDOMOption';\nimport {\n  validateSelectProps,\n  initSelect,\n  restoreControlledSelectState,\n  updateSelect,\n} from './ReactDOMSelect';\nimport {\n  validateTextareaProps,\n  initTextarea,\n  updateTextarea,\n  restoreControlledTextareaState,\n} from './ReactDOMTextarea';\nimport {setSrcObject} from './ReactDOMSrcObject';\nimport {validateTextNesting} from './validateDOMNesting';\nimport setTextContent from './setTextContent';\nimport {\n  createDangerousStringForStyles,\n  setValueForStyles,\n} from './CSSPropertyOperations';\nimport {SVG_NAMESPACE, MATH_NAMESPACE} from './DOMNamespaces';\nimport isCustomElement from '../shared/isCustomElement';\nimport getAttributeAlias from '../shared/getAttributeAlias';\nimport possibleStandardNames from '../shared/possibleStandardNames';\nimport {validateProperties as validateARIAProperties} from '../shared/ReactDOMInvalidARIAHook';\nimport {validateProperties as validateInputProperties} from '../shared/ReactDOMNullInputValuePropHook';\nimport {validateProperties as validateUnknownProperties} from '../shared/ReactDOMUnknownPropertyHook';\nimport sanitizeURL from '../shared/sanitizeURL';\n\nimport noop from 'shared/noop';\n\nimport {trackHostMutation} from 'react-reconciler/src/ReactFiberMutationTracking';\n\nimport {\n  enableHydrationChangeEvent,\n  enableScrollEndPolyfill,\n  enableSrcObject,\n  enableTrustedTypesIntegration,\n  enableViewTransition,\n} from 'shared/ReactFeatureFlags';\nimport {\n  mediaEventTypes,\n  listenToNonDelegatedEvent,\n} from '../events/DOMPluginEventSystem';\n\nlet didWarnControlledToUncontrolled = false;\nlet didWarnUncontrolledToControlled = false;\nlet didWarnFormActionType = false;\nlet didWarnFormActionName = false;\nlet didWarnFormActionTarget = false;\nlet didWarnFormActionMethod = false;\nlet didWarnForNewBooleanPropsWithEmptyValue                     ;\nlet didWarnPopoverTargetObject = false;\nif (__DEV__) {\n  didWarnForNewBooleanPropsWithEmptyValue = {};\n}\n\nfunction validatePropertiesInDevelopment(type        , props     ) {\n  if (__DEV__) {\n    validateARIAProperties(type, props);\n    validateInputProperties(type, props);\n    validateUnknownProperties(type, props, {\n      registrationNameDependencies,\n      possibleRegistrationNames,\n    });\n    if (\n      props.contentEditable &&\n      !props.suppressContentEditableWarning &&\n      props.children != null\n    ) {\n      console.error(\n        'A component is `contentEditable` and contains `children` managed by ' +\n          'React. It is now your responsibility to guarantee that none of ' +\n          'those nodes are unexpectedly modified or duplicated. This is ' +\n          'probably not intentional.',\n      );\n    }\n  }\n}\n\nfunction validateFormActionInDevelopment(\n  tag        ,\n  key        ,\n  value       ,\n  props     ,\n) {\n  if (__DEV__) {\n    if (value == null) {\n      return;\n    }\n    if (tag === 'form') {\n      if (key === 'formAction') {\n        console.error(\n          'You can only pass the formAction prop to <input> or <button>. Use the action prop on <form>.',\n        );\n      } else if (typeof value === 'function') {\n        if (\n          (props.encType != null || props.method != null) &&\n          !didWarnFormActionMethod\n        ) {\n          didWarnFormActionMethod = true;\n          console.error(\n            'Cannot specify a encType or method for a form that specifies a ' +\n              'function as the action. React provides those automatically. ' +\n              'They will get overridden.',\n          );\n        }\n        if (props.target != null && !didWarnFormActionTarget) {\n          didWarnFormActionTarget = true;\n          console.error(\n            'Cannot specify a target for a form that specifies a function as the action. ' +\n              'The function will always be executed in the same window.',\n          );\n        }\n      }\n    } else if (tag === 'input' || tag === 'button') {\n      if (key === 'action') {\n        console.error(\n          'You can only pass the action prop to <form>. Use the formAction prop on <input> or <button>.',\n        );\n      } else if (\n        tag === 'input' &&\n        props.type !== 'submit' &&\n        props.type !== 'image' &&\n        !didWarnFormActionType\n      ) {\n        didWarnFormActionType = true;\n        console.error(\n          'An input can only specify a formAction along with type=\"submit\" or type=\"image\".',\n        );\n      } else if (\n        tag === 'button' &&\n        props.type != null &&\n        props.type !== 'submit' &&\n        !didWarnFormActionType\n      ) {\n        didWarnFormActionType = true;\n        console.error(\n          'A button can only specify a formAction along with type=\"submit\" or no type.',\n        );\n      } else if (typeof value === 'function') {\n        // Function form actions cannot control the form properties\n        if (props.name != null && !didWarnFormActionName) {\n          didWarnFormActionName = true;\n          console.error(\n            'Cannot specify a \"name\" prop for a button that specifies a function as a formAction. ' +\n              'React needs it to encode which action should be invoked. It will get overridden.',\n          );\n        }\n        if (\n          (props.formEncType != null || props.formMethod != null) &&\n          !didWarnFormActionMethod\n        ) {\n          didWarnFormActionMethod = true;\n          console.error(\n            'Cannot specify a formEncType or formMethod for a button that specifies a ' +\n              'function as a formAction. React provides those automatically. They will get overridden.',\n          );\n        }\n        if (props.formTarget != null && !didWarnFormActionTarget) {\n          didWarnFormActionTarget = true;\n          console.error(\n            'Cannot specify a formTarget for a button that specifies a function as a formAction. ' +\n              'The function will always be executed in the same window.',\n          );\n        }\n      }\n    } else {\n      if (key === 'action') {\n        console.error('You can only pass the action prop to <form>.');\n      } else {\n        console.error(\n          'You can only pass the formAction prop to <input> or <button>.',\n        );\n      }\n    }\n  }\n}\n\nfunction warnForPropDifference(\n  propName        ,\n  serverValue       ,\n  clientValue       ,\n  serverDifferences                             ,\n)       {\n  if (__DEV__) {\n    if (serverValue === clientValue) {\n      return;\n    }\n    const normalizedClientValue =\n      normalizeMarkupForTextOrAttribute(clientValue);\n    const normalizedServerValue =\n      normalizeMarkupForTextOrAttribute(serverValue);\n    if (normalizedServerValue === normalizedClientValue) {\n      return;\n    }\n\n    serverDifferences[propName] = serverValue;\n  }\n}\n\nfunction warnForExtraAttributes(\n  domElement         ,\n  attributeNames             ,\n  serverDifferences                             ,\n) {\n  if (__DEV__) {\n    attributeNames.forEach(function (attributeName) {\n      serverDifferences[getPropNameFromAttributeName(attributeName)] =\n        attributeName === 'style'\n          ? getStylesObjectFromElement(domElement)\n          : domElement.getAttribute(attributeName);\n    });\n  }\n}\n\nfunction warnForInvalidEventListener(registrationName        , listener     ) {\n  if (__DEV__) {\n    if (listener === false) {\n      console.error(\n        'Expected `%s` listener to be a function, instead got `false`.\\n\\n' +\n          'If you used to conditionally omit it with %s={condition && value}, ' +\n          'pass %s={condition ? value : undefined} instead.',\n        registrationName,\n        registrationName,\n        registrationName,\n      );\n    } else {\n      console.error(\n        'Expected `%s` listener to be a function, instead got a value of `%s` type.',\n        registrationName,\n        typeof listener,\n      );\n    }\n  }\n}\n\n// Parse the HTML and read it back to normalize the HTML string so that it\n// can be used for comparison.\nfunction normalizeHTML(parent         , html        ) {\n  if (__DEV__) {\n    // We could have created a separate document here to avoid\n    // re-initializing custom elements if they exist. But this breaks\n    // how <noscript> is being handled. So we use the same document.\n    // See the discussion in https://github.com/facebook/react/pull/11157.\n    const testElement =\n      parent.namespaceURI === MATH_NAMESPACE ||\n      parent.namespaceURI === SVG_NAMESPACE\n        ? parent.ownerDocument.createElementNS(\n            (parent.namespaceURI     ),\n            parent.tagName,\n          )\n        : parent.ownerDocument.createElement(parent.tagName);\n    testElement.innerHTML = html;\n    return testElement.innerHTML;\n  }\n}\n\n// HTML parsing normalizes CR and CRLF to LF.\n// It also can turn \\u0000 into \\uFFFD inside attributes.\n// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream\n// If we have a mismatch, it might be caused by that.\n// We will still patch up in this case but not fire the warning.\nconst NORMALIZE_NEWLINES_REGEX = /\\r\\n?/g;\nconst NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\\u0000|\\uFFFD/g;\n\nfunction normalizeMarkupForTextOrAttribute(markup       )         {\n  if (__DEV__) {\n    checkHtmlStringCoercion(markup);\n  }\n  const markupString = typeof markup === 'string' ? markup : '' + (markup     );\n  return markupString\n    .replace(NORMALIZE_NEWLINES_REGEX, '\\n')\n    .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');\n}\n\nfunction checkForUnmatchedText(\n  serverText        ,\n  clientText                          ,\n) {\n  const normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);\n  const normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);\n  if (normalizedServerText === normalizedClientText) {\n    return true;\n  }\n  return false;\n}\n\nexport function trapClickOnNonInteractiveElement(node             ) {\n  // Mobile Safari does not fire properly bubble click events on\n  // non-interactive elements, which means delegated click listeners do not\n  // fire. The workaround for this bug involves attaching an empty click\n  // listener on the target node.\n  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n  // Just set it using the onclick property so that we don't have to manage any\n  // bookkeeping for it. Not sure if we need to clear it when the listener is\n  // removed.\n  // TODO: Only do this for the relevant Safaris maybe?\n  node.onclick = noop;\n}\n\nconst xlinkNamespace = 'http://www.w3.org/1999/xlink';\nconst xmlNamespace = 'http://www.w3.org/XML/1998/namespace';\n\nfunction setProp(\n  domElement         ,\n  tag        ,\n  key        ,\n  value       ,\n  props     ,\n  prevValue       ,\n)       {\n  switch (key) {\n    case 'children': {\n      if (typeof value === 'string') {\n        if (__DEV__) {\n          validateTextNesting(value, tag, false);\n        }\n        // Avoid setting initial textContent when the text is empty. In IE11 setting\n        // textContent on a <textarea> will cause the placeholder to not\n        // show within the <textarea> until it has been focused and blurred again.\n        // https://github.com/facebook/react/issues/6731#issuecomment-254874553\n        const canSetTextContent =\n          tag !== 'body' && (tag !== 'textarea' || value !== '');\n        if (canSetTextContent) {\n          setTextContent(domElement, value);\n        }\n      } else if (typeof value === 'number' || typeof value === 'bigint') {\n        if (__DEV__) {\n          // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n          validateTextNesting('' + value, tag, false);\n        }\n        const canSetTextContent = tag !== 'body';\n        if (canSetTextContent) {\n          // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n          setTextContent(domElement, '' + value);\n        }\n      } else {\n        return;\n      }\n      break;\n    }\n    // These are very common props and therefore are in the beginning of the switch.\n    // TODO: aria-label is a very common prop but allows booleans so is not like the others\n    // but should ideally go in this list too.\n    case 'className':\n      setValueForKnownAttribute(domElement, 'class', value);\n      break;\n    case 'tabIndex':\n      // This has to be case sensitive in SVG.\n      setValueForKnownAttribute(domElement, 'tabindex', value);\n      break;\n    case 'dir':\n    case 'role':\n    case 'viewBox':\n    case 'width':\n    case 'height': {\n      setValueForKnownAttribute(domElement, key, value);\n      break;\n    }\n    case 'style': {\n      setValueForStyles(domElement, value, prevValue);\n      return;\n    }\n    // These attributes accept URLs. These must not allow javascript: URLS.\n    case 'data':\n      if (tag !== 'object') {\n        setValueForKnownAttribute(domElement, 'data', value);\n        break;\n      }\n    // fallthrough\n    case 'src': {\n      if (enableSrcObject && typeof value === 'object' && value !== null) {\n        // Some tags support object sources like Blob, File, MediaSource and MediaStream.\n        if (tag === 'img' || tag === 'video' || tag === 'audio') {\n          try {\n            setSrcObject(domElement, tag, value);\n            break;\n          } catch (x) {\n            // If URL.createObjectURL() errors, it was probably some other object type\n            // that should be toString:ed instead, so we just fall-through to the normal\n            // path.\n          }\n        } else {\n          if (__DEV__) {\n            try {\n              // This should always error.\n              URL.revokeObjectURL(URL.createObjectURL((value     )));\n              if (tag === 'source') {\n                console.error(\n                  'Passing Blob, MediaSource or MediaStream to <source src> is not supported. ' +\n                    'Pass it directly to <img src>, <video src> or <audio src> instead.',\n                );\n              } else {\n                console.error(\n                  'Passing Blob, MediaSource or MediaStream to <%s src> is not supported.',\n                  tag,\n                );\n              }\n            } catch (x) {}\n          }\n        }\n      }\n      // Fallthrough\n    }\n    case 'href': {\n      if (\n        value === '' &&\n        // <a href=\"\"> is fine for \"reload\" links.\n        !(tag === 'a' && key === 'href')\n      ) {\n        if (__DEV__) {\n          if (key === 'src') {\n            console.error(\n              'An empty string (\"\") was passed to the %s attribute. ' +\n                'This may cause the browser to download the whole page again over the network. ' +\n                'To fix this, either do not render the element at all ' +\n                'or pass null to %s instead of an empty string.',\n              key,\n              key,\n            );\n          } else {\n            console.error(\n              'An empty string (\"\") was passed to the %s attribute. ' +\n                'To fix this, either do not render the element at all ' +\n                'or pass null to %s instead of an empty string.',\n              key,\n              key,\n            );\n          }\n        }\n        domElement.removeAttribute(key);\n        break;\n      }\n      if (\n        value == null ||\n        typeof value === 'function' ||\n        typeof value === 'symbol' ||\n        typeof value === 'boolean'\n      ) {\n        domElement.removeAttribute(key);\n        break;\n      }\n      // `setAttribute` with objects becomes only `[object]` in IE8/9,\n      // ('' + value) makes it output the correct toString()-value.\n      if (__DEV__) {\n        checkAttributeStringCoercion(value, key);\n      }\n      const sanitizedValue = (sanitizeURL(\n        enableTrustedTypesIntegration ? value : '' + (value     ),\n      )     );\n      domElement.setAttribute(key, sanitizedValue);\n      break;\n    }\n    case 'action':\n    case 'formAction': {\n      // TODO: Consider moving these special cases to the form, input and button tags.\n      if (__DEV__) {\n        validateFormActionInDevelopment(tag, key, value, props);\n      }\n      if (typeof value === 'function') {\n        // Set a javascript URL that doesn't do anything. We don't expect this to be invoked\n        // because we'll preventDefault, but it can happen if a form is manually submitted or\n        // if someone calls stopPropagation before React gets the event.\n        // If CSP is used to block javascript: URLs that's fine too. It just won't show this\n        // error message but the URL will be logged.\n        domElement.setAttribute(\n          key,\n          // eslint-disable-next-line no-script-url\n          \"javascript:throw new Error('\" +\n            'A React form was unexpectedly submitted. If you called form.submit() manually, ' +\n            \"consider using form.requestSubmit() instead. If you\\\\'re trying to use \" +\n            'event.stopPropagation() in a submit event handler, consider also calling ' +\n            'event.preventDefault().' +\n            \"')\",\n        );\n        break;\n      } else if (typeof prevValue === 'function') {\n        // When we're switching off a Server Action that was originally hydrated.\n        // The server control these fields during SSR that are now trailing.\n        // The regular diffing doesn't apply since we compare against the previous props.\n        // Instead, we need to force them to be set to whatever they should be now.\n        // This would be a lot cleaner if we did this whole fork in the per-tag approach.\n        if (key === 'formAction') {\n          if (tag !== 'input') {\n            // Setting the name here isn't completely safe for inputs if this is switching\n            // to become a radio button. In that case we let the tag based override take\n            // control.\n            setProp(domElement, tag, 'name', props.name, props, null);\n          }\n          setProp(\n            domElement,\n            tag,\n            'formEncType',\n            props.formEncType,\n            props,\n            null,\n          );\n          setProp(domElement, tag, 'formMethod', props.formMethod, props, null);\n          setProp(domElement, tag, 'formTarget', props.formTarget, props, null);\n        } else {\n          setProp(domElement, tag, 'encType', props.encType, props, null);\n          setProp(domElement, tag, 'method', props.method, props, null);\n          setProp(domElement, tag, 'target', props.target, props, null);\n        }\n      }\n      if (\n        value == null ||\n        typeof value === 'symbol' ||\n        typeof value === 'boolean'\n      ) {\n        domElement.removeAttribute(key);\n        break;\n      }\n      // `setAttribute` with objects becomes only `[object]` in IE8/9,\n      // ('' + value) makes it output the correct toString()-value.\n      if (__DEV__) {\n        checkAttributeStringCoercion(value, key);\n      }\n      const sanitizedValue = (sanitizeURL(\n        enableTrustedTypesIntegration ? value : '' + (value     ),\n      )     );\n      domElement.setAttribute(key, sanitizedValue);\n      break;\n    }\n    case 'onClick': {\n      // TODO: This cast may not be sound for SVG, MathML or custom elements.\n      if (value != null) {\n        if (__DEV__ && typeof value !== 'function') {\n          warnForInvalidEventListener(key, value);\n        }\n        trapClickOnNonInteractiveElement(((domElement     )             ));\n      }\n      return;\n    }\n    case 'onScroll': {\n      if (value != null) {\n        if (__DEV__ && typeof value !== 'function') {\n          warnForInvalidEventListener(key, value);\n        }\n        listenToNonDelegatedEvent('scroll', domElement);\n      }\n      return;\n    }\n    case 'onScrollEnd': {\n      if (value != null) {\n        if (__DEV__ && typeof value !== 'function') {\n          warnForInvalidEventListener(key, value);\n        }\n        listenToNonDelegatedEvent('scrollend', domElement);\n        if (enableScrollEndPolyfill) {\n          // For use by the polyfill.\n          listenToNonDelegatedEvent('scroll', domElement);\n        }\n      }\n      return;\n    }\n    case 'dangerouslySetInnerHTML': {\n      if (value != null) {\n        if (typeof value !== 'object' || !('__html' in value)) {\n          throw new Error(\n            '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +\n              'Please visit https://react.dev/link/dangerously-set-inner-html ' +\n              'for more information.',\n          );\n        }\n        const nextHtml      = value.__html;\n        if (nextHtml != null) {\n          if (props.children != null) {\n            throw new Error(\n              'Can only set one of `children` or `props.dangerouslySetInnerHTML`.',\n            );\n          }\n          domElement.innerHTML = nextHtml;\n        }\n      }\n      break;\n    }\n    // Note: `option.selected` is not updated if `select.multiple` is\n    // disabled with `removeAttribute`. We have special logic for handling this.\n    case 'multiple': {\n      (domElement     ).multiple =\n        value && typeof value !== 'function' && typeof value !== 'symbol';\n      break;\n    }\n    case 'muted': {\n      (domElement     ).muted =\n        value && typeof value !== 'function' && typeof value !== 'symbol';\n      break;\n    }\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'defaultValue': // Reserved\n    case 'defaultChecked':\n    case 'innerHTML':\n    case 'ref': {\n      // TODO: `ref` is pretty common, should we move it up?\n      // Noop\n      break;\n    }\n    case 'autoFocus': {\n      // We polyfill it separately on the client during commit.\n      // We could have excluded it in the property list instead of\n      // adding a special case here, but then it wouldn't be emitted\n      // on server rendering (but we *do* want to emit it in SSR).\n      break;\n    }\n    case 'xlinkHref': {\n      if (\n        value == null ||\n        typeof value === 'function' ||\n        typeof value === 'boolean' ||\n        typeof value === 'symbol'\n      ) {\n        domElement.removeAttribute('xlink:href');\n        break;\n      }\n      // `setAttribute` with objects becomes only `[object]` in IE8/9,\n      // ('' + value) makes it output the correct toString()-value.\n      if (__DEV__) {\n        checkAttributeStringCoercion(value, key);\n      }\n      const sanitizedValue = (sanitizeURL(\n        enableTrustedTypesIntegration ? value : '' + (value     ),\n      )     );\n      domElement.setAttributeNS(xlinkNamespace, 'xlink:href', sanitizedValue);\n      break;\n    }\n    case 'contentEditable':\n    case 'spellCheck':\n    case 'draggable':\n    case 'value':\n    case 'autoReverse':\n    case 'externalResourcesRequired':\n    case 'focusable':\n    case 'preserveAlpha': {\n      // Booleanish String\n      // These are \"enumerated\" attributes that accept \"true\" and \"false\".\n      // In React, we let users pass `true` and `false` even though technically\n      // these aren't boolean attributes (they are coerced to strings).\n      // The SVG attributes are case-sensitive. Since the HTML attributes are\n      // insensitive they also work even though we canonically use lower case.\n      if (\n        value != null &&\n        typeof value !== 'function' &&\n        typeof value !== 'symbol'\n      ) {\n        if (__DEV__) {\n          checkAttributeStringCoercion(value, key);\n        }\n        domElement.setAttribute(\n          key,\n          enableTrustedTypesIntegration ? (value     ) : '' + (value     ),\n        );\n      } else {\n        domElement.removeAttribute(key);\n      }\n      break;\n    }\n    // Boolean\n    case 'inert': {\n      if (__DEV__) {\n        if (value === '' && !didWarnForNewBooleanPropsWithEmptyValue[key]) {\n          didWarnForNewBooleanPropsWithEmptyValue[key] = true;\n          console.error(\n            'Received an empty string for a boolean attribute `%s`. ' +\n              'This will treat the attribute as if it were false. ' +\n              'Either pass `false` to silence this warning, or ' +\n              'pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.',\n            key,\n          );\n        }\n      }\n    }\n    // Fallthrough for boolean props that don't have a warning for empty strings.\n    case 'allowFullScreen':\n    case 'async':\n    case 'autoPlay':\n    case 'controls':\n    case 'default':\n    case 'defer':\n    case 'disabled':\n    case 'disablePictureInPicture':\n    case 'disableRemotePlayback':\n    case 'formNoValidate':\n    case 'hidden':\n    case 'loop':\n    case 'noModule':\n    case 'noValidate':\n    case 'open':\n    case 'playsInline':\n    case 'readOnly':\n    case 'required':\n    case 'reversed':\n    case 'scoped':\n    case 'seamless':\n    case 'itemScope': {\n      if (value && typeof value !== 'function' && typeof value !== 'symbol') {\n        domElement.setAttribute(key, '');\n      } else {\n        domElement.removeAttribute(key);\n      }\n      break;\n    }\n    // Overloaded Boolean\n    case 'capture':\n    case 'download': {\n      // An attribute that can be used as a flag as well as with a value.\n      // When true, it should be present (set either to an empty string or its name).\n      // When false, it should be omitted.\n      // For any other value, should be present with that value.\n      if (value === true) {\n        domElement.setAttribute(key, '');\n      } else if (\n        value !== false &&\n        value != null &&\n        typeof value !== 'function' &&\n        typeof value !== 'symbol'\n      ) {\n        if (__DEV__) {\n          checkAttributeStringCoercion(value, key);\n        }\n        domElement.setAttribute(key, (value     ));\n      } else {\n        domElement.removeAttribute(key);\n      }\n      break;\n    }\n    case 'cols':\n    case 'rows':\n    case 'size':\n    case 'span': {\n      // These are HTML attributes that must be positive numbers.\n      if (\n        value != null &&\n        typeof value !== 'function' &&\n        typeof value !== 'symbol' &&\n        !isNaN(value) &&\n        (value     ) >= 1\n      ) {\n        if (__DEV__) {\n          checkAttributeStringCoercion(value, key);\n        }\n        domElement.setAttribute(key, (value     ));\n      } else {\n        domElement.removeAttribute(key);\n      }\n      break;\n    }\n    case 'rowSpan':\n    case 'start': {\n      // These are HTML attributes that must be numbers.\n      if (\n        value != null &&\n        typeof value !== 'function' &&\n        typeof value !== 'symbol' &&\n        !isNaN(value)\n      ) {\n        if (__DEV__) {\n          checkAttributeStringCoercion(value, key);\n        }\n        domElement.setAttribute(key, (value     ));\n      } else {\n        domElement.removeAttribute(key);\n      }\n      break;\n    }\n    case 'popover':\n      listenToNonDelegatedEvent('beforetoggle', domElement);\n      listenToNonDelegatedEvent('toggle', domElement);\n      setValueForAttribute(domElement, 'popover', value);\n      break;\n    case 'xlinkActuate':\n      setValueForNamespacedAttribute(\n        domElement,\n        xlinkNamespace,\n        'xlink:actuate',\n        value,\n      );\n      break;\n    case 'xlinkArcrole':\n      setValueForNamespacedAttribute(\n        domElement,\n        xlinkNamespace,\n        'xlink:arcrole',\n        value,\n      );\n      break;\n    case 'xlinkRole':\n      setValueForNamespacedAttribute(\n        domElement,\n        xlinkNamespace,\n        'xlink:role',\n        value,\n      );\n      break;\n    case 'xlinkShow':\n      setValueForNamespacedAttribute(\n        domElement,\n        xlinkNamespace,\n        'xlink:show',\n        value,\n      );\n      break;\n    case 'xlinkTitle':\n      setValueForNamespacedAttribute(\n        domElement,\n        xlinkNamespace,\n        'xlink:title',\n        value,\n      );\n      break;\n    case 'xlinkType':\n      setValueForNamespacedAttribute(\n        domElement,\n        xlinkNamespace,\n        'xlink:type',\n        value,\n      );\n      break;\n    case 'xmlBase':\n      setValueForNamespacedAttribute(\n        domElement,\n        xmlNamespace,\n        'xml:base',\n        value,\n      );\n      break;\n    case 'xmlLang':\n      setValueForNamespacedAttribute(\n        domElement,\n        xmlNamespace,\n        'xml:lang',\n        value,\n      );\n      break;\n    case 'xmlSpace':\n      setValueForNamespacedAttribute(\n        domElement,\n        xmlNamespace,\n        'xml:space',\n        value,\n      );\n      break;\n    // Properties that should not be allowed on custom elements.\n    case 'is': {\n      if (__DEV__) {\n        if (prevValue != null) {\n          console.error(\n            'Cannot update the \"is\" prop after it has been initialized.',\n          );\n        }\n      }\n      // TODO: We shouldn't actually set this attribute, because we've already\n      // passed it to createElement. We don't also need the attribute.\n      // However, our tests currently query for it so it's plausible someone\n      // else does too so it's break.\n      setValueForAttribute(domElement, 'is', value);\n      break;\n    }\n    case 'innerText':\n    case 'textContent':\n      return;\n    case 'popoverTarget':\n      if (__DEV__) {\n        if (\n          !didWarnPopoverTargetObject &&\n          value != null &&\n          typeof value === 'object'\n        ) {\n          didWarnPopoverTargetObject = true;\n          console.error(\n            'The `popoverTarget` prop expects the ID of an Element as a string. Received %s instead.',\n            value,\n          );\n        }\n      }\n    // Fall through\n    default: {\n      if (\n        key.length > 2 &&\n        (key[0] === 'o' || key[0] === 'O') &&\n        (key[1] === 'n' || key[1] === 'N')\n      ) {\n        if (\n          __DEV__ &&\n          registrationNameDependencies.hasOwnProperty(key) &&\n          value != null &&\n          typeof value !== 'function'\n        ) {\n          warnForInvalidEventListener(key, value);\n        }\n        // Updating events doesn't affect the visuals.\n        return;\n      } else {\n        const attributeName = getAttributeAlias(key);\n        setValueForAttribute(domElement, attributeName, value);\n      }\n    }\n  }\n  // To avoid marking things as host mutations we do early returns above.\n  trackHostMutation();\n}\n\nfunction setPropOnCustomElement(\n  domElement         ,\n  tag        ,\n  key        ,\n  value       ,\n  props     ,\n  prevValue       ,\n)       {\n  switch (key) {\n    case 'style': {\n      setValueForStyles(domElement, value, prevValue);\n      return;\n    }\n    case 'dangerouslySetInnerHTML': {\n      if (value != null) {\n        if (typeof value !== 'object' || !('__html' in value)) {\n          throw new Error(\n            '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +\n              'Please visit https://react.dev/link/dangerously-set-inner-html ' +\n              'for more information.',\n          );\n        }\n        const nextHtml      = value.__html;\n        if (nextHtml != null) {\n          if (props.children != null) {\n            throw new Error(\n              'Can only set one of `children` or `props.dangerouslySetInnerHTML`.',\n            );\n          }\n          domElement.innerHTML = nextHtml;\n        }\n      }\n      break;\n    }\n    case 'children': {\n      if (typeof value === 'string') {\n        setTextContent(domElement, value);\n      } else if (typeof value === 'number' || typeof value === 'bigint') {\n        // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n        setTextContent(domElement, '' + value);\n      } else {\n        return;\n      }\n      break;\n    }\n    case 'onScroll': {\n      if (value != null) {\n        if (__DEV__ && typeof value !== 'function') {\n          warnForInvalidEventListener(key, value);\n        }\n        listenToNonDelegatedEvent('scroll', domElement);\n      }\n      return;\n    }\n    case 'onScrollEnd': {\n      if (value != null) {\n        if (__DEV__ && typeof value !== 'function') {\n          warnForInvalidEventListener(key, value);\n        }\n        listenToNonDelegatedEvent('scrollend', domElement);\n        if (enableScrollEndPolyfill) {\n          // For use by the polyfill.\n          listenToNonDelegatedEvent('scroll', domElement);\n        }\n      }\n      return;\n    }\n    case 'onClick': {\n      // TODO: This cast may not be sound for SVG, MathML or custom elements.\n      if (value != null) {\n        if (__DEV__ && typeof value !== 'function') {\n          warnForInvalidEventListener(key, value);\n        }\n        trapClickOnNonInteractiveElement(((domElement     )             ));\n      }\n      return;\n    }\n    case 'suppressContentEditableWarning':\n    case 'suppressHydrationWarning':\n    case 'innerHTML':\n    case 'ref': {\n      // Noop\n      return;\n    }\n    case 'innerText': // Properties\n    case 'textContent':\n      return;\n    // Fall through\n    default: {\n      if (registrationNameDependencies.hasOwnProperty(key)) {\n        if (__DEV__ && value != null && typeof value !== 'function') {\n          warnForInvalidEventListener(key, value);\n        }\n        return;\n      } else {\n        setValueForPropertyOnCustomComponent(domElement, key, value);\n        // We track mutations inside this call.\n        return;\n      }\n    }\n  }\n  // To avoid marking things as host mutations we do early returns above.\n  trackHostMutation();\n}\n\nexport function setInitialProperties(\n  domElement         ,\n  tag        ,\n  props        ,\n)       {\n  if (__DEV__) {\n    validatePropertiesInDevelopment(tag, props);\n  }\n\n  // TODO: Make sure that we check isMounted before firing any of these events.\n\n  switch (tag) {\n    case 'div':\n    case 'span':\n    case 'svg':\n    case 'path':\n    case 'a':\n    case 'g':\n    case 'p':\n    case 'li': {\n      // Fast track the most common tag types\n      break;\n    }\n    // img tags previously were implemented as void elements with non delegated events however Safari (and possibly Firefox)\n    // begin fetching the image as soon as the `src` or `srcSet` property is set and if we set these before other properties\n    // that can modify the request (such as crossorigin) or the resource fetch (such as sizes) then the browser will load\n    // the wrong thing or load more than one thing. This implementation ensures src and srcSet are set on the instance last\n    case 'img': {\n      listenToNonDelegatedEvent('error', domElement);\n      listenToNonDelegatedEvent('load', domElement);\n      // Mostly a port of Void Element logic with special casing to ensure srcset and src are set last\n      let hasSrc = false;\n      let hasSrcSet = false;\n      for (const propKey in props) {\n        if (!props.hasOwnProperty(propKey)) {\n          continue;\n        }\n        const propValue = props[propKey];\n        if (propValue == null) {\n          continue;\n        }\n        switch (propKey) {\n          case 'src':\n            hasSrc = true;\n            break;\n          case 'srcSet':\n            hasSrcSet = true;\n            break;\n          case 'children':\n          case 'dangerouslySetInnerHTML': {\n            // TODO: Can we make this a DEV warning to avoid this deny list?\n            throw new Error(\n              `${tag} is a void element tag and must neither have \\`children\\` nor ` +\n                'use `dangerouslySetInnerHTML`.',\n            );\n          }\n          // defaultChecked and defaultValue are ignored by setProp\n          default: {\n            setProp(domElement, tag, propKey, propValue, props, null);\n          }\n        }\n      }\n      if (hasSrcSet) {\n        setProp(domElement, tag, 'srcSet', props.srcSet, props, null);\n      }\n      if (hasSrc) {\n        setProp(domElement, tag, 'src', props.src, props, null);\n      }\n      return;\n    }\n    case 'input': {\n      if (__DEV__) {\n        checkControlledValueProps('input', props);\n      }\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n      listenToNonDelegatedEvent('invalid', domElement);\n\n      let name = null;\n      let type = null;\n      let value = null;\n      let defaultValue = null;\n      let checked = null;\n      let defaultChecked = null;\n      for (const propKey in props) {\n        if (!props.hasOwnProperty(propKey)) {\n          continue;\n        }\n        const propValue = props[propKey];\n        if (propValue == null) {\n          continue;\n        }\n        switch (propKey) {\n          case 'name': {\n            name = propValue;\n            break;\n          }\n          case 'type': {\n            type = propValue;\n            break;\n          }\n          case 'checked': {\n            checked = propValue;\n            break;\n          }\n          case 'defaultChecked': {\n            defaultChecked = propValue;\n            break;\n          }\n          case 'value': {\n            value = propValue;\n            break;\n          }\n          case 'defaultValue': {\n            defaultValue = propValue;\n            break;\n          }\n          case 'children':\n          case 'dangerouslySetInnerHTML': {\n            if (propValue != null) {\n              throw new Error(\n                `${tag} is a void element tag and must neither have \\`children\\` nor ` +\n                  'use `dangerouslySetInnerHTML`.',\n              );\n            }\n            break;\n          }\n          default: {\n            setProp(domElement, tag, propKey, propValue, props, null);\n          }\n        }\n      }\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      validateInputProps(domElement, props);\n      initInput(\n        domElement,\n        value,\n        defaultValue,\n        checked,\n        defaultChecked,\n        type,\n        name,\n        false,\n      );\n      return;\n    }\n    case 'select': {\n      if (__DEV__) {\n        checkControlledValueProps('select', props);\n      }\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n      listenToNonDelegatedEvent('invalid', domElement);\n      let value = null;\n      let defaultValue = null;\n      let multiple = null;\n      for (const propKey in props) {\n        if (!props.hasOwnProperty(propKey)) {\n          continue;\n        }\n        const propValue = props[propKey];\n        if (propValue == null) {\n          continue;\n        }\n        switch (propKey) {\n          case 'value': {\n            value = propValue;\n            // This is handled by initSelect below.\n            break;\n          }\n          case 'defaultValue': {\n            defaultValue = propValue;\n            // This is handled by initSelect below.\n            break;\n          }\n          case 'multiple': {\n            multiple = propValue;\n            // TODO: We don't actually have to fall through here because we set it\n            // in initSelect anyway. We can remove the special case in setProp.\n          }\n          // Fallthrough\n          default: {\n            setProp(domElement, tag, propKey, propValue, props, null);\n          }\n        }\n      }\n      validateSelectProps(domElement, props);\n      initSelect(domElement, value, defaultValue, multiple);\n      return;\n    }\n    case 'textarea': {\n      if (__DEV__) {\n        checkControlledValueProps('textarea', props);\n      }\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n      listenToNonDelegatedEvent('invalid', domElement);\n      let value = null;\n      let defaultValue = null;\n      let children = null;\n      for (const propKey in props) {\n        if (!props.hasOwnProperty(propKey)) {\n          continue;\n        }\n        const propValue = props[propKey];\n        if (propValue == null) {\n          continue;\n        }\n        switch (propKey) {\n          case 'value': {\n            value = propValue;\n            // This is handled by initTextarea below.\n            break;\n          }\n          case 'defaultValue': {\n            defaultValue = propValue;\n            break;\n          }\n          case 'children': {\n            children = propValue;\n            // Handled by initTextarea above.\n            break;\n          }\n          case 'dangerouslySetInnerHTML': {\n            if (propValue != null) {\n              // TODO: Do we really need a special error message for this. It's also pretty blunt.\n              throw new Error(\n                '`dangerouslySetInnerHTML` does not make sense on <textarea>.',\n              );\n            }\n            break;\n          }\n          default: {\n            setProp(domElement, tag, propKey, propValue, props, null);\n          }\n        }\n      }\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      validateTextareaProps(domElement, props);\n      initTextarea(domElement, value, defaultValue, children);\n      return;\n    }\n    case 'option': {\n      validateOptionProps(domElement, props);\n      for (const propKey in props) {\n        if (!props.hasOwnProperty(propKey)) {\n          continue;\n        }\n        const propValue = props[propKey];\n        if (propValue == null) {\n          continue;\n        }\n        switch (propKey) {\n          case 'selected': {\n            // TODO: Remove support for selected on option.\n            (domElement     ).selected =\n              propValue &&\n              typeof propValue !== 'function' &&\n              typeof propValue !== 'symbol';\n            break;\n          }\n          default: {\n            setProp(domElement, tag, propKey, propValue, props, null);\n          }\n        }\n      }\n      return;\n    }\n    case 'dialog': {\n      listenToNonDelegatedEvent('beforetoggle', domElement);\n      listenToNonDelegatedEvent('toggle', domElement);\n      listenToNonDelegatedEvent('cancel', domElement);\n      listenToNonDelegatedEvent('close', domElement);\n      break;\n    }\n    case 'iframe':\n    case 'object': {\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the load event.\n      listenToNonDelegatedEvent('load', domElement);\n      break;\n    }\n    case 'video':\n    case 'audio': {\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for all the media events.\n      for (let i = 0; i < mediaEventTypes.length; i++) {\n        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);\n      }\n      break;\n    }\n    case 'image': {\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for error and load events.\n      listenToNonDelegatedEvent('error', domElement);\n      listenToNonDelegatedEvent('load', domElement);\n      break;\n    }\n    case 'details': {\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the toggle event.\n      listenToNonDelegatedEvent('toggle', domElement);\n      break;\n    }\n    case 'embed':\n    case 'source':\n    case 'link': {\n      // These are void elements that also need delegated events.\n      listenToNonDelegatedEvent('error', domElement);\n      listenToNonDelegatedEvent('load', domElement);\n      // We fallthrough to the return of the void elements\n    }\n    case 'area':\n    case 'base':\n    case 'br':\n    case 'col':\n    case 'hr':\n    case 'keygen':\n    case 'meta':\n    case 'param':\n    case 'track':\n    case 'wbr':\n    case 'menuitem': {\n      // Void elements\n      for (const propKey in props) {\n        if (!props.hasOwnProperty(propKey)) {\n          continue;\n        }\n        const propValue = props[propKey];\n        if (propValue == null) {\n          continue;\n        }\n        switch (propKey) {\n          case 'children':\n          case 'dangerouslySetInnerHTML': {\n            // TODO: Can we make this a DEV warning to avoid this deny list?\n            throw new Error(\n              `${tag} is a void element tag and must neither have \\`children\\` nor ` +\n                'use `dangerouslySetInnerHTML`.',\n            );\n          }\n          // defaultChecked and defaultValue are ignored by setProp\n          default: {\n            setProp(domElement, tag, propKey, propValue, props, null);\n          }\n        }\n      }\n      return;\n    }\n    default: {\n      if (isCustomElement(tag, props)) {\n        for (const propKey in props) {\n          if (!props.hasOwnProperty(propKey)) {\n            continue;\n          }\n          const propValue = props[propKey];\n          if (propValue === undefined) {\n            continue;\n          }\n          setPropOnCustomElement(\n            domElement,\n            tag,\n            propKey,\n            propValue,\n            props,\n            undefined,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  for (const propKey in props) {\n    if (!props.hasOwnProperty(propKey)) {\n      continue;\n    }\n    const propValue = props[propKey];\n    if (propValue == null) {\n      continue;\n    }\n    setProp(domElement, tag, propKey, propValue, props, null);\n  }\n}\n\nexport function updateProperties(\n  domElement         ,\n  tag        ,\n  lastProps        ,\n  nextProps        ,\n)       {\n  if (__DEV__) {\n    validatePropertiesInDevelopment(tag, nextProps);\n  }\n\n  switch (tag) {\n    case 'div':\n    case 'span':\n    case 'svg':\n    case 'path':\n    case 'a':\n    case 'g':\n    case 'p':\n    case 'li': {\n      // Fast track the most common tag types\n      break;\n    }\n    case 'input': {\n      let name = null;\n      let type = null;\n      let value = null;\n      let defaultValue = null;\n      let lastDefaultValue = null;\n      let checked = null;\n      let defaultChecked = null;\n      for (const propKey in lastProps) {\n        const lastProp = lastProps[propKey];\n        if (lastProps.hasOwnProperty(propKey) && lastProp != null) {\n          switch (propKey) {\n            case 'checked': {\n              break;\n            }\n            case 'value': {\n              // This is handled by updateWrapper below.\n              break;\n            }\n            case 'defaultValue': {\n              lastDefaultValue = lastProp;\n            }\n            // defaultChecked and defaultValue are ignored by setProp\n            // Fallthrough\n            default: {\n              if (!nextProps.hasOwnProperty(propKey))\n                setProp(domElement, tag, propKey, null, nextProps, lastProp);\n            }\n          }\n        }\n      }\n      for (const propKey in nextProps) {\n        const nextProp = nextProps[propKey];\n        const lastProp = lastProps[propKey];\n        if (\n          nextProps.hasOwnProperty(propKey) &&\n          (nextProp != null || lastProp != null)\n        ) {\n          switch (propKey) {\n            case 'type': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              type = nextProp;\n              break;\n            }\n            case 'name': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              name = nextProp;\n              break;\n            }\n            case 'checked': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              checked = nextProp;\n              break;\n            }\n            case 'defaultChecked': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              defaultChecked = nextProp;\n              break;\n            }\n            case 'value': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              value = nextProp;\n              break;\n            }\n            case 'defaultValue': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              defaultValue = nextProp;\n              break;\n            }\n            case 'children':\n            case 'dangerouslySetInnerHTML': {\n              if (nextProp != null) {\n                throw new Error(\n                  `${tag} is a void element tag and must neither have \\`children\\` nor ` +\n                    'use `dangerouslySetInnerHTML`.',\n                );\n              }\n              break;\n            }\n            default: {\n              if (nextProp !== lastProp)\n                setProp(\n                  domElement,\n                  tag,\n                  propKey,\n                  nextProp,\n                  nextProps,\n                  lastProp,\n                );\n            }\n          }\n        }\n      }\n\n      if (__DEV__) {\n        const wasControlled =\n          lastProps.type === 'checkbox' || lastProps.type === 'radio'\n            ? lastProps.checked != null\n            : lastProps.value != null;\n        const isControlled =\n          nextProps.type === 'checkbox' || nextProps.type === 'radio'\n            ? nextProps.checked != null\n            : nextProps.value != null;\n\n        if (\n          !wasControlled &&\n          isControlled &&\n          !didWarnUncontrolledToControlled\n        ) {\n          console.error(\n            'A component is changing an uncontrolled input to be controlled. ' +\n              'This is likely caused by the value changing from undefined to ' +\n              'a defined value, which should not happen. ' +\n              'Decide between using a controlled or uncontrolled input ' +\n              'element for the lifetime of the component. More info: https://react.dev/link/controlled-components',\n          );\n          didWarnUncontrolledToControlled = true;\n        }\n        if (\n          wasControlled &&\n          !isControlled &&\n          !didWarnControlledToUncontrolled\n        ) {\n          console.error(\n            'A component is changing a controlled input to be uncontrolled. ' +\n              'This is likely caused by the value changing from a defined to ' +\n              'undefined, which should not happen. ' +\n              'Decide between using a controlled or uncontrolled input ' +\n              'element for the lifetime of the component. More info: https://react.dev/link/controlled-components',\n          );\n          didWarnControlledToUncontrolled = true;\n        }\n      }\n\n      // Update the wrapper around inputs *after* updating props. This has to\n      // happen after updating the rest of props. Otherwise HTML5 input validations\n      // raise warnings and prevent the new value from being assigned.\n      updateInput(\n        domElement,\n        value,\n        defaultValue,\n        lastDefaultValue,\n        checked,\n        defaultChecked,\n        type,\n        name,\n      );\n      return;\n    }\n    case 'select': {\n      let value = null;\n      let defaultValue = null;\n      let multiple = null;\n      let wasMultiple = null;\n      for (const propKey in lastProps) {\n        const lastProp = lastProps[propKey];\n        if (lastProps.hasOwnProperty(propKey) && lastProp != null) {\n          switch (propKey) {\n            case 'value': {\n              // This is handled by updateWrapper below.\n              break;\n            }\n            // defaultValue are ignored by setProp\n            case 'multiple': {\n              wasMultiple = lastProp;\n              // TODO: Move special case in here from setProp.\n            }\n            // Fallthrough\n            default: {\n              if (!nextProps.hasOwnProperty(propKey)) {\n                setProp(domElement, tag, propKey, null, nextProps, lastProp);\n              }\n            }\n          }\n        }\n      }\n      for (const propKey in nextProps) {\n        const nextProp = nextProps[propKey];\n        const lastProp = lastProps[propKey];\n        if (\n          nextProps.hasOwnProperty(propKey) &&\n          (nextProp != null || lastProp != null)\n        ) {\n          switch (propKey) {\n            case 'value': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              value = nextProp;\n              // This is handled by updateSelect below.\n              break;\n            }\n            case 'defaultValue': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              defaultValue = nextProp;\n              break;\n            }\n            case 'multiple': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              multiple = nextProp;\n              // TODO: Just move the special case in here from setProp.\n            }\n            // Fallthrough\n            default: {\n              if (nextProp !== lastProp)\n                setProp(\n                  domElement,\n                  tag,\n                  propKey,\n                  nextProp,\n                  nextProps,\n                  lastProp,\n                );\n            }\n          }\n        }\n      }\n      // <select> value update needs to occur after <option> children\n      // reconciliation\n      updateSelect(domElement, value, defaultValue, multiple, wasMultiple);\n      return;\n    }\n    case 'textarea': {\n      let value = null;\n      let defaultValue = null;\n      for (const propKey in lastProps) {\n        const lastProp = lastProps[propKey];\n        if (\n          lastProps.hasOwnProperty(propKey) &&\n          lastProp != null &&\n          !nextProps.hasOwnProperty(propKey)\n        ) {\n          switch (propKey) {\n            case 'value': {\n              // This is handled by updateTextarea below.\n              break;\n            }\n            case 'children': {\n              // TODO: This doesn't actually do anything if it updates.\n              break;\n            }\n            // defaultValue is ignored by setProp\n            default: {\n              setProp(domElement, tag, propKey, null, nextProps, lastProp);\n            }\n          }\n        }\n      }\n      for (const propKey in nextProps) {\n        const nextProp = nextProps[propKey];\n        const lastProp = lastProps[propKey];\n        if (\n          nextProps.hasOwnProperty(propKey) &&\n          (nextProp != null || lastProp != null)\n        ) {\n          switch (propKey) {\n            case 'value': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              value = nextProp;\n              // This is handled by updateTextarea below.\n              break;\n            }\n            case 'defaultValue': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              defaultValue = nextProp;\n              break;\n            }\n            case 'children': {\n              // TODO: This doesn't actually do anything if it updates.\n              break;\n            }\n            case 'dangerouslySetInnerHTML': {\n              if (nextProp != null) {\n                // TODO: Do we really need a special error message for this. It's also pretty blunt.\n                throw new Error(\n                  '`dangerouslySetInnerHTML` does not make sense on <textarea>.',\n                );\n              }\n              break;\n            }\n            default: {\n              if (nextProp !== lastProp)\n                setProp(\n                  domElement,\n                  tag,\n                  propKey,\n                  nextProp,\n                  nextProps,\n                  lastProp,\n                );\n            }\n          }\n        }\n      }\n      updateTextarea(domElement, value, defaultValue);\n      return;\n    }\n    case 'option': {\n      for (const propKey in lastProps) {\n        const lastProp = lastProps[propKey];\n        if (\n          lastProps.hasOwnProperty(propKey) &&\n          lastProp != null &&\n          !nextProps.hasOwnProperty(propKey)\n        ) {\n          switch (propKey) {\n            case 'selected': {\n              // TODO: Remove support for selected on option.\n              (domElement     ).selected = false;\n              break;\n            }\n            default: {\n              setProp(domElement, tag, propKey, null, nextProps, lastProp);\n            }\n          }\n        }\n      }\n      for (const propKey in nextProps) {\n        const nextProp = nextProps[propKey];\n        const lastProp = lastProps[propKey];\n        if (\n          nextProps.hasOwnProperty(propKey) &&\n          nextProp !== lastProp &&\n          (nextProp != null || lastProp != null)\n        ) {\n          switch (propKey) {\n            case 'selected': {\n              if (nextProp !== lastProp) {\n                trackHostMutation();\n              }\n              // TODO: Remove support for selected on option.\n              (domElement     ).selected =\n                nextProp &&\n                typeof nextProp !== 'function' &&\n                typeof nextProp !== 'symbol';\n              break;\n            }\n            default: {\n              setProp(domElement, tag, propKey, nextProp, nextProps, lastProp);\n            }\n          }\n        }\n      }\n      return;\n    }\n    case 'img':\n    case 'link':\n    case 'area':\n    case 'base':\n    case 'br':\n    case 'col':\n    case 'embed':\n    case 'hr':\n    case 'keygen':\n    case 'meta':\n    case 'param':\n    case 'source':\n    case 'track':\n    case 'wbr':\n    case 'menuitem': {\n      // Void elements\n      for (const propKey in lastProps) {\n        const lastProp = lastProps[propKey];\n        if (\n          lastProps.hasOwnProperty(propKey) &&\n          lastProp != null &&\n          !nextProps.hasOwnProperty(propKey)\n        ) {\n          setProp(domElement, tag, propKey, null, nextProps, lastProp);\n        }\n      }\n      for (const propKey in nextProps) {\n        const nextProp = nextProps[propKey];\n        const lastProp = lastProps[propKey];\n        if (\n          nextProps.hasOwnProperty(propKey) &&\n          nextProp !== lastProp &&\n          (nextProp != null || lastProp != null)\n        ) {\n          switch (propKey) {\n            case 'children':\n            case 'dangerouslySetInnerHTML': {\n              if (nextProp != null) {\n                // TODO: Can we make this a DEV warning to avoid this deny list?\n                throw new Error(\n                  `${tag} is a void element tag and must neither have \\`children\\` nor ` +\n                    'use `dangerouslySetInnerHTML`.',\n                );\n              }\n              break;\n            }\n            // defaultChecked and defaultValue are ignored by setProp\n            default: {\n              setProp(domElement, tag, propKey, nextProp, nextProps, lastProp);\n            }\n          }\n        }\n      }\n      return;\n    }\n    default: {\n      if (isCustomElement(tag, nextProps)) {\n        for (const propKey in lastProps) {\n          const lastProp = lastProps[propKey];\n          if (\n            lastProps.hasOwnProperty(propKey) &&\n            lastProp !== undefined &&\n            !nextProps.hasOwnProperty(propKey)\n          ) {\n            setPropOnCustomElement(\n              domElement,\n              tag,\n              propKey,\n              undefined,\n              nextProps,\n              lastProp,\n            );\n          }\n        }\n        for (const propKey in nextProps) {\n          const nextProp = nextProps[propKey];\n          const lastProp = lastProps[propKey];\n          if (\n            nextProps.hasOwnProperty(propKey) &&\n            nextProp !== lastProp &&\n            (nextProp !== undefined || lastProp !== undefined)\n          ) {\n            setPropOnCustomElement(\n              domElement,\n              tag,\n              propKey,\n              nextProp,\n              nextProps,\n              lastProp,\n            );\n          }\n        }\n        return;\n      }\n    }\n  }\n\n  for (const propKey in lastProps) {\n    const lastProp = lastProps[propKey];\n    if (\n      lastProps.hasOwnProperty(propKey) &&\n      lastProp != null &&\n      !nextProps.hasOwnProperty(propKey)\n    ) {\n      setProp(domElement, tag, propKey, null, nextProps, lastProp);\n    }\n  }\n  for (const propKey in nextProps) {\n    const nextProp = nextProps[propKey];\n    const lastProp = lastProps[propKey];\n    if (\n      nextProps.hasOwnProperty(propKey) &&\n      nextProp !== lastProp &&\n      (nextProp != null || lastProp != null)\n    ) {\n      setProp(domElement, tag, propKey, nextProp, nextProps, lastProp);\n    }\n  }\n}\n\nfunction getPossibleStandardName(propName        )                {\n  if (__DEV__) {\n    const lowerCasedName = propName.toLowerCase();\n    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      return null;\n    }\n    return possibleStandardNames[lowerCasedName] || null;\n  }\n  return null;\n}\n\nfunction getPropNameFromAttributeName(attrName        )         {\n  switch (attrName) {\n    case 'class':\n      return 'className';\n    case 'for':\n      return 'htmlFor';\n    // TODO: The rest of the aliases.\n    default:\n      return attrName;\n  }\n}\n\nexport function getPropsFromElement(domElement         )         {\n  const serverDifferences                              = {};\n  const attributes = domElement.attributes;\n  for (let i = 0; i < attributes.length; i++) {\n    const attr = attributes[i];\n    serverDifferences[getPropNameFromAttributeName(attr.name)] =\n      attr.name.toLowerCase() === 'style'\n        ? getStylesObjectFromElement(domElement)\n        : attr.value;\n  }\n  return serverDifferences;\n}\n\nfunction getStylesObjectFromElement(domElement         )   \n                              \n  {\n  const serverValueInObjectForm                           = {};\n  const style = ((domElement     )             ).style;\n  for (let i = 0; i < style.length; i++) {\n    const styleName         = style[i];\n    // TODO: We should use the original prop value here if it is equivalent.\n    // TODO: We could use the original client capitalization if the equivalent\n    // other capitalization exists in the DOM.\n    serverValueInObjectForm[styleName] = style.getPropertyValue(styleName);\n  }\n  return serverValueInObjectForm;\n}\n\nfunction diffHydratedStyles(\n  domElement         ,\n  value       ,\n  serverDifferences                             ,\n)       {\n  if (value != null && typeof value !== 'object') {\n    if (__DEV__) {\n      console.error(\n        'The `style` prop expects a mapping from style properties to values, ' +\n          \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" +\n          'using JSX.',\n      );\n    }\n    return;\n  }\n  // First we compare the string form and see if it's equivalent.\n  // This lets us bail out on anything that used to pass in this form.\n  // It also lets us compare anything that's not parsed by this browser.\n  const clientValue = createDangerousStringForStyles(value);\n  const serverValue = domElement.getAttribute('style');\n\n  if (serverValue === clientValue) {\n    return;\n  }\n  const normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);\n  const normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);\n  if (normalizedServerValue === normalizedClientValue) {\n    return;\n  }\n\n  // Otherwise, we create the object from the DOM for the diff view.\n  serverDifferences.style = getStylesObjectFromElement(domElement);\n}\n\nfunction hydrateAttribute(\n  domElement         ,\n  propKey        ,\n  attributeName        ,\n  value     ,\n  extraAttributes             ,\n  serverDifferences                             ,\n)       {\n  extraAttributes.delete(attributeName);\n  const serverValue = domElement.getAttribute(attributeName);\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n      case 'boolean':\n        return;\n    }\n  } else {\n    if (value == null) {\n      // We had an attribute but shouldn't have had one, so read it\n      // for the error message.\n    } else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n        case 'boolean':\n          break;\n        default: {\n          if (__DEV__) {\n            checkAttributeStringCoercion(value, propKey);\n          }\n          if (serverValue === '' + value) {\n            return;\n          }\n        }\n      }\n    }\n  }\n  warnForPropDifference(propKey, serverValue, value, serverDifferences);\n}\n\nfunction hydrateBooleanAttribute(\n  domElement         ,\n  propKey        ,\n  attributeName        ,\n  value     ,\n  extraAttributes             ,\n  serverDifferences                             ,\n)       {\n  extraAttributes.delete(attributeName);\n  const serverValue = domElement.getAttribute(attributeName);\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'function':\n      case 'symbol':\n        return;\n    }\n    if (!value) {\n      return;\n    }\n  } else {\n    switch (typeof value) {\n      case 'function':\n      case 'symbol':\n        break;\n      default: {\n        if (value) {\n          // If this was a boolean, it doesn't matter what the value is\n          // the fact that we have it is the same as the expected.\n          // As long as it's positive.\n          return;\n        }\n      }\n    }\n  }\n  warnForPropDifference(propKey, serverValue, value, serverDifferences);\n}\n\nfunction hydrateOverloadedBooleanAttribute(\n  domElement         ,\n  propKey        ,\n  attributeName        ,\n  value     ,\n  extraAttributes             ,\n  serverDifferences                             ,\n)       {\n  extraAttributes.delete(attributeName);\n  const serverValue = domElement.getAttribute(attributeName);\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n        return;\n      default:\n        if (value === false) {\n          return;\n        }\n    }\n  } else {\n    if (value == null) {\n      // We had an attribute but shouldn't have had one, so read it\n      // for the error message.\n    } else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n          break;\n        case 'boolean':\n          if (value === true && serverValue === '') {\n            return;\n          }\n          break;\n        default: {\n          if (__DEV__) {\n            checkAttributeStringCoercion(value, propKey);\n          }\n          if (serverValue === '' + value) {\n            return;\n          }\n        }\n      }\n    }\n  }\n  warnForPropDifference(propKey, serverValue, value, serverDifferences);\n}\n\nfunction hydrateBooleanishAttribute(\n  domElement         ,\n  propKey        ,\n  attributeName        ,\n  value     ,\n  extraAttributes             ,\n  serverDifferences                             ,\n)       {\n  extraAttributes.delete(attributeName);\n  const serverValue = domElement.getAttribute(attributeName);\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n        return;\n    }\n  } else {\n    if (value == null) {\n      // We had an attribute but shouldn't have had one, so read it\n      // for the error message.\n    } else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n          break;\n        default: {\n          if (__DEV__) {\n            checkAttributeStringCoercion(value, attributeName);\n          }\n          if (serverValue === '' + (value     )) {\n            return;\n          }\n        }\n      }\n    }\n  }\n  warnForPropDifference(propKey, serverValue, value, serverDifferences);\n}\n\nfunction hydrateNumericAttribute(\n  domElement         ,\n  propKey        ,\n  attributeName        ,\n  value     ,\n  extraAttributes             ,\n  serverDifferences                             ,\n)       {\n  extraAttributes.delete(attributeName);\n  const serverValue = domElement.getAttribute(attributeName);\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n      case 'boolean':\n        return;\n      default:\n        if (isNaN(value)) {\n          return;\n        }\n    }\n  } else {\n    if (value == null) {\n      // We had an attribute but shouldn't have had one, so read it\n      // for the error message.\n    } else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n        case 'boolean':\n          break;\n        default: {\n          if (isNaN(value)) {\n            // We had an attribute but shouldn't have had one, so read it\n            // for the error message.\n            break;\n          }\n          if (__DEV__) {\n            checkAttributeStringCoercion(value, propKey);\n          }\n          if (serverValue === '' + value) {\n            return;\n          }\n        }\n      }\n    }\n  }\n  warnForPropDifference(propKey, serverValue, value, serverDifferences);\n}\n\nfunction hydratePositiveNumericAttribute(\n  domElement         ,\n  propKey        ,\n  attributeName        ,\n  value     ,\n  extraAttributes             ,\n  serverDifferences                             ,\n)       {\n  extraAttributes.delete(attributeName);\n  const serverValue = domElement.getAttribute(attributeName);\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n      case 'boolean':\n        return;\n      default:\n        if (isNaN(value) || value < 1) {\n          return;\n        }\n    }\n  } else {\n    if (value == null) {\n      // We had an attribute but shouldn't have had one, so read it\n      // for the error message.\n    } else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n        case 'boolean':\n          break;\n        default: {\n          if (isNaN(value) || value < 1) {\n            // We had an attribute but shouldn't have had one, so read it\n            // for the error message.\n            break;\n          }\n          if (__DEV__) {\n            checkAttributeStringCoercion(value, propKey);\n          }\n          if (serverValue === '' + value) {\n            return;\n          }\n        }\n      }\n    }\n  }\n  warnForPropDifference(propKey, serverValue, value, serverDifferences);\n}\n\nfunction hydrateSanitizedAttribute(\n  domElement         ,\n  propKey        ,\n  attributeName        ,\n  value     ,\n  extraAttributes             ,\n  serverDifferences                             ,\n)       {\n  extraAttributes.delete(attributeName);\n  const serverValue = domElement.getAttribute(attributeName);\n  if (serverValue === null) {\n    switch (typeof value) {\n      case 'undefined':\n      case 'function':\n      case 'symbol':\n      case 'boolean':\n        return;\n    }\n  } else {\n    if (value == null) {\n      // We had an attribute but shouldn't have had one, so read it\n      // for the error message.\n    } else {\n      switch (typeof value) {\n        case 'function':\n        case 'symbol':\n        case 'boolean':\n          break;\n        default: {\n          if (__DEV__) {\n            checkAttributeStringCoercion(value, propKey);\n          }\n          const sanitizedValue = sanitizeURL('' + value);\n          if (serverValue === sanitizedValue) {\n            return;\n          }\n        }\n      }\n    }\n  }\n  warnForPropDifference(propKey, serverValue, value, serverDifferences);\n}\n\nfunction hydrateSrcObjectAttribute(\n  domElement         ,\n  value      ,\n  extraAttributes             ,\n  serverDifferences                             ,\n)       {\n  const attributeName = 'src';\n  extraAttributes.delete(attributeName);\n  const serverValue = domElement.getAttribute(attributeName);\n  if (serverValue != null && value != null) {\n    const size = value.size;\n    const type = value.type;\n    if (typeof size === 'number' && typeof type === 'string') {\n      if (serverValue.indexOf('data:' + type + ';base64,') === 0) {\n        // For Blobs we don't bother reading the actual data but just diff by checking if\n        // the byte length size of the Blob maches the length of the data url.\n        const prefixLength = 5 + type.length + 8;\n        let byteLength = ((serverValue.length - prefixLength) / 4) * 3;\n        if (serverValue[serverValue.length - 1] === '=') {\n          byteLength--;\n        }\n        if (serverValue[serverValue.length - 2] === '=') {\n          byteLength--;\n        }\n        if (byteLength === size) {\n          return;\n        }\n      }\n    }\n  }\n  warnForPropDifference('src', serverValue, value, serverDifferences);\n}\n\nfunction diffHydratedCustomComponent(\n  domElement         ,\n  tag        ,\n  props        ,\n  hostContext             ,\n  extraAttributes             ,\n  serverDifferences                             ,\n) {\n  for (const propKey in props) {\n    if (!props.hasOwnProperty(propKey)) {\n      continue;\n    }\n    const value = props[propKey];\n    if (value == null) {\n      continue;\n    }\n    if (registrationNameDependencies.hasOwnProperty(propKey)) {\n      if (typeof value !== 'function') {\n        warnForInvalidEventListener(propKey, value);\n      }\n      continue;\n    }\n    if (props.suppressHydrationWarning === true) {\n      // Don't bother comparing. We're ignoring all these warnings.\n      continue;\n    }\n    // Validate that the properties correspond to their expected values.\n    switch (propKey) {\n      case 'children': {\n        if (typeof value === 'string' || typeof value === 'number') {\n          warnForPropDifference(\n            'children',\n            domElement.textContent,\n            value,\n            serverDifferences,\n          );\n        }\n        continue;\n      }\n      // Checked above already\n      case 'suppressContentEditableWarning':\n      case 'suppressHydrationWarning':\n      case 'defaultValue':\n      case 'defaultChecked':\n      case 'innerHTML':\n      case 'ref':\n        // Noop\n        continue;\n      case 'dangerouslySetInnerHTML':\n        const serverHTML = domElement.innerHTML;\n        const nextHtml = value ? value.__html : undefined;\n        if (nextHtml != null) {\n          const expectedHTML = normalizeHTML(domElement, nextHtml);\n          warnForPropDifference(\n            propKey,\n            serverHTML,\n            expectedHTML,\n            serverDifferences,\n          );\n        }\n        continue;\n      case 'style':\n        extraAttributes.delete(propKey);\n        diffHydratedStyles(domElement, value, serverDifferences);\n        continue;\n      case 'offsetParent':\n      case 'offsetTop':\n      case 'offsetLeft':\n      case 'offsetWidth':\n      case 'offsetHeight':\n      case 'isContentEditable':\n      case 'outerText':\n      case 'outerHTML':\n        extraAttributes.delete(propKey.toLowerCase());\n        if (__DEV__) {\n          console.error(\n            'Assignment to read-only property will result in a no-op: `%s`',\n            propKey,\n          );\n        }\n        continue;\n      // Fall through\n      case 'className':\n        // className is a special cased property on the server to render as an attribute.\n        extraAttributes.delete('class');\n        const serverValue = getValueForAttributeOnCustomComponent(\n          domElement,\n          'class',\n          value,\n        );\n        warnForPropDifference(\n          'className',\n          serverValue,\n          value,\n          serverDifferences,\n        );\n        continue;\n      default: {\n        // This is a DEV-only path\n        const hostContextDev                 = (hostContext     );\n        const hostContextProd = hostContextDev.context;\n        if (\n          hostContextProd === HostContextNamespaceNone &&\n          tag !== 'svg' &&\n          tag !== 'math'\n        ) {\n          extraAttributes.delete(propKey.toLowerCase());\n        } else {\n          extraAttributes.delete(propKey);\n        }\n        const valueOnCustomComponent = getValueForAttributeOnCustomComponent(\n          domElement,\n          propKey,\n          value,\n        );\n        warnForPropDifference(\n          propKey,\n          valueOnCustomComponent,\n          value,\n          serverDifferences,\n        );\n      }\n    }\n  }\n}\n\n// This is the exact URL string we expect that Fizz renders if we provide a function action.\n// We use this for hydration warnings. It needs to be in sync with Fizz. Maybe makes sense\n// as a shared module for that reason.\nconst EXPECTED_FORM_ACTION_URL =\n  // eslint-disable-next-line no-script-url\n  \"javascript:throw new Error('React form unexpectedly submitted.')\";\n\nfunction diffHydratedGenericElement(\n  domElement         ,\n  tag        ,\n  props        ,\n  hostContext             ,\n  extraAttributes             ,\n  serverDifferences                             ,\n) {\n  for (const propKey in props) {\n    if (!props.hasOwnProperty(propKey)) {\n      continue;\n    }\n    const value = props[propKey];\n    if (value == null) {\n      continue;\n    }\n    if (registrationNameDependencies.hasOwnProperty(propKey)) {\n      if (typeof value !== 'function') {\n        warnForInvalidEventListener(propKey, value);\n      }\n      continue;\n    }\n    if (props.suppressHydrationWarning === true) {\n      // Don't bother comparing. We're ignoring all these warnings.\n      continue;\n    }\n    // Validate that the properties correspond to their expected values.\n    switch (propKey) {\n      case 'children': {\n        if (typeof value === 'string' || typeof value === 'number') {\n          warnForPropDifference(\n            'children',\n            domElement.textContent,\n            value,\n            serverDifferences,\n          );\n        }\n        continue;\n      }\n      // Checked above already\n      case 'suppressContentEditableWarning':\n      case 'suppressHydrationWarning':\n      case 'value': // Controlled attributes are not validated\n      case 'checked': // TODO: Only ignore them on controlled tags.\n      case 'selected':\n      case 'defaultValue':\n      case 'defaultChecked':\n      case 'innerHTML':\n      case 'ref':\n        // Noop\n        continue;\n      case 'dangerouslySetInnerHTML':\n        const serverHTML = domElement.innerHTML;\n        const nextHtml = value ? value.__html : undefined;\n        if (nextHtml != null) {\n          const expectedHTML = normalizeHTML(domElement, nextHtml);\n          if (serverHTML !== expectedHTML) {\n            serverDifferences[propKey] = {\n              __html: serverHTML,\n            };\n          }\n        }\n        continue;\n      case 'className':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'class',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'tabIndex':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'tabindex',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'style':\n        extraAttributes.delete(propKey);\n        diffHydratedStyles(domElement, value, serverDifferences);\n        continue;\n      case 'multiple': {\n        extraAttributes.delete(propKey);\n        const serverValue = (domElement     ).multiple;\n        warnForPropDifference(propKey, serverValue, value, serverDifferences);\n        continue;\n      }\n      case 'muted': {\n        extraAttributes.delete(propKey);\n        const serverValue = (domElement     ).muted;\n        warnForPropDifference(propKey, serverValue, value, serverDifferences);\n        continue;\n      }\n      case 'autoFocus': {\n        extraAttributes.delete('autofocus');\n        const serverValue = (domElement     ).autofocus;\n        warnForPropDifference(propKey, serverValue, value, serverDifferences);\n        continue;\n      }\n      case 'data':\n        if (tag !== 'object') {\n          extraAttributes.delete(propKey);\n          const serverValue = (domElement     ).getAttribute('data');\n          warnForPropDifference(propKey, serverValue, value, serverDifferences);\n          continue;\n        }\n      // fallthrough\n      case 'src': {\n        if (enableSrcObject && typeof value === 'object' && value !== null) {\n          // Some tags support object sources like Blob, File, MediaSource and MediaStream.\n          if (tag === 'img' || tag === 'video' || tag === 'audio') {\n            try {\n              // Test if this is a compatible object\n              URL.revokeObjectURL(URL.createObjectURL((value     )));\n              hydrateSrcObjectAttribute(\n                domElement,\n                value,\n                extraAttributes,\n                serverDifferences,\n              );\n              continue;\n            } catch (x) {\n              // If not, just fall through to the normal toString flow.\n            }\n          } else {\n            if (__DEV__) {\n              try {\n                // This should always error.\n                URL.revokeObjectURL(URL.createObjectURL((value     )));\n                if (tag === 'source') {\n                  console.error(\n                    'Passing Blob, MediaSource or MediaStream to <source src> is not supported. ' +\n                      'Pass it directly to <img src>, <video src> or <audio src> instead.',\n                  );\n                } else {\n                  console.error(\n                    'Passing Blob, MediaSource or MediaStream to <%s src> is not supported.',\n                    tag,\n                  );\n                }\n              } catch (x) {}\n            }\n          }\n        }\n        // Fallthrough\n      }\n      case 'href':\n        if (\n          value === '' &&\n          // <a href=\"\"> is fine for \"reload\" links.\n          !(tag === 'a' && propKey === 'href') &&\n          !(tag === 'object' && propKey === 'data')\n        ) {\n          if (__DEV__) {\n            if (propKey === 'src') {\n              console.error(\n                'An empty string (\"\") was passed to the %s attribute. ' +\n                  'This may cause the browser to download the whole page again over the network. ' +\n                  'To fix this, either do not render the element at all ' +\n                  'or pass null to %s instead of an empty string.',\n                propKey,\n                propKey,\n              );\n            } else {\n              console.error(\n                'An empty string (\"\") was passed to the %s attribute. ' +\n                  'To fix this, either do not render the element at all ' +\n                  'or pass null to %s instead of an empty string.',\n                propKey,\n                propKey,\n              );\n            }\n          }\n          continue;\n        }\n        hydrateSanitizedAttribute(\n          domElement,\n          propKey,\n          propKey,\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'action':\n      case 'formAction': {\n        const serverValue = domElement.getAttribute(propKey);\n        if (typeof value === 'function') {\n          extraAttributes.delete(propKey.toLowerCase());\n          // The server can set these extra properties to implement actions.\n          // So we remove them from the extra attributes warnings.\n          if (propKey === 'formAction') {\n            extraAttributes.delete('name');\n            extraAttributes.delete('formenctype');\n            extraAttributes.delete('formmethod');\n            extraAttributes.delete('formtarget');\n          } else {\n            extraAttributes.delete('enctype');\n            extraAttributes.delete('method');\n            extraAttributes.delete('target');\n          }\n          // Ideally we should be able to warn if the server value was not a function\n          // however since the function can return any of these attributes any way it\n          // wants as a custom progressive enhancement, there's nothing to compare to.\n          // We can check if the function has the $FORM_ACTION property on the client\n          // and if it's not, warn, but that's an unnecessary constraint that they\n          // have to have the extra extension that doesn't do anything on the client.\n          continue;\n        } else if (serverValue === EXPECTED_FORM_ACTION_URL) {\n          extraAttributes.delete(propKey.toLowerCase());\n          warnForPropDifference(propKey, 'function', value, serverDifferences);\n          continue;\n        }\n        hydrateSanitizedAttribute(\n          domElement,\n          propKey,\n          propKey.toLowerCase(),\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      }\n      case 'xlinkHref':\n        hydrateSanitizedAttribute(\n          domElement,\n          propKey,\n          'xlink:href',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'contentEditable': {\n        // Lower-case Booleanish String\n        hydrateBooleanishAttribute(\n          domElement,\n          propKey,\n          'contenteditable',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      }\n      case 'spellCheck': {\n        // Lower-case Booleanish String\n        hydrateBooleanishAttribute(\n          domElement,\n          propKey,\n          'spellcheck',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      }\n      case 'draggable':\n      case 'autoReverse':\n      case 'externalResourcesRequired':\n      case 'focusable':\n      case 'preserveAlpha': {\n        // Case-sensitive Booleanish String\n        hydrateBooleanishAttribute(\n          domElement,\n          propKey,\n          propKey,\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      }\n      case 'allowFullScreen':\n      case 'async':\n      case 'autoPlay':\n      case 'controls':\n      case 'default':\n      case 'defer':\n      case 'disabled':\n      case 'disablePictureInPicture':\n      case 'disableRemotePlayback':\n      case 'formNoValidate':\n      case 'hidden':\n      case 'loop':\n      case 'noModule':\n      case 'noValidate':\n      case 'open':\n      case 'playsInline':\n      case 'readOnly':\n      case 'required':\n      case 'reversed':\n      case 'scoped':\n      case 'seamless':\n      case 'itemScope': {\n        // Some of these need to be lower case to remove them from the extraAttributes list.\n        hydrateBooleanAttribute(\n          domElement,\n          propKey,\n          propKey.toLowerCase(),\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      }\n      case 'capture':\n      case 'download': {\n        hydrateOverloadedBooleanAttribute(\n          domElement,\n          propKey,\n          propKey,\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      }\n      case 'cols':\n      case 'rows':\n      case 'size':\n      case 'span': {\n        hydratePositiveNumericAttribute(\n          domElement,\n          propKey,\n          propKey,\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      }\n      case 'rowSpan': {\n        hydrateNumericAttribute(\n          domElement,\n          propKey,\n          'rowspan',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      }\n      case 'start': {\n        hydrateNumericAttribute(\n          domElement,\n          propKey,\n          propKey,\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      }\n      case 'xHeight':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'x-height',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'xlinkActuate':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'xlink:actuate',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'xlinkArcrole':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'xlink:arcrole',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'xlinkRole':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'xlink:role',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'xlinkShow':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'xlink:show',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'xlinkTitle':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'xlink:title',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'xlinkType':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'xlink:type',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'xmlBase':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'xml:base',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'xmlLang':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'xml:lang',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'xmlSpace':\n        hydrateAttribute(\n          domElement,\n          propKey,\n          'xml:space',\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      case 'inert':\n        if (__DEV__) {\n          if (\n            value === '' &&\n            !didWarnForNewBooleanPropsWithEmptyValue[propKey]\n          ) {\n            didWarnForNewBooleanPropsWithEmptyValue[propKey] = true;\n            console.error(\n              'Received an empty string for a boolean attribute `%s`. ' +\n                'This will treat the attribute as if it were false. ' +\n                'Either pass `false` to silence this warning, or ' +\n                'pass `true` if you used an empty string in earlier versions of React to indicate this attribute is true.',\n              propKey,\n            );\n          }\n        }\n        hydrateBooleanAttribute(\n          domElement,\n          propKey,\n          propKey,\n          value,\n          extraAttributes,\n          serverDifferences,\n        );\n        continue;\n      default: {\n        if (\n          // shouldIgnoreAttribute\n          // We have already filtered out null/undefined and reserved words.\n          propKey.length > 2 &&\n          (propKey[0] === 'o' || propKey[0] === 'O') &&\n          (propKey[1] === 'n' || propKey[1] === 'N')\n        ) {\n          continue;\n        }\n        const attributeName = getAttributeAlias(propKey);\n        let isMismatchDueToBadCasing = false;\n\n        // This is a DEV-only path\n        const hostContextDev                 = (hostContext     );\n        const hostContextProd = hostContextDev.context;\n\n        if (\n          hostContextProd === HostContextNamespaceNone &&\n          tag !== 'svg' &&\n          tag !== 'math'\n        ) {\n          extraAttributes.delete(attributeName.toLowerCase());\n        } else {\n          const standardName = getPossibleStandardName(propKey);\n          if (standardName !== null && standardName !== propKey) {\n            // If an SVG prop is supplied with bad casing, it will\n            // be successfully parsed from HTML, but will produce a mismatch\n            // (and would be incorrectly rendered on the client).\n            // However, we already warn about bad casing elsewhere.\n            // So we'll skip the misleading extra mismatch warning in this case.\n            isMismatchDueToBadCasing = true;\n            extraAttributes.delete(standardName);\n          }\n          extraAttributes.delete(attributeName);\n        }\n        const serverValue = getValueForAttribute(\n          domElement,\n          attributeName,\n          value,\n        );\n        if (!isMismatchDueToBadCasing) {\n          warnForPropDifference(propKey, serverValue, value, serverDifferences);\n        }\n      }\n    }\n  }\n}\n\nexport function hydrateProperties(\n  domElement         ,\n  tag        ,\n  props        ,\n  hostContext             ,\n)          {\n  if (__DEV__) {\n    validatePropertiesInDevelopment(tag, props);\n  }\n\n  // TODO: Make sure that we check isMounted before firing any of these events.\n  switch (tag) {\n    case 'dialog':\n      listenToNonDelegatedEvent('cancel', domElement);\n      listenToNonDelegatedEvent('close', domElement);\n      break;\n    case 'iframe':\n    case 'object':\n    case 'embed':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the load event.\n      listenToNonDelegatedEvent('load', domElement);\n      break;\n    case 'video':\n    case 'audio':\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for all the media events.\n      for (let i = 0; i < mediaEventTypes.length; i++) {\n        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);\n      }\n      break;\n    case 'source':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the error event.\n      listenToNonDelegatedEvent('error', domElement);\n      break;\n    case 'img':\n    case 'image':\n    case 'link':\n      // We listen to these events in case to ensure emulated bubble\n      // listeners still fire for error and load events.\n      listenToNonDelegatedEvent('error', domElement);\n      listenToNonDelegatedEvent('load', domElement);\n      break;\n    case 'details':\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the toggle event.\n      listenToNonDelegatedEvent('toggle', domElement);\n      break;\n    case 'input':\n      if (__DEV__) {\n        checkControlledValueProps('input', props);\n      }\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n      listenToNonDelegatedEvent('invalid', domElement);\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      validateInputProps(domElement, props);\n      // For input and textarea we current always set the value property at\n      // post mount to force it to diverge from attributes. However, for\n      // option and select we don't quite do the same thing and select\n      // is not resilient to the DOM state changing so we don't do that here.\n      // TODO: Consider not doing this for input and textarea.\n      if (!enableHydrationChangeEvent) {\n        initInput(\n          domElement,\n          props.value,\n          props.defaultValue,\n          props.checked,\n          props.defaultChecked,\n          props.type,\n          props.name,\n          true,\n        );\n      }\n      break;\n    case 'option':\n      validateOptionProps(domElement, props);\n      break;\n    case 'select':\n      if (__DEV__) {\n        checkControlledValueProps('select', props);\n      }\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n      listenToNonDelegatedEvent('invalid', domElement);\n      validateSelectProps(domElement, props);\n      break;\n    case 'textarea':\n      if (__DEV__) {\n        checkControlledValueProps('textarea', props);\n      }\n      // We listen to this event in case to ensure emulated bubble\n      // listeners still fire for the invalid event.\n      listenToNonDelegatedEvent('invalid', domElement);\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      validateTextareaProps(domElement, props);\n      if (!enableHydrationChangeEvent) {\n        initTextarea(\n          domElement,\n          props.value,\n          props.defaultValue,\n          props.children,\n        );\n      }\n      break;\n  }\n\n  const children = props.children;\n  // For text content children we compare against textContent. This\n  // might match additional HTML that is hidden when we read it using\n  // textContent. E.g. \"foo\" will match \"f<span>oo</span>\" but that still\n  // satisfies our requirement. Our requirement is not to produce perfect\n  // HTML and attributes. Ideally we should preserve structure but it's\n  // ok not to if the visible content is still enough to indicate what\n  // even listeners these nodes might be wired up to.\n  // TODO: Warn if there is more than a single textNode as a child.\n  // TODO: Should we use domElement.firstChild.nodeValue to compare?\n  if (\n    typeof children === 'string' ||\n    typeof children === 'number' ||\n    typeof children === 'bigint'\n  ) {\n    if (\n      // $FlowFixMe[unsafe-addition] Flow doesn't want us to use `+` operator with string and bigint\n      domElement.textContent !== '' + children &&\n      props.suppressHydrationWarning !== true &&\n      !checkForUnmatchedText(domElement.textContent, children)\n    ) {\n      return false;\n    }\n  }\n\n  if (props.popover != null) {\n    // We listen to this event in case to ensure emulated bubble\n    // listeners still fire for the toggle event.\n    listenToNonDelegatedEvent('beforetoggle', domElement);\n    listenToNonDelegatedEvent('toggle', domElement);\n  }\n\n  if (props.onScroll != null) {\n    listenToNonDelegatedEvent('scroll', domElement);\n  }\n\n  if (props.onScrollEnd != null) {\n    listenToNonDelegatedEvent('scrollend', domElement);\n    if (enableScrollEndPolyfill) {\n      // For use by the polyfill.\n      listenToNonDelegatedEvent('scroll', domElement);\n    }\n  }\n\n  if (props.onClick != null) {\n    // TODO: This cast may not be sound for SVG, MathML or custom elements.\n    trapClickOnNonInteractiveElement(((domElement     )             ));\n  }\n\n  return true;\n}\n\nexport function diffHydratedProperties(\n  domElement         ,\n  tag        ,\n  props        ,\n  hostContext             ,\n)                {\n  const serverDifferences                              = {};\n  if (__DEV__) {\n    const extraAttributes              = new Set();\n    const attributes = domElement.attributes;\n    for (let i = 0; i < attributes.length; i++) {\n      const name = attributes[i].name.toLowerCase();\n      switch (name) {\n        // Controlled attributes are not validated\n        // TODO: Only ignore them on controlled tags.\n        case 'value':\n          break;\n        case 'checked':\n          break;\n        case 'selected':\n          break;\n        case 'vt-name':\n        case 'vt-update':\n        case 'vt-enter':\n        case 'vt-exit':\n        case 'vt-share':\n          if (enableViewTransition) {\n            // View Transition annotations are expected from the Server Runtime.\n            // However, if they're also specified on the client and don't match\n            // that's an error.\n            break;\n          }\n        // Fallthrough\n        default:\n          // Intentionally use the original name.\n          // See discussion in https://github.com/facebook/react/pull/10676.\n          extraAttributes.add(attributes[i].name);\n      }\n    }\n    if (isCustomElement(tag, props)) {\n      diffHydratedCustomComponent(\n        domElement,\n        tag,\n        props,\n        hostContext,\n        extraAttributes,\n        serverDifferences,\n      );\n    } else {\n      diffHydratedGenericElement(\n        domElement,\n        tag,\n        props,\n        hostContext,\n        extraAttributes,\n        serverDifferences,\n      );\n    }\n    if (extraAttributes.size > 0 && props.suppressHydrationWarning !== true) {\n      warnForExtraAttributes(domElement, extraAttributes, serverDifferences);\n    }\n  }\n  if (Object.keys(serverDifferences).length === 0) {\n    return null;\n  }\n  return serverDifferences;\n}\n\nexport function hydrateText(\n  textNode      ,\n  text        ,\n  parentProps               ,\n)          {\n  const isDifferent = textNode.nodeValue !== text;\n  if (\n    isDifferent &&\n    (parentProps === null || parentProps.suppressHydrationWarning !== true) &&\n    !checkForUnmatchedText(textNode.nodeValue, text)\n  ) {\n    return false;\n  }\n  return true;\n}\n\nexport function diffHydratedText(textNode      , text        )                {\n  if (textNode.nodeValue === text) {\n    return null;\n  }\n  const normalizedClientText = normalizeMarkupForTextOrAttribute(text);\n  const normalizedServerText = normalizeMarkupForTextOrAttribute(\n    textNode.nodeValue,\n  );\n  if (normalizedServerText === normalizedClientText) {\n    return null;\n  }\n  return textNode.nodeValue;\n}\n\nexport function restoreControlledState(\n  domElement         ,\n  tag        ,\n  props        ,\n)       {\n  switch (tag) {\n    case 'input':\n      restoreControlledInputState(domElement, props);\n      return;\n    case 'textarea':\n      restoreControlledTextareaState(domElement, props);\n      return;\n    case 'select':\n      restoreControlledSelectState(domElement, props);\n      return;\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                          \n                                                                              \n             \n               \n                              \n                              \n                                                 \n                                                                        \n                                                          \n                                                                                  \n             \n                  \n                     \n                           \n                      \n                       \n                             \n                                            \n                                                                   \n\nimport {NotPending} from '../shared/ReactDOMFormActions';\n\nimport {setSrcObject} from './ReactDOMSrcObject';\n\nimport {getCurrentRootHostContainer} from 'react-reconciler/src/ReactFiberHostContext';\nimport {runWithFiberInDEV} from 'react-reconciler/src/ReactCurrentFiber';\n\nimport hasOwnProperty from 'shared/hasOwnProperty';\nimport {checkAttributeStringCoercion} from 'shared/CheckStringCoercion';\nimport {REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\nimport {\n  isFiberContainedBy,\n  isFiberFollowing,\n  isFiberPreceding,\n} from 'react-reconciler/src/ReactFiberTreeReflection';\n\nexport {\n  setCurrentUpdatePriority,\n  getCurrentUpdatePriority,\n  resolveUpdatePriority,\n} from './ReactDOMUpdatePriority';\nimport {\n  precacheFiberNode,\n  updateFiberProps,\n  getFiberCurrentPropsFromNode,\n  getInstanceFromNode,\n  getClosestInstanceFromNode,\n  getFiberFromScopeInstance,\n  getInstanceFromNode as getInstanceFromNodeDOMTree,\n  isContainerMarkedAsRoot,\n  detachDeletedInstance,\n  getResourcesFromRoot,\n  isMarkedHoistable,\n  markNodeAsHoistable,\n  isOwnedInstance,\n} from './ReactDOMComponentTree';\nimport {\n  traverseFragmentInstance,\n  getFragmentParentHostFiber,\n  getNextSiblingHostFiber,\n  getInstanceFromHostFiber,\n  traverseFragmentInstanceDeeply,\n} from 'react-reconciler/src/ReactFiberTreeReflection';\n\nexport {detachDeletedInstance};\nimport {hasRole} from './DOMAccessibilityRoles';\nimport {\n  setInitialProperties,\n  updateProperties,\n  hydrateProperties,\n  hydrateText,\n  diffHydratedProperties,\n  getPropsFromElement,\n  diffHydratedText,\n  trapClickOnNonInteractiveElement,\n} from './ReactDOMComponent';\nimport {hydrateInput} from './ReactDOMInput';\nimport {hydrateTextarea} from './ReactDOMTextarea';\nimport {hydrateSelect} from './ReactDOMSelect';\nimport {getSelectionInformation, restoreSelection} from './ReactInputSelection';\nimport setTextContent from './setTextContent';\nimport {\n  validateDOMNesting,\n  validateTextNesting,\n  updatedAncestorInfoDev,\n} from './validateDOMNesting';\nimport {\n  isEnabled as ReactBrowserEventEmitterIsEnabled,\n  setEnabled as ReactBrowserEventEmitterSetEnabled,\n} from '../events/ReactDOMEventListener';\nimport {SVG_NAMESPACE, MATH_NAMESPACE} from './DOMNamespaces';\nimport {\n  ELEMENT_NODE,\n  TEXT_NODE,\n  COMMENT_NODE,\n  DOCUMENT_NODE,\n  DOCUMENT_TYPE_NODE,\n  DOCUMENT_FRAGMENT_NODE,\n} from './HTMLNodeType';\n\nimport {\n  flushEventReplaying,\n  retryIfBlockedOn,\n} from '../events/ReactDOMEventReplaying';\n\nimport {\n  enableCreateEventHandleAPI,\n  enableScopeAPI,\n  enableTrustedTypesIntegration,\n  disableLegacyMode,\n  enableMoveBefore,\n  disableCommentsAsDOMContainers,\n  enableSuspenseyImages,\n  enableSrcObject,\n  enableViewTransition,\n  enableHydrationChangeEvent,\n} from 'shared/ReactFeatureFlags';\nimport {\n  HostComponent,\n  HostHoistable,\n  HostText,\n  HostSingleton,\n} from 'react-reconciler/src/ReactWorkTags';\nimport {listenToAllSupportedEvents} from '../events/DOMPluginEventSystem';\nimport {validateLinkPropsForStyleResource} from '../shared/ReactDOMResourceValidation';\nimport escapeSelectorAttributeValueInsideDoubleQuotes from './escapeSelectorAttributeValueInsideDoubleQuotes';\nimport {flushSyncWork as flushSyncWorkOnAllRoots} from 'react-reconciler/src/ReactFiberWorkLoop';\nimport {requestFormReset as requestFormResetOnFiber} from 'react-reconciler/src/ReactFiberHooks';\n\nimport ReactDOMSharedInternals from 'shared/ReactDOMSharedInternals';\n\nexport {default as rendererVersion} from 'shared/ReactVersion';\n\nimport noop from 'shared/noop';\n\nexport const rendererPackageName = 'react-dom';\nexport const extraDevToolsConfig = null;\n\n                          \n                     \n                      \n                   \n                     \n                   \n                                     \n                                  \n           \n                     \n                                \n                                    \n                                 \n                                     \n                    \n                       \n                          \n                          \n                             \n       \n    \n                         \n                       \n                        \n                      \n              \n                \n                 \n                        \n                    \n                           \n                     \n                                                                    \n                  \n                             \n                                \n     \n  \n                 \n                  \n  \n                                       \n               \n                 \n             \n                        \n                      \n                      \n                    \n                     \n                   \n         \n      \n       \n    \n     \n  \n\n                       \n                                                               \n                                                                \n                                                                         \n                               \n                                \n\n                                                  \n                                                 \n                                   \n \n\n                                                 \n                                                 \n\n                                       \n                                \n            \n                \n                    \n                    \n                            \n                                            \n                              \n                           \n                                \n  \n                                            \n                                                           \n                                         \n                             // Unused\n                                      \n                           \n                                                     \n\n                                          \n\n                                      \n               \n                    \n                        \n                  \n                  \n  \n\n                             \n                                  \n                        \n  \n\nconst SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';\n\nconst ACTIVITY_START_DATA = '&';\nconst ACTIVITY_END_DATA = '/&';\nconst SUSPENSE_START_DATA = '$';\nconst SUSPENSE_END_DATA = '/$';\nconst SUSPENSE_PENDING_START_DATA = '$?';\nconst SUSPENSE_QUEUED_START_DATA = '$~';\nconst SUSPENSE_FALLBACK_START_DATA = '$!';\nconst PREAMBLE_CONTRIBUTION_HTML = 'html';\nconst PREAMBLE_CONTRIBUTION_BODY = 'body';\nconst PREAMBLE_CONTRIBUTION_HEAD = 'head';\nconst FORM_STATE_IS_MATCHING = 'F!';\nconst FORM_STATE_IS_NOT_MATCHING = 'F';\n\nconst DOCUMENT_READY_STATE_LOADING = 'loading';\n\nconst STYLE = 'style';\n\n                                             \nexport const HostContextNamespaceNone                       = 0;\nconst HostContextNamespaceSvg                       = 1;\nconst HostContextNamespaceMath                       = 2;\n\nlet eventsEnabled           = null;\nlet selectionInformation                              = null;\n\nexport * from 'react-reconciler/src/ReactFiberConfigWithNoPersistence';\n\nfunction getOwnerDocumentFromRootContainer(\n  rootContainerElement                                       ,\n)           {\n  return rootContainerElement.nodeType === DOCUMENT_NODE\n    ? (rootContainerElement     )\n    : rootContainerElement.ownerDocument;\n}\n\nexport function getRootHostContext(\n  rootContainerInstance           ,\n)              {\n  let type;\n  let context                 ;\n  const nodeType = rootContainerInstance.nodeType;\n  switch (nodeType) {\n    case DOCUMENT_NODE:\n    case DOCUMENT_FRAGMENT_NODE: {\n      type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';\n      const root = (rootContainerInstance     ).documentElement;\n      if (root) {\n        const namespaceURI = root.namespaceURI;\n        context = namespaceURI\n          ? getOwnHostContext(namespaceURI)\n          : HostContextNamespaceNone;\n      } else {\n        context = HostContextNamespaceNone;\n      }\n      break;\n    }\n    default: {\n      const container      =\n        !disableCommentsAsDOMContainers && nodeType === COMMENT_NODE\n          ? rootContainerInstance.parentNode\n          : rootContainerInstance;\n      type = container.tagName;\n      const namespaceURI = container.namespaceURI;\n      if (!namespaceURI) {\n        switch (type) {\n          case 'svg':\n            context = HostContextNamespaceSvg;\n            break;\n          case 'math':\n            context = HostContextNamespaceMath;\n            break;\n          default:\n            context = HostContextNamespaceNone;\n            break;\n        }\n      } else {\n        const ownContext = getOwnHostContext(namespaceURI);\n        context = getChildHostContextProd(ownContext, type);\n      }\n      break;\n    }\n  }\n  if (__DEV__) {\n    const validatedTag = type.toLowerCase();\n    const ancestorInfo = updatedAncestorInfoDev(null, validatedTag);\n    return {context, ancestorInfo};\n  }\n  return context;\n}\n\nfunction getOwnHostContext(namespaceURI        )                       {\n  switch (namespaceURI) {\n    case SVG_NAMESPACE:\n      return HostContextNamespaceSvg;\n    case MATH_NAMESPACE:\n      return HostContextNamespaceMath;\n    default:\n      return HostContextNamespaceNone;\n  }\n}\n\nfunction getChildHostContextProd(\n  parentNamespace                      ,\n  type        ,\n)                       {\n  if (parentNamespace === HostContextNamespaceNone) {\n    // No (or default) parent namespace: potential entry point.\n    switch (type) {\n      case 'svg':\n        return HostContextNamespaceSvg;\n      case 'math':\n        return HostContextNamespaceMath;\n      default:\n        return HostContextNamespaceNone;\n    }\n  }\n  if (parentNamespace === HostContextNamespaceSvg && type === 'foreignObject') {\n    // We're leaving SVG.\n    return HostContextNamespaceNone;\n  }\n  // By default, pass namespace below.\n  return parentNamespace;\n}\n\nexport function getChildHostContext(\n  parentHostContext             ,\n  type        ,\n)              {\n  if (__DEV__) {\n    const parentHostContextDev = ((parentHostContext     )                );\n    const context = getChildHostContextProd(parentHostContextDev.context, type);\n    const ancestorInfo = updatedAncestorInfoDev(\n      parentHostContextDev.ancestorInfo,\n      type,\n    );\n    return {context, ancestorInfo};\n  }\n  const parentNamespace = ((parentHostContext     )                 );\n  return getChildHostContextProd(parentNamespace, type);\n}\n\nexport function getPublicInstance(instance          )           {\n  return instance;\n}\n\nexport function prepareForCommit(containerInfo           )                {\n  eventsEnabled = ReactBrowserEventEmitterIsEnabled();\n  selectionInformation = getSelectionInformation(containerInfo);\n  let activeInstance = null;\n  if (enableCreateEventHandleAPI) {\n    const focusedElem = selectionInformation.focusedElem;\n    if (focusedElem !== null) {\n      activeInstance = getClosestInstanceFromNode(focusedElem);\n    }\n  }\n  ReactBrowserEventEmitterSetEnabled(false);\n  return activeInstance;\n}\n\nexport function beforeActiveInstanceBlur(internalInstanceHandle        )       {\n  if (enableCreateEventHandleAPI) {\n    ReactBrowserEventEmitterSetEnabled(true);\n    dispatchBeforeDetachedBlur(\n      (selectionInformation     ).focusedElem,\n      internalInstanceHandle,\n    );\n    ReactBrowserEventEmitterSetEnabled(false);\n  }\n}\n\nexport function afterActiveInstanceBlur()       {\n  if (enableCreateEventHandleAPI) {\n    ReactBrowserEventEmitterSetEnabled(true);\n    dispatchAfterDetachedBlur((selectionInformation     ).focusedElem);\n    ReactBrowserEventEmitterSetEnabled(false);\n  }\n}\n\nexport function resetAfterCommit(containerInfo           )       {\n  restoreSelection(selectionInformation, containerInfo);\n  ReactBrowserEventEmitterSetEnabled(eventsEnabled);\n  eventsEnabled = null;\n  selectionInformation = null;\n}\n\nexport function createHoistableInstance(\n  type        ,\n  props       ,\n  rootContainerInstance           ,\n  internalInstanceHandle        ,\n)           {\n  const ownerDocument = getOwnerDocumentFromRootContainer(\n    rootContainerInstance,\n  );\n\n  const domElement           = ownerDocument.createElement(type);\n  precacheFiberNode(internalInstanceHandle, domElement);\n  updateFiberProps(domElement, props);\n  setInitialProperties(domElement, type, props);\n  markNodeAsHoistable(domElement);\n  return domElement;\n}\n\nlet didWarnScriptTags = false;\nconst warnedUnknownTags   \n                         \n  = {\n  // There are working polyfills for <dialog>. Let people use it.\n  dialog: true,\n  // Electron ships a custom <webview> tag to display external web content in\n  // an isolated frame and process.\n  // This tag is not present in non Electron environments such as JSDom which\n  // is often used for testing purposes.\n  // @see https://electronjs.org/docs/api/webview-tag\n  webview: true,\n};\n\nexport function createInstance(\n  type        ,\n  props       ,\n  rootContainerInstance           ,\n  hostContext             ,\n  internalInstanceHandle        ,\n)           {\n  let hostContextProd                 ;\n  if (__DEV__) {\n    // TODO: take namespace into account when validating.\n    const hostContextDev                 = (hostContext     );\n    validateDOMNesting(type, hostContextDev.ancestorInfo);\n    hostContextProd = hostContextDev.context;\n  } else {\n    hostContextProd = (hostContext     );\n  }\n\n  const ownerDocument = getOwnerDocumentFromRootContainer(\n    rootContainerInstance,\n  );\n\n  let domElement          ;\n  switch (hostContextProd) {\n    case HostContextNamespaceSvg:\n      domElement = ownerDocument.createElementNS(SVG_NAMESPACE, type);\n      break;\n    case HostContextNamespaceMath:\n      domElement = ownerDocument.createElementNS(MATH_NAMESPACE, type);\n      break;\n    default:\n      switch (type) {\n        case 'svg': {\n          domElement = ownerDocument.createElementNS(SVG_NAMESPACE, type);\n          break;\n        }\n        case 'math': {\n          domElement = ownerDocument.createElementNS(MATH_NAMESPACE, type);\n          break;\n        }\n        case 'script': {\n          // Create the script via .innerHTML so its \"parser-inserted\" flag is\n          // set to true and it does not execute\n          const div = ownerDocument.createElement('div');\n          if (__DEV__) {\n            if (enableTrustedTypesIntegration && !didWarnScriptTags) {\n              console.error(\n                'Encountered a script tag while rendering React component. ' +\n                  'Scripts inside React components are never executed when rendering ' +\n                  'on the client. Consider using template tag instead ' +\n                  '(https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template).',\n              );\n              didWarnScriptTags = true;\n            }\n          }\n          div.innerHTML = '<script><' + '/script>';\n          // This is guaranteed to yield a script element.\n          const firstChild = ((div.firstChild     )                   );\n          domElement = div.removeChild(firstChild);\n          break;\n        }\n        case 'select': {\n          if (typeof props.is === 'string') {\n            domElement = ownerDocument.createElement('select', {is: props.is});\n          } else {\n            // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.\n            // See discussion in https://github.com/facebook/react/pull/6896\n            // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\n            domElement = ownerDocument.createElement('select');\n          }\n          if (props.multiple) {\n            domElement.multiple = true;\n          } else if (props.size) {\n            // Setting a size greater than 1 causes a select to behave like `multiple=true`, where\n            // it is possible that no option is selected.\n            //\n            // This is only necessary when a select in \"single selection mode\".\n            domElement.size = props.size;\n          }\n          break;\n        }\n        default: {\n          if (typeof props.is === 'string') {\n            domElement = ownerDocument.createElement(type, {is: props.is});\n          } else {\n            // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.\n            // See discussion in https://github.com/facebook/react/pull/6896\n            // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\n            domElement = ownerDocument.createElement(type);\n          }\n\n          if (__DEV__) {\n            if (type.indexOf('-') === -1) {\n              // We're not SVG/MathML and we don't have a dash, so we're not a custom element\n              // Even if you use `is`, these should be of known type and lower case.\n              if (type !== type.toLowerCase()) {\n                console.error(\n                  '<%s /> is using incorrect casing. ' +\n                    'Use PascalCase for React components, ' +\n                    'or lowercase for HTML elements.',\n                  type,\n                );\n              }\n              if (\n                // $FlowFixMe[method-unbinding]\n                Object.prototype.toString.call(domElement) ===\n                  '[object HTMLUnknownElement]' &&\n                !hasOwnProperty.call(warnedUnknownTags, type)\n              ) {\n                warnedUnknownTags[type] = true;\n                console.error(\n                  'The tag <%s> is unrecognized in this browser. ' +\n                    'If you meant to render a React component, start its name with ' +\n                    'an uppercase letter.',\n                  type,\n                );\n              }\n            }\n          }\n        }\n      }\n  }\n  precacheFiberNode(internalInstanceHandle, domElement);\n  updateFiberProps(domElement, props);\n  return domElement;\n}\n\nexport function cloneMutableInstance(\n  instance          ,\n  keepChildren         ,\n)           {\n  return instance.cloneNode(keepChildren);\n}\n\nexport function appendInitialChild(\n  parentInstance          ,\n  child                         ,\n)       {\n  // Note: This should not use moveBefore() because initial are appended while disconnected.\n  parentInstance.appendChild(child);\n}\n\nexport function finalizeInitialChildren(\n  domElement          ,\n  type        ,\n  props       ,\n  hostContext             ,\n)          {\n  setInitialProperties(domElement, type, props);\n  switch (type) {\n    case 'button':\n    case 'input':\n    case 'select':\n    case 'textarea':\n      return !!props.autoFocus;\n    case 'img':\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport function finalizeHydratedChildren(\n  domElement          ,\n  type        ,\n  props       ,\n  hostContext             ,\n)          {\n  // TOOD: Consider unifying this with hydrateInstance.\n  if (!enableHydrationChangeEvent) {\n    return false;\n  }\n  switch (type) {\n    case 'input':\n    case 'select':\n    case 'textarea':\n    case 'img':\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport function shouldSetTextContent(type        , props       )          {\n  return (\n    type === 'textarea' ||\n    type === 'noscript' ||\n    typeof props.children === 'string' ||\n    typeof props.children === 'number' ||\n    typeof props.children === 'bigint' ||\n    (typeof props.dangerouslySetInnerHTML === 'object' &&\n      props.dangerouslySetInnerHTML !== null &&\n      props.dangerouslySetInnerHTML.__html != null)\n  );\n}\n\nexport function createTextInstance(\n  text        ,\n  rootContainerInstance           ,\n  hostContext             ,\n  internalInstanceHandle        ,\n)               {\n  if (__DEV__) {\n    const hostContextDev = ((hostContext     )                );\n    const ancestor = hostContextDev.ancestorInfo.current;\n    if (ancestor != null) {\n      validateTextNesting(\n        text,\n        ancestor.tag,\n        hostContextDev.ancestorInfo.implicitRootScope,\n      );\n    }\n  }\n  const textNode               = getOwnerDocumentFromRootContainer(\n    rootContainerInstance,\n  ).createTextNode(text);\n  precacheFiberNode(internalInstanceHandle, textNode);\n  return textNode;\n}\n\nexport function cloneMutableTextInstance(\n  textInstance              ,\n)               {\n  return textInstance.cloneNode(false);\n}\n\nlet currentPopstateTransitionEvent               = null;\nexport function shouldAttemptEagerTransition()          {\n  const event = window.event;\n  if (event && event.type === 'popstate') {\n    // This is a popstate event. Attempt to render any transition during this\n    // event synchronously. Unless we already attempted during this event.\n    if (event === currentPopstateTransitionEvent) {\n      // We already attempted to render this popstate transition synchronously.\n      // Any subsequent attempts must have happened as the result of a derived\n      // update, like startTransition inside useEffect, or useDV. Switch back to\n      // the default behavior for all remaining transitions during the current\n      // popstate event.\n      return false;\n    } else {\n      // Cache the current event in case a derived transition is scheduled.\n      // (Refer to previous branch.)\n      currentPopstateTransitionEvent = event;\n      return true;\n    }\n  }\n  // We're not inside a popstate event.\n  currentPopstateTransitionEvent = null;\n  return false;\n}\n\nlet schedulerEvent               = undefined;\nexport function trackSchedulerEvent()       {\n  schedulerEvent = window.event;\n}\n\nexport function resolveEventType()                {\n  const event = window.event;\n  return event && event !== schedulerEvent ? event.type : null;\n}\n\nexport function resolveEventTimeStamp()         {\n  const event = window.event;\n  return event && event !== schedulerEvent ? event.timeStamp : -1.1;\n}\n\nexport const isPrimaryRenderer = true;\nexport const warnsIfNotActing = true;\n// This initialization code may run even on server environments\n// if a component just imports ReactDOM (e.g. for findDOMNode).\n// Some environments might not have setTimeout or clearTimeout.\nexport const scheduleTimeout      =\n  typeof setTimeout === 'function' ? setTimeout : (undefined     );\nexport const cancelTimeout      =\n  typeof clearTimeout === 'function' ? clearTimeout : (undefined     );\nexport const noTimeout = -1;\nconst localPromise = typeof Promise === 'function' ? Promise : undefined;\nconst localRequestAnimationFrame =\n  typeof requestAnimationFrame === 'function'\n    ? requestAnimationFrame\n    : scheduleTimeout;\n\nexport {getClosestInstanceFromNode as getInstanceFromNode};\n\nexport function preparePortalMount(portalInstance          )       {\n  listenToAllSupportedEvents(portalInstance);\n}\n\nexport function prepareScopeUpdate(\n  scopeInstance                    ,\n  internalInstanceHandle        ,\n)       {\n  if (enableScopeAPI) {\n    precacheFiberNode(internalInstanceHandle, scopeInstance);\n  }\n}\n\nexport function getInstanceFromScope(\n  scopeInstance                    ,\n)                {\n  if (enableScopeAPI) {\n    return getFiberFromScopeInstance(scopeInstance);\n  }\n  return null;\n}\n\n// -------------------\n//     Microtasks\n// -------------------\nexport const supportsMicrotasks = true;\nexport const scheduleMicrotask      =\n  typeof queueMicrotask === 'function'\n    ? queueMicrotask\n    : typeof localPromise !== 'undefined'\n      ? callback =>\n          localPromise.resolve(null).then(callback).catch(handleErrorInNextTick)\n      : scheduleTimeout; // TODO: Determine the best fallback here.\n\nfunction handleErrorInNextTick(error     ) {\n  setTimeout(() => {\n    throw error;\n  });\n}\n\n// -------------------\n//     Mutation\n// -------------------\n\nexport const supportsMutation = true;\n\nexport function commitMount(\n  domElement          ,\n  type        ,\n  newProps       ,\n  internalInstanceHandle        ,\n)       {\n  // Despite the naming that might imply otherwise, this method only\n  // fires if there is an `Update` effect scheduled during mounting.\n  // This happens if `finalizeInitialChildren` returns `true` (which it\n  // does to implement the `autoFocus` attribute on the client). But\n  // there are also other cases when this might happen (such as patching\n  // up text content during hydration mismatch). So we'll check this again.\n  switch (type) {\n    case 'button':\n    case 'input':\n    case 'select':\n    case 'textarea':\n      if (newProps.autoFocus) {\n        ((domElement     ) \n                             \n                            \n                             \n                               ).focus();\n      }\n      return;\n    case 'img': {\n      // The technique here is to assign the src or srcSet property to cause the browser\n      // to issue a new load event. If it hasn't loaded yet it'll fire whenever the load actually completes.\n      // If it has already loaded we missed it so the second load will still be the first one that executes\n      // any associated onLoad props.\n      // Even if we have srcSet we prefer to reassign src. The reason is that Firefox does not trigger a new\n      // load event when only srcSet is assigned. Chrome will trigger a load event if either is assigned so we\n      // only need to assign one. And Safari just never triggers a new load event which means this technique\n      // is already a noop regardless of which properties are assigned. We should revisit if browsers update\n      // this heuristic in the future.\n      if (newProps.src) {\n        const src = (newProps     ).src;\n        if (enableSrcObject && typeof src === 'object') {\n          // For object src, we can't just set the src again to the same blob URL because it might have\n          // already revoked if it loaded before this. However, we can create a new blob URL and set that.\n          // This is relatively cheap since the blob is already in memory but this might cause some\n          // duplicated work.\n          // TODO: We could maybe detect if load hasn't fired yet and if so reuse the URL.\n          try {\n            setSrcObject(domElement, type, src);\n            return;\n          } catch (x) {\n            // If URL.createObjectURL() errors, it was probably some other object type\n            // that should be toString:ed instead, so we just fall-through to the normal\n            // path.\n          }\n        }\n        ((domElement     )                  ).src = src;\n      } else if (newProps.srcSet) {\n        ((domElement     )                  ).srcset = (newProps     ).srcSet;\n      }\n      return;\n    }\n  }\n}\n\nexport function commitHydratedInstance(\n  domElement          ,\n  type        ,\n  props       ,\n  internalInstanceHandle        ,\n)       {\n  if (!enableHydrationChangeEvent) {\n    return;\n  }\n  // This fires in the commit phase if a hydrated instance needs to do further\n  // work in the commit phase. Similar to commitMount. However, this should not\n  // do things that would've already happened such as set auto focus since that\n  // would steal focus. It's only scheduled if finalizeHydratedChildren returns\n  // true.\n  switch (type) {\n    case 'input': {\n      hydrateInput(\n        domElement,\n        props.value,\n        props.defaultValue,\n        props.checked,\n        props.defaultChecked,\n      );\n      break;\n    }\n    case 'select': {\n      hydrateSelect(\n        domElement,\n        props.value,\n        props.defaultValue,\n        props.multiple,\n      );\n      break;\n    }\n    case 'textarea':\n      hydrateTextarea(domElement, props.value, props.defaultValue);\n      break;\n    case 'img':\n      // TODO: Should we replay onLoad events?\n      break;\n  }\n}\n\nexport function commitUpdate(\n  domElement          ,\n  type        ,\n  oldProps       ,\n  newProps       ,\n  internalInstanceHandle        ,\n)       {\n  // Diff and update the properties.\n  updateProperties(domElement, type, oldProps, newProps);\n\n  // Update the props handle so that we know which props are the ones with\n  // with current event handlers.\n  updateFiberProps(domElement, newProps);\n}\n\nexport function resetTextContent(domElement          )       {\n  setTextContent(domElement, '');\n}\n\nexport function commitTextUpdate(\n  textInstance              ,\n  oldText        ,\n  newText        ,\n)       {\n  textInstance.nodeValue = newText;\n}\n\nconst supportsMoveBefore =\n  // $FlowFixMe[prop-missing]: We're doing the feature detection here.\n  enableMoveBefore &&\n  typeof window !== 'undefined' &&\n  typeof window.Element.prototype.moveBefore === 'function';\n\nexport function appendChild(\n  parentInstance          ,\n  child                         ,\n)       {\n  if (supportsMoveBefore && child.parentNode !== null) {\n    // $FlowFixMe[prop-missing]: We've checked this with supportsMoveBefore.\n    parentInstance.moveBefore(child, null);\n  } else {\n    parentInstance.appendChild(child);\n  }\n}\n\nfunction warnForReactChildrenConflict(container           )       {\n  if (__DEV__) {\n    if ((container     ).__reactWarnedAboutChildrenConflict) {\n      return;\n    }\n    const props = getFiberCurrentPropsFromNode(container);\n    if (props !== null) {\n      const fiber = getInstanceFromNode(container);\n      if (fiber !== null) {\n        if (\n          typeof props.children === 'string' ||\n          typeof props.children === 'number'\n        ) {\n          (container     ).__reactWarnedAboutChildrenConflict = true;\n          // Run the warning with the Fiber of the container for context of where the children are specified.\n          // We could also maybe use the Portal. The current execution context is the child being added.\n          runWithFiberInDEV(fiber, () => {\n            console.error(\n              'Cannot use a ref on a React element as a container to `createRoot` or `createPortal` ' +\n                'if that element also sets \"children\" text content using React. It should be a leaf with no children. ' +\n                \"Otherwise it's ambiguous which children should be used.\",\n            );\n          });\n        } else if (props.dangerouslySetInnerHTML != null) {\n          (container     ).__reactWarnedAboutChildrenConflict = true;\n          runWithFiberInDEV(fiber, () => {\n            console.error(\n              'Cannot use a ref on a React element as a container to `createRoot` or `createPortal` ' +\n                'if that element also sets \"dangerouslySetInnerHTML\" using React. It should be a leaf with no children. ' +\n                \"Otherwise it's ambiguous which children should be used.\",\n            );\n          });\n        }\n      }\n    }\n  }\n}\n\nexport function appendChildToContainer(\n  container           ,\n  child                         ,\n)       {\n  if (__DEV__) {\n    warnForReactChildrenConflict(container);\n  }\n  let parentNode                            ;\n  if (container.nodeType === DOCUMENT_NODE) {\n    parentNode = (container     ).body;\n  } else if (\n    !disableCommentsAsDOMContainers &&\n    container.nodeType === COMMENT_NODE\n  ) {\n    parentNode = (container.parentNode     );\n    if (supportsMoveBefore && child.parentNode !== null) {\n      // $FlowFixMe[prop-missing]: We've checked this with supportsMoveBefore.\n      parentNode.moveBefore(child, container);\n    } else {\n      parentNode.insertBefore(child, container);\n    }\n    return;\n  } else if (container.nodeName === 'HTML') {\n    parentNode = (container.ownerDocument.body     );\n  } else {\n    parentNode = (container     );\n  }\n  if (supportsMoveBefore && child.parentNode !== null) {\n    // $FlowFixMe[prop-missing]: We've checked this with supportsMoveBefore.\n    parentNode.moveBefore(child, null);\n  } else {\n    parentNode.appendChild(child);\n  }\n\n  // This container might be used for a portal.\n  // If something inside a portal is clicked, that click should bubble\n  // through the React tree. However, on Mobile Safari the click would\n  // never bubble through the *DOM* tree unless an ancestor with onclick\n  // event exists. So we wouldn't see it and dispatch it.\n  // This is why we ensure that non React root containers have inline onclick\n  // defined.\n  // https://github.com/facebook/react/issues/11918\n  const reactRootContainer = container._reactRootContainer;\n  if (\n    (reactRootContainer === null || reactRootContainer === undefined) &&\n    parentNode.onclick === null\n  ) {\n    // TODO: This cast may not be sound for SVG, MathML or custom elements.\n    trapClickOnNonInteractiveElement(((parentNode     )             ));\n  }\n}\n\nexport function insertBefore(\n  parentInstance          ,\n  child                         ,\n  beforeChild                                                               ,\n)       {\n  if (supportsMoveBefore && child.parentNode !== null) {\n    // $FlowFixMe[prop-missing]: We've checked this with supportsMoveBefore.\n    parentInstance.moveBefore(child, beforeChild);\n  } else {\n    parentInstance.insertBefore(child, beforeChild);\n  }\n}\n\nexport function insertInContainerBefore(\n  container           ,\n  child                         ,\n  beforeChild                                                               ,\n)       {\n  if (__DEV__) {\n    warnForReactChildrenConflict(container);\n  }\n  let parentNode                            ;\n  if (container.nodeType === DOCUMENT_NODE) {\n    parentNode = (container     ).body;\n  } else if (\n    !disableCommentsAsDOMContainers &&\n    container.nodeType === COMMENT_NODE\n  ) {\n    parentNode = (container.parentNode     );\n  } else if (container.nodeName === 'HTML') {\n    parentNode = (container.ownerDocument.body     );\n  } else {\n    parentNode = (container     );\n  }\n  if (supportsMoveBefore && child.parentNode !== null) {\n    // $FlowFixMe[prop-missing]: We've checked this with supportsMoveBefore.\n    parentNode.moveBefore(child, beforeChild);\n  } else {\n    parentNode.insertBefore(child, beforeChild);\n  }\n}\n\nexport function isSingletonScope(type        )          {\n  return type === 'head';\n}\n\nfunction createEvent(type              , bubbles         )        {\n  const event = document.createEvent('Event');\n  event.initEvent(((type     )        ), bubbles, false);\n  return event;\n}\n\nfunction dispatchBeforeDetachedBlur(\n  target             ,\n  internalInstanceHandle        ,\n)       {\n  if (enableCreateEventHandleAPI) {\n    const event = createEvent('beforeblur', true);\n    // Dispatch \"beforeblur\" directly on the target,\n    // so it gets picked up by the event system and\n    // can propagate through the React internal tree.\n    // $FlowFixMe[prop-missing]: internal field\n    event._detachedInterceptFiber = internalInstanceHandle;\n    target.dispatchEvent(event);\n  }\n}\n\nfunction dispatchAfterDetachedBlur(target             )       {\n  if (enableCreateEventHandleAPI) {\n    const event = createEvent('afterblur', false);\n    // So we know what was detached, make the relatedTarget the\n    // detached target on the \"afterblur\" event.\n    (event     ).relatedTarget = target;\n    // Dispatch the event on the document.\n    document.dispatchEvent(event);\n  }\n}\n\nexport function removeChild(\n  parentInstance          ,\n  child                                                               ,\n)       {\n  parentInstance.removeChild(child);\n}\n\nexport function removeChildFromContainer(\n  container           ,\n  child                                                               ,\n)       {\n  let parentNode                            ;\n  if (container.nodeType === DOCUMENT_NODE) {\n    parentNode = (container     ).body;\n  } else if (\n    !disableCommentsAsDOMContainers &&\n    container.nodeType === COMMENT_NODE\n  ) {\n    parentNode = (container.parentNode     );\n  } else if (container.nodeName === 'HTML') {\n    parentNode = (container.ownerDocument.body     );\n  } else {\n    parentNode = (container     );\n  }\n  parentNode.removeChild(child);\n}\n\nfunction clearHydrationBoundary(\n  parentInstance          ,\n  hydrationInstance                                     ,\n)       {\n  let node       = hydrationInstance;\n  // Delete all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n  let depth = 0;\n  do {\n    const nextNode = node.nextSibling;\n    parentInstance.removeChild(node);\n    if (nextNode && nextNode.nodeType === COMMENT_NODE) {\n      const data = ((nextNode     ).data        );\n      if (data === SUSPENSE_END_DATA || data === ACTIVITY_END_DATA) {\n        if (depth === 0) {\n          parentInstance.removeChild(nextNode);\n          // Retry if any event replaying was blocked on this.\n          retryIfBlockedOn(hydrationInstance);\n          return;\n        } else {\n          depth--;\n        }\n      } else if (\n        data === SUSPENSE_START_DATA ||\n        data === SUSPENSE_PENDING_START_DATA ||\n        data === SUSPENSE_QUEUED_START_DATA ||\n        data === SUSPENSE_FALLBACK_START_DATA ||\n        data === ACTIVITY_START_DATA\n      ) {\n        depth++;\n      } else if (data === PREAMBLE_CONTRIBUTION_HTML) {\n        // If a preamble contribution marker is found within the bounds of this boundary,\n        // then it contributed to the html tag and we need to reset it.\n        const ownerDocument = parentInstance.ownerDocument;\n        const documentElement          = (ownerDocument.documentElement     );\n        releaseSingletonInstance(documentElement);\n      } else if (data === PREAMBLE_CONTRIBUTION_HEAD) {\n        const ownerDocument = parentInstance.ownerDocument;\n        const head          = (ownerDocument.head     );\n        releaseSingletonInstance(head);\n        // We need to clear the head because this is the only singleton that can have children that\n        // were part of this boundary but are not inside this boundary.\n        clearHead(head);\n      } else if (data === PREAMBLE_CONTRIBUTION_BODY) {\n        const ownerDocument = parentInstance.ownerDocument;\n        const body          = (ownerDocument.body     );\n        releaseSingletonInstance(body);\n      }\n    }\n    // $FlowFixMe[incompatible-type] we bail out when we get a null\n    node = nextNode;\n  } while (node);\n  // TODO: Warn, we didn't find the end comment boundary.\n  // Retry if any event replaying was blocked on this.\n  retryIfBlockedOn(hydrationInstance);\n}\n\nexport function clearActivityBoundary(\n  parentInstance          ,\n  activityInstance                  ,\n)       {\n  clearHydrationBoundary(parentInstance, activityInstance);\n}\n\nexport function clearSuspenseBoundary(\n  parentInstance          ,\n  suspenseInstance                  ,\n)       {\n  clearHydrationBoundary(parentInstance, suspenseInstance);\n}\n\nfunction clearHydrationBoundaryFromContainer(\n  container           ,\n  hydrationInstance                                     ,\n)       {\n  let parentNode                            ;\n  if (container.nodeType === DOCUMENT_NODE) {\n    parentNode = (container     ).body;\n  } else if (\n    !disableCommentsAsDOMContainers &&\n    container.nodeType === COMMENT_NODE\n  ) {\n    parentNode = (container.parentNode     );\n  } else if (container.nodeName === 'HTML') {\n    parentNode = (container.ownerDocument.body     );\n  } else {\n    parentNode = (container     );\n  }\n  clearHydrationBoundary(parentNode, hydrationInstance);\n  // Retry if any event replaying was blocked on this.\n  retryIfBlockedOn(container);\n}\n\nexport function clearActivityBoundaryFromContainer(\n  container           ,\n  activityInstance                  ,\n)       {\n  clearHydrationBoundaryFromContainer(container, activityInstance);\n}\n\nexport function clearSuspenseBoundaryFromContainer(\n  container           ,\n  suspenseInstance                  ,\n)       {\n  clearHydrationBoundaryFromContainer(container, suspenseInstance);\n}\n\nfunction hideOrUnhideDehydratedBoundary(\n  suspenseInstance                                     ,\n  isHidden         ,\n) {\n  let node       = suspenseInstance;\n  // Unhide all nodes within this suspense boundary.\n  let depth = 0;\n  do {\n    const nextNode = node.nextSibling;\n    if (node.nodeType === ELEMENT_NODE) {\n      const instance = ((node     )                                          );\n      if (isHidden) {\n        instance._stashedDisplay = instance.style.display;\n        instance.style.display = 'none';\n      } else {\n        instance.style.display = instance._stashedDisplay || '';\n        if (instance.getAttribute('style') === '') {\n          instance.removeAttribute('style');\n        }\n      }\n    } else if (node.nodeType === TEXT_NODE) {\n      const textNode = ((node     )                                );\n      if (isHidden) {\n        textNode._stashedText = textNode.nodeValue;\n        textNode.nodeValue = '';\n      } else {\n        textNode.nodeValue = textNode._stashedText || '';\n      }\n    }\n    if (nextNode && nextNode.nodeType === COMMENT_NODE) {\n      const data = ((nextNode     ).data        );\n      if (data === SUSPENSE_END_DATA) {\n        if (depth === 0) {\n          return;\n        } else {\n          depth--;\n        }\n      } else if (\n        data === SUSPENSE_START_DATA ||\n        data === SUSPENSE_PENDING_START_DATA ||\n        data === SUSPENSE_QUEUED_START_DATA ||\n        data === SUSPENSE_FALLBACK_START_DATA\n      ) {\n        depth++;\n      }\n      // TODO: Should we hide preamble contribution in this case?\n    }\n    // $FlowFixMe[incompatible-type] we bail out when we get a null\n    node = nextNode;\n  } while (node);\n}\n\nexport function hideDehydratedBoundary(\n  suspenseInstance                  ,\n)       {\n  hideOrUnhideDehydratedBoundary(suspenseInstance, true);\n}\n\nexport function hideInstance(instance          )       {\n  // TODO: Does this work for all element types? What about MathML? Should we\n  // pass host context to this method?\n  instance = ((instance     )             );\n  const style = instance.style;\n  // $FlowFixMe[method-unbinding]\n  if (typeof style.setProperty === 'function') {\n    style.setProperty('display', 'none', 'important');\n  } else {\n    style.display = 'none';\n  }\n}\n\nexport function hideTextInstance(textInstance              )       {\n  textInstance.nodeValue = '';\n}\n\nexport function unhideDehydratedBoundary(\n  dehydratedInstance                                     ,\n)       {\n  hideOrUnhideDehydratedBoundary(dehydratedInstance, false);\n}\n\nexport function unhideInstance(instance          , props       )       {\n  instance = ((instance     )             );\n  const styleProp = props[STYLE];\n  const display =\n    styleProp !== undefined &&\n    styleProp !== null &&\n    styleProp.hasOwnProperty('display')\n      ? styleProp.display\n      : null;\n  instance.style.display =\n    display == null || typeof display === 'boolean'\n      ? ''\n      : // The value would've errored already if it wasn't safe.\n        // eslint-disable-next-line react-internal/safe-string-coercion\n        ('' + display).trim();\n}\n\nexport function unhideTextInstance(\n  textInstance              ,\n  text        ,\n)       {\n  textInstance.nodeValue = text;\n}\n\nfunction warnForBlockInsideInline(instance             ) {\n  if (__DEV__) {\n    let nextNode = instance.firstChild;\n    outer: while (nextNode != null) {\n      let node       = nextNode;\n      if (\n        node.nodeType === ELEMENT_NODE &&\n        getComputedStyle((node     )).display === 'block'\n      ) {\n        console.error(\n          \"You're about to start a <ViewTransition> around a display: inline \" +\n            'element <%s>, which itself has a display: block element <%s> inside it. ' +\n            'This might trigger a bug in Safari which causes the View Transition to ' +\n            'be skipped with a duplicate name error.\\n' +\n            'https://bugs.webkit.org/show_bug.cgi?id=290923',\n          instance.tagName.toLocaleLowerCase(),\n          (node     ).tagName.toLocaleLowerCase(),\n        );\n        break;\n      }\n      if (node.firstChild != null) {\n        nextNode = node.firstChild;\n        continue;\n      }\n      if (node === instance) {\n        break;\n      }\n      while (node.nextSibling == null) {\n        if (node.parentNode == null || node.parentNode === instance) {\n          break;\n        }\n        node = node.parentNode;\n      }\n      nextNode = node.nextSibling;\n    }\n  }\n}\n\nfunction countClientRects(rects                   )         {\n  if (rects.length === 1) {\n    return 1;\n  }\n  // Count non-zero rects.\n  let count = 0;\n  for (let i = 0; i < rects.length; i++) {\n    const rect = rects[i];\n    if (rect.width > 0 && rect.height > 0) {\n      count++;\n    }\n  }\n  return count;\n}\n\nexport function applyViewTransitionName(\n  instance          ,\n  name        ,\n  className         ,\n)       {\n  instance = ((instance     )             );\n  // $FlowFixMe[prop-missing]\n  instance.style.viewTransitionName = name;\n  if (className != null) {\n    // $FlowFixMe[prop-missing]\n    instance.style.viewTransitionClass = className;\n  }\n  const computedStyle = getComputedStyle(instance);\n  if (computedStyle.display === 'inline') {\n    // WebKit has a bug where assigning a name to display: inline elements errors\n    // if they have display: block children. We try to work around this bug in the\n    // simple case by converting it automatically to display: inline-block.\n    // https://bugs.webkit.org/show_bug.cgi?id=290923\n    const rects = instance.getClientRects();\n    if (countClientRects(rects) === 1) {\n      // If the instance has a single client rect, that means that it can be\n      // expressed as a display: inline-block or block.\n      // This will cause layout thrash but we live with it since inline view transitions\n      // are unusual.\n      const style = instance.style;\n      // If there's literally only one rect, then it's likely on a single line like an\n      // inline-block. If it's multiple rects but all but one of them are empty it's\n      // likely because it's a single block that caused a line break.\n      style.display = rects.length === 1 ? 'inline-block' : 'block';\n      // Margin doesn't apply to inline so should be zero. However, padding top/bottom\n      // applies to inline-block positioning which we can offset by setting the margin\n      // to the negative padding to get it back into original position.\n      style.marginTop = '-' + computedStyle.paddingTop;\n      style.marginBottom = '-' + computedStyle.paddingBottom;\n    } else {\n      // This case cannot be easily fixed if it has blocks but it's also fine if\n      // it doesn't have blocks. So we only warn in DEV about this being an issue.\n      warnForBlockInsideInline(instance);\n    }\n  }\n}\n\nexport function restoreViewTransitionName(\n  instance          ,\n  props       ,\n)       {\n  instance = ((instance     )             );\n  const style = instance.style;\n  const styleProp = props[STYLE];\n  const viewTransitionName =\n    styleProp != null\n      ? styleProp.hasOwnProperty('viewTransitionName')\n        ? styleProp.viewTransitionName\n        : styleProp.hasOwnProperty('view-transition-name')\n          ? styleProp['view-transition-name']\n          : null\n      : null;\n  // $FlowFixMe[prop-missing]\n  style.viewTransitionName =\n    viewTransitionName == null || typeof viewTransitionName === 'boolean'\n      ? ''\n      : // The value would've errored already if it wasn't safe.\n        // eslint-disable-next-line react-internal/safe-string-coercion\n        ('' + viewTransitionName).trim();\n  const viewTransitionClass =\n    styleProp != null\n      ? styleProp.hasOwnProperty('viewTransitionClass')\n        ? styleProp.viewTransitionClass\n        : styleProp.hasOwnProperty('view-transition-class')\n          ? styleProp['view-transition-class']\n          : null\n      : null;\n  // $FlowFixMe[prop-missing]\n  style.viewTransitionClass =\n    viewTransitionClass == null || typeof viewTransitionClass === 'boolean'\n      ? ''\n      : // The value would've errored already if it wasn't safe.\n        // eslint-disable-next-line react-internal/safe-string-coercion\n        ('' + viewTransitionClass).trim();\n  if (style.display === 'inline-block') {\n    // We might have overridden the style. Reset it to what it should be.\n    if (styleProp == null) {\n      style.display = style.margin = '';\n    } else {\n      const display = styleProp.display;\n      style.display =\n        display == null || typeof display === 'boolean' ? '' : display;\n      const margin = styleProp.margin;\n      if (margin != null) {\n        style.margin = margin;\n      } else {\n        const marginTop = styleProp.hasOwnProperty('marginTop')\n          ? styleProp.marginTop\n          : styleProp['margin-top'];\n        style.marginTop =\n          marginTop == null || typeof marginTop === 'boolean' ? '' : marginTop;\n        const marginBottom = styleProp.hasOwnProperty('marginBottom')\n          ? styleProp.marginBottom\n          : styleProp['margin-bottom'];\n        style.marginBottom =\n          marginBottom == null || typeof marginBottom === 'boolean'\n            ? ''\n            : marginBottom;\n      }\n    }\n  }\n}\n\nexport function cancelViewTransitionName(\n  instance          ,\n  oldName        ,\n  props       ,\n)       {\n  // To cancel the \"new\" state and paint this instance as part of the parent, all we have to do\n  // is remove the view-transition-name before we exit startViewTransition.\n  restoreViewTransitionName(instance, props);\n  // There isn't a way to cancel an \"old\" state but what we can do is hide it by animating it.\n  // Since it is already removed from the old state of the parent, this technique only works\n  // if the parent also isn't transitioning. Therefore we should only cancel the root most\n  // ViewTransitions.\n  const documentElement = instance.ownerDocument.documentElement;\n  if (documentElement !== null) {\n    documentElement.animate(\n      {opacity: [0, 0], pointerEvents: ['none', 'none']},\n      {\n        duration: 0,\n        fill: 'forwards',\n        pseudoElement: '::view-transition-group(' + oldName + ')',\n      },\n    );\n  }\n}\n\nexport function cancelRootViewTransitionName(rootContainer           )       {\n  const documentElement                     =\n    rootContainer.nodeType === DOCUMENT_NODE\n      ? (rootContainer     ).documentElement\n      : rootContainer.ownerDocument.documentElement;\n  if (\n    documentElement !== null &&\n    // $FlowFixMe[prop-missing]\n    documentElement.style.viewTransitionName === ''\n  ) {\n    // $FlowFixMe[prop-missing]\n    documentElement.style.viewTransitionName = 'none';\n    documentElement.animate(\n      {opacity: [0, 0], pointerEvents: ['none', 'none']},\n      {\n        duration: 0,\n        fill: 'forwards',\n        pseudoElement: '::view-transition-group(root)',\n      },\n    );\n    // By default the root ::view-transition selector captures all pointer events,\n    // which means nothing gets interactive. We want to let whatever is not animating\n    // remain interactive during the transition. To do that, we set the size to nothing\n    // so that the transition doesn't capture any clicks. We don't set pointer-events\n    // on this one as that would apply to all running transitions. This lets animations\n    // that are running to block clicks so that they don't end up incorrectly hitting\n    // whatever is below the animation.\n    documentElement.animate(\n      {width: [0, 0], height: [0, 0]},\n      {\n        duration: 0,\n        fill: 'forwards',\n        pseudoElement: '::view-transition',\n      },\n    );\n  }\n}\n\nexport function restoreRootViewTransitionName(rootContainer           )       {\n  let containerInstance          ;\n  if (rootContainer.nodeType === DOCUMENT_NODE) {\n    containerInstance = (rootContainer     ).body;\n  } else if (rootContainer.nodeName === 'HTML') {\n    containerInstance = (rootContainer.ownerDocument.body     );\n  } else {\n    // If the container is not the whole document, then we ideally should probably\n    // clone the whole document outside of the React too.\n    containerInstance = (rootContainer     );\n  }\n  // $FlowFixMe[prop-missing]\n  if (containerInstance.style.viewTransitionName === 'root') {\n    // If we moved the root view transition name to the container in a gesture\n    // we need to restore it now.\n    containerInstance.style.viewTransitionName = '';\n  }\n  const documentElement                     =\n    containerInstance.ownerDocument.documentElement;\n  if (\n    documentElement !== null &&\n    // $FlowFixMe[prop-missing]\n    documentElement.style.viewTransitionName === 'none'\n  ) {\n    // $FlowFixMe[prop-missing]\n    documentElement.style.viewTransitionName = '';\n  }\n}\n\nfunction getComputedTransform(style                     )         {\n  // Gets the merged transform of all the short hands.\n  const computedStyle      = style;\n  let transform         = computedStyle.transform;\n  if (transform === 'none') {\n    transform = '';\n  }\n  const scale         = computedStyle.scale;\n  if (scale !== 'none' && scale !== '') {\n    const parts = scale.split(' ');\n    transform =\n      (parts.length === 3 ? 'scale3d' : 'scale') +\n      '(' +\n      parts.join(', ') +\n      ') ' +\n      transform;\n  }\n  const rotate         = computedStyle.rotate;\n  if (rotate !== 'none' && rotate !== '') {\n    const parts = rotate.split(' ');\n    if (parts.length === 1) {\n      transform = 'rotate(' + parts[0] + ') ' + transform;\n    } else if (parts.length === 2) {\n      transform =\n        'rotate' + parts[0].toUpperCase() + '(' + parts[1] + ') ' + transform;\n    } else {\n      transform = 'rotate3d(' + parts.join(', ') + ') ' + transform;\n    }\n  }\n  const translate         = computedStyle.translate;\n  if (translate !== 'none' && translate !== '') {\n    const parts = translate.split(' ');\n    transform =\n      (parts.length === 3 ? 'translate3d' : 'translate') +\n      '(' +\n      parts.join(', ') +\n      ') ' +\n      transform;\n  }\n  return transform;\n}\n\nfunction moveOutOfViewport(\n  originalStyle                     ,\n  element             ,\n)       {\n  // Apply a transform that safely puts the whole element outside the viewport\n  // while still letting it paint its \"old\" state to a snapshot.\n  const transform = getComputedTransform(originalStyle);\n  // Clear the long form properties.\n  // $FlowFixMe\n  element.style.translate = 'none';\n  // $FlowFixMe\n  element.style.scale = 'none';\n  // $FlowFixMe\n  element.style.rotate = 'none';\n  // Apply a translate to move it way out of the viewport. This is applied first\n  // so that it is in the coordinate space of the parent and not after applying\n  // other transforms. That's why we need to merge the long form properties.\n  // TODO: Ideally we'd adjust for the parent's rotate/scale. Otherwise when\n  // we move back the ::view-transition-group we might overshoot or undershoot.\n  element.style.transform = 'translate(-20000px, -20000px) ' + transform;\n}\n\nfunction moveOldFrameIntoViewport(keyframe     )       {\n  // In the resulting View Transition Animation, the first frame will be offset.\n  const computedTransform          = keyframe.transform;\n  if (computedTransform != null) {\n    let transform = computedTransform === 'none' ? '' : computedTransform;\n    transform = 'translate(20000px, 20000px) ' + transform;\n    keyframe.transform = transform;\n  }\n}\n\nexport function cloneRootViewTransitionContainer(\n  rootContainer           ,\n)           {\n  // This implies that we're not going to animate the root document but instead\n  // the clone so we first clear the name of the root container.\n  const documentElement                     =\n    rootContainer.nodeType === DOCUMENT_NODE\n      ? (rootContainer     ).documentElement\n      : rootContainer.ownerDocument.documentElement;\n  if (\n    documentElement !== null &&\n    // $FlowFixMe[prop-missing]\n    documentElement.style.viewTransitionName === ''\n  ) {\n    // $FlowFixMe[prop-missing]\n    documentElement.style.viewTransitionName = 'none';\n  }\n\n  let containerInstance             ;\n  if (rootContainer.nodeType === DOCUMENT_NODE) {\n    containerInstance = (rootContainer     ).body;\n  } else if (rootContainer.nodeName === 'HTML') {\n    containerInstance = (rootContainer.ownerDocument.body     );\n  } else {\n    // If the container is not the whole document, then we ideally should probably\n    // clone the whole document outside of the React too.\n    containerInstance = (rootContainer     );\n  }\n\n  const containerParent = containerInstance.parentNode;\n  if (containerParent === null) {\n    throw new Error(\n      'Cannot use a startGestureTransition() on a detached root.',\n    );\n  }\n\n  const clone              = containerInstance.cloneNode(false);\n\n  const computedStyle = getComputedStyle(containerInstance);\n\n  if (\n    computedStyle.position === 'absolute' ||\n    computedStyle.position === 'fixed'\n  ) {\n    // If the style is already absolute, we don't have to do anything because it'll appear\n    // in the same place.\n  } else {\n    // Otherwise we need to absolutely position the clone in the same location as the original.\n    let positionedAncestor              = containerParent;\n    while (\n      positionedAncestor.parentNode != null &&\n      positionedAncestor.parentNode.nodeType !== DOCUMENT_NODE\n    ) {\n      if (getComputedStyle(positionedAncestor).position !== 'static') {\n        break;\n      }\n      // $FlowFixMe: This is refined.\n      positionedAncestor = positionedAncestor.parentNode;\n    }\n\n    const positionedAncestorStyle      = positionedAncestor.style;\n    const containerInstanceStyle      = containerInstance.style;\n    // Clear the transform while we're measuring since it affects the bounding client rect.\n    const prevAncestorTranslate = positionedAncestorStyle.translate;\n    const prevAncestorScale = positionedAncestorStyle.scale;\n    const prevAncestorRotate = positionedAncestorStyle.rotate;\n    const prevAncestorTransform = positionedAncestorStyle.transform;\n    const prevTranslate = containerInstanceStyle.translate;\n    const prevScale = containerInstanceStyle.scale;\n    const prevRotate = containerInstanceStyle.rotate;\n    const prevTransform = containerInstanceStyle.transform;\n    positionedAncestorStyle.translate = 'none';\n    positionedAncestorStyle.scale = 'none';\n    positionedAncestorStyle.rotate = 'none';\n    positionedAncestorStyle.transform = 'none';\n    containerInstanceStyle.translate = 'none';\n    containerInstanceStyle.scale = 'none';\n    containerInstanceStyle.rotate = 'none';\n    containerInstanceStyle.transform = 'none';\n\n    const ancestorRect = positionedAncestor.getBoundingClientRect();\n    const rect = containerInstance.getBoundingClientRect();\n\n    const cloneStyle = clone.style;\n    cloneStyle.position = 'absolute';\n    cloneStyle.top = rect.top - ancestorRect.top + 'px';\n    cloneStyle.left = rect.left - ancestorRect.left + 'px';\n    cloneStyle.width = rect.width + 'px';\n    cloneStyle.height = rect.height + 'px';\n    cloneStyle.margin = '0px';\n    cloneStyle.boxSizing = 'border-box';\n\n    positionedAncestorStyle.translate = prevAncestorTranslate;\n    positionedAncestorStyle.scale = prevAncestorScale;\n    positionedAncestorStyle.rotate = prevAncestorRotate;\n    positionedAncestorStyle.transform = prevAncestorTransform;\n    containerInstanceStyle.translate = prevTranslate;\n    containerInstanceStyle.scale = prevScale;\n    containerInstanceStyle.rotate = prevRotate;\n    containerInstanceStyle.transform = prevTransform;\n  }\n\n  // For this transition the container will act as the root. Nothing outside of it should\n  // be affected anyway. This lets us transition from the cloned container to the original.\n  // $FlowFixMe[prop-missing]\n  clone.style.viewTransitionName = 'root';\n\n  // Move out of the viewport so that it's still painted for the snapshot but is not visible\n  // for the frame where the snapshot happens.\n  moveOutOfViewport(computedStyle, clone);\n\n  // Insert the clone after the root container as a sibling. This may inject a body\n  // as the next sibling of an existing body. document.body will still point to the\n  // first one and any id selectors will still find the first one. That's why it's\n  // important that it's after the existing node.\n  containerInstance.parentNode.insertBefore(\n    clone,\n    containerInstance.nextSibling,\n  );\n\n  return clone;\n}\n\nexport function removeRootViewTransitionClone(\n  rootContainer           ,\n  clone          ,\n)       {\n  let containerInstance          ;\n  if (rootContainer.nodeType === DOCUMENT_NODE) {\n    containerInstance = (rootContainer     ).body;\n  } else if (rootContainer.nodeName === 'HTML') {\n    containerInstance = (rootContainer.ownerDocument.body     );\n  } else {\n    // If the container is not the whole document, then we ideally should probably\n    // clone the whole document outside of the React too.\n    containerInstance = (rootContainer     );\n  }\n  const containerParent = containerInstance.parentNode;\n  if (containerParent === null) {\n    throw new Error(\n      'Cannot use a startGestureTransition() on a detached root.',\n    );\n  }\n  // We assume that the clone is still within the same parent.\n  containerParent.removeChild(clone);\n\n  // Now the root is on the containerInstance itself until we call restoreRootViewTransitionName.\n  containerInstance.style.viewTransitionName = 'root';\n}\n\n                                   \n                             \n                                           \n                                        \n                                         \n  \n\nfunction createMeasurement(\n  rect                      ,\n  computedStyle                     ,\n  element         ,\n)                      {\n  const ownerWindow = element.ownerDocument.defaultView;\n  return {\n    rect: rect,\n    abs:\n      // Absolutely positioned instances don't contribute their size to the parent.\n      computedStyle.position === 'absolute' ||\n      computedStyle.position === 'fixed',\n    clip:\n      // If a ViewTransition boundary acts as a clipping parent group we should\n      // always mark it to animate if its children do so that we can clip them.\n      // This doesn't actually have any effect yet until browsers implement\n      // layered capture and nested view transitions.\n      computedStyle.clipPath !== 'none' ||\n      computedStyle.overflow !== 'visible' ||\n      computedStyle.filter !== 'none' ||\n      computedStyle.mask !== 'none' ||\n      computedStyle.mask !== 'none' ||\n      computedStyle.borderRadius !== '0px',\n    view:\n      // If the instance was within the bounds of the viewport. We don't care as\n      // much about if it was fully occluded because then it can still pop out.\n      rect.bottom >= 0 &&\n      rect.right >= 0 &&\n      rect.top <= ownerWindow.innerHeight &&\n      rect.left <= ownerWindow.innerWidth,\n  };\n}\n\nexport function measureInstance(instance          )                      {\n  const rect = instance.getBoundingClientRect();\n  const computedStyle = getComputedStyle(instance);\n  return createMeasurement(rect, computedStyle, instance);\n}\n\nexport function measureClonedInstance(instance          )                      {\n  const measuredRect = instance.getBoundingClientRect();\n  // Adjust the DOMRect based on the translate that put it outside the viewport.\n  // TODO: This might not be completely correct if the parent also has a transform.\n  const rect = new DOMRect(\n    measuredRect.x + 20000,\n    measuredRect.y + 20000,\n    measuredRect.width,\n    measuredRect.height,\n  );\n  const computedStyle = getComputedStyle(instance);\n  return createMeasurement(rect, computedStyle, instance);\n}\n\nexport function wasInstanceInViewport(\n  measurement                     ,\n)          {\n  return measurement.view;\n}\n\nexport function hasInstanceChanged(\n  oldMeasurement                     ,\n  newMeasurement                     ,\n)          {\n  // Note: This is not guaranteed from the same instance in the case that the Instance of the\n  // ViewTransition swaps out but it's still the same ViewTransition instance.\n  if (newMeasurement.clip) {\n    // If we're a clipping parent, we always animate if any of our children do so that we can clip\n    // them. This doesn't yet until browsers implement layered capture and nested view transitions.\n    return true;\n  }\n  const oldRect = oldMeasurement.rect;\n  const newRect = newMeasurement.rect;\n  return (\n    oldRect.y !== newRect.y ||\n    oldRect.x !== newRect.x ||\n    oldRect.height !== newRect.height ||\n    oldRect.width !== newRect.width\n  );\n}\n\nexport function hasInstanceAffectedParent(\n  oldMeasurement                     ,\n  newMeasurement                     ,\n)          {\n  // Note: This is not guaranteed from the same instance in the case that the Instance of the\n  // ViewTransition swaps out but it's still the same ViewTransition instance.\n  // If the instance has resized, it might have affected the parent layout.\n  if (newMeasurement.abs) {\n    // Absolutely positioned elements don't affect the parent layout, unless they\n    // previously were not absolutely positioned.\n    return !oldMeasurement.abs;\n  }\n  const oldRect = oldMeasurement.rect;\n  const newRect = newMeasurement.rect;\n  return oldRect.height !== newRect.height || oldRect.width !== newRect.width;\n}\n\nfunction cancelAllViewTransitionAnimations(scope         ) {\n  // In Safari, we need to manually cancel all manually start animations\n  // or it'll block or interfer with future transitions.\n  const animations = scope.getAnimations({subtree: true});\n  for (let i = 0; i < animations.length; i++) {\n    const anim = animations[i];\n    const effect                 = (anim.effect     );\n    // $FlowFixMe\n    const pseudo          = effect.pseudoElement;\n    if (\n      pseudo != null &&\n      pseudo.startsWith('::view-transition') &&\n      effect.target === scope\n    ) {\n      anim.cancel();\n    }\n  }\n}\n\n// How long to wait for new fonts to load before just committing anyway.\n// This freezes the screen. It needs to be short enough that it doesn't cause too much of\n// an issue when it's a new load and slow, yet long enough that you have a chance to load\n// it. Otherwise we wait for no reason. The assumption here is that you likely have\n// either cached the font or preloaded it earlier.\nconst SUSPENSEY_FONT_TIMEOUT = 500;\n\nfunction customizeViewTransitionError(\n  error        ,\n  ignoreAbort         ,\n)        {\n  if (typeof error === 'object' && error !== null) {\n    switch (error.name) {\n      case 'TimeoutError': {\n        // We assume that the only reason a Timeout can happen is because the Navigation\n        // promise. We expect any other work to either be fast or have a timeout (fonts).\n        if (__DEV__) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          return new Error(\n            'A ViewTransition timed out because a Navigation stalled. ' +\n              'This can happen if a Navigation is blocked on React itself. ' +\n              \"Such as if it's resolved inside useEffect. \" +\n              'This can be solved by moving the resolution to useLayoutEffect.',\n            {cause: error},\n          );\n        }\n        break;\n      }\n      case 'AbortError': {\n        if (ignoreAbort) {\n          return null;\n        }\n        if (__DEV__) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          return new Error(\n            'A ViewTransition was aborted early. This might be because you have ' +\n              'other View Transition libraries on the page and only one can run at ' +\n              \"a time. To avoid this, use only React's built-in <ViewTransition> \" +\n              'to coordinate.',\n            {cause: error},\n          );\n        }\n        break;\n      }\n      case 'InvalidStateError': {\n        if (\n          error.message ===\n            'View transition was skipped because document visibility state is hidden.' ||\n          error.message ===\n            'Skipping view transition because document visibility state has become hidden.' ||\n          error.message ===\n            'Skipping view transition because viewport size changed.'\n        ) {\n          // Skip logging this. This is not considered an error.\n          return null;\n        }\n        if (__DEV__) {\n          if (\n            error.message === 'Transition was aborted because of invalid state'\n          ) {\n            // Chrome doesn't include the reason in the message but logs it in the console..\n            // Redirect the user to look there.\n            // eslint-disable-next-line react-internal/prod-error-codes\n            return new Error(\n              'A ViewTransition could not start. See the console for more details.',\n              {cause: error},\n            );\n          }\n        }\n        break;\n      }\n    }\n  }\n  return error;\n}\n\n/** @noinline */\nfunction forceLayout(ownerDocument          ) {\n  // This function exists to trick minifiers to not remove this unused member expression.\n  return (ownerDocument.documentElement     ).clientHeight;\n}\n\nexport function startViewTransition(\n  rootContainer           ,\n  transitionTypes                        ,\n  mutationCallback            ,\n  layoutCallback            ,\n  afterMutationCallback            ,\n  spawnedWorkCallback            ,\n  passiveCallback             ,\n  errorCallback               ,\n)                               {\n  const ownerDocument           =\n    rootContainer.nodeType === DOCUMENT_NODE\n      ? (rootContainer     )\n      : rootContainer.ownerDocument;\n  try {\n    // $FlowFixMe[prop-missing]\n    const transition = ownerDocument.startViewTransition({\n      update() {\n        // Note: We read the existence of a pending navigation before we apply the\n        // mutations. That way we're not waiting on a navigation that we spawned\n        // from this update. Only navigations that started before this commit.\n        const ownerWindow = ownerDocument.defaultView;\n        const pendingNavigation =\n          ownerWindow.navigation && ownerWindow.navigation.transition;\n        // $FlowFixMe[prop-missing]\n        const previousFontLoadingStatus = ownerDocument.fonts.status;\n        mutationCallback();\n        if (previousFontLoadingStatus === 'loaded') {\n          // Force layout calculation to trigger font loading.\n          forceLayout(ownerDocument);\n          if (\n            // $FlowFixMe[prop-missing]\n            ownerDocument.fonts.status === 'loading'\n          ) {\n            // The mutation lead to new fonts being loaded. We should wait on them before continuing.\n            // This avoids waiting for potentially unrelated fonts that were already loading before.\n            // Either in an earlier transition or as part of a sync optimistic state. This doesn't\n            // include preloads that happened earlier.\n            const fontsReady = Promise.race([\n              // $FlowFixMe[prop-missing]\n              ownerDocument.fonts.ready,\n              new Promise(resolve =>\n                setTimeout(resolve, SUSPENSEY_FONT_TIMEOUT),\n              ),\n            ]).then(layoutCallback, layoutCallback);\n            const allReady = pendingNavigation\n              ? Promise.allSettled([pendingNavigation.finished, fontsReady])\n              : fontsReady;\n            return allReady.then(afterMutationCallback, afterMutationCallback);\n          }\n        }\n        layoutCallback();\n        if (pendingNavigation) {\n          return pendingNavigation.finished.then(\n            afterMutationCallback,\n            afterMutationCallback,\n          );\n        } else {\n          afterMutationCallback();\n        }\n      },\n      types: transitionTypes,\n    });\n    // $FlowFixMe[prop-missing]\n    ownerDocument.__reactViewTransition = transition;\n    const handleError = (error       ) => {\n      try {\n        error = customizeViewTransitionError(error, false);\n        if (error !== null) {\n          errorCallback(error);\n        }\n      } finally {\n        // Continue the reset of the work.\n        // If the error happened in the snapshot phase before the update callback\n        // was invoked, then we need to first finish the mutation and layout phases.\n        // If they're already invoked it's still safe to call them due the status check.\n        mutationCallback();\n        layoutCallback();\n        // Skip afterMutationCallback() since we're not animating.\n        spawnedWorkCallback();\n      }\n    };\n    transition.ready.then(spawnedWorkCallback, handleError);\n    transition.finished.finally(() => {\n      cancelAllViewTransitionAnimations((ownerDocument.documentElement     ));\n      // $FlowFixMe[prop-missing]\n      if (ownerDocument.__reactViewTransition === transition) {\n        // $FlowFixMe[prop-missing]\n        ownerDocument.__reactViewTransition = null;\n      }\n      passiveCallback();\n    });\n    return transition;\n  } catch (x) {\n    // We use the error as feature detection.\n    // The only thing that should throw is if startViewTransition is missing\n    // or if it doesn't accept the object form. Other errors are async.\n    // I.e. it's before the View Transitions v2 spec. We only support View\n    // Transitions v2 otherwise we fallback to not animating to ensure that\n    // we're not animating with the wrong animation mapped.\n    // Flush remaining work synchronously.\n    mutationCallback();\n    layoutCallback();\n    // Skip afterMutationCallback(). We don't need it since we're not animating.\n    spawnedWorkCallback();\n    // Skip passiveCallback(). Spawned work will schedule a task.\n    return null;\n  }\n}\n\n                                     \n                         \n     \n  \n\nfunction mergeTranslate(translateA         , translateB         )         {\n  if (!translateA || translateA === 'none') {\n    return translateB || '';\n  }\n  if (!translateB || translateB === 'none') {\n    return translateA || '';\n  }\n  const partsA = translateA.split(' ');\n  const partsB = translateB.split(' ');\n  let i;\n  let result = '';\n  for (i = 0; i < partsA.length && i < partsB.length; i++) {\n    if (i > 0) {\n      result += ' ';\n    }\n    result += 'calc(' + partsA[i] + ' + ' + partsB[i] + ')';\n  }\n  for (; i < partsA.length; i++) {\n    result += ' ' + partsA[i];\n  }\n  for (; i < partsB.length; i++) {\n    result += ' ' + partsB[i];\n  }\n  return result;\n}\n\nfunction animateGesture(\n  keyframes     ,\n  targetElement         ,\n  pseudoElement        ,\n  timeline                   ,\n  rangeStart        ,\n  rangeEnd        ,\n  moveFirstFrameIntoViewport         ,\n  moveAllFramesIntoViewport         ,\n) {\n  for (let i = 0; i < keyframes.length; i++) {\n    const keyframe = keyframes[i];\n    // Delete any easing since we always apply linear easing to gestures.\n    delete keyframe.easing;\n    delete keyframe.computedOffset;\n    // Chrome returns \"auto\" for width/height which is not a valid value to\n    // animate to. Similarly, transform: \"none\" is actually lack of transform.\n    if (keyframe.width === 'auto') {\n      delete keyframe.width;\n    }\n    if (keyframe.height === 'auto') {\n      delete keyframe.height;\n    }\n    if (keyframe.transform === 'none') {\n      delete keyframe.transform;\n    }\n    if (moveAllFramesIntoViewport) {\n      if (keyframe.transform == null) {\n        // If a transform is not explicitly specified to override the auto\n        // generated one on the pseudo element, then we need to adjust it to\n        // put it back into the viewport. We don't know the offset relative to\n        // the screen so instead we use the translate prop to do a relative\n        // adjustment.\n        // TODO: If the \"transform\" was manually overridden on the pseudo\n        // element itself and no longer the auto generated one, then we shouldn't\n        // adjust it. I'm not sure how to detect this.\n        if (keyframe.translate == null || keyframe.translate === '') {\n          // TODO: If there's a CSS rule targeting translate on the pseudo element\n          // already we need to merge it.\n          const elementTranslate          = (getComputedStyle(\n            targetElement,\n            pseudoElement,\n          )     ).translate;\n          keyframe.translate = mergeTranslate(\n            elementTranslate,\n            '20000px 20000px',\n          );\n        } else {\n          keyframe.translate = mergeTranslate(\n            keyframe.translate,\n            '20000px 20000px',\n          );\n        }\n      }\n    }\n  }\n  if (moveFirstFrameIntoViewport) {\n    // If this is the generated animation that does a FLIP matrix translation\n    // from the old position, we need to adjust it from the out of viewport\n    // position. If this is going from old to new it only applies to first\n    // keyframe. Otherwise it applies to every keyframe.\n    moveOldFrameIntoViewport(keyframes[0]);\n  }\n  // TODO: Reverse the reverse if the original direction is reverse.\n  const reverse = rangeStart > rangeEnd;\n  targetElement.animate(keyframes, {\n    pseudoElement: pseudoElement,\n    // Set the timeline to the current gesture timeline to drive the updates.\n    timeline: timeline,\n    // We reset all easing functions to linear so that it feels like you\n    // have direct impact on the transition and to avoid double bouncing\n    // from scroll bouncing.\n    easing: 'linear',\n    // We fill in both direction for overscroll.\n    fill: 'both', // TODO: Should we preserve the fill instead?\n    // We play all gestures in reverse, except if we're in reverse direction\n    // in which case we need to play it in reverse of the reverse.\n    direction: reverse ? 'normal' : 'reverse',\n    // Range start needs to be higher than range end. If it goes in reverse\n    // we reverse the whole animation below.\n    rangeStart: (reverse ? rangeEnd : rangeStart) + '%',\n    rangeEnd: (reverse ? rangeStart : rangeEnd) + '%',\n  });\n}\n\nexport function startGestureTransition(\n  rootContainer           ,\n  timeline                 ,\n  rangeStart        ,\n  rangeEnd        ,\n  transitionTypes                        ,\n  mutationCallback            ,\n  animateCallback            ,\n  errorCallback               ,\n)                               {\n  const ownerDocument           =\n    rootContainer.nodeType === DOCUMENT_NODE\n      ? (rootContainer     )\n      : rootContainer.ownerDocument;\n  try {\n    // Force layout before we start the Transition. This works around a bug in Safari\n    // if one of the clones end up being a stylesheet that isn't loaded or uncached.\n    // https://bugs.webkit.org/show_bug.cgi?id=290146\n    forceLayout(ownerDocument);\n    // $FlowFixMe[prop-missing]\n    const transition = ownerDocument.startViewTransition({\n      update: mutationCallback,\n      types: transitionTypes,\n    });\n    // $FlowFixMe[prop-missing]\n    ownerDocument.__reactViewTransition = transition;\n    const readyCallback = () => {\n      const documentElement          = (ownerDocument.documentElement     );\n      // Loop through all View Transition Animations.\n      const animations = documentElement.getAnimations({subtree: true});\n      // First do a pass to collect all known group and new items so we can look\n      // up if they exist later.\n      const foundGroups              = new Set();\n      const foundNews              = new Set();\n      // Collect the longest duration of any view-transition animation including delay.\n      let longestDuration = 0;\n      for (let i = 0; i < animations.length; i++) {\n        const effect                 = (animations[i].effect     );\n        // $FlowFixMe\n        const pseudoElement          = effect.pseudoElement;\n        if (pseudoElement == null) {\n        } else if (pseudoElement.startsWith('::view-transition')) {\n          const timing = effect.getTiming();\n          const duration =\n            typeof timing.duration === 'number' ? timing.duration : 0;\n          // TODO: Consider interation count higher than 1.\n          const durationWithDelay = timing.delay + duration;\n          if (durationWithDelay > longestDuration) {\n            longestDuration = durationWithDelay;\n          }\n          if (pseudoElement.startsWith('::view-transition-group')) {\n            foundGroups.add(pseudoElement.slice(23));\n          } else if (pseudoElement.startsWith('::view-transition-new')) {\n            // TODO: This is not really a sufficient detection because if the new\n            // pseudo element might exist but have animations disabled on it.\n            foundNews.add(pseudoElement.slice(21));\n          }\n        }\n      }\n      const durationToRangeMultipler =\n        (rangeEnd - rangeStart) / longestDuration;\n      for (let i = 0; i < animations.length; i++) {\n        const anim = animations[i];\n        if (anim.playState !== 'running') {\n          continue;\n        }\n        const effect                 = (anim.effect     );\n        // $FlowFixMe\n        const pseudoElement          = effect.pseudoElement;\n        if (\n          pseudoElement != null &&\n          pseudoElement.startsWith('::view-transition') &&\n          effect.target === documentElement\n        ) {\n          // Ideally we could mutate the existing animation but unfortunately\n          // the mutable APIs seem less tested and therefore are lacking or buggy.\n          // Therefore we create a new animation instead.\n          anim.cancel();\n          let isGeneratedGroupAnim = false;\n          let isExitGroupAnim = false;\n          if (pseudoElement.startsWith('::view-transition-group')) {\n            const groupName = pseudoElement.slice(23);\n            if (foundNews.has(groupName)) {\n              // If this has both \"new\" and \"old\" state we expect this to be an auto-generated\n              // animation that started outside the viewport. We need to adjust this first frame\n              // to be inside the viewport.\n              // $FlowFixMe[prop-missing]\n              const animationName          = anim.animationName;\n              isGeneratedGroupAnim =\n                animationName != null &&\n                // $FlowFixMe[prop-missing]\n                animationName.startsWith('-ua-view-transition-group-anim-');\n            } else {\n              // If this has only an \"old\" state then the pseudo element will be outside\n              // the viewport. If any keyframes don't override \"transform\" we need to\n              // adjust them.\n              isExitGroupAnim = true;\n            }\n            // TODO: If this has only an old state and no new state,\n          }\n          // Adjust the range based on how long the animation would've ran as time based.\n          // Since we're running animations in reverse from how they normally would run,\n          // therefore the timing is from the rangeEnd to the start.\n          const timing = effect.getTiming();\n          const duration =\n            typeof timing.duration === 'number' ? timing.duration : 0;\n          let adjustedRangeStart =\n            rangeEnd - (duration + timing.delay) * durationToRangeMultipler;\n          let adjustedRangeEnd =\n            rangeEnd - timing.delay * durationToRangeMultipler;\n          if (\n            timing.direction === 'reverse' ||\n            timing.direction === 'alternate-reverse'\n          ) {\n            // This animation was originally in reverse so we have to play it in flipped range.\n            const temp = adjustedRangeStart;\n            adjustedRangeStart = adjustedRangeEnd;\n            adjustedRangeEnd = temp;\n          }\n          animateGesture(\n            effect.getKeyframes(),\n            // $FlowFixMe: Always documentElement atm.\n            effect.target,\n            pseudoElement,\n            timeline,\n            adjustedRangeStart,\n            adjustedRangeEnd,\n            isGeneratedGroupAnim,\n            isExitGroupAnim,\n          );\n          if (pseudoElement.startsWith('::view-transition-old')) {\n            const groupName = pseudoElement.slice(21);\n            if (!foundGroups.has(groupName) && !foundNews.has(groupName)) {\n              foundGroups.add(groupName);\n              // We haven't seen any group animation with this name. Since the old\n              // state was outside the viewport we need to put it back. Since we\n              // can't programmatically target the element itself, we use an\n              // animation to adjust it.\n              // This usually happens for exit animations where the element has\n              // the old position.\n              // If we also have a \"new\" state then we skip this because it means\n              // someone manually disabled the auto-generated animation. We need to\n              // treat the old state as having the position of the \"new\" state which\n              // will happen by default.\n              const pseudoElementName = '::view-transition-group' + groupName;\n              animateGesture(\n                [{}, {}],\n                // $FlowFixMe: Always documentElement atm.\n                effect.target,\n                pseudoElementName,\n                timeline,\n                rangeStart,\n                rangeEnd,\n                false,\n                true, // We let the helper apply the translate\n              );\n            }\n          }\n        }\n      }\n      // View Transitions with ScrollTimeline has a quirk where they end if the\n      // ScrollTimeline ever reaches 100% but that doesn't mean we're done because\n      // you can swipe back again. We can prevent this by adding a paused Animation\n      // that never stops. This seems to keep all running Animations alive until\n      // we explicitly abort (or something forces the View Transition to cancel).\n      const blockingAnim = documentElement.animate([{}, {}], {\n        pseudoElement: '::view-transition',\n        duration: 1,\n      });\n      blockingAnim.pause();\n      animateCallback();\n    };\n    // In Chrome, \"new\" animations are not ready in the ready callback. We have to wait\n    // until requestAnimationFrame before we can observe them through getAnimations().\n    // However, in Safari, that would cause a flicker because we're applying them late.\n    // TODO: Think of a feature detection for this instead.\n    const readyForAnimations =\n      navigator.userAgent.indexOf('Chrome') !== -1\n        ? () => requestAnimationFrame(readyCallback)\n        : readyCallback;\n    const handleError = (error       ) => {\n      try {\n        error = customizeViewTransitionError(error, true);\n        if (error !== null) {\n          errorCallback(error);\n        }\n      } finally {\n        // Continue the reset of the work.\n        // If the error happened in the snapshot phase before the update callback\n        // was invoked, then we need to first finish the mutation and layout phases.\n        // If they're already invoked it's still safe to call them due the status check.\n        mutationCallback();\n        // Skip readyCallback() and go straight to animateCallbck() since we're not animating.\n        // animateCallback() is still required to restore states.\n        animateCallback();\n      }\n    };\n    transition.ready.then(readyForAnimations, handleError);\n    transition.finished.finally(() => {\n      cancelAllViewTransitionAnimations((ownerDocument.documentElement     ));\n      // $FlowFixMe[prop-missing]\n      if (ownerDocument.__reactViewTransition === transition) {\n        // $FlowFixMe[prop-missing]\n        ownerDocument.__reactViewTransition = null;\n      }\n    });\n    return transition;\n  } catch (x) {\n    // We use the error as feature detection.\n    // The only thing that should throw is if startViewTransition is missing\n    // or if it doesn't accept the object form. Other errors are async.\n    // I.e. it's before the View Transitions v2 spec. We only support View\n    // Transitions v2 otherwise we fallback to not animating to ensure that\n    // we're not animating with the wrong animation mapped.\n    // Run through the sequence to put state back into a consistent state.\n    mutationCallback();\n    animateCallback();\n    return null;\n  }\n}\n\nexport function stopViewTransition(transition                       ) {\n  transition.skipTransition();\n}\n\n                                                              \n                      \n                    \n                                          \n \n\nfunction ViewTransitionPseudoElement(\n                                        \n  pseudo        ,\n  name        ,\n) {\n  // TODO: Get the owner document from the root container.\n  this._scope = (document.documentElement     );\n  this._selector = '::view-transition-' + pseudo + '(' + name + ')';\n}\n// $FlowFixMe[prop-missing]\nViewTransitionPseudoElement.prototype.animate = function (\n                                        \n  keyframes                                              ,\n  options                                    ,\n)            {\n  const opts      =\n    typeof options === 'number'\n      ? {\n          duration: options,\n        }\n      : Object.assign(({}                          ), options);\n  opts.pseudoElement = this._selector;\n  // TODO: Handle multiple child instances.\n  return this._scope.animate(keyframes, opts);\n};\n// $FlowFixMe[prop-missing]\nViewTransitionPseudoElement.prototype.getAnimations = function (\n                                        \n  options                       ,\n)              {\n  const scope = this._scope;\n  const selector = this._selector;\n  const animations = scope.getAnimations({subtree: true});\n  const result = [];\n  for (let i = 0; i < animations.length; i++) {\n    const effect          \n                       \n                             \n         \n      = (animations[i].effect     );\n    // TODO: Handle multiple child instances.\n    if (\n      effect !== null &&\n      effect.target === scope &&\n      effect.pseudoElement === selector\n    ) {\n      result.push(animations[i]);\n    }\n  }\n  return result;\n};\n// $FlowFixMe[prop-missing]\nViewTransitionPseudoElement.prototype.getComputedStyle = function (\n                                        \n)                      {\n  const scope = this._scope;\n  const selector = this._selector;\n  return getComputedStyle(scope, selector);\n};\n\nexport function createViewTransitionInstance(\n  name        ,\n)                         {\n  return {\n    name: name,\n    group: new (ViewTransitionPseudoElement     )('group', name),\n    imagePair: new (ViewTransitionPseudoElement     )('image-pair', name),\n    old: new (ViewTransitionPseudoElement     )('old', name),\n    new: new (ViewTransitionPseudoElement     )('new', name),\n  };\n}\n\n                                                 // TODO: More provider types.\n\nexport function getCurrentGestureOffset(provider                 )         {\n  const time = provider.currentTime;\n  if (time === null) {\n    throw new Error(\n      'Cannot start a gesture with a disconnected AnimationTimeline.',\n    );\n  }\n  return typeof time === 'number' ? time : time.value;\n}\n\n                            \n               \n                          \n                                                               \n  \n\n                                    \n                        \n                                                     \n                                                                \n                   \n                 \n                            \n                                                           \n          \n                      \n                 \n                            \n                                                           \n          \n                                       \n                                           \n                                               \n               \n                                                                      \n                                                                        \n                                   \n                                    \n                      \n                                                   \n                                                       \n  \n\nfunction FragmentInstance(                            fragmentFiber       ) {\n  this._fragmentFiber = fragmentFiber;\n  this._eventListeners = null;\n  this._observers = null;\n}\n// $FlowFixMe[prop-missing]\nFragmentInstance.prototype.addEventListener = function (\n                             \n  type        ,\n  listener               ,\n  optionsOrUseCapture                                   ,\n)       {\n  if (this._eventListeners === null) {\n    this._eventListeners = [];\n  }\n\n  const listeners = this._eventListeners;\n  // Element.addEventListener will only apply uniquely new event listeners by default. Since we\n  // need to collect the listeners to apply to appended children, we track them ourselves and use\n  // custom equality check for the options.\n  const isNewEventListener =\n    indexOfEventListener(listeners, type, listener, optionsOrUseCapture) === -1;\n  if (isNewEventListener) {\n    listeners.push({type, listener, optionsOrUseCapture});\n    traverseFragmentInstance(\n      this._fragmentFiber,\n      addEventListenerToChild,\n      type,\n      listener,\n      optionsOrUseCapture,\n    );\n  }\n  this._eventListeners = listeners;\n};\nfunction addEventListenerToChild(\n  child       ,\n  type        ,\n  listener               ,\n  optionsOrUseCapture                                   ,\n)          {\n  const instance = getInstanceFromHostFiber          (child);\n  instance.addEventListener(type, listener, optionsOrUseCapture);\n  return false;\n}\n// $FlowFixMe[prop-missing]\nFragmentInstance.prototype.removeEventListener = function (\n                             \n  type        ,\n  listener               ,\n  optionsOrUseCapture                                   ,\n)       {\n  const listeners = this._eventListeners;\n  if (listeners === null) {\n    return;\n  }\n  if (typeof listeners !== 'undefined' && listeners.length > 0) {\n    traverseFragmentInstance(\n      this._fragmentFiber,\n      removeEventListenerFromChild,\n      type,\n      listener,\n      optionsOrUseCapture,\n    );\n    const index = indexOfEventListener(\n      listeners,\n      type,\n      listener,\n      optionsOrUseCapture,\n    );\n    if (this._eventListeners !== null) {\n      this._eventListeners.splice(index, 1);\n    }\n  }\n};\nfunction removeEventListenerFromChild(\n  child       ,\n  type        ,\n  listener               ,\n  optionsOrUseCapture                                   ,\n)          {\n  const instance = getInstanceFromHostFiber          (child);\n  instance.removeEventListener(type, listener, optionsOrUseCapture);\n  return false;\n}\n// $FlowFixMe[prop-missing]\nFragmentInstance.prototype.dispatchEvent = function (\n                             \n  event       ,\n)          {\n  const parentHostFiber = getFragmentParentHostFiber(this._fragmentFiber);\n  if (parentHostFiber === null) {\n    return true;\n  }\n  const parentHostInstance =\n    getInstanceFromHostFiber          (parentHostFiber);\n  const eventListeners = this._eventListeners;\n  if (\n    (eventListeners !== null && eventListeners.length > 0) ||\n    !event.bubbles\n  ) {\n    const temp = document.createTextNode('');\n    if (eventListeners) {\n      for (let i = 0; i < eventListeners.length; i++) {\n        const {type, listener, optionsOrUseCapture} = eventListeners[i];\n        temp.addEventListener(type, listener, optionsOrUseCapture);\n      }\n    }\n    parentHostInstance.appendChild(temp);\n    const cancelable = temp.dispatchEvent(event);\n    if (eventListeners) {\n      for (let i = 0; i < eventListeners.length; i++) {\n        const {type, listener, optionsOrUseCapture} = eventListeners[i];\n        temp.removeEventListener(type, listener, optionsOrUseCapture);\n      }\n    }\n    parentHostInstance.removeChild(temp);\n    return cancelable;\n  } else {\n    return parentHostInstance.dispatchEvent(event);\n  }\n};\n// $FlowFixMe[prop-missing]\nFragmentInstance.prototype.focus = function (\n                             \n  focusOptions               ,\n)       {\n  traverseFragmentInstanceDeeply(\n    this._fragmentFiber,\n    setFocusOnFiberIfFocusable,\n    focusOptions,\n  );\n};\nfunction setFocusOnFiberIfFocusable(\n  fiber       ,\n  focusOptions               ,\n)          {\n  const instance = getInstanceFromHostFiber          (fiber);\n  return setFocusIfFocusable(instance, focusOptions);\n}\n// $FlowFixMe[prop-missing]\nFragmentInstance.prototype.focusLast = function (\n                             \n  focusOptions               ,\n)       {\n  const children               = [];\n  traverseFragmentInstanceDeeply(\n    this._fragmentFiber,\n    collectChildren,\n    children,\n  );\n  for (let i = children.length - 1; i >= 0; i--) {\n    const child = children[i];\n    if (setFocusOnFiberIfFocusable(child, focusOptions)) {\n      break;\n    }\n  }\n};\nfunction collectChildren(child       , collection              )          {\n  collection.push(child);\n  return false;\n}\n// $FlowFixMe[prop-missing]\nFragmentInstance.prototype.blur = function (                          )       {\n  // TODO: When we have a parent element reference, we can skip traversal if the fragment's parent\n  //   does not contain document.activeElement\n  traverseFragmentInstance(\n    this._fragmentFiber,\n    blurActiveElementWithinFragment,\n  );\n};\nfunction blurActiveElementWithinFragment(child       )          {\n  // TODO: We can get the activeElement from the parent outside of the loop when we have a reference.\n  const instance = getInstanceFromHostFiber          (child);\n  const ownerDocument = instance.ownerDocument;\n  if (instance === ownerDocument.activeElement) {\n    // $FlowFixMe[prop-missing]\n    instance.blur();\n    return true;\n  }\n  return false;\n}\n// $FlowFixMe[prop-missing]\nFragmentInstance.prototype.observeUsing = function (\n                             \n  observer                                       ,\n)       {\n  if (this._observers === null) {\n    this._observers = new Set();\n  }\n  this._observers.add(observer);\n  traverseFragmentInstance(this._fragmentFiber, observeChild, observer);\n};\nfunction observeChild(\n  child       ,\n  observer                                       ,\n) {\n  const instance = getInstanceFromHostFiber          (child);\n  observer.observe(instance);\n  return false;\n}\n// $FlowFixMe[prop-missing]\nFragmentInstance.prototype.unobserveUsing = function (\n                             \n  observer                                       ,\n)       {\n  if (this._observers === null || !this._observers.has(observer)) {\n    if (__DEV__) {\n      console.error(\n        'You are calling unobserveUsing() with an observer that is not being observed with this fragment ' +\n          'instance. First attach the observer with observeUsing()',\n      );\n    }\n  } else {\n    this._observers.delete(observer);\n    traverseFragmentInstance(this._fragmentFiber, unobserveChild, observer);\n  }\n};\nfunction unobserveChild(\n  child       ,\n  observer                                       ,\n) {\n  const instance = getInstanceFromHostFiber          (child);\n  observer.unobserve(instance);\n  return false;\n}\n// $FlowFixMe[prop-missing]\nFragmentInstance.prototype.getClientRects = function (\n                             \n)                 {\n  const rects                 = [];\n  traverseFragmentInstance(this._fragmentFiber, collectClientRects, rects);\n  return rects;\n};\nfunction collectClientRects(child       , rects                )          {\n  const instance = getInstanceFromHostFiber          (child);\n  // $FlowFixMe[method-unbinding]\n  rects.push.apply(rects, instance.getClientRects());\n  return false;\n}\n// $FlowFixMe[prop-missing]\nFragmentInstance.prototype.getRootNode = function (\n                             \n  getRootNodeOptions                      ,\n)                                               {\n  const parentHostFiber = getFragmentParentHostFiber(this._fragmentFiber);\n  if (parentHostFiber === null) {\n    return this;\n  }\n  const parentHostInstance =\n    getInstanceFromHostFiber          (parentHostFiber);\n  const rootNode =\n    // $FlowFixMe[incompatible-cast] Flow expects Node\n    (parentHostInstance.getRootNode(getRootNodeOptions)                       );\n  return rootNode;\n};\n// $FlowFixMe[prop-missing]\nFragmentInstance.prototype.compareDocumentPosition = function (\n                             \n  otherNode          ,\n)         {\n  const parentHostFiber = getFragmentParentHostFiber(this._fragmentFiber);\n  if (parentHostFiber === null) {\n    return Node.DOCUMENT_POSITION_DISCONNECTED;\n  }\n  const children               = [];\n  traverseFragmentInstance(this._fragmentFiber, collectChildren, children);\n\n  let result = Node.DOCUMENT_POSITION_DISCONNECTED;\n  if (children.length === 0) {\n    // If the fragment has no children, we can use the parent and\n    // siblings to determine a position.\n    const parentHostInstance =\n      getInstanceFromHostFiber          (parentHostFiber);\n    const parentResult = parentHostInstance.compareDocumentPosition(otherNode);\n    result = parentResult;\n    if (parentHostInstance === otherNode) {\n      result = Node.DOCUMENT_POSITION_CONTAINS;\n    } else {\n      if (parentResult & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n        // otherNode is one of the fragment's siblings. Use the next\n        // sibling to determine if its preceding or following.\n        const nextSiblingFiber = getNextSiblingHostFiber(this._fragmentFiber);\n        if (nextSiblingFiber === null) {\n          result = Node.DOCUMENT_POSITION_PRECEDING;\n        } else {\n          const nextSiblingInstance =\n            getInstanceFromHostFiber          (nextSiblingFiber);\n          const nextSiblingResult =\n            nextSiblingInstance.compareDocumentPosition(otherNode);\n          if (\n            nextSiblingResult === 0 ||\n            nextSiblingResult & Node.DOCUMENT_POSITION_FOLLOWING\n          ) {\n            result = Node.DOCUMENT_POSITION_FOLLOWING;\n          } else {\n            result = Node.DOCUMENT_POSITION_PRECEDING;\n          }\n        }\n      }\n    }\n\n    result |= Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;\n    return result;\n  }\n\n  const firstElement = getInstanceFromHostFiber          (children[0]);\n  const lastElement = getInstanceFromHostFiber          (\n    children[children.length - 1],\n  );\n  const firstResult = firstElement.compareDocumentPosition(otherNode);\n  const lastResult = lastElement.compareDocumentPosition(otherNode);\n  if (\n    (firstResult & Node.DOCUMENT_POSITION_FOLLOWING &&\n      lastResult & Node.DOCUMENT_POSITION_PRECEDING) ||\n    otherNode === firstElement ||\n    otherNode === lastElement\n  ) {\n    result = Node.DOCUMENT_POSITION_CONTAINED_BY;\n  } else {\n    result = firstResult;\n  }\n\n  if (\n    result & Node.DOCUMENT_POSITION_DISCONNECTED ||\n    result & Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\n  ) {\n    return result;\n  }\n\n  // Now that we have the result from the DOM API, we double check it matches\n  // the state of the React tree. If it doesn't, we have a case of portaled or\n  // otherwise injected elements and we return DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC.\n  const documentPositionMatchesFiberPosition =\n    validateDocumentPositionWithFiberTree(\n      result,\n      this._fragmentFiber,\n      children[0],\n      children[children.length - 1],\n      otherNode,\n    );\n  if (documentPositionMatchesFiberPosition) {\n    return result;\n  }\n  return Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;\n};\n\nfunction validateDocumentPositionWithFiberTree(\n  documentPosition        ,\n  fragmentFiber       ,\n  precedingBoundaryFiber       ,\n  followingBoundaryFiber       ,\n  otherNode          ,\n)          {\n  const otherFiber = getClosestInstanceFromNode(otherNode);\n  if (documentPosition & Node.DOCUMENT_POSITION_CONTAINED_BY) {\n    return !!otherFiber && isFiberContainedBy(fragmentFiber, otherFiber);\n  }\n  if (documentPosition & Node.DOCUMENT_POSITION_CONTAINS) {\n    if (otherFiber === null) {\n      // otherFiber could be null if its the document or body element\n      const ownerDocument = otherNode.ownerDocument;\n      return otherNode === ownerDocument || otherNode === ownerDocument.body;\n    }\n    return isFiberContainedBy(otherFiber, fragmentFiber);\n  }\n  if (documentPosition & Node.DOCUMENT_POSITION_PRECEDING) {\n    return (\n      !!otherFiber &&\n      (otherFiber === precedingBoundaryFiber ||\n        isFiberPreceding(precedingBoundaryFiber, otherFiber))\n    );\n  }\n  if (documentPosition & Node.DOCUMENT_POSITION_FOLLOWING) {\n    return (\n      !!otherFiber &&\n      (otherFiber === followingBoundaryFiber ||\n        isFiberFollowing(followingBoundaryFiber, otherFiber))\n    );\n  }\n\n  return false;\n}\n\nfunction normalizeListenerOptions(\n  opts                                   ,\n)         {\n  if (opts == null) {\n    return '0';\n  }\n\n  if (typeof opts === 'boolean') {\n    return `c=${opts ? '1' : '0'}`;\n  }\n\n  return `c=${opts.capture ? '1' : '0'}&o=${opts.once ? '1' : '0'}&p=${opts.passive ? '1' : '0'}`;\n}\n\nfunction indexOfEventListener(\n  eventListeners                            ,\n  type        ,\n  listener               ,\n  optionsOrUseCapture                                         ,\n)         {\n  for (let i = 0; i < eventListeners.length; i++) {\n    const item = eventListeners[i];\n    if (\n      item.type === type &&\n      item.listener === listener &&\n      normalizeListenerOptions(item.optionsOrUseCapture) ===\n        normalizeListenerOptions(optionsOrUseCapture)\n    ) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function createFragmentInstance(\n  fragmentFiber       ,\n)                       {\n  return new (FragmentInstance     )(fragmentFiber);\n}\n\nexport function updateFragmentInstanceFiber(\n  fragmentFiber       ,\n  instance                      ,\n)       {\n  instance._fragmentFiber = fragmentFiber;\n}\n\nexport function commitNewChildToFragmentInstance(\n  childElement          ,\n  fragmentInstance                      ,\n)       {\n  const eventListeners = fragmentInstance._eventListeners;\n  if (eventListeners !== null) {\n    for (let i = 0; i < eventListeners.length; i++) {\n      const {type, listener, optionsOrUseCapture} = eventListeners[i];\n      childElement.addEventListener(type, listener, optionsOrUseCapture);\n    }\n  }\n  if (fragmentInstance._observers !== null) {\n    fragmentInstance._observers.forEach(observer => {\n      observer.observe(childElement);\n    });\n  }\n}\n\nexport function deleteChildFromFragmentInstance(\n  childElement          ,\n  fragmentInstance                      ,\n)       {\n  const eventListeners = fragmentInstance._eventListeners;\n  if (eventListeners !== null) {\n    for (let i = 0; i < eventListeners.length; i++) {\n      const {type, listener, optionsOrUseCapture} = eventListeners[i];\n      childElement.removeEventListener(type, listener, optionsOrUseCapture);\n    }\n  }\n}\n\nexport function clearContainer(container           )       {\n  const nodeType = container.nodeType;\n  if (nodeType === DOCUMENT_NODE) {\n    clearContainerSparingly(container);\n  } else if (nodeType === ELEMENT_NODE) {\n    switch (container.nodeName) {\n      case 'HEAD':\n      case 'HTML':\n      case 'BODY':\n        clearContainerSparingly(container);\n        return;\n      default: {\n        container.textContent = '';\n      }\n    }\n  }\n}\n\nfunction clearContainerSparingly(container      ) {\n  let node;\n  let nextNode        = container.firstChild;\n  if (nextNode && nextNode.nodeType === DOCUMENT_TYPE_NODE) {\n    nextNode = nextNode.nextSibling;\n  }\n  while (nextNode) {\n    node = nextNode;\n    nextNode = nextNode.nextSibling;\n    switch (node.nodeName) {\n      case 'HTML':\n      case 'HEAD':\n      case 'BODY': {\n        const element          = (node     );\n        clearContainerSparingly(element);\n        // If these singleton instances had previously been rendered with React they\n        // may still hold on to references to the previous fiber tree. We detatch them\n        // prospectively to reset them to a baseline starting state since we cannot create\n        // new instances.\n        detachDeletedInstance(element);\n        continue;\n      }\n      // Script tags are retained to avoid an edge case bug. Normally scripts will execute if they\n      // are ever inserted into the DOM. However when streaming if a script tag is opened but not\n      // yet closed some browsers create and insert the script DOM Node but the script cannot execute\n      // yet until the closing tag is parsed. If something causes React to call clearContainer while\n      // this DOM node is in the document but not yet executable the DOM node will be removed from the\n      // document and when the script closing tag comes in the script will not end up running. This seems\n      // to happen in Chrome/Firefox but not Safari at the moment though this is not necessarily specified\n      // behavior so it could change in future versions of browsers. While leaving all scripts is broader\n      // than strictly necessary this is the least amount of additional code to avoid this breaking\n      // edge case.\n      //\n      // Style tags are retained because they may likely come from 3rd party scripts and extensions\n      case 'SCRIPT':\n      case 'STYLE': {\n        continue;\n      }\n      // Stylesheet tags are retained because they may likely come from 3rd party scripts and extensions\n      case 'LINK': {\n        if (((node     )                 ).rel.toLowerCase() === 'stylesheet') {\n          continue;\n        }\n      }\n    }\n    container.removeChild(node);\n  }\n  return;\n}\n\nfunction clearHead(head         )       {\n  let node = head.firstChild;\n  while (node) {\n    const nextNode = node.nextSibling;\n    const nodeName = node.nodeName;\n    if (\n      isMarkedHoistable(node) ||\n      nodeName === 'SCRIPT' ||\n      nodeName === 'STYLE' ||\n      (nodeName === 'LINK' &&\n        ((node     )                 ).rel.toLowerCase() === 'stylesheet')\n    ) {\n      // retain these nodes\n    } else {\n      head.removeChild(node);\n    }\n    node = nextNode;\n  }\n  return;\n}\n\n// Making this so we can eventually move all of the instance caching to the commit phase.\n// Currently this is only used to associate fiber and props to instances for hydrating\n// HostSingletons. The reason we need it here is we only want to make this binding on commit\n// because only one fiber can own the instance at a time and render can fail/restart\nexport function bindInstance(\n  instance          ,\n  props       ,\n  internalInstanceHandle       ,\n) {\n  precacheFiberNode((internalInstanceHandle     ), instance);\n  updateFiberProps(instance, props);\n}\n\n// -------------------\n//     Hydration\n// -------------------\n\nexport const supportsHydration = true;\n\nexport function canHydrateInstance(\n  instance                    ,\n  type        ,\n  props       ,\n  inRootOrSingleton         ,\n)                  {\n  while (instance.nodeType === ELEMENT_NODE) {\n    const element          = (instance     );\n    const anyProps = (props     );\n    if (element.nodeName.toLowerCase() !== type.toLowerCase()) {\n      if (!inRootOrSingleton) {\n        // Usually we error for mismatched tags.\n        if (element.nodeName === 'INPUT' && (element     ).type === 'hidden') {\n          // If we have extra hidden inputs, we don't mismatch. This allows us to embed\n          // extra form data in the original form.\n        } else {\n          return null;\n        }\n      }\n      // In root or singleton parents we skip past mismatched instances.\n    } else if (!inRootOrSingleton) {\n      // Match\n      if (type === 'input' && (element     ).type === 'hidden') {\n        if (__DEV__) {\n          checkAttributeStringCoercion(anyProps.name, 'name');\n        }\n        const name = anyProps.name == null ? null : '' + anyProps.name;\n        if (\n          anyProps.type !== 'hidden' ||\n          element.getAttribute('name') !== name\n        ) {\n          // Skip past hidden inputs unless that's what we're looking for. This allows us\n          // embed extra form data in the original form.\n        } else {\n          return element;\n        }\n      } else {\n        return element;\n      }\n    } else if (isMarkedHoistable(element)) {\n      // We've already claimed this as a hoistable which isn't hydrated this way so we skip past it.\n    } else {\n      // We have an Element with the right type.\n\n      // We are going to try to exclude it if we can definitely identify it as a hoisted Node or if\n      // we can guess that the node is likely hoisted or was inserted by a 3rd party script or browser extension\n      // using high entropy attributes for certain types. This technique will fail for strange insertions like\n      // extension prepending <div> in the <body> but that already breaks before and that is an edge case.\n      switch (type) {\n        // case 'title':\n        //We assume all titles are matchable. You should only have one in the Document, at least in a hoistable scope\n        // and if you are a HostComponent with type title we must either be in an <svg> context or this title must have an `itemProp` prop.\n        case 'meta': {\n          // The only way to opt out of hoisting meta tags is to give it an itemprop attribute. We assume there will be\n          // not 3rd party meta tags that are prepended, accepting the cases where this isn't true because meta tags\n          // are usually only functional for SSR so even in a rare case where we did bind to an injected tag the runtime\n          // implications are minimal\n          if (!element.hasAttribute('itemprop')) {\n            // This is a Hoistable\n            break;\n          }\n          return element;\n        }\n        case 'link': {\n          // Links come in many forms and we do expect 3rd parties to inject them into <head> / <body>. We exclude known resources\n          // and then use high-entroy attributes like href which are almost always used and almost always unique to filter out unlikely\n          // matches.\n          const rel = element.getAttribute('rel');\n          if (rel === 'stylesheet' && element.hasAttribute('data-precedence')) {\n            // This is a stylesheet resource\n            break;\n          } else if (\n            rel !== anyProps.rel ||\n            element.getAttribute('href') !==\n              (anyProps.href == null || anyProps.href === ''\n                ? null\n                : anyProps.href) ||\n            element.getAttribute('crossorigin') !==\n              (anyProps.crossOrigin == null ? null : anyProps.crossOrigin) ||\n            element.getAttribute('title') !==\n              (anyProps.title == null ? null : anyProps.title)\n          ) {\n            // rel + href should usually be enough to uniquely identify a link however crossOrigin can vary for rel preconnect\n            // and title could vary for rel alternate\n            break;\n          }\n          return element;\n        }\n        case 'style': {\n          // Styles are hard to match correctly. We can exclude known resources but otherwise we accept the fact that a non-hoisted style tags\n          // in <head> or <body> are likely never going to be unmounted given their position in the document and the fact they likely hold global styles\n          if (element.hasAttribute('data-precedence')) {\n            // This is a style resource\n            break;\n          }\n          return element;\n        }\n        case 'script': {\n          // Scripts are a little tricky, we exclude known resources and then similar to links try to use high-entropy attributes\n          // to reject poor matches. One challenge with scripts are inline scripts. We don't attempt to check text content which could\n          // in theory lead to a hydration error later if a 3rd party injected an inline script before the React rendered nodes.\n          // Falling back to client rendering if this happens should be seemless though so we will try this hueristic and revisit later\n          // if we learn it is problematic\n          const srcAttr = element.getAttribute('src');\n          if (\n            srcAttr !== (anyProps.src == null ? null : anyProps.src) ||\n            element.getAttribute('type') !==\n              (anyProps.type == null ? null : anyProps.type) ||\n            element.getAttribute('crossorigin') !==\n              (anyProps.crossOrigin == null ? null : anyProps.crossOrigin)\n          ) {\n            // This script is for a different src/type/crossOrigin. It may be a script resource\n            // or it may just be a mistmatch\n            if (\n              srcAttr &&\n              element.hasAttribute('async') &&\n              !element.hasAttribute('itemprop')\n            ) {\n              // This is an async script resource\n              break;\n            }\n          }\n          return element;\n        }\n        default: {\n          // We have excluded the most likely cases of mismatch between hoistable tags, 3rd party script inserted tags,\n          // and browser extension inserted tags. While it is possible this is not the right match it is a decent hueristic\n          // that should work in the vast majority of cases.\n          return element;\n        }\n      }\n    }\n    const nextInstance = getNextHydratableSibling(element);\n    if (nextInstance === null) {\n      break;\n    }\n    instance = nextInstance;\n  }\n  // This is a suspense boundary or Text node or we got the end.\n  // Suspense Boundaries are never expected to be injected by 3rd parties. If we see one it should be matched\n  // and this is a hydration error.\n  // Text Nodes are also not expected to be injected by 3rd parties. This is less of a guarantee for <body>\n  // but it seems reasonable and conservative to reject this as a hydration error as well\n  return null;\n}\n\nexport function canHydrateTextInstance(\n  instance                    ,\n  text        ,\n  inRootOrSingleton         ,\n)                      {\n  // Empty strings are not parsed by HTML so there won't be a correct match here.\n  if (text === '') return null;\n\n  while (instance.nodeType !== TEXT_NODE) {\n    if (\n      instance.nodeType === ELEMENT_NODE &&\n      instance.nodeName === 'INPUT' &&\n      (instance     ).type === 'hidden'\n    ) {\n      // If we have extra hidden inputs, we don't mismatch. This allows us to\n      // embed extra form data in the original form.\n    } else if (!inRootOrSingleton) {\n      return null;\n    }\n    const nextInstance = getNextHydratableSibling(instance);\n    if (nextInstance === null) {\n      return null;\n    }\n    instance = nextInstance;\n  }\n  // This has now been refined to a text node.\n  return ((instance     )              );\n}\n\nfunction canHydrateHydrationBoundary(\n  instance                    ,\n  inRootOrSingleton         ,\n)                                             {\n  while (instance.nodeType !== COMMENT_NODE) {\n    if (!inRootOrSingleton) {\n      return null;\n    }\n    const nextInstance = getNextHydratableSibling(instance);\n    if (nextInstance === null) {\n      return null;\n    }\n    instance = nextInstance;\n  }\n  // This has now been refined to a hydration boundary node.\n  return (instance     );\n}\n\nexport function canHydrateActivityInstance(\n  instance                    ,\n  inRootOrSingleton         ,\n)                          {\n  const hydratableInstance = canHydrateHydrationBoundary(\n    instance,\n    inRootOrSingleton,\n  );\n  if (\n    hydratableInstance !== null &&\n    hydratableInstance.data === ACTIVITY_START_DATA\n  ) {\n    return (hydratableInstance     );\n  }\n  return null;\n}\n\nexport function canHydrateSuspenseInstance(\n  instance                    ,\n  inRootOrSingleton         ,\n)                          {\n  const hydratableInstance = canHydrateHydrationBoundary(\n    instance,\n    inRootOrSingleton,\n  );\n  if (\n    hydratableInstance !== null &&\n    hydratableInstance.data !== ACTIVITY_START_DATA\n  ) {\n    return (hydratableInstance     );\n  }\n  return null;\n}\n\nexport function isSuspenseInstancePending(instance                  )          {\n  return (\n    instance.data === SUSPENSE_PENDING_START_DATA ||\n    instance.data === SUSPENSE_QUEUED_START_DATA\n  );\n}\n\nexport function isSuspenseInstanceFallback(\n  instance                  ,\n)          {\n  return (\n    instance.data === SUSPENSE_FALLBACK_START_DATA ||\n    (instance.data === SUSPENSE_PENDING_START_DATA &&\n      instance.ownerDocument.readyState !== DOCUMENT_READY_STATE_LOADING)\n  );\n}\n\nexport function getSuspenseInstanceFallbackErrorDetails(\n  instance                  ,\n)   \n                  \n                   \n                 \n                          \n  {\n  const dataset =\n    instance.nextSibling && ((instance.nextSibling     )             ).dataset;\n  let digest, message, stack, componentStack;\n  if (dataset) {\n    digest = dataset.dgst;\n    if (__DEV__) {\n      message = dataset.msg;\n      stack = dataset.stck;\n      componentStack = dataset.cstck;\n    }\n  }\n  if (__DEV__) {\n    return {\n      message,\n      digest,\n      stack,\n      componentStack,\n    };\n  } else {\n    // Object gets DCE'd if constructed in tail position and matches callsite destructuring\n    return {\n      digest,\n    };\n  }\n}\n\nexport function registerSuspenseInstanceRetry(\n  instance                  ,\n  callback            ,\n) {\n  const ownerDocument = instance.ownerDocument;\n  if (instance.data === SUSPENSE_QUEUED_START_DATA) {\n    // The Fizz runtime has already queued this boundary for reveal. We wait for it\n    // to be revealed and then retries.\n    instance._reactRetry = callback;\n  } else if (\n    // The Fizz runtime must have put this boundary into client render or complete\n    // state after the render finished but before it committed. We need to call the\n    // callback now rather than wait\n    instance.data !== SUSPENSE_PENDING_START_DATA ||\n    // The boundary is still in pending status but the document has finished loading\n    // before we could register the event handler that would have scheduled the retry\n    // on load so we call teh callback now.\n    ownerDocument.readyState !== DOCUMENT_READY_STATE_LOADING\n  ) {\n    callback();\n  } else {\n    // We're still in pending status and the document is still loading so we attach\n    // a listener to the document load even and expose the retry on the instance for\n    // the Fizz runtime to trigger if it ends up resolving this boundary\n    const listener = () => {\n      callback();\n      ownerDocument.removeEventListener('DOMContentLoaded', listener);\n    };\n    ownerDocument.addEventListener('DOMContentLoaded', listener);\n    instance._reactRetry = listener;\n  }\n}\n\nexport function canHydrateFormStateMarker(\n  instance                    ,\n  inRootOrSingleton         ,\n)                                 {\n  while (instance.nodeType !== COMMENT_NODE) {\n    if (!inRootOrSingleton) {\n      return null;\n    }\n    const nextInstance = getNextHydratableSibling(instance);\n    if (nextInstance === null) {\n      return null;\n    }\n    instance = nextInstance;\n  }\n  const nodeData = (instance     ).data;\n  if (\n    nodeData === FORM_STATE_IS_MATCHING ||\n    nodeData === FORM_STATE_IS_NOT_MATCHING\n  ) {\n    const markerInstance                          = (instance     );\n    return markerInstance;\n  }\n  return null;\n}\n\nexport function isFormStateMarkerMatching(\n  markerInstance                         ,\n)          {\n  return markerInstance.data === FORM_STATE_IS_MATCHING;\n}\n\nfunction getNextHydratable(node       ) {\n  // Skip non-hydratable nodes.\n  for (; node != null; node = ((node     )      ).nextSibling) {\n    const nodeType = node.nodeType;\n    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {\n      break;\n    }\n    if (nodeType === COMMENT_NODE) {\n      const data = (node     ).data;\n      if (\n        data === SUSPENSE_START_DATA ||\n        data === SUSPENSE_FALLBACK_START_DATA ||\n        data === SUSPENSE_PENDING_START_DATA ||\n        data === SUSPENSE_QUEUED_START_DATA ||\n        data === ACTIVITY_START_DATA ||\n        data === FORM_STATE_IS_MATCHING ||\n        data === FORM_STATE_IS_NOT_MATCHING\n      ) {\n        break;\n      }\n      if (data === SUSPENSE_END_DATA || data === ACTIVITY_END_DATA) {\n        return null;\n      }\n    }\n  }\n  return (node     );\n}\n\nexport function getNextHydratableSibling(\n  instance                    ,\n)                            {\n  return getNextHydratable(instance.nextSibling);\n}\n\nexport function getFirstHydratableChild(\n  parentInstance          ,\n)                            {\n  return getNextHydratable(parentInstance.firstChild);\n}\n\nexport function getFirstHydratableChildWithinContainer(\n  parentContainer           ,\n)                            {\n  let parentElement         ;\n  switch (parentContainer.nodeType) {\n    case DOCUMENT_NODE:\n      parentElement = (parentContainer     ).body;\n      break;\n    default: {\n      if (parentContainer.nodeName === 'HTML') {\n        parentElement = (parentContainer     ).ownerDocument.body;\n      } else {\n        parentElement = (parentContainer     );\n      }\n    }\n  }\n  return getNextHydratable(parentElement.firstChild);\n}\n\nexport function getFirstHydratableChildWithinActivityInstance(\n  parentInstance                  ,\n)                            {\n  return getNextHydratable(parentInstance.nextSibling);\n}\n\nexport function getFirstHydratableChildWithinSuspenseInstance(\n  parentInstance                  ,\n)                            {\n  return getNextHydratable(parentInstance.nextSibling);\n}\n\n// If it were possible to have more than one scope singleton in a DOM tree\n// we would need to model this as a stack but since you can only have one <head>\n// and head is the only singleton that is a scope in DOM we can get away with\n// tracking this as a single value.\nlet previousHydratableOnEnteringScopedSingleton                            =\n  null;\n\nexport function getFirstHydratableChildWithinSingleton(\n  type        ,\n  singletonInstance          ,\n  currentHydratableInstance                           ,\n)                            {\n  if (isSingletonScope(type)) {\n    previousHydratableOnEnteringScopedSingleton = currentHydratableInstance;\n    return getNextHydratable(singletonInstance.firstChild);\n  } else {\n    return currentHydratableInstance;\n  }\n}\n\nexport function getNextHydratableSiblingAfterSingleton(\n  type        ,\n  currentHydratableInstance                           ,\n)                            {\n  if (isSingletonScope(type)) {\n    const previousHydratableInstance =\n      previousHydratableOnEnteringScopedSingleton;\n    previousHydratableOnEnteringScopedSingleton = null;\n    return previousHydratableInstance;\n  } else {\n    return currentHydratableInstance;\n  }\n}\n\nexport function describeHydratableInstanceForDevWarnings(\n  instance                    ,\n)                                                   {\n  // Reverse engineer a pseudo react-element from hydratable instance\n  if (instance.nodeType === ELEMENT_NODE) {\n    // Reverse engineer a set of props that can print for dev warnings\n    return {\n      type: instance.nodeName.toLowerCase(),\n      props: getPropsFromElement((instance     )),\n    };\n  } else if (instance.nodeType === COMMENT_NODE) {\n    if (instance.data === ACTIVITY_START_DATA) {\n      return {\n        type: 'Activity',\n        props: {},\n      };\n    }\n    return {\n      type: 'Suspense',\n      props: {},\n    };\n  } else {\n    return instance.nodeValue;\n  }\n}\n\nexport function validateHydratableInstance(\n  type        ,\n  props       ,\n  hostContext             ,\n)          {\n  if (__DEV__) {\n    // TODO: take namespace into account when validating.\n    const hostContextDev                 = (hostContext     );\n    return validateDOMNesting(type, hostContextDev.ancestorInfo);\n  }\n  return true;\n}\n\nexport function hydrateInstance(\n  instance          ,\n  type        ,\n  props       ,\n  hostContext             ,\n  internalInstanceHandle        ,\n)          {\n  precacheFiberNode(internalInstanceHandle, instance);\n  // TODO: Possibly defer this until the commit phase where all the events\n  // get attached.\n  updateFiberProps(instance, props);\n\n  return hydrateProperties(instance, type, props, hostContext);\n}\n\n// Returns a Map of properties that were different on the server.\nexport function diffHydratedPropsForDevWarnings(\n  instance          ,\n  type        ,\n  props       ,\n  hostContext             ,\n)                          {\n  return diffHydratedProperties(instance, type, props, hostContext);\n}\n\nexport function validateHydratableTextInstance(\n  text        ,\n  hostContext             ,\n)          {\n  if (__DEV__) {\n    const hostContextDev = ((hostContext     )                );\n    const ancestor = hostContextDev.ancestorInfo.current;\n    if (ancestor != null) {\n      return validateTextNesting(\n        text,\n        ancestor.tag,\n        hostContextDev.ancestorInfo.implicitRootScope,\n      );\n    }\n  }\n  return true;\n}\n\nexport function hydrateTextInstance(\n  textInstance              ,\n  text        ,\n  internalInstanceHandle        ,\n  parentInstanceProps              ,\n)          {\n  precacheFiberNode(internalInstanceHandle, textInstance);\n\n  return hydrateText(textInstance, text, parentInstanceProps);\n}\n\n// Returns the server text if it differs from the client.\nexport function diffHydratedTextForDevWarnings(\n  textInstance              ,\n  text        ,\n  parentProps              ,\n)                {\n  if (\n    parentProps === null ||\n    parentProps[SUPPRESS_HYDRATION_WARNING] !== true\n  ) {\n    return diffHydratedText(textInstance, text);\n  }\n  return null;\n}\n\nexport function hydrateActivityInstance(\n  activityInstance                  ,\n  internalInstanceHandle        ,\n) {\n  precacheFiberNode(internalInstanceHandle, activityInstance);\n}\n\nexport function hydrateSuspenseInstance(\n  suspenseInstance                  ,\n  internalInstanceHandle        ,\n) {\n  precacheFiberNode(internalInstanceHandle, suspenseInstance);\n}\n\nfunction getNextHydratableInstanceAfterHydrationBoundary(\n  hydrationInstance                                     ,\n)                            {\n  let node = hydrationInstance.nextSibling;\n  // Skip past all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n  let depth = 0;\n  while (node) {\n    if (node.nodeType === COMMENT_NODE) {\n      const data = ((node     ).data        );\n      if (data === SUSPENSE_END_DATA || data === ACTIVITY_END_DATA) {\n        if (depth === 0) {\n          return getNextHydratableSibling((node     ));\n        } else {\n          depth--;\n        }\n      } else if (\n        data === SUSPENSE_START_DATA ||\n        data === SUSPENSE_FALLBACK_START_DATA ||\n        data === SUSPENSE_PENDING_START_DATA ||\n        data === SUSPENSE_QUEUED_START_DATA ||\n        data === ACTIVITY_START_DATA\n      ) {\n        depth++;\n      }\n    }\n    node = node.nextSibling;\n  }\n  // TODO: Warn, we didn't find the end comment boundary.\n  return null;\n}\n\nexport function getNextHydratableInstanceAfterActivityInstance(\n  activityInstance                  ,\n)                            {\n  return getNextHydratableInstanceAfterHydrationBoundary(activityInstance);\n}\n\nexport function getNextHydratableInstanceAfterSuspenseInstance(\n  suspenseInstance                  ,\n)                            {\n  return getNextHydratableInstanceAfterHydrationBoundary(suspenseInstance);\n}\n\n// Returns the SuspenseInstance if this node is a direct child of a\n// SuspenseInstance. I.e. if its previous sibling is a Comment with\n// SUSPENSE_x_START_DATA. Otherwise, null.\nexport function getParentHydrationBoundary(\n  targetInstance      ,\n)                                             {\n  let node = targetInstance.previousSibling;\n  // Skip past all nodes within this suspense boundary.\n  // There might be nested nodes so we need to keep track of how\n  // deep we are and only break out when we're back on top.\n  let depth = 0;\n  while (node) {\n    if (node.nodeType === COMMENT_NODE) {\n      const data = ((node     ).data        );\n      if (\n        data === SUSPENSE_START_DATA ||\n        data === SUSPENSE_FALLBACK_START_DATA ||\n        data === SUSPENSE_PENDING_START_DATA ||\n        data === SUSPENSE_QUEUED_START_DATA ||\n        data === ACTIVITY_START_DATA\n      ) {\n        if (depth === 0) {\n          return ((node     )                                     );\n        } else {\n          depth--;\n        }\n      } else if (data === SUSPENSE_END_DATA || data === ACTIVITY_END_DATA) {\n        depth++;\n      }\n    }\n    node = node.previousSibling;\n  }\n  return null;\n}\n\nexport function commitHydratedContainer(container           )       {\n  // Retry if any event replaying was blocked on this.\n  retryIfBlockedOn(container);\n}\n\nexport function commitHydratedActivityInstance(\n  activityInstance                  ,\n)       {\n  // Retry if any event replaying was blocked on this.\n  retryIfBlockedOn(activityInstance);\n}\n\nexport function commitHydratedSuspenseInstance(\n  suspenseInstance                  ,\n)       {\n  // Retry if any event replaying was blocked on this.\n  retryIfBlockedOn(suspenseInstance);\n}\n\nexport function flushHydrationEvents()       {\n  if (enableHydrationChangeEvent) {\n    flushEventReplaying();\n  }\n}\n\nexport function shouldDeleteUnhydratedTailInstances(\n  parentType        ,\n)          {\n  return parentType !== 'form' && parentType !== 'button';\n}\n\n// -------------------\n//     Test Selectors\n// -------------------\n\nexport const supportsTestSelectors = true;\n\nexport function findFiberRoot(node          )                   {\n  const stack = [node];\n  let index = 0;\n  while (index < stack.length) {\n    const current = stack[index++];\n    if (isContainerMarkedAsRoot(current)) {\n      return ((getInstanceFromNodeDOMTree(current)     )           );\n    }\n    stack.push(...current.children);\n  }\n  return null;\n}\n\nexport function getBoundingRect(node          )               {\n  const rect = node.getBoundingClientRect();\n  return {\n    x: rect.left,\n    y: rect.top,\n    width: rect.width,\n    height: rect.height,\n  };\n}\n\nexport function matchAccessibilityRole(node          , role        )          {\n  if (hasRole(node, role)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function getTextContent(fiber       )                {\n  switch (fiber.tag) {\n    case HostHoistable:\n    case HostSingleton:\n    case HostComponent:\n      let textContent = '';\n      const childNodes = fiber.stateNode.childNodes;\n      for (let i = 0; i < childNodes.length; i++) {\n        const childNode = childNodes[i];\n        if (childNode.nodeType === Node.TEXT_NODE) {\n          textContent += childNode.textContent;\n        }\n      }\n      return textContent;\n    case HostText:\n      return fiber.stateNode.textContent;\n  }\n\n  return null;\n}\n\nexport function isHiddenSubtree(fiber       )          {\n  return fiber.tag === HostComponent && fiber.memoizedProps.hidden === true;\n}\n\nexport function setFocusIfFocusable(\n  node          ,\n  focusOptions               ,\n)          {\n  // The logic for determining if an element is focusable is kind of complex,\n  // and since we want to actually change focus anyway- we can just skip it.\n  // Instead we'll just listen for a \"focus\" event to verify that focus was set.\n  //\n  // We could compare the node to document.activeElement after focus,\n  // but this would not handle the case where application code managed focus to automatically blur.\n  let didFocus = false;\n  const handleFocus = () => {\n    didFocus = true;\n  };\n\n  const element = ((node     )             );\n  try {\n    element.addEventListener('focus', handleFocus);\n    // $FlowFixMe[method-unbinding]\n    (element.focus || HTMLElement.prototype.focus).call(element, focusOptions);\n  } finally {\n    element.removeEventListener('focus', handleFocus);\n  }\n\n  return didFocus;\n}\n\n                  \n                \n                     \n  \n\nexport function setupIntersectionObserver(\n  targets                 ,\n  callback                             ,\n  options                              ,\n)   \n                         \n                                        \n                                          \n  {\n  const rectRatioCache                           = new Map();\n  targets.forEach(target => {\n    rectRatioCache.set(target, {\n      rect: getBoundingRect(target),\n      ratio: 0,\n    });\n  });\n\n  const handleIntersection = (entries                                  ) => {\n    entries.forEach(entry => {\n      const {boundingClientRect, intersectionRatio, target} = entry;\n      rectRatioCache.set(target, {\n        rect: {\n          x: boundingClientRect.left,\n          y: boundingClientRect.top,\n          width: boundingClientRect.width,\n          height: boundingClientRect.height,\n        },\n        ratio: intersectionRatio,\n      });\n    });\n\n    callback(Array.from(rectRatioCache.values()));\n  };\n\n  const observer = new IntersectionObserver(handleIntersection, options);\n  targets.forEach(target => {\n    observer.observe((target     ));\n  });\n\n  return {\n    disconnect: () => observer.disconnect(),\n    observe: target => {\n      rectRatioCache.set(target, {\n        rect: getBoundingRect(target),\n        ratio: 0,\n      });\n      observer.observe((target     ));\n    },\n    unobserve: target => {\n      rectRatioCache.delete(target);\n      observer.unobserve((target     ));\n    },\n  };\n}\n\nexport function requestPostPaintCallback(callback                        ) {\n  localRequestAnimationFrame(() => {\n    localRequestAnimationFrame(time => callback(time));\n  });\n}\n\n// -------------------\n//     Singletons\n// -------------------\n\nexport const supportsSingletons = true;\n\nexport function isHostSingletonType(type        )          {\n  return type === 'html' || type === 'head' || type === 'body';\n}\n\nexport function resolveSingletonInstance(\n  type        ,\n  props       ,\n  rootContainerInstance           ,\n  hostContext             ,\n  validateDOMNestingDev         ,\n)           {\n  if (__DEV__) {\n    const hostContextDev = ((hostContext     )                );\n    if (validateDOMNestingDev) {\n      validateDOMNesting(type, hostContextDev.ancestorInfo);\n    }\n  }\n  const ownerDocument = getOwnerDocumentFromRootContainer(\n    rootContainerInstance,\n  );\n  switch (type) {\n    case 'html': {\n      const documentElement = ownerDocument.documentElement;\n      if (!documentElement) {\n        throw new Error(\n          'React expected an <html> element (document.documentElement) to exist in the Document but one was' +\n            ' not found. React never removes the documentElement for any Document it renders into so' +\n            ' the cause is likely in some other script running on this page.',\n        );\n      }\n      return documentElement;\n    }\n    case 'head': {\n      const head = ownerDocument.head;\n      if (!head) {\n        throw new Error(\n          'React expected a <head> element (document.head) to exist in the Document but one was' +\n            ' not found. React never removes the head for any Document it renders into so' +\n            ' the cause is likely in some other script running on this page.',\n        );\n      }\n      return head;\n    }\n    case 'body': {\n      const body = ownerDocument.body;\n      if (!body) {\n        throw new Error(\n          'React expected a <body> element (document.body) to exist in the Document but one was' +\n            ' not found. React never removes the body for any Document it renders into so' +\n            ' the cause is likely in some other script running on this page.',\n        );\n      }\n      return body;\n    }\n    default: {\n      throw new Error(\n        'resolveSingletonInstance was called with an element type that is not supported. This is a bug in React.',\n      );\n    }\n  }\n}\n\nexport function acquireSingletonInstance(\n  type        ,\n  props       ,\n  instance          ,\n  internalInstanceHandle        ,\n)       {\n  if (__DEV__) {\n    if (\n      // If this instance is the container then it is invalid to acquire it as a singleton however\n      // the DOM nesting validation will already warn for this and the message below isn't semantically\n      // aligned with the actual fix you need to make so we omit the warning in this case\n      !isContainerMarkedAsRoot(instance) &&\n      // If this instance isn't the root but is currently owned by a different HostSingleton instance then\n      // we we need to warn that you are rendering more than one singleton at a time.\n      getInstanceFromNodeDOMTree(instance)\n    ) {\n      const tagName = instance.tagName.toLowerCase();\n      console.error(\n        'You are mounting a new %s component when a previous one has not first unmounted. It is an' +\n          ' error to render more than one %s component at a time and attributes and children of these' +\n          ' components will likely fail in unpredictable ways. Please only render a single instance of' +\n          ' <%s> and if you need to mount a new one, ensure any previous ones have unmounted first.',\n        tagName,\n        tagName,\n        tagName,\n      );\n    }\n    switch (type) {\n      case 'html':\n      case 'head':\n      case 'body': {\n        break;\n      }\n      default: {\n        console.error(\n          'acquireSingletonInstance was called with an element type that is not supported. This is a bug in React.',\n        );\n      }\n    }\n  }\n\n  const attributes = instance.attributes;\n  while (attributes.length) {\n    instance.removeAttributeNode(attributes[0]);\n  }\n\n  setInitialProperties(instance, type, props);\n  precacheFiberNode(internalInstanceHandle, instance);\n  updateFiberProps(instance, props);\n}\n\nexport function releaseSingletonInstance(instance          )       {\n  const attributes = instance.attributes;\n  while (attributes.length) {\n    instance.removeAttributeNode(attributes[0]);\n  }\n  detachDeletedInstance(instance);\n}\n\n// -------------------\n//     Resources\n// -------------------\n\nexport const supportsResources = true;\n\n                                                  \n               \n                                                \n                  \n     \n          \n                            \n                \n           \n  \n                                                                   \n                                                 \n                                                           \n                                                \n                                            \n                                                                     \n\n                           \nconst NotLoaded = /*       */ 0b000;\nconst Loaded = /*          */ 0b001;\nconst Errored = /*         */ 0b010;\nconst Settled = /*         */ 0b011;\nconst Inserted = /*        */ 0b100;\n\n                        \n                        \n                                  \n  \n\n                      \n                      \n                            \n                  \n  \n                        \n                    \n               \n                            \n                  \n  \n\n                    \n              \n              \n                  \n  \n\n                     \n                 \n                \n                  \n  \n                           \n                       \n               \n                  \n  \n\n                             \n                                              \n                                                \n  \n\nexport function prepareToCommitHoistables() {\n  tagCaches = null;\n}\n\n// global collections of Resources\nconst preloadPropsMap                                                 =\n  new Map();\nconst preconnectsSet              = new Set();\n\n                                                  \n\n// getRootNode is missing from IE and old jsdom versions\nexport function getHoistableRoot(container           )                {\n  // $FlowFixMe[method-unbinding]\n  return typeof container.getRootNode === 'function'\n    ? /* $FlowFixMe[incompatible-cast] Flow types this as returning a `Node`,\n       * but it's either a `Document` or `ShadowRoot`. */\n      (container.getRootNode()                       )\n    : container.nodeType === DOCUMENT_NODE\n      ? // $FlowFixMe[incompatible-cast] We've constrained this to be a Document which satisfies the return type\n        (container          )\n      : container.ownerDocument;\n}\n\nfunction getCurrentResourceRoot()                       {\n  const currentContainer = getCurrentRootHostContainer();\n  return currentContainer ? getHoistableRoot(currentContainer) : null;\n}\n\nfunction getDocumentFromRoot(root               )           {\n  return root.ownerDocument || root;\n}\n\nconst previousDispatcher =\n  ReactDOMSharedInternals.d; /* ReactDOMCurrentDispatcher */\nReactDOMSharedInternals.d /* ReactDOMCurrentDispatcher */ = {\n  f /* flushSyncWork */: disableLegacyMode\n    ? flushSyncWork\n    : previousDispatcher.f /* flushSyncWork */,\n  r: requestFormReset,\n  D /* prefetchDNS */: prefetchDNS,\n  C /* preconnect */: preconnect,\n  L /* preload */: preload,\n  m /* preloadModule */: preloadModule,\n  X /* preinitScript */: preinitScript,\n  S /* preinitStyle */: preinitStyle,\n  M /* preinitModuleScript */: preinitModuleScript,\n};\n\nfunction flushSyncWork() {\n  if (disableLegacyMode) {\n    const previousWasRendering = previousDispatcher.f(); /* flushSyncWork */\n    const wasRendering = flushSyncWorkOnAllRoots();\n    // Since multiple dispatchers can flush sync work during a single flushSync call\n    // we need to return true if any of them were rendering.\n    return previousWasRendering || wasRendering;\n  } else {\n    throw new Error(\n      'flushSyncWork should not be called from builds that support legacy mode. This is a bug in React.',\n    );\n  }\n}\n\nfunction requestFormReset(form                 ) {\n  const formInst = getInstanceFromNodeDOMTree(form);\n  if (\n    formInst !== null &&\n    formInst.tag === HostComponent &&\n    formInst.type === 'form'\n  ) {\n    requestFormResetOnFiber(formInst);\n  } else {\n    // This form was either not rendered by this React renderer (or it's an\n    // invalid type). Try the next one.\n    //\n    // The last implementation in the sequence will throw an error.\n    previousDispatcher.r(/* requestFormReset */ form);\n  }\n}\n\n// We expect this to get inlined. It is a function mostly to communicate the special nature of\n// how we resolve the HoistableRoot for ReactDOM.pre*() methods. Because we support calling\n// these methods outside of render there is no way to know which Document or ShadowRoot is 'scoped'\n// and so we have to fall back to something universal. Currently we just refer to the global document.\n// This is notable because nowhere else in ReactDOM do we actually reference the global document or window\n// because we may be rendering inside an iframe.\nconst globalDocument = typeof document === 'undefined' ? null : document;\nfunction getGlobalDocument()            {\n  return globalDocument;\n}\n\nfunction preconnectAs(\n  rel                               ,\n  href        ,\n  crossOrigin                  ,\n) {\n  const ownerDocument = getGlobalDocument();\n  if (ownerDocument && typeof href === 'string' && href) {\n    const limitedEscapedHref =\n      escapeSelectorAttributeValueInsideDoubleQuotes(href);\n    let key = `link[rel=\"${rel}\"][href=\"${limitedEscapedHref}\"]`;\n    if (typeof crossOrigin === 'string') {\n      key += `[crossorigin=\"${crossOrigin}\"]`;\n    }\n    if (!preconnectsSet.has(key)) {\n      preconnectsSet.add(key);\n\n      const preconnectProps = {rel, crossOrigin, href};\n      if (null === ownerDocument.querySelector(key)) {\n        const instance = ownerDocument.createElement('link');\n        setInitialProperties(instance, 'link', preconnectProps);\n        markNodeAsHoistable(instance);\n        (ownerDocument.head     ).appendChild(instance);\n      }\n    }\n  }\n}\n\nfunction prefetchDNS(href        ) {\n  previousDispatcher.D(/* prefetchDNS */ href);\n  preconnectAs('dns-prefetch', href, null);\n}\n\nfunction preconnect(href        , crossOrigin                   ) {\n  previousDispatcher.C(/* preconnect */ href, crossOrigin);\n  preconnectAs('preconnect', href, crossOrigin);\n}\n\nfunction preload(href        , as        , options                      ) {\n  previousDispatcher.L(/* preload */ href, as, options);\n  const ownerDocument = getGlobalDocument();\n  if (ownerDocument && href && as) {\n    let preloadSelector = `link[rel=\"preload\"][as=\"${escapeSelectorAttributeValueInsideDoubleQuotes(\n      as,\n    )}\"]`;\n    if (as === 'image') {\n      if (options && options.imageSrcSet) {\n        preloadSelector += `[imagesrcset=\"${escapeSelectorAttributeValueInsideDoubleQuotes(\n          options.imageSrcSet,\n        )}\"]`;\n        if (typeof options.imageSizes === 'string') {\n          preloadSelector += `[imagesizes=\"${escapeSelectorAttributeValueInsideDoubleQuotes(\n            options.imageSizes,\n          )}\"]`;\n        }\n      } else {\n        preloadSelector += `[href=\"${escapeSelectorAttributeValueInsideDoubleQuotes(\n          href,\n        )}\"]`;\n      }\n    } else {\n      preloadSelector += `[href=\"${escapeSelectorAttributeValueInsideDoubleQuotes(\n        href,\n      )}\"]`;\n    }\n    // Some preloads are keyed under their selector. This happens when the preload is for\n    // an arbitrary type. Other preloads are keyed under the resource key they represent a preload for.\n    // Here we figure out which key to use to determine if we have a preload already.\n    let key = preloadSelector;\n    switch (as) {\n      case 'style':\n        key = getStyleKey(href);\n        break;\n      case 'script':\n        key = getScriptKey(href);\n        break;\n    }\n    if (!preloadPropsMap.has(key)) {\n      const preloadProps = Object.assign(\n        ({\n          rel: 'preload',\n          // There is a bug in Safari where imageSrcSet is not respected on preload links\n          // so we omit the href here if we have imageSrcSet b/c safari will load the wrong image.\n          // This harms older browers that do not support imageSrcSet by making their preloads not work\n          // but this population is shrinking fast and is already small so we accept this tradeoff.\n          href:\n            as === 'image' && options && options.imageSrcSet ? undefined : href,\n          as,\n        }              ),\n        options,\n      );\n      preloadPropsMap.set(key, preloadProps);\n\n      if (null === ownerDocument.querySelector(preloadSelector)) {\n        if (\n          as === 'style' &&\n          ownerDocument.querySelector(getStylesheetSelectorFromKey(key))\n        ) {\n          // We already have a stylesheet for this key. We don't need to preload it.\n          return;\n        } else if (\n          as === 'script' &&\n          ownerDocument.querySelector(getScriptSelectorFromKey(key))\n        ) {\n          // We already have a stylesheet for this key. We don't need to preload it.\n          return;\n        }\n        const instance = ownerDocument.createElement('link');\n        setInitialProperties(instance, 'link', preloadProps);\n        markNodeAsHoistable(instance);\n        (ownerDocument.head     ).appendChild(instance);\n      }\n    }\n  }\n}\n\nfunction preloadModule(href        , options                            ) {\n  previousDispatcher.m(/* preloadModule */ href, options);\n  const ownerDocument = getGlobalDocument();\n  if (ownerDocument && href) {\n    const as =\n      options && typeof options.as === 'string' ? options.as : 'script';\n    const preloadSelector = `link[rel=\"modulepreload\"][as=\"${escapeSelectorAttributeValueInsideDoubleQuotes(\n      as,\n    )}\"][href=\"${escapeSelectorAttributeValueInsideDoubleQuotes(href)}\"]`;\n    // Some preloads are keyed under their selector. This happens when the preload is for\n    // an arbitrary type. Other preloads are keyed under the resource key they represent a preload for.\n    // Here we figure out which key to use to determine if we have a preload already.\n    let key = preloadSelector;\n    switch (as) {\n      case 'audioworklet':\n      case 'paintworklet':\n      case 'serviceworker':\n      case 'sharedworker':\n      case 'worker':\n      case 'script': {\n        key = getScriptKey(href);\n        break;\n      }\n    }\n\n    if (!preloadPropsMap.has(key)) {\n      const props                     = Object.assign(\n        ({\n          rel: 'modulepreload',\n          href,\n        }                    ),\n        options,\n      );\n      preloadPropsMap.set(key, props);\n\n      if (null === ownerDocument.querySelector(preloadSelector)) {\n        switch (as) {\n          case 'audioworklet':\n          case 'paintworklet':\n          case 'serviceworker':\n          case 'sharedworker':\n          case 'worker':\n          case 'script': {\n            if (ownerDocument.querySelector(getScriptSelectorFromKey(key))) {\n              return;\n            }\n          }\n        }\n        const instance = ownerDocument.createElement('link');\n        setInitialProperties(instance, 'link', props);\n        markNodeAsHoistable(instance);\n        (ownerDocument.head     ).appendChild(instance);\n      }\n    }\n  }\n}\n\nfunction preinitStyle(\n  href        ,\n  precedence         ,\n  options                       ,\n) {\n  previousDispatcher.S(/* preinitStyle */ href, precedence, options);\n\n  const ownerDocument = getGlobalDocument();\n  if (ownerDocument && href) {\n    const styles = getResourcesFromRoot(ownerDocument).hoistableStyles;\n\n    const key = getStyleKey(href);\n    precedence = precedence || 'default';\n\n    // Check if this resource already exists\n    let resource = styles.get(key);\n    if (resource) {\n      // We can early return. The resource exists and there is nothing\n      // more to do\n      return;\n    }\n\n    const state = {\n      loading: NotLoaded,\n      preload: null,\n    };\n\n    // Attempt to hydrate instance from DOM\n    let instance                  = ownerDocument.querySelector(\n      getStylesheetSelectorFromKey(key),\n    );\n    if (instance) {\n      state.loading = Loaded | Inserted;\n    } else {\n      // Construct a new instance and insert it\n      const stylesheetProps = Object.assign(\n        ({\n          rel: 'stylesheet',\n          href,\n          'data-precedence': precedence,\n        }                 ),\n        options,\n      );\n      const preloadProps = preloadPropsMap.get(key);\n      if (preloadProps) {\n        adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);\n      }\n      const link = (instance = ownerDocument.createElement('link'));\n      markNodeAsHoistable(link);\n      setInitialProperties(link, 'link', stylesheetProps);\n\n      (link     )._p = new Promise((resolve, reject) => {\n        link.onload = resolve;\n        link.onerror = reject;\n      });\n      link.addEventListener('load', () => {\n        state.loading |= Loaded;\n      });\n      link.addEventListener('error', () => {\n        state.loading |= Errored;\n      });\n\n      state.loading |= Inserted;\n      insertStylesheet(instance, precedence, ownerDocument);\n    }\n\n    // Construct a Resource and cache it\n    resource = {\n      type: 'stylesheet',\n      instance,\n      count: 1,\n      state,\n    };\n    styles.set(key, resource);\n    return;\n  }\n}\n\nfunction preinitScript(src        , options                        ) {\n  previousDispatcher.X(/* preinitScript */ src, options);\n\n  const ownerDocument = getGlobalDocument();\n  if (ownerDocument && src) {\n    const scripts = getResourcesFromRoot(ownerDocument).hoistableScripts;\n\n    const key = getScriptKey(src);\n\n    // Check if this resource already exists\n    let resource = scripts.get(key);\n    if (resource) {\n      // We can early return. The resource exists and there is nothing\n      // more to do\n      return;\n    }\n\n    // Attempt to hydrate instance from DOM\n    let instance                  = ownerDocument.querySelector(\n      getScriptSelectorFromKey(key),\n    );\n    if (!instance) {\n      // Construct a new instance and insert it\n      const scriptProps = Object.assign(\n        ({\n          src,\n          async: true,\n        }             ),\n        options,\n      );\n      // Adopt certain preload props\n      const preloadProps = preloadPropsMap.get(key);\n      if (preloadProps) {\n        adoptPreloadPropsForScript(scriptProps, preloadProps);\n      }\n      instance = ownerDocument.createElement('script');\n      markNodeAsHoistable(instance);\n      setInitialProperties(instance, 'link', scriptProps);\n      (ownerDocument.head     ).appendChild(instance);\n    }\n\n    // Construct a Resource and cache it\n    resource = {\n      type: 'script',\n      instance,\n      count: 1,\n      state: null,\n    };\n    scripts.set(key, resource);\n    return;\n  }\n}\n\nfunction preinitModuleScript(\n  src        ,\n  options                              ,\n) {\n  previousDispatcher.M(/* preinitModuleScript */ src, options);\n\n  const ownerDocument = getGlobalDocument();\n  if (ownerDocument && src) {\n    const scripts = getResourcesFromRoot(ownerDocument).hoistableScripts;\n\n    const key = getScriptKey(src);\n\n    // Check if this resource already exists\n    let resource = scripts.get(key);\n    if (resource) {\n      // We can early return. The resource exists and there is nothing\n      // more to do\n      return;\n    }\n\n    // Attempt to hydrate instance from DOM\n    let instance                  = ownerDocument.querySelector(\n      getScriptSelectorFromKey(key),\n    );\n    if (!instance) {\n      // Construct a new instance and insert it\n      const scriptProps = Object.assign(\n        ({\n          src,\n          async: true,\n          type: 'module',\n        }             ),\n        options,\n      );\n      // Adopt certain preload props\n      const preloadProps = preloadPropsMap.get(key);\n      if (preloadProps) {\n        adoptPreloadPropsForScript(scriptProps, preloadProps);\n      }\n      instance = ownerDocument.createElement('script');\n      markNodeAsHoistable(instance);\n      setInitialProperties(instance, 'link', scriptProps);\n      (ownerDocument.head     ).appendChild(instance);\n    }\n\n    // Construct a Resource and cache it\n    resource = {\n      type: 'script',\n      instance,\n      count: 1,\n      state: null,\n    };\n    scripts.set(key, resource);\n    return;\n  }\n}\n\n                                \n               \n                     \n                  \n  \n\n                                  \n                    \n               \n                     \n                  \n  \n\n// This function is called in begin work and we should always have a currentDocument set\nexport function getResource(\n  type        ,\n  currentProps     ,\n  pendingProps     ,\n  currentResource                 ,\n)                  {\n  const resourceRoot = getCurrentResourceRoot();\n  if (!resourceRoot) {\n    throw new Error(\n      '\"resourceRoot\" was expected to exist. This is a bug in React.',\n    );\n  }\n  switch (type) {\n    case 'meta':\n    case 'title': {\n      return null;\n    }\n    case 'style': {\n      if (\n        typeof pendingProps.precedence === 'string' &&\n        typeof pendingProps.href === 'string'\n      ) {\n        const key = getStyleKey(pendingProps.href);\n        const styles = getResourcesFromRoot(resourceRoot).hoistableStyles;\n        let resource = styles.get(key);\n        if (!resource) {\n          resource = {\n            type: 'style',\n            instance: null,\n            count: 0,\n            state: null,\n          };\n          styles.set(key, resource);\n        }\n        return resource;\n      }\n      return {\n        type: 'void',\n        instance: null,\n        count: 0,\n        state: null,\n      };\n    }\n    case 'link': {\n      if (\n        pendingProps.rel === 'stylesheet' &&\n        typeof pendingProps.href === 'string' &&\n        typeof pendingProps.precedence === 'string'\n      ) {\n        const qualifiedProps                            = pendingProps;\n        const key = getStyleKey(qualifiedProps.href);\n\n        const styles = getResourcesFromRoot(resourceRoot).hoistableStyles;\n\n        let resource = styles.get(key);\n        if (!resource) {\n          // We asserted this above but Flow can't figure out that the type satisfies\n          const ownerDocument = getDocumentFromRoot(resourceRoot);\n          resource = ({\n            type: 'stylesheet',\n            instance: null,\n            count: 0,\n            state: {\n              loading: NotLoaded,\n              preload: null,\n            },\n          }                    );\n          styles.set(key, resource);\n          const instance = ownerDocument.querySelector(\n            getStylesheetSelectorFromKey(key),\n          );\n          if (instance) {\n            const loadingState                  = (instance     )._p;\n            if (loadingState) {\n              // This instance is inserted as part of a boundary reveal and is not yet\n              // loaded\n            } else {\n              // This instance is already loaded\n              resource.instance = instance;\n              resource.state.loading = Loaded | Inserted;\n            }\n          }\n\n          if (!preloadPropsMap.has(key)) {\n            const preloadProps = preloadPropsFromStylesheet(qualifiedProps);\n            preloadPropsMap.set(key, preloadProps);\n            if (!instance) {\n              preloadStylesheet(\n                ownerDocument,\n                key,\n                preloadProps,\n                resource.state,\n              );\n            }\n          }\n        }\n        if (currentProps && currentResource === null) {\n          // This node was previously an Instance type and is becoming a Resource type\n          // For now we error because we don't support flavor changes\n          let diff = '';\n          if (__DEV__) {\n            diff = `\n\n  - ${describeLinkForResourceErrorDEV(currentProps)}\n  + ${describeLinkForResourceErrorDEV(pendingProps)}`;\n          }\n          throw new Error(\n            'Expected <link> not to update to be updated to a stylesheet with precedence.' +\n              ' Check the `rel`, `href`, and `precedence` props of this component.' +\n              ' Alternatively, check whether two different <link> components render in the same slot or share the same key.' +\n              diff,\n          );\n        }\n        return resource;\n      } else {\n        if (currentProps && currentResource !== null) {\n          // This node was previously a Resource type and is becoming an Instance type\n          // For now we error because we don't support flavor changes\n          let diff = '';\n          if (__DEV__) {\n            diff = `\n\n  - ${describeLinkForResourceErrorDEV(currentProps)}\n  + ${describeLinkForResourceErrorDEV(pendingProps)}`;\n          }\n          throw new Error(\n            'Expected stylesheet with precedence to not be updated to a different kind of <link>.' +\n              ' Check the `rel`, `href`, and `precedence` props of this component.' +\n              ' Alternatively, check whether two different <link> components render in the same slot or share the same key.' +\n              diff,\n          );\n        }\n        return null;\n      }\n    }\n    case 'script': {\n      const async = pendingProps.async;\n      const src = pendingProps.src;\n      if (\n        typeof src === 'string' &&\n        async &&\n        typeof async !== 'function' &&\n        typeof async !== 'symbol'\n      ) {\n        const key = getScriptKey(src);\n        const scripts = getResourcesFromRoot(resourceRoot).hoistableScripts;\n\n        let resource = scripts.get(key);\n        if (!resource) {\n          resource = {\n            type: 'script',\n            instance: null,\n            count: 0,\n            state: null,\n          };\n          scripts.set(key, resource);\n        }\n        return resource;\n      }\n      return {\n        type: 'void',\n        instance: null,\n        count: 0,\n        state: null,\n      };\n    }\n    default: {\n      throw new Error(\n        `getResource encountered a type it did not expect: \"${type}\". this is a bug in React.`,\n      );\n    }\n  }\n}\n\nfunction describeLinkForResourceErrorDEV(props     ) {\n  if (__DEV__) {\n    let describedProps = 0;\n\n    let description = '<link';\n    if (typeof props.rel === 'string') {\n      describedProps++;\n      description += ` rel=\"${props.rel}\"`;\n    } else if (hasOwnProperty.call(props, 'rel')) {\n      describedProps++;\n      description += ` rel=\"${\n        props.rel === null ? 'null' : 'invalid type ' + typeof props.rel\n      }\"`;\n    }\n    if (typeof props.href === 'string') {\n      describedProps++;\n      description += ` href=\"${props.href}\"`;\n    } else if (hasOwnProperty.call(props, 'href')) {\n      describedProps++;\n      description += ` href=\"${\n        props.href === null ? 'null' : 'invalid type ' + typeof props.href\n      }\"`;\n    }\n    if (typeof props.precedence === 'string') {\n      describedProps++;\n      description += ` precedence=\"${props.precedence}\"`;\n    } else if (hasOwnProperty.call(props, 'precedence')) {\n      describedProps++;\n      description += ` precedence={${\n        props.precedence === null\n          ? 'null'\n          : 'invalid type ' + typeof props.precedence\n      }}`;\n    }\n    if (Object.getOwnPropertyNames(props).length > describedProps) {\n      description += ' ...';\n    }\n    description += ' />';\n    return description;\n  }\n  return '';\n}\n\nfunction styleTagPropsFromRawProps(\n  rawProps                         ,\n)                {\n  return {\n    ...rawProps,\n    'data-href': rawProps.href,\n    'data-precedence': rawProps.precedence,\n    href: null,\n    precedence: null,\n  };\n}\n\nfunction getStyleKey(href        ) {\n  const limitedEscapedHref =\n    escapeSelectorAttributeValueInsideDoubleQuotes(href);\n  return `href=\"${limitedEscapedHref}\"`;\n}\n\nfunction getStyleTagSelector(href        ) {\n  const limitedEscapedHref =\n    escapeSelectorAttributeValueInsideDoubleQuotes(href);\n  return `style[data-href~=\"${limitedEscapedHref}\"]`;\n}\n\nfunction getStylesheetSelectorFromKey(key        ) {\n  return `link[rel=\"stylesheet\"][${key}]`;\n}\n\nfunction getPreloadStylesheetSelectorFromKey(key        ) {\n  return `link[rel=\"preload\"][as=\"style\"][${key}]`;\n}\n\nfunction stylesheetPropsFromRawProps(\n  rawProps                           ,\n)                  {\n  return {\n    ...rawProps,\n    'data-precedence': rawProps.precedence,\n    precedence: null,\n  };\n}\nfunction preloadStylesheet(\n  ownerDocument          ,\n  key        ,\n  preloadProps              ,\n  state                 ,\n) {\n  const preloadEl = ownerDocument.querySelector(\n    getPreloadStylesheetSelectorFromKey(key),\n  );\n  if (preloadEl) {\n    // If we find a preload already it was SSR'd and we won't have an actual\n    // loading state to track. For now we will just assume it is loaded\n    state.loading = Loaded;\n  } else {\n    const instance = ownerDocument.createElement('link');\n    state.preload = instance;\n    instance.addEventListener('load', () => (state.loading |= Loaded));\n    instance.addEventListener('error', () => (state.loading |= Errored));\n    setInitialProperties(instance, 'link', preloadProps);\n    markNodeAsHoistable(instance);\n    (ownerDocument.head     ).appendChild(instance);\n  }\n}\n\nfunction preloadPropsFromStylesheet(\n  props                           ,\n)               {\n  return {\n    rel: 'preload',\n    as: 'style',\n    href: props.href,\n    crossOrigin: props.crossOrigin,\n    integrity: props.integrity,\n    media: props.media,\n    hrefLang: props.hrefLang,\n    referrerPolicy: props.referrerPolicy,\n  };\n}\n\nfunction getScriptKey(src        )         {\n  const limitedEscapedSrc = escapeSelectorAttributeValueInsideDoubleQuotes(src);\n  return `[src=\"${limitedEscapedSrc}\"]`;\n}\n\nfunction getScriptSelectorFromKey(key        )         {\n  return 'script[async]' + key;\n}\n\nexport function acquireResource(\n  hoistableRoot               ,\n  resource          ,\n  props     ,\n)                  {\n  resource.count++;\n  if (resource.instance === null) {\n    switch (resource.type) {\n      case 'style': {\n        const qualifiedProps                          = props;\n\n        // Attempt to hydrate instance from DOM\n        let instance                  = hoistableRoot.querySelector(\n          getStyleTagSelector(qualifiedProps.href),\n        );\n        if (instance) {\n          resource.instance = instance;\n          markNodeAsHoistable(instance);\n          return instance;\n        }\n\n        const styleProps = styleTagPropsFromRawProps(props);\n        const ownerDocument = getDocumentFromRoot(hoistableRoot);\n        instance = ownerDocument.createElement('style');\n\n        markNodeAsHoistable(instance);\n        setInitialProperties(instance, 'style', styleProps);\n\n        // TODO: `style` does not have loading state for tracking insertions. I\n        // guess because these aren't suspensey? Not sure whether this is a\n        // factoring smell.\n        // resource.state.loading |= Inserted;\n        insertStylesheet(instance, qualifiedProps.precedence, hoistableRoot);\n        resource.instance = instance;\n\n        return instance;\n      }\n      case 'stylesheet': {\n        // This typing is enforce by `getResource`. If we change the logic\n        // there for what qualifies as a stylesheet resource we need to ensure\n        // this cast still makes sense;\n        const qualifiedProps                            = props;\n        const key = getStyleKey(qualifiedProps.href);\n\n        // Attempt to hydrate instance from DOM\n        let instance                  = hoistableRoot.querySelector(\n          getStylesheetSelectorFromKey(key),\n        );\n        if (instance) {\n          resource.state.loading |= Inserted;\n          resource.instance = instance;\n          markNodeAsHoistable(instance);\n          return instance;\n        }\n\n        const stylesheetProps = stylesheetPropsFromRawProps(props);\n        const preloadProps = preloadPropsMap.get(key);\n        if (preloadProps) {\n          adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);\n        }\n\n        // Construct and insert a new instance\n        const ownerDocument = getDocumentFromRoot(hoistableRoot);\n        instance = ownerDocument.createElement('link');\n        markNodeAsHoistable(instance);\n        const linkInstance                  = (instance     );\n        (linkInstance     )._p = new Promise((resolve, reject) => {\n          linkInstance.onload = resolve;\n          linkInstance.onerror = reject;\n        });\n        setInitialProperties(instance, 'link', stylesheetProps);\n        resource.state.loading |= Inserted;\n        insertStylesheet(instance, qualifiedProps.precedence, hoistableRoot);\n        resource.instance = instance;\n\n        return instance;\n      }\n      case 'script': {\n        // This typing is enforce by `getResource`. If we change the logic\n        // there for what qualifies as a stylesheet resource we need to ensure\n        // this cast still makes sense;\n        const borrowedScriptProps              = props;\n        const key = getScriptKey(borrowedScriptProps.src);\n\n        // Attempt to hydrate instance from DOM\n        let instance                  = hoistableRoot.querySelector(\n          getScriptSelectorFromKey(key),\n        );\n        if (instance) {\n          resource.instance = instance;\n          markNodeAsHoistable(instance);\n          return instance;\n        }\n\n        let scriptProps = borrowedScriptProps;\n        const preloadProps = preloadPropsMap.get(key);\n        if (preloadProps) {\n          scriptProps = {...borrowedScriptProps};\n          adoptPreloadPropsForScript(scriptProps, preloadProps);\n        }\n\n        // Construct and insert a new instance\n        const ownerDocument = getDocumentFromRoot(hoistableRoot);\n        instance = ownerDocument.createElement('script');\n        markNodeAsHoistable(instance);\n        setInitialProperties(instance, 'link', scriptProps);\n        (ownerDocument.head     ).appendChild(instance);\n        resource.instance = instance;\n\n        return instance;\n      }\n      case 'void': {\n        return null;\n      }\n      default: {\n        throw new Error(\n          `acquireResource encountered a resource type it did not expect: \"${resource.type}\". this is a bug in React.`,\n        );\n      }\n    }\n  } else {\n    // In the case of stylesheets, they might have already been assigned an\n    // instance during `suspendResource`. But that doesn't mean they were\n    // inserted, because the commit might have been interrupted. So we need to\n    // check now.\n    //\n    // The other resource types are unaffected because they are not\n    // yet suspensey.\n    //\n    // TODO: This is a bit of a code smell. Consider refactoring how\n    // `suspendResource` and `acquireResource` work together. The idea is that\n    // `suspendResource` does all the same stuff as `acquireResource` except\n    // for the insertion.\n    if (\n      resource.type === 'stylesheet' &&\n      (resource.state.loading & Inserted) === NotLoaded\n    ) {\n      const qualifiedProps                            = props;\n      const instance           = resource.instance;\n      resource.state.loading |= Inserted;\n      insertStylesheet(instance, qualifiedProps.precedence, hoistableRoot);\n    }\n  }\n  return resource.instance;\n}\n\nexport function releaseResource(resource          )       {\n  resource.count--;\n}\n\nfunction insertStylesheet(\n  instance         ,\n  precedence        ,\n  root               ,\n)       {\n  const nodes = root.querySelectorAll(\n    'link[rel=\"stylesheet\"][data-precedence],style[data-precedence]',\n  );\n  const last = nodes.length ? nodes[nodes.length - 1] : null;\n  let prior = last;\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    const nodePrecedence = node.dataset.precedence;\n    if (nodePrecedence === precedence) {\n      prior = node;\n    } else if (prior !== last) {\n      break;\n    }\n  }\n\n  if (prior) {\n    // We get the prior from the document so we know it is in the tree.\n    // We also know that links can't be the topmost Node so the parentNode\n    // must exist.\n    ((prior.parentNode     )      ).insertBefore(instance, prior.nextSibling);\n  } else {\n    const parent =\n      root.nodeType === DOCUMENT_NODE\n        ? ((((root     )          ).head     )         )\n        : ((root     )            );\n    parent.insertBefore(instance, parent.firstChild);\n  }\n}\n\nfunction adoptPreloadPropsForStylesheet(\n  stylesheetProps                 ,\n  preloadProps                                   ,\n)       {\n  if (stylesheetProps.crossOrigin == null)\n    stylesheetProps.crossOrigin = preloadProps.crossOrigin;\n  if (stylesheetProps.referrerPolicy == null)\n    stylesheetProps.referrerPolicy = preloadProps.referrerPolicy;\n  if (stylesheetProps.title == null) stylesheetProps.title = preloadProps.title;\n}\n\nfunction adoptPreloadPropsForScript(\n  scriptProps             ,\n  preloadProps                                   ,\n)       {\n  if (scriptProps.crossOrigin == null)\n    scriptProps.crossOrigin = preloadProps.crossOrigin;\n  if (scriptProps.referrerPolicy == null)\n    scriptProps.referrerPolicy = preloadProps.referrerPolicy;\n  if (scriptProps.integrity == null)\n    scriptProps.integrity = preloadProps.integrity;\n}\n\n                                                 \n                                                      \nlet tagCaches                           = null;\n\nexport function hydrateHoistable(\n  hoistableRoot               ,\n  type                  ,\n  props     ,\n  internalInstanceHandle        ,\n)           {\n  const ownerDocument = getDocumentFromRoot(hoistableRoot);\n\n  let instance            = null;\n  getInstance: switch (type) {\n    case 'title': {\n      instance = ownerDocument.getElementsByTagName('title')[0];\n      if (\n        !instance ||\n        isOwnedInstance(instance) ||\n        instance.namespaceURI === SVG_NAMESPACE ||\n        instance.hasAttribute('itemprop')\n      ) {\n        instance = ownerDocument.createElement(type);\n        (ownerDocument.head     ).insertBefore(\n          instance,\n          ownerDocument.querySelector('head > title'),\n        );\n      }\n      setInitialProperties(instance, type, props);\n      precacheFiberNode(internalInstanceHandle, instance);\n      markNodeAsHoistable(instance);\n      return instance;\n    }\n    case 'link': {\n      const cache = getHydratableHoistableCache('link', 'href', ownerDocument);\n      const key = type + (props.href || '');\n      const maybeNodes = cache.get(key);\n      if (maybeNodes) {\n        const nodes = maybeNodes;\n        for (let i = 0; i < nodes.length; i++) {\n          const node = nodes[i];\n          if (\n            node.getAttribute('href') !==\n              (props.href == null || props.href === '' ? null : props.href) ||\n            node.getAttribute('rel') !==\n              (props.rel == null ? null : props.rel) ||\n            node.getAttribute('title') !==\n              (props.title == null ? null : props.title) ||\n            node.getAttribute('crossorigin') !==\n              (props.crossOrigin == null ? null : props.crossOrigin)\n          ) {\n            // mismatch, try the next node;\n            continue;\n          }\n          instance = node;\n          nodes.splice(i, 1);\n          break getInstance;\n        }\n      }\n      instance = ownerDocument.createElement(type);\n      setInitialProperties(instance, type, props);\n      (ownerDocument.head     ).appendChild(instance);\n      break;\n    }\n    case 'meta': {\n      const cache = getHydratableHoistableCache(\n        'meta',\n        'content',\n        ownerDocument,\n      );\n      const key = type + (props.content || '');\n      const maybeNodes = cache.get(key);\n      if (maybeNodes) {\n        const nodes = maybeNodes;\n        for (let i = 0; i < nodes.length; i++) {\n          const node = nodes[i];\n\n          // We coerce content to string because it is the most likely one to\n          // use a `toString` capable value. For the rest we just do identity match\n          // passing non-strings here is not really valid anyway.\n          if (__DEV__) {\n            checkAttributeStringCoercion(props.content, 'content');\n          }\n          if (\n            node.getAttribute('content') !==\n              (props.content == null ? null : '' + props.content) ||\n            node.getAttribute('name') !==\n              (props.name == null ? null : props.name) ||\n            node.getAttribute('property') !==\n              (props.property == null ? null : props.property) ||\n            node.getAttribute('http-equiv') !==\n              (props.httpEquiv == null ? null : props.httpEquiv) ||\n            node.getAttribute('charset') !==\n              (props.charSet == null ? null : props.charSet)\n          ) {\n            // mismatch, try the next node;\n            continue;\n          }\n          instance = node;\n          nodes.splice(i, 1);\n          break getInstance;\n        }\n      }\n      instance = ownerDocument.createElement(type);\n      setInitialProperties(instance, type, props);\n      (ownerDocument.head     ).appendChild(instance);\n      break;\n    }\n    default:\n      throw new Error(\n        `getNodesForType encountered a type it did not expect: \"${type}\". This is a bug in React.`,\n      );\n  }\n\n  // This node is a match\n  precacheFiberNode(internalInstanceHandle, instance);\n  markNodeAsHoistable(instance);\n  return instance;\n}\n\nfunction getHydratableHoistableCache(\n  type                  ,\n  keyAttribute        ,\n  ownerDocument          ,\n)                {\n  let cache               ;\n  let caches                   ;\n  if (tagCaches === null) {\n    cache = new Map();\n    caches = tagCaches = new Map();\n    caches.set(ownerDocument, cache);\n  } else {\n    caches = tagCaches;\n    const maybeCache = caches.get(ownerDocument);\n    if (!maybeCache) {\n      cache = new Map();\n      caches.set(ownerDocument, cache);\n    } else {\n      cache = maybeCache;\n    }\n  }\n\n  if (cache.has(type)) {\n    // We use type as a special key that signals that this cache has been seeded for this type\n    return cache;\n  }\n\n  // Mark this cache as seeded for this type\n  cache.set(type, (null     ));\n\n  const nodes = ownerDocument.getElementsByTagName(type);\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    if (\n      !isOwnedInstance(node) &&\n      (type !== 'link' || node.getAttribute('rel') !== 'stylesheet') &&\n      node.namespaceURI !== SVG_NAMESPACE\n    ) {\n      const nodeKey = node.getAttribute(keyAttribute) || '';\n      const key = type + nodeKey;\n      const existing = cache.get(key);\n      if (existing) {\n        existing.push(node);\n      } else {\n        cache.set(key, [node]);\n      }\n    }\n  }\n\n  return cache;\n}\n\nexport function mountHoistable(\n  hoistableRoot               ,\n  type                  ,\n  instance          ,\n)       {\n  const ownerDocument = getDocumentFromRoot(hoistableRoot);\n  (ownerDocument.head     ).insertBefore(\n    instance,\n    type === 'title' ? ownerDocument.querySelector('head > title') : null,\n  );\n}\n\nexport function unmountHoistable(instance          )       {\n  (instance.parentNode     ).removeChild(instance);\n}\n\nexport function isHostHoistableType(\n  type        ,\n  props          ,\n  hostContext             ,\n)          {\n  let outsideHostContainerContext         ;\n  let hostContextProd                 ;\n  if (__DEV__) {\n    const hostContextDev                 = (hostContext     );\n    // We can only render resources when we are not within the host container context\n    outsideHostContainerContext =\n      !hostContextDev.ancestorInfo.containerTagInScope;\n    hostContextProd = hostContextDev.context;\n  } else {\n    hostContextProd = (hostContext     );\n  }\n\n  // Global opt out of hoisting for anything in SVG Namespace or anything with an itemProp inside an itemScope\n  if (hostContextProd === HostContextNamespaceSvg || props.itemProp != null) {\n    if (__DEV__) {\n      if (\n        outsideHostContainerContext &&\n        props.itemProp != null &&\n        (type === 'meta' ||\n          type === 'title' ||\n          type === 'style' ||\n          type === 'link' ||\n          type === 'script')\n      ) {\n        console.error(\n          'Cannot render a <%s> outside the main document if it has an `itemProp` prop. `itemProp` suggests the tag belongs to an' +\n            ' `itemScope` which can appear anywhere in the DOM. If you were intending for React to hoist this <%s> remove the `itemProp` prop.' +\n            ' Otherwise, try moving this tag into the <head> or <body> of the Document.',\n          type,\n          type,\n        );\n      }\n    }\n    return false;\n  }\n\n  switch (type) {\n    case 'meta':\n    case 'title': {\n      return true;\n    }\n    case 'style': {\n      if (\n        typeof props.precedence !== 'string' ||\n        typeof props.href !== 'string' ||\n        props.href === ''\n      ) {\n        if (__DEV__) {\n          if (outsideHostContainerContext) {\n            console.error(\n              'Cannot render a <style> outside the main document without knowing its precedence and a unique href key.' +\n                ' React can hoist and deduplicate <style> tags if you provide a `precedence` prop along with an `href` prop that' +\n                ' does not conflict with the `href` values used in any other hoisted <style> or <link rel=\"stylesheet\" ...> tags. ' +\n                ' Note that hoisting <style> tags is considered an advanced feature that most will not use directly.' +\n                ' Consider moving the <style> tag to the <head> or consider adding a `precedence=\"default\"` and `href=\"some unique resource identifier\"`.',\n            );\n          }\n        }\n        return false;\n      }\n      return true;\n    }\n    case 'link': {\n      if (\n        typeof props.rel !== 'string' ||\n        typeof props.href !== 'string' ||\n        props.href === '' ||\n        props.onLoad ||\n        props.onError\n      ) {\n        if (__DEV__) {\n          if (\n            props.rel === 'stylesheet' &&\n            typeof props.precedence === 'string'\n          ) {\n            validateLinkPropsForStyleResource(props);\n          }\n          if (outsideHostContainerContext) {\n            if (\n              typeof props.rel !== 'string' ||\n              typeof props.href !== 'string' ||\n              props.href === ''\n            ) {\n              console.error(\n                'Cannot render a <link> outside the main document without a `rel` and `href` prop.' +\n                  ' Try adding a `rel` and/or `href` prop to this <link> or moving the link into the <head> tag',\n              );\n            } else if (props.onError || props.onLoad) {\n              console.error(\n                'Cannot render a <link> with onLoad or onError listeners outside the main document.' +\n                  ' Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or' +\n                  ' somewhere in the <body>.',\n              );\n            }\n          }\n        }\n        return false;\n      }\n      switch (props.rel) {\n        case 'stylesheet': {\n          const {precedence, disabled} = props;\n          if (__DEV__) {\n            if (typeof precedence !== 'string') {\n              if (outsideHostContainerContext) {\n                console.error(\n                  'Cannot render a <link rel=\"stylesheet\" /> outside the main document without knowing its precedence.' +\n                    ' Consider adding precedence=\"default\" or moving it into the root <head> tag.',\n                );\n              }\n            }\n          }\n          return typeof precedence === 'string' && disabled == null;\n        }\n        default: {\n          return true;\n        }\n      }\n    }\n    case 'script': {\n      const isAsync =\n        props.async &&\n        typeof props.async !== 'function' &&\n        typeof props.async !== 'symbol';\n      if (\n        !isAsync ||\n        props.onLoad ||\n        props.onError ||\n        !props.src ||\n        typeof props.src !== 'string'\n      ) {\n        if (__DEV__) {\n          if (outsideHostContainerContext) {\n            if (!isAsync) {\n              console.error(\n                'Cannot render a sync or defer <script> outside the main document without knowing its order.' +\n                  ' Try adding async=\"\" or moving it into the root <head> tag.',\n              );\n            } else if (props.onLoad || props.onError) {\n              console.error(\n                'Cannot render a <script> with onLoad or onError listeners outside the main document.' +\n                  ' Try removing onLoad={...} and onError={...} or moving it into the root <head> tag or' +\n                  ' somewhere in the <body>.',\n              );\n            } else {\n              console.error(\n                'Cannot render a <script> outside the main document without `async={true}` and a non-empty `src` prop.' +\n                  ' Ensure there is a valid `src` and either make the script async or move it into the root <head> tag or' +\n                  ' somewhere in the <body>.',\n              );\n            }\n          }\n        }\n        return false;\n      }\n      return true;\n    }\n    case 'noscript':\n    case 'template': {\n      if (__DEV__) {\n        if (outsideHostContainerContext) {\n          console.error(\n            'Cannot render <%s> outside the main document. Try moving it into the root <head> tag.',\n            type,\n          );\n        }\n      }\n      return false;\n    }\n  }\n  return false;\n}\n\nexport function maySuspendCommit(type      , props       )          {\n  if (!enableSuspenseyImages && !enableViewTransition) {\n    return false;\n  }\n  // Suspensey images are the default, unless you opt-out of with either\n  // loading=\"lazy\" or onLoad={...} which implies you're ok waiting.\n  return (\n    type === 'img' &&\n    props.src != null &&\n    props.src !== '' &&\n    props.onLoad == null &&\n    props.loading !== 'lazy'\n  );\n}\n\nexport function maySuspendCommitOnUpdate(\n  type      ,\n  oldProps       ,\n  newProps       ,\n)          {\n  return (\n    maySuspendCommit(type, newProps) &&\n    (newProps.src !== oldProps.src || newProps.srcSet !== oldProps.srcSet)\n  );\n}\n\nexport function maySuspendCommitInSyncRender(\n  type      ,\n  props       ,\n)          {\n  // TODO: Allow sync lanes to suspend too with an opt-in.\n  return false;\n}\n\nexport function mayResourceSuspendCommit(resource          )          {\n  return (\n    resource.type === 'stylesheet' &&\n    (resource.state.loading & Inserted) === NotLoaded\n  );\n}\n\nexport function preloadInstance(\n  instance          ,\n  type      ,\n  props       ,\n)          {\n  // We don't need to preload Suspensey images because the browser will\n  // load them early once we set the src.\n  // If we return true here, we'll still get a suspendInstance call in the\n  // pre-commit phase to determine if we still need to decode the image or\n  // if was dropped from cache. This just avoids rendering Suspense fallback.\n  return !!(instance     ).complete;\n}\n\nexport function preloadResource(resource          )          {\n  if (\n    resource.type === 'stylesheet' &&\n    (resource.state.loading & Settled) === NotLoaded\n  ) {\n    // Return false to indicate this resource should suspend\n    return false;\n  }\n\n  // Return true to indicate this resource should not suspend\n  return true;\n}\n\n                       \n                                                             \n                \n                                 \n  \nlet suspendedState                        = null;\n\nexport function startSuspendingCommit()       {\n  suspendedState = {\n    stylesheets: null,\n    count: 0,\n    // We use a noop function when we begin suspending because if possible we want the\n    // waitfor step to finish synchronously. If it doesn't we'll return a function to\n    // provide the actual unsuspend function and that will get completed when the count\n    // hits zero or it will get cancelled if the root starts new work.\n    unsuspend: noop,\n  };\n}\n\nconst SUSPENSEY_IMAGE_TIMEOUT = 500;\n\nexport function suspendInstance(\n  instance          ,\n  type      ,\n  props       ,\n)       {\n  if (!enableSuspenseyImages && !enableViewTransition) {\n    return;\n  }\n  if (suspendedState === null) {\n    throw new Error(\n      'Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.',\n    );\n  }\n  const state = suspendedState;\n  if (\n    // $FlowFixMe[prop-missing]\n    typeof instance.decode === 'function' &&\n    typeof setTimeout === 'function'\n  ) {\n    // If this browser supports decode() API, we use it to suspend waiting on the image.\n    // The loading should have already started at this point, so it should be enough to\n    // just call decode() which should also wait for the data to finish loading.\n    state.count++;\n    const ping = onUnsuspend.bind(state);\n    Promise.race([\n      // $FlowFixMe[prop-missing]\n      instance.decode(),\n      new Promise(resolve => setTimeout(resolve, SUSPENSEY_IMAGE_TIMEOUT)),\n    ]).then(ping, ping);\n  }\n}\n\nexport function suspendResource(\n  hoistableRoot               ,\n  resource          ,\n  props     ,\n)       {\n  if (suspendedState === null) {\n    throw new Error(\n      'Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.',\n    );\n  }\n  const state = suspendedState;\n  if (resource.type === 'stylesheet') {\n    if (typeof props.media === 'string') {\n      // If we don't currently match media we avoid suspending on this resource\n      // and let it insert on the mutation path\n      if (matchMedia(props.media).matches === false) {\n        return;\n      }\n    }\n    if ((resource.state.loading & Inserted) === NotLoaded) {\n      if (resource.instance === null) {\n        const qualifiedProps                            = props;\n        const key = getStyleKey(qualifiedProps.href);\n\n        // Attempt to hydrate instance from DOM\n        let instance                  = hoistableRoot.querySelector(\n          getStylesheetSelectorFromKey(key),\n        );\n        if (instance) {\n          // If this instance has a loading state it came from the Fizz runtime.\n          // If there is not loading state it is assumed to have been server rendered\n          // as part of the preamble and therefore synchronously loaded. It could have\n          // errored however which we still do not yet have a means to detect. For now\n          // we assume it is loaded.\n          const maybeLoadingState                  = (instance     )._p;\n          if (\n            maybeLoadingState !== null &&\n            typeof maybeLoadingState === 'object' &&\n            // $FlowFixMe[method-unbinding]\n            typeof maybeLoadingState.then === 'function'\n          ) {\n            const loadingState = maybeLoadingState;\n            state.count++;\n            const ping = onUnsuspend.bind(state);\n            loadingState.then(ping, ping);\n          }\n          resource.state.loading |= Inserted;\n          resource.instance = instance;\n          markNodeAsHoistable(instance);\n          return;\n        }\n\n        const ownerDocument = getDocumentFromRoot(hoistableRoot);\n\n        const stylesheetProps = stylesheetPropsFromRawProps(props);\n        const preloadProps = preloadPropsMap.get(key);\n        if (preloadProps) {\n          adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps);\n        }\n\n        // Construct and insert a new instance\n        instance = ownerDocument.createElement('link');\n        markNodeAsHoistable(instance);\n        const linkInstance                  = (instance     );\n        // This Promise is a loading state used by the Fizz runtime. We need this incase there is a race\n        // between this resource being rendered on the client and being rendered with a late completed boundary.\n        (linkInstance     )._p = new Promise((resolve, reject) => {\n          linkInstance.onload = resolve;\n          linkInstance.onerror = reject;\n        });\n        setInitialProperties(instance, 'link', stylesheetProps);\n        resource.instance = instance;\n      }\n\n      if (state.stylesheets === null) {\n        state.stylesheets = new Map();\n      }\n      state.stylesheets.set(resource, hoistableRoot);\n\n      const preloadEl = resource.state.preload;\n      if (preloadEl && (resource.state.loading & Settled) === NotLoaded) {\n        state.count++;\n        const ping = onUnsuspend.bind(state);\n        preloadEl.addEventListener('load', ping);\n        preloadEl.addEventListener('error', ping);\n      }\n    }\n  }\n}\n\nexport function suspendOnActiveViewTransition(rootContainer           )       {\n  if (suspendedState === null) {\n    throw new Error(\n      'Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.',\n    );\n  }\n  const state = suspendedState;\n  const ownerDocument =\n    rootContainer.nodeType === DOCUMENT_NODE\n      ? rootContainer\n      : rootContainer.ownerDocument;\n  // $FlowFixMe[prop-missing]\n  const activeViewTransition = ownerDocument.__reactViewTransition;\n  if (activeViewTransition == null) {\n    return;\n  }\n  state.count++;\n  const ping = onUnsuspend.bind(state);\n  activeViewTransition.finished.then(ping, ping);\n}\n\nexport function waitForCommitToBeReady()                                      {\n  if (suspendedState === null) {\n    throw new Error(\n      'Internal React Error: suspendedState null when it was expected to exists. Please report this as a React bug.',\n    );\n  }\n\n  const state = suspendedState;\n\n  if (state.stylesheets && state.count === 0) {\n    // We are not currently blocked but we have not inserted all stylesheets.\n    // If this insertion happens and loads or errors synchronously then we can\n    // avoid suspending the commit. To do this we check the count again immediately after\n    insertSuspendedStylesheets(state, state.stylesheets);\n  }\n\n  // We need to check the count again because the inserted stylesheets may have led to new\n  // tasks to wait on.\n  if (state.count > 0) {\n    return commit => {\n      // We almost never want to show content before its styles have loaded. But\n      // eventually we will give up and allow unstyled content. So this number is\n      // somewhat arbitrary \u2014 big enough that you'd only reach it under\n      // extreme circumstances.\n      // TODO: Figure out what the browser engines do during initial page load and\n      // consider aligning our behavior with that.\n      const stylesheetTimer = setTimeout(() => {\n        if (state.stylesheets) {\n          insertSuspendedStylesheets(state, state.stylesheets);\n        }\n        if (state.unsuspend) {\n          const unsuspend = state.unsuspend;\n          state.unsuspend = null;\n          unsuspend();\n        }\n      }, 60000); // one minute\n\n      state.unsuspend = commit;\n\n      return () => {\n        state.unsuspend = null;\n        clearTimeout(stylesheetTimer);\n      };\n    };\n  }\n  return null;\n}\n\nfunction onUnsuspend(                    ) {\n  this.count--;\n  if (this.count === 0) {\n    if (this.stylesheets) {\n      // If we haven't actually inserted the stylesheets yet we need to do so now before starting the commit.\n      // The reason we do this after everything else has finished is because we want to have all the stylesheets\n      // load synchronously right before mutating. Ideally the new styles will cause a single recalc only on the\n      // new tree. When we filled up stylesheets we only inlcuded stylesheets with matching media attributes so we\n      // wait for them to load before actually continuing. We expect this to increase the count above zero\n      insertSuspendedStylesheets(this, this.stylesheets);\n    } else if (this.unsuspend) {\n      const unsuspend = this.unsuspend;\n      this.unsuspend = null;\n      unsuspend();\n    }\n  }\n}\n\n// We use a value that is type distinct from precedence to track which one is last.\n// This ensures there is no collision with user defined precedences. Normally we would\n// just track this in module scope but since the precedences are tracked per HoistableRoot\n// we need to associate it to something other than a global scope hence why we try to\n// colocate it with the map of precedences in the first place\nconst LAST_PRECEDENCE = null;\n\n// This is typecast to non-null because it will always be set before read.\n// it is important that this not be used except when the stack guarantees it exists.\n// Currentlyt his is only during insertSuspendedStylesheet.\nlet precedencesByRoot      \n                \n                                                 \n  = (null     );\n\nfunction insertSuspendedStylesheets(\n  state                ,\n  resources                                        ,\n)       {\n  // We need to clear this out so we don't try to reinsert after the stylesheets have loaded\n  state.stylesheets = null;\n\n  if (state.unsuspend === null) {\n    // The suspended commit was cancelled. We don't need to insert any stylesheets.\n    return;\n  }\n\n  // Temporarily increment count. we don't want any synchronously loaded stylesheets to try to unsuspend\n  // before we finish inserting all stylesheets.\n  state.count++;\n\n  precedencesByRoot = new Map();\n  resources.forEach(insertStylesheetIntoRoot, state);\n  precedencesByRoot = (null     );\n\n  // We can remove our temporary count and if we're still at zero we can unsuspend.\n  // If we are in the synchronous phase before deciding if the commit should suspend and this\n  // ends up hitting the unsuspend path it will just invoke the noop unsuspend.\n  onUnsuspend.call(state);\n}\n\nfunction insertStylesheetIntoRoot(\n                       \n  root               ,\n  resource                    ,\n  map                                        ,\n) {\n  if (resource.state.loading & Inserted) {\n    // This resource was inserted by another root committing. we don't need to insert it again\n    return;\n  }\n\n  let last;\n  let precedences = precedencesByRoot.get(root);\n  if (!precedences) {\n    precedences = new Map();\n    precedencesByRoot.set(root, precedences);\n    const nodes = root.querySelectorAll(\n      'link[data-precedence],style[data-precedence]',\n    );\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (\n        node.nodeName === 'LINK' ||\n        // We omit style tags with media=\"not all\" because they are not in the right position\n        // and will be hoisted by the Fizz runtime imminently.\n        node.getAttribute('media') !== 'not all'\n      ) {\n        precedences.set(node.dataset.precedence, node);\n        last = node;\n      }\n    }\n    if (last) {\n      precedences.set(LAST_PRECEDENCE, last);\n    }\n  } else {\n    last = precedences.get(LAST_PRECEDENCE);\n  }\n\n  // We only call this after we have constructed an instance so we assume it here\n  const instance                  = (resource.instance     );\n  // We will always have a precedence for stylesheet instances\n  const precedence         = (instance.getAttribute('data-precedence')     );\n\n  const prior = precedences.get(precedence) || last;\n  if (prior === last) {\n    precedences.set(LAST_PRECEDENCE, instance);\n  }\n  precedences.set(precedence, instance);\n\n  this.count++;\n  const onComplete = onUnsuspend.bind(this);\n  instance.addEventListener('load', onComplete);\n  instance.addEventListener('error', onComplete);\n\n  if (prior) {\n    (prior.parentNode     ).insertBefore(instance, prior.nextSibling);\n  } else {\n    const parent =\n      root.nodeType === DOCUMENT_NODE\n        ? ((((root     )          ).head     )         )\n        : ((root     )            );\n    parent.insertBefore(instance, parent.firstChild);\n  }\n  resource.state.loading |= Inserted;\n}\n\nexport const NotPendingTransition                   = NotPending;\nexport const HostTransitionContext                                 = {\n  $$typeof: REACT_CONTEXT_TYPE,\n  Provider: (null     ),\n  Consumer: (null     ),\n  _currentValue: NotPendingTransition,\n  _currentValue2: NotPendingTransition,\n  _threadCount: 0,\n};\n\n                                           \nexport function resetFormInstance(form              )       {\n  form.reset();\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                   \n                                                          \n             \n                      \n                              \n                                    \n             \n            \n               \n           \n                   \n                   \n        \n                \n                \n                               \n\nimport {\n  HostComponent,\n  HostHoistable,\n  HostSingleton,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n  ActivityComponent,\n} from 'react-reconciler/src/ReactWorkTags';\n\nimport {getParentHydrationBoundary} from './ReactFiberConfigDOM';\n\nimport {enableScopeAPI} from 'shared/ReactFeatureFlags';\n\nconst randomKey = Math.random().toString(36).slice(2);\nconst internalInstanceKey = '__reactFiber$' + randomKey;\nconst internalPropsKey = '__reactProps$' + randomKey;\nconst internalContainerInstanceKey = '__reactContainer$' + randomKey;\nconst internalEventHandlersKey = '__reactEvents$' + randomKey;\nconst internalEventHandlerListenersKey = '__reactListeners$' + randomKey;\nconst internalEventHandlesSetKey = '__reactHandles$' + randomKey;\nconst internalRootNodeResourcesKey = '__reactResources$' + randomKey;\nconst internalHoistableMarker = '__reactMarker$' + randomKey;\nconst internalScrollTimer = '__reactScroll$' + randomKey;\n\nexport function detachDeletedInstance(node          )       {\n  // TODO: This function is only called on host components. I don't think all of\n  // these fields are relevant.\n  delete (node     )[internalInstanceKey];\n  delete (node     )[internalPropsKey];\n  delete (node     )[internalEventHandlersKey];\n  delete (node     )[internalEventHandlerListenersKey];\n  delete (node     )[internalEventHandlesSetKey];\n}\n\nexport function precacheFiberNode(\n  hostInst       ,\n  node \n              \n                  \n                      \n                      \n                        ,\n)       {\n  (node     )[internalInstanceKey] = hostInst;\n}\n\nexport function markContainerAsRoot(hostRoot       , node           )       {\n  // $FlowFixMe[prop-missing]\n  node[internalContainerInstanceKey] = hostRoot;\n}\n\nexport function unmarkContainerAsRoot(node           )       {\n  // $FlowFixMe[prop-missing]\n  node[internalContainerInstanceKey] = null;\n}\n\nexport function isContainerMarkedAsRoot(node           )          {\n  // $FlowFixMe[prop-missing]\n  return !!node[internalContainerInstanceKey];\n}\n\n// Given a DOM node, return the closest HostComponent or HostText fiber ancestor.\n// If the target node is part of a hydrated or not yet rendered subtree, then\n// this may also return a SuspenseComponent, ActivityComponent or HostRoot to\n// indicate that.\n// Conceptually the HostRoot fiber is a child of the Container node. So if you\n// pass the Container node as the targetNode, you will not actually get the\n// HostRoot back. To get to the HostRoot, you need to pass a child of it.\n// The same thing applies to Suspense and Activity boundaries.\nexport function getClosestInstanceFromNode(targetNode      )               {\n  let targetInst = (targetNode     )[internalInstanceKey];\n  if (targetInst) {\n    // Don't return HostRoot, SuspenseComponent or ActivityComponent here.\n    return targetInst;\n  }\n  // If the direct event target isn't a React owned DOM node, we need to look\n  // to see if one of its parents is a React owned DOM node.\n  let parentNode = targetNode.parentNode;\n  while (parentNode) {\n    // We'll check if this is a container root that could include\n    // React nodes in the future. We need to check this first because\n    // if we're a child of a dehydrated container, we need to first\n    // find that inner container before moving on to finding the parent\n    // instance. Note that we don't check this field on  the targetNode\n    // itself because the fibers are conceptually between the container\n    // node and the first child. It isn't surrounding the container node.\n    // If it's not a container, we check if it's an instance.\n    targetInst =\n      (parentNode     )[internalContainerInstanceKey] ||\n      (parentNode     )[internalInstanceKey];\n    if (targetInst) {\n      // Since this wasn't the direct target of the event, we might have\n      // stepped past dehydrated DOM nodes to get here. However they could\n      // also have been non-React nodes. We need to answer which one.\n\n      // If we the instance doesn't have any children, then there can't be\n      // a nested suspense boundary within it. So we can use this as a fast\n      // bailout. Most of the time, when people add non-React children to\n      // the tree, it is using a ref to a child-less DOM node.\n      // Normally we'd only need to check one of the fibers because if it\n      // has ever gone from having children to deleting them or vice versa\n      // it would have deleted the dehydrated boundary nested inside already.\n      // However, since the HostRoot starts out with an alternate it might\n      // have one on the alternate so we need to check in case this was a\n      // root.\n      const alternate = targetInst.alternate;\n      if (\n        targetInst.child !== null ||\n        (alternate !== null && alternate.child !== null)\n      ) {\n        // Next we need to figure out if the node that skipped past is\n        // nested within a dehydrated boundary and if so, which one.\n        let hydrationInstance = getParentHydrationBoundary(targetNode);\n        while (hydrationInstance !== null) {\n          // We found a suspense instance. That means that we haven't\n          // hydrated it yet. Even though we leave the comments in the\n          // DOM after hydrating, and there are boundaries in the DOM\n          // that could already be hydrated, we wouldn't have found them\n          // through this pass since if the target is hydrated it would\n          // have had an internalInstanceKey on it.\n          // Let's get the fiber associated with the SuspenseComponent\n          // as the deepest instance.\n          // $FlowFixMe[prop-missing]\n          const targetFiber = hydrationInstance[internalInstanceKey];\n          if (targetFiber) {\n            return targetFiber;\n          }\n          // If we don't find a Fiber on the comment, it might be because\n          // we haven't gotten to hydrate it yet. There might still be a\n          // parent boundary that hasn't above this one so we need to find\n          // the outer most that is known.\n          hydrationInstance = getParentHydrationBoundary(hydrationInstance);\n          // If we don't find one, then that should mean that the parent\n          // host component also hasn't hydrated yet. We can return it\n          // below since it will bail out on the isMounted check later.\n        }\n      }\n      return targetInst;\n    }\n    targetNode = parentNode;\n    parentNode = targetNode.parentNode;\n  }\n  return null;\n}\n\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\nexport function getInstanceFromNode(node      )               {\n  const inst =\n    (node     )[internalInstanceKey] ||\n    (node     )[internalContainerInstanceKey];\n  if (inst) {\n    const tag = inst.tag;\n    if (\n      tag === HostComponent ||\n      tag === HostText ||\n      tag === SuspenseComponent ||\n      tag === ActivityComponent ||\n      tag === HostHoistable ||\n      tag === HostSingleton ||\n      tag === HostRoot\n    ) {\n      return inst;\n    } else {\n      return null;\n    }\n  }\n  return null;\n}\n\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\nexport function getNodeFromInstance(inst       )                          {\n  const tag = inst.tag;\n  if (\n    tag === HostComponent ||\n    tag === HostHoistable ||\n    tag === HostSingleton ||\n    tag === HostText\n  ) {\n    // In Fiber this, is just the state node right now. We assume it will be\n    // a host component or host text.\n    return inst.stateNode;\n  }\n\n  // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n  throw new Error('getNodeFromInstance: Invalid argument.');\n}\n\nexport function getFiberCurrentPropsFromNode(\n  node \n               \n              \n                  \n                      \n                      ,\n)        {\n  return (node     )[internalPropsKey] || null;\n}\n\nexport function updateFiberProps(node          , props       )       {\n  (node     )[internalPropsKey] = props;\n}\n\nexport function getEventListenerSet(node             )              {\n  let elementListenerSet = (node     )[internalEventHandlersKey];\n  if (elementListenerSet === undefined) {\n    elementListenerSet = (node     )[internalEventHandlersKey] = new Set();\n  }\n  return elementListenerSet;\n}\n\nexport function getFiberFromScopeInstance(\n  scope                    ,\n)               {\n  if (enableScopeAPI) {\n    return (scope     )[internalInstanceKey] || null;\n  }\n  return null;\n}\n\nexport function setEventHandlerListeners(\n  scope                                  ,\n  listeners                                  ,\n)       {\n  (scope     )[internalEventHandlerListenersKey] = listeners;\n}\n\nexport function getEventHandlerListeners(\n  scope                                  ,\n)                                          {\n  return (scope     )[internalEventHandlerListenersKey] || null;\n}\n\nexport function addEventHandleToTarget(\n  target                                  ,\n  eventHandle                     ,\n)       {\n  let eventHandles = (target     )[internalEventHandlesSetKey];\n  if (eventHandles === undefined) {\n    eventHandles = (target     )[internalEventHandlesSetKey] = new Set();\n  }\n  eventHandles.add(eventHandle);\n}\n\nexport function doesTargetHaveEventHandle(\n  target                                  ,\n  eventHandle                     ,\n)          {\n  const eventHandles = (target     )[internalEventHandlesSetKey];\n  if (eventHandles === undefined) {\n    return false;\n  }\n  return eventHandles.has(eventHandle);\n}\n\nexport function getResourcesFromRoot(root               )                {\n  let resources = (root     )[internalRootNodeResourcesKey];\n  if (!resources) {\n    resources = (root     )[internalRootNodeResourcesKey] = {\n      hoistableStyles: new Map(),\n      hoistableScripts: new Map(),\n    };\n  }\n  return resources;\n}\n\nexport function isMarkedHoistable(node      )          {\n  return !!(node     )[internalHoistableMarker];\n}\n\nexport function markNodeAsHoistable(node      ) {\n  (node     )[internalHoistableMarker] = true;\n}\n\nexport function getScrollEndTimer(node             )             {\n  return (node     )[internalScrollTimer];\n}\n\nexport function setScrollEndTimer(node             , timer           )       {\n  (node     )[internalScrollTimer] = timer;\n}\n\nexport function clearScrollEndTimer(node             )       {\n  (node     )[internalScrollTimer] = undefined;\n}\n\nexport function isOwnedInstance(node      )          {\n  return !!(\n    (node     )[internalHoistableMarker] || (node     )[internalInstanceKey]\n  );\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                             \n                                                               \n                                                                              \n             \n            \n                   \n                   \n                                       \n                                                          \n\nimport {\n  isDiscreteEventThatRequiresHydration,\n  clearIfContinuousEvent,\n  queueIfContinuousEvent,\n} from './ReactDOMEventReplaying';\nimport {attemptSynchronousHydration} from 'react-reconciler/src/ReactFiberReconciler';\nimport {\n  getNearestMountedFiber,\n  getContainerFromFiber,\n  getActivityInstanceFromFiber,\n  getSuspenseInstanceFromFiber,\n} from 'react-reconciler/src/ReactFiberTreeReflection';\nimport {\n  HostRoot,\n  ActivityComponent,\n  SuspenseComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport {                       IS_CAPTURE_PHASE} from './EventSystemFlags';\n\nimport getEventTarget from './getEventTarget';\nimport {\n  getInstanceFromNode,\n  getClosestInstanceFromNode,\n} from '../client/ReactDOMComponentTree';\n\nimport {dispatchEventForPluginEventSystem} from './DOMPluginEventSystem';\nimport {\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n} from '../client/ReactDOMUpdatePriority';\n\nimport {\n  getCurrentPriorityLevel as getCurrentSchedulerPriorityLevel,\n  IdlePriority as IdleSchedulerPriority,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  LowPriority as LowSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n} from 'react-reconciler/src/Scheduler';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n} from 'react-reconciler/src/ReactEventPriorities';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {isRootDehydrated} from 'react-reconciler/src/ReactFiberShellHydration';\n\n// TODO: can we stop exporting these?\nlet _enabled          = true;\n\n// This is exported in FB builds for use by legacy FB layer infra.\n// We'd like to remove this but it's not clear if this is safe.\nexport function setEnabled(enabled          )       {\n  _enabled = !!enabled;\n}\n\nexport function isEnabled()          {\n  return _enabled;\n}\n\nexport function createEventListenerWrapper(\n  targetContainer             ,\n  domEventName              ,\n  eventSystemFlags                  ,\n)           {\n  return dispatchEvent.bind(\n    null,\n    domEventName,\n    eventSystemFlags,\n    targetContainer,\n  );\n}\n\nexport function createEventListenerWrapperWithPriority(\n  targetContainer             ,\n  domEventName              ,\n  eventSystemFlags                  ,\n)           {\n  const eventPriority = getEventPriority(domEventName);\n  let listenerWrapper;\n  switch (eventPriority) {\n    case DiscreteEventPriority:\n      listenerWrapper = dispatchDiscreteEvent;\n      break;\n    case ContinuousEventPriority:\n      listenerWrapper = dispatchContinuousEvent;\n      break;\n    case DefaultEventPriority:\n    default:\n      listenerWrapper = dispatchEvent;\n      break;\n  }\n  return listenerWrapper.bind(\n    null,\n    domEventName,\n    eventSystemFlags,\n    targetContainer,\n  );\n}\n\nfunction dispatchDiscreteEvent(\n  domEventName              ,\n  eventSystemFlags                  ,\n  container             ,\n  nativeEvent                ,\n) {\n  const prevTransition = ReactSharedInternals.T;\n  ReactSharedInternals.T = null;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactSharedInternals.T = prevTransition;\n  }\n}\n\nfunction dispatchContinuousEvent(\n  domEventName              ,\n  eventSystemFlags                  ,\n  container             ,\n  nativeEvent                ,\n) {\n  const prevTransition = ReactSharedInternals.T;\n  ReactSharedInternals.T = null;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    setCurrentUpdatePriority(ContinuousEventPriority);\n    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactSharedInternals.T = prevTransition;\n  }\n}\n\nexport function dispatchEvent(\n  domEventName              ,\n  eventSystemFlags                  ,\n  targetContainer             ,\n  nativeEvent                ,\n)       {\n  if (!_enabled) {\n    return;\n  }\n\n  let blockedOn = findInstanceBlockingEvent(nativeEvent);\n  if (blockedOn === null) {\n    dispatchEventForPluginEventSystem(\n      domEventName,\n      eventSystemFlags,\n      nativeEvent,\n      return_targetInst,\n      targetContainer,\n    );\n    clearIfContinuousEvent(domEventName, nativeEvent);\n    return;\n  }\n\n  if (\n    queueIfContinuousEvent(\n      blockedOn,\n      domEventName,\n      eventSystemFlags,\n      targetContainer,\n      nativeEvent,\n    )\n  ) {\n    nativeEvent.stopPropagation();\n    return;\n  }\n  // We need to clear only if we didn't queue because\n  // queueing is accumulative.\n  clearIfContinuousEvent(domEventName, nativeEvent);\n\n  if (\n    eventSystemFlags & IS_CAPTURE_PHASE &&\n    isDiscreteEventThatRequiresHydration(domEventName)\n  ) {\n    while (blockedOn !== null) {\n      const fiber = getInstanceFromNode(blockedOn);\n      if (fiber !== null) {\n        attemptSynchronousHydration(fiber);\n      }\n      const nextBlockedOn = findInstanceBlockingEvent(nativeEvent);\n      if (nextBlockedOn === null) {\n        dispatchEventForPluginEventSystem(\n          domEventName,\n          eventSystemFlags,\n          nativeEvent,\n          return_targetInst,\n          targetContainer,\n        );\n      }\n      if (nextBlockedOn === blockedOn) {\n        break;\n      }\n      blockedOn = nextBlockedOn;\n    }\n    if (blockedOn !== null) {\n      nativeEvent.stopPropagation();\n    }\n    return;\n  }\n\n  // This is not replayable so we'll invoke it but without a target,\n  // in case the event system needs to trace it.\n  dispatchEventForPluginEventSystem(\n    domEventName,\n    eventSystemFlags,\n    nativeEvent,\n    null,\n    targetContainer,\n  );\n}\n\nexport function findInstanceBlockingEvent(\n  nativeEvent                ,\n)                                                         {\n  const nativeEventTarget = getEventTarget(nativeEvent);\n  return findInstanceBlockingTarget(nativeEventTarget);\n}\n\nexport let return_targetInst               = null;\n\n// Returns a SuspenseInstance, ActivityInstance or Container if it's blocked.\n// The return_targetInst field above is conceptually part of the return value.\nexport function findInstanceBlockingTarget(\n  targetNode      ,\n)                                                         {\n  // TODO: Warn if _enabled is false.\n\n  return_targetInst = null;\n\n  let targetInst = getClosestInstanceFromNode(targetNode);\n\n  if (targetInst !== null) {\n    const nearestMounted = getNearestMountedFiber(targetInst);\n    if (nearestMounted === null) {\n      // This tree has been unmounted already. Dispatch without a target.\n      targetInst = null;\n    } else {\n      const tag = nearestMounted.tag;\n      if (tag === SuspenseComponent) {\n        const instance = getSuspenseInstanceFromFiber(nearestMounted);\n        if (instance !== null) {\n          // Queue the event to be replayed later. Abort dispatching since we\n          // don't want this event dispatched twice through the event system.\n          // TODO: If this is the first discrete event in the queue. Schedule an increased\n          // priority for this boundary.\n          return instance;\n        }\n        // This shouldn't happen, something went wrong but to avoid blocking\n        // the whole system, dispatch the event without a target.\n        // TODO: Warn.\n        targetInst = null;\n      } else if (tag === ActivityComponent) {\n        const instance = getActivityInstanceFromFiber(nearestMounted);\n        if (instance !== null) {\n          // Queue the event to be replayed later. Abort dispatching since we\n          // don't want this event dispatched twice through the event system.\n          // TODO: If this is the first discrete event in the queue. Schedule an increased\n          // priority for this boundary.\n          return instance;\n        }\n        // This shouldn't happen, something went wrong but to avoid blocking\n        // the whole system, dispatch the event without a target.\n        // TODO: Warn.\n        targetInst = null;\n      } else if (tag === HostRoot) {\n        const root            = nearestMounted.stateNode;\n        if (isRootDehydrated(root)) {\n          // If this happens during a replay something went wrong and it might block\n          // the whole system.\n          return getContainerFromFiber(nearestMounted);\n        }\n        targetInst = null;\n      } else if (nearestMounted !== targetInst) {\n        // If we get an event (ex: img onload) before committing that\n        // component's mount, ignore it for now (that is, treat it as if it was an\n        // event on a non-React tree). We might also consider queueing events and\n        // dispatching them after the mount.\n        targetInst = null;\n      }\n    }\n  }\n  return_targetInst = targetInst;\n  // We're not blocked on anything.\n  return null;\n}\n\nexport function getEventPriority(domEventName              )                {\n  switch (domEventName) {\n    // Used by SimpleEventPlugin:\n    case 'beforetoggle':\n    case 'cancel':\n    case 'click':\n    case 'close':\n    case 'contextmenu':\n    case 'copy':\n    case 'cut':\n    case 'auxclick':\n    case 'dblclick':\n    case 'dragend':\n    case 'dragstart':\n    case 'drop':\n    case 'focusin':\n    case 'focusout':\n    case 'input':\n    case 'invalid':\n    case 'keydown':\n    case 'keypress':\n    case 'keyup':\n    case 'mousedown':\n    case 'mouseup':\n    case 'paste':\n    case 'pause':\n    case 'play':\n    case 'pointercancel':\n    case 'pointerdown':\n    case 'pointerup':\n    case 'ratechange':\n    case 'reset':\n    case 'resize':\n    case 'seeked':\n    case 'submit':\n    case 'toggle':\n    case 'touchcancel':\n    case 'touchend':\n    case 'touchstart':\n    case 'volumechange':\n    // Used by polyfills: (fall through)\n    case 'change':\n    case 'selectionchange':\n    case 'textInput':\n    case 'compositionstart':\n    case 'compositionend':\n    case 'compositionupdate':\n    // Only enableCreateEventHandleAPI: (fall through)\n    case 'beforeblur':\n    case 'afterblur':\n    // Not used by React but could be by user code: (fall through)\n    case 'beforeinput':\n    case 'blur':\n    case 'fullscreenchange':\n    case 'focus':\n    case 'hashchange':\n    case 'popstate':\n    case 'select':\n    case 'selectstart':\n      return DiscreteEventPriority;\n    case 'drag':\n    case 'dragenter':\n    case 'dragexit':\n    case 'dragleave':\n    case 'dragover':\n    case 'mousemove':\n    case 'mouseout':\n    case 'mouseover':\n    case 'pointermove':\n    case 'pointerout':\n    case 'pointerover':\n    case 'scroll':\n    case 'touchmove':\n    case 'wheel':\n    // Not used by React but could be by user code: (fall through)\n    case 'mouseenter':\n    case 'mouseleave':\n    case 'pointerenter':\n    case 'pointerleave':\n      return ContinuousEventPriority;\n    case 'message': {\n      // We might be in the Scheduler callback.\n      // Eventually this mechanism will be replaced by a check\n      // of the current priority on the native scheduler.\n      const schedulerPriority = getCurrentSchedulerPriorityLevel();\n      switch (schedulerPriority) {\n        case ImmediateSchedulerPriority:\n          return DiscreteEventPriority;\n        case UserBlockingSchedulerPriority:\n          return ContinuousEventPriority;\n        case NormalSchedulerPriority:\n        case LowSchedulerPriority:\n          // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.\n          return DefaultEventPriority;\n        case IdleSchedulerPriority:\n          return IdleEventPriority;\n        default:\n          return DefaultEventPriority;\n      }\n    }\n    default:\n      return DefaultEventPriority;\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                               \n             \n            \n                   \n                   \n                                       \n                                                          \n                                                         \n                                                                       \n                                                                             \n\nimport {\n  unstable_scheduleCallback as scheduleCallback,\n  unstable_NormalPriority as NormalPriority,\n} from 'scheduler';\nimport {\n  getNearestMountedFiber,\n  getContainerFromFiber,\n  getActivityInstanceFromFiber,\n  getSuspenseInstanceFromFiber,\n} from 'react-reconciler/src/ReactFiberTreeReflection';\nimport {\n  findInstanceBlockingEvent,\n  findInstanceBlockingTarget,\n} from './ReactDOMEventListener';\nimport {setReplayingEvent, resetReplayingEvent} from './CurrentReplayingEvent';\nimport {\n  getInstanceFromNode,\n  getClosestInstanceFromNode,\n  getFiberCurrentPropsFromNode,\n} from '../client/ReactDOMComponentTree';\nimport {\n  HostRoot,\n  ActivityComponent,\n  SuspenseComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport {isHigherEventPriority} from 'react-reconciler/src/ReactEventPriorities';\nimport {isRootDehydrated} from 'react-reconciler/src/ReactFiberShellHydration';\nimport {dispatchReplayedFormAction} from './plugins/FormActionEventPlugin';\nimport {\n  resolveUpdatePriority,\n  runWithPriority as attemptHydrationAtPriority,\n} from '../client/ReactDOMUpdatePriority';\n\nimport {\n  attemptContinuousHydration,\n  attemptHydrationAtCurrentPriority,\n} from 'react-reconciler/src/ReactFiberReconciler';\n\nimport {enableHydrationChangeEvent} from 'shared/ReactFeatureFlags';\n\n// TODO: Upgrade this definition once we're on a newer version of Flow that\n// has this definition built-in.\n                                 \n                    \n                                    \n     \n  \n\n                              \n                                                                    \n                             \n                                     \n                              \n                                       \n  \n\nlet hasScheduledReplayAttempt = false;\n\n// The last of each continuous event type. We only need to replay the last one\n// if the last target was dehydrated.\nlet queuedFocus                               = null;\nlet queuedDrag                               = null;\nlet queuedMouse                               = null;\n// For pointer events there can be one latest event per pointerId.\nconst queuedPointers                                     = new Map();\nconst queuedPointerCaptures                                     = new Map();\n// We could consider replaying selectionchange and touchmoves too.\n\nconst queuedChangeEventTargets                     = [];\n\n                              \n                                                                    \n               \n                          \n  \nconst queuedExplicitHydrationTargets                               = [];\n\nconst discreteReplayableEvents                      = [\n  'mousedown',\n  'mouseup',\n  'touchcancel',\n  'touchend',\n  'touchstart',\n  'auxclick',\n  'dblclick',\n  'pointercancel',\n  'pointerdown',\n  'pointerup',\n  'dragend',\n  'dragstart',\n  'drop',\n  'compositionend',\n  'compositionstart',\n  'keydown',\n  'keypress',\n  'keyup',\n  'input',\n  'textInput', // Intentionally camelCase\n  'copy',\n  'cut',\n  'paste',\n  'click',\n  'change',\n  'contextmenu',\n  'reset',\n  // 'submit', // stopPropagation blocks the replay mechanism\n];\n\nexport function isDiscreteEventThatRequiresHydration(\n  eventType              ,\n)          {\n  return discreteReplayableEvents.indexOf(eventType) > -1;\n}\n\nfunction createQueuedReplayableEvent(\n  blockedOn                                                        ,\n  domEventName              ,\n  eventSystemFlags                  ,\n  targetContainer             ,\n  nativeEvent                ,\n)                        {\n  return {\n    blockedOn,\n    domEventName,\n    eventSystemFlags,\n    nativeEvent,\n    targetContainers: [targetContainer],\n  };\n}\n\n// Resets the replaying for this type of continuous event to no event.\nexport function clearIfContinuousEvent(\n  domEventName              ,\n  nativeEvent                ,\n)       {\n  switch (domEventName) {\n    case 'focusin':\n    case 'focusout':\n      queuedFocus = null;\n      break;\n    case 'dragenter':\n    case 'dragleave':\n      queuedDrag = null;\n      break;\n    case 'mouseover':\n    case 'mouseout':\n      queuedMouse = null;\n      break;\n    case 'pointerover':\n    case 'pointerout': {\n      const pointerId = ((nativeEvent     )                  ).pointerId;\n      queuedPointers.delete(pointerId);\n      break;\n    }\n    case 'gotpointercapture':\n    case 'lostpointercapture': {\n      const pointerId = ((nativeEvent     )                  ).pointerId;\n      queuedPointerCaptures.delete(pointerId);\n      break;\n    }\n  }\n}\n\nfunction accumulateOrCreateContinuousQueuedReplayableEvent(\n  existingQueuedEvent                              ,\n  blockedOn                                                        ,\n  domEventName              ,\n  eventSystemFlags                  ,\n  targetContainer             ,\n  nativeEvent                ,\n)                        {\n  if (\n    existingQueuedEvent === null ||\n    existingQueuedEvent.nativeEvent !== nativeEvent\n  ) {\n    const queuedEvent = createQueuedReplayableEvent(\n      blockedOn,\n      domEventName,\n      eventSystemFlags,\n      targetContainer,\n      nativeEvent,\n    );\n    if (blockedOn !== null) {\n      const fiber = getInstanceFromNode(blockedOn);\n      if (fiber !== null) {\n        // Attempt to increase the priority of this target.\n        attemptContinuousHydration(fiber);\n      }\n    }\n    return queuedEvent;\n  }\n  // If we have already queued this exact event, then it's because\n  // the different event systems have different DOM event listeners.\n  // We can accumulate the flags, and the targetContainers, and\n  // store a single event to be replayed.\n  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;\n  const targetContainers = existingQueuedEvent.targetContainers;\n  if (\n    targetContainer !== null &&\n    targetContainers.indexOf(targetContainer) === -1\n  ) {\n    targetContainers.push(targetContainer);\n  }\n  return existingQueuedEvent;\n}\n\nexport function queueIfContinuousEvent(\n  blockedOn                                                        ,\n  domEventName              ,\n  eventSystemFlags                  ,\n  targetContainer             ,\n  nativeEvent                ,\n)          {\n  // These set relatedTarget to null because the replayed event will be treated as if we\n  // moved from outside the window (no target) onto the target once it hydrates.\n  // Instead of mutating we could clone the event.\n  switch (domEventName) {\n    case 'focusin': {\n      const focusEvent = ((nativeEvent     )            );\n      queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(\n        queuedFocus,\n        blockedOn,\n        domEventName,\n        eventSystemFlags,\n        targetContainer,\n        focusEvent,\n      );\n      return true;\n    }\n    case 'dragenter': {\n      const dragEvent = ((nativeEvent     )           );\n      queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(\n        queuedDrag,\n        blockedOn,\n        domEventName,\n        eventSystemFlags,\n        targetContainer,\n        dragEvent,\n      );\n      return true;\n    }\n    case 'mouseover': {\n      const mouseEvent = ((nativeEvent     )            );\n      queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(\n        queuedMouse,\n        blockedOn,\n        domEventName,\n        eventSystemFlags,\n        targetContainer,\n        mouseEvent,\n      );\n      return true;\n    }\n    case 'pointerover': {\n      const pointerEvent = ((nativeEvent     )                  );\n      const pointerId = pointerEvent.pointerId;\n      queuedPointers.set(\n        pointerId,\n        accumulateOrCreateContinuousQueuedReplayableEvent(\n          queuedPointers.get(pointerId) || null,\n          blockedOn,\n          domEventName,\n          eventSystemFlags,\n          targetContainer,\n          pointerEvent,\n        ),\n      );\n      return true;\n    }\n    case 'gotpointercapture': {\n      const pointerEvent = ((nativeEvent     )                  );\n      const pointerId = pointerEvent.pointerId;\n      queuedPointerCaptures.set(\n        pointerId,\n        accumulateOrCreateContinuousQueuedReplayableEvent(\n          queuedPointerCaptures.get(pointerId) || null,\n          blockedOn,\n          domEventName,\n          eventSystemFlags,\n          targetContainer,\n          pointerEvent,\n        ),\n      );\n      return true;\n    }\n  }\n  return false;\n}\n\n// Check if this target is unblocked. Returns true if it's unblocked.\nfunction attemptExplicitHydrationTarget(\n  queuedTarget                       ,\n)       {\n  // TODO: This function shares a lot of logic with findInstanceBlockingEvent.\n  // Try to unify them. It's a bit tricky since it would require two return\n  // values.\n  const targetInst = getClosestInstanceFromNode(queuedTarget.target);\n  if (targetInst !== null) {\n    const nearestMounted = getNearestMountedFiber(targetInst);\n    if (nearestMounted !== null) {\n      const tag = nearestMounted.tag;\n      if (tag === SuspenseComponent) {\n        const instance = getSuspenseInstanceFromFiber(nearestMounted);\n        if (instance !== null) {\n          // We're blocked on hydrating this boundary.\n          // Increase its priority.\n          queuedTarget.blockedOn = instance;\n          attemptHydrationAtPriority(queuedTarget.priority, () => {\n            attemptHydrationAtCurrentPriority(nearestMounted);\n          });\n\n          return;\n        }\n      } else if (tag === ActivityComponent) {\n        const instance = getActivityInstanceFromFiber(nearestMounted);\n        if (instance !== null) {\n          // We're blocked on hydrating this boundary.\n          // Increase its priority.\n          queuedTarget.blockedOn = instance;\n          attemptHydrationAtPriority(queuedTarget.priority, () => {\n            attemptHydrationAtCurrentPriority(nearestMounted);\n          });\n\n          return;\n        }\n      } else if (tag === HostRoot) {\n        const root            = nearestMounted.stateNode;\n        if (isRootDehydrated(root)) {\n          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);\n          // We don't currently have a way to increase the priority of\n          // a root other than sync.\n          return;\n        }\n      }\n    }\n  }\n  queuedTarget.blockedOn = null;\n}\n\nexport function queueExplicitHydrationTarget(target      )       {\n  const updatePriority = resolveUpdatePriority();\n  const queuedTarget                        = {\n    blockedOn: null,\n    target: target,\n    priority: updatePriority,\n  };\n  let i = 0;\n  for (; i < queuedExplicitHydrationTargets.length; i++) {\n    // Stop once we hit the first target with lower priority than\n    if (\n      !isHigherEventPriority(\n        updatePriority,\n        queuedExplicitHydrationTargets[i].priority,\n      )\n    ) {\n      break;\n    }\n  }\n  queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);\n  if (i === 0) {\n    attemptExplicitHydrationTarget(queuedTarget);\n  }\n}\n\nfunction attemptReplayContinuousQueuedEvent(\n  queuedEvent                       ,\n)          {\n  if (queuedEvent.blockedOn !== null) {\n    return false;\n  }\n  const targetContainers = queuedEvent.targetContainers;\n  while (targetContainers.length > 0) {\n    const nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);\n    if (nextBlockedOn === null) {\n      const nativeEvent = queuedEvent.nativeEvent;\n      const nativeEventClone = new nativeEvent.constructor(\n        nativeEvent.type,\n        (nativeEvent     ),\n      );\n      setReplayingEvent(nativeEventClone);\n      nativeEvent.target.dispatchEvent(nativeEventClone);\n      resetReplayingEvent();\n    } else {\n      // We're still blocked. Try again later.\n      const fiber = getInstanceFromNode(nextBlockedOn);\n      if (fiber !== null) {\n        attemptContinuousHydration(fiber);\n      }\n      queuedEvent.blockedOn = nextBlockedOn;\n      return false;\n    }\n    // This target container was successfully dispatched. Try the next.\n    targetContainers.shift();\n  }\n  return true;\n}\n\nfunction attemptReplayContinuousQueuedEventInMap(\n  queuedEvent                       ,\n  key        ,\n  map                                    ,\n)       {\n  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {\n    map.delete(key);\n  }\n}\n\nfunction replayChangeEvent(target             )       {\n  // Dispatch a fake \"change\" event for the input.\n  const element                                                             =\n    (target     );\n  if (element.nodeName === 'INPUT') {\n    if (element.type === 'checkbox' || element.type === 'radio') {\n      // Checkboxes always fire a click event regardless of how the change was made.\n      const EventCtr =\n        typeof PointerEvent === 'function' ? PointerEvent : Event;\n      target.dispatchEvent(new EventCtr('click', {bubbles: true}));\n      // For checkboxes the input event uses the Event constructor instead of InputEvent.\n      target.dispatchEvent(new Event('input', {bubbles: true}));\n    } else {\n      if (typeof InputEvent === 'function') {\n        target.dispatchEvent(new InputEvent('input', {bubbles: true}));\n      }\n    }\n  } else if (element.nodeName === 'TEXTAREA') {\n    if (typeof InputEvent === 'function') {\n      target.dispatchEvent(new InputEvent('input', {bubbles: true}));\n    }\n  }\n  target.dispatchEvent(new Event('change', {bubbles: true}));\n}\n\nfunction replayUnblockedEvents() {\n  hasScheduledReplayAttempt = false;\n  // Replay any continuous events.\n  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {\n    queuedFocus = null;\n  }\n  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {\n    queuedDrag = null;\n  }\n  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {\n    queuedMouse = null;\n  }\n  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);\n  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);\n  if (enableHydrationChangeEvent) {\n    for (let i = 0; i < queuedChangeEventTargets.length; i++) {\n      replayChangeEvent(queuedChangeEventTargets[i]);\n    }\n    queuedChangeEventTargets.length = 0;\n  }\n}\n\nexport function flushEventReplaying()       {\n  // Synchronously flush any event replaying so that it gets observed before\n  // any new updates are applied.\n  if (hasScheduledReplayAttempt) {\n    replayUnblockedEvents();\n  }\n}\n\nexport function queueChangeEvent(target             )       {\n  if (enableHydrationChangeEvent) {\n    queuedChangeEventTargets.push(target);\n    if (!hasScheduledReplayAttempt) {\n      hasScheduledReplayAttempt = true;\n    }\n  }\n}\n\nfunction scheduleCallbackIfUnblocked(\n  queuedEvent                       ,\n  unblocked                                                 ,\n) {\n  if (queuedEvent.blockedOn === unblocked) {\n    queuedEvent.blockedOn = null;\n    if (!hasScheduledReplayAttempt) {\n      hasScheduledReplayAttempt = true;\n      if (!enableHydrationChangeEvent) {\n        // Schedule a callback to attempt replaying as many events as are\n        // now unblocked. This first might not actually be unblocked yet.\n        // We could check it early to avoid scheduling an unnecessary callback.\n        scheduleCallback(NormalPriority, replayUnblockedEvents);\n      }\n    }\n  }\n}\n\n                                                   \n\n                                      // [form, submitter or action, formData...]\n\nlet lastScheduledReplayQueue                            = null;\n\nfunction replayUnblockedFormActions(formReplayingQueue                    ) {\n  if (lastScheduledReplayQueue === formReplayingQueue) {\n    lastScheduledReplayQueue = null;\n  }\n  for (let i = 0; i < formReplayingQueue.length; i += 3) {\n    const form                  = formReplayingQueue[i];\n    const submitterOrAction \n            \n                        \n                         \n                   = formReplayingQueue[i + 1];\n    const formData           = formReplayingQueue[i + 2];\n    if (typeof submitterOrAction !== 'function') {\n      // This action is not hydrated yet. This might be because it's blocked on\n      // a different React instance or higher up our tree.\n      const blockedOn = findInstanceBlockingTarget(submitterOrAction || form);\n      if (blockedOn === null) {\n        // We're not blocked but we don't have an action. This must mean that\n        // this is in another React instance. We'll just skip past it.\n        continue;\n      } else {\n        // We're blocked on something in this React instance. We'll retry later.\n        break;\n      }\n    }\n    const formInst = getInstanceFromNode(form);\n    if (formInst !== null) {\n      // This is part of our instance.\n      // We're ready to replay this. Let's delete it from the queue.\n      formReplayingQueue.splice(i, 3);\n      i -= 3;\n      dispatchReplayedFormAction(formInst, form, submitterOrAction, formData);\n      // Continue without incrementing the index.\n      continue;\n    }\n    // This form must've been part of a different React instance.\n    // If we want to preserve ordering between React instances on the same root\n    // we'd need some way for the other instance to ping us when it's done.\n    // We'll just skip this and let the other instance execute it.\n  }\n}\n\nfunction scheduleReplayQueueIfNeeded(formReplayingQueue                    ) {\n  // Schedule a callback to execute any unblocked form actions in.\n  // We only keep track of the last queue which means that if multiple React oscillate\n  // commits, we could schedule more callbacks than necessary but it's not a big deal\n  // and we only really except one instance.\n  if (lastScheduledReplayQueue !== formReplayingQueue) {\n    lastScheduledReplayQueue = formReplayingQueue;\n    scheduleCallback(NormalPriority, () =>\n      replayUnblockedFormActions(formReplayingQueue),\n    );\n  }\n}\n\nexport function retryIfBlockedOn(\n  unblocked                                                 ,\n)       {\n  if (queuedFocus !== null) {\n    scheduleCallbackIfUnblocked(queuedFocus, unblocked);\n  }\n  if (queuedDrag !== null) {\n    scheduleCallbackIfUnblocked(queuedDrag, unblocked);\n  }\n  if (queuedMouse !== null) {\n    scheduleCallbackIfUnblocked(queuedMouse, unblocked);\n  }\n  const unblock = (queuedEvent                       ) =>\n    scheduleCallbackIfUnblocked(queuedEvent, unblocked);\n  queuedPointers.forEach(unblock);\n  queuedPointerCaptures.forEach(unblock);\n\n  for (let i = 0; i < queuedExplicitHydrationTargets.length; i++) {\n    const queuedTarget = queuedExplicitHydrationTargets[i];\n    if (queuedTarget.blockedOn === unblocked) {\n      queuedTarget.blockedOn = null;\n    }\n  }\n\n  while (queuedExplicitHydrationTargets.length > 0) {\n    const nextExplicitTarget = queuedExplicitHydrationTargets[0];\n    if (nextExplicitTarget.blockedOn !== null) {\n      // We're still blocked.\n      break;\n    } else {\n      attemptExplicitHydrationTarget(nextExplicitTarget);\n      if (nextExplicitTarget.blockedOn === null) {\n        // We're unblocked.\n        queuedExplicitHydrationTargets.shift();\n      }\n    }\n  }\n\n  // Check the document if there are any queued form actions.\n  // If there's no ownerDocument, then this is the document.\n  const root = unblocked.ownerDocument || unblocked;\n  const formReplayingQueue                            = (root     )\n    .$$reactFormReplay;\n  if (formReplayingQueue != null) {\n    for (let i = 0; i < formReplayingQueue.length; i += 3) {\n      const form                  = formReplayingQueue[i];\n      const submitterOrAction \n              \n                          \n                           \n                     = formReplayingQueue[i + 1];\n      const formProps = getFiberCurrentPropsFromNode(form);\n      if (typeof submitterOrAction === 'function') {\n        // This action has already resolved. We're just waiting to dispatch it.\n        if (!formProps) {\n          // This was not part of this React instance. It might have been recently\n          // unblocking us from dispatching our events. So let's make sure we schedule\n          // a retry.\n          scheduleReplayQueueIfNeeded(formReplayingQueue);\n        }\n        continue;\n      }\n      let target       = form;\n      if (formProps) {\n        // This form belongs to this React instance but the submitter might\n        // not be done yet.\n        let action                    = null;\n        const submitter = submitterOrAction;\n        if (submitter && submitter.hasAttribute('formAction')) {\n          // The submitter is the one that is responsible for the action.\n          target = submitter;\n          const submitterProps = getFiberCurrentPropsFromNode(submitter);\n          if (submitterProps) {\n            // The submitter is part of this instance.\n            action = (submitterProps     ).formAction;\n          } else {\n            const blockedOn = findInstanceBlockingTarget(target);\n            if (blockedOn !== null) {\n              // The submitter is not hydrated yet. We'll wait for it.\n              continue;\n            }\n            // The submitter must have been a part of a different React instance.\n            // Except the form isn't. We don't dispatch actions in this scenario.\n          }\n        } else {\n          action = (formProps     ).action;\n        }\n        if (typeof action === 'function') {\n          formReplayingQueue[i + 1] = action;\n        } else {\n          // Something went wrong so let's just delete this action.\n          formReplayingQueue.splice(i, 3);\n          i -= 3;\n        }\n        // Schedule a replay in case this unblocked something.\n        scheduleReplayQueueIfNeeded(formReplayingQueue);\n        continue;\n      }\n      // Something above this target is still blocked so we can't continue yet.\n      // We're not sure if this target is actually part of this React instance\n      // yet. It could be a different React as a child but at least some parent is.\n      // We must continue for any further queued actions.\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nexport function defaultOnDefaultTransitionIndicator()                      {\n  if (typeof navigation !== 'object') {\n    // If the Navigation API is not available, then this is a noop.\n    return;\n  }\n\n  let isCancelled = false;\n  let pendingResolve                      = null;\n\n  function handleNavigate(event               ) {\n    if (event.canIntercept && event.info === 'react-transition') {\n      event.intercept({\n        handler() {\n          return new Promise(resolve => (pendingResolve = resolve));\n        },\n        focusReset: 'manual',\n        scroll: 'manual',\n      });\n    }\n  }\n\n  function handleNavigateComplete() {\n    if (pendingResolve !== null) {\n      // If this was not our navigation completing, we were probably cancelled.\n      // We'll start a new one below.\n      pendingResolve();\n      pendingResolve = null;\n    }\n    if (!isCancelled) {\n      // Some other navigation completed but we should still be running.\n      // Start another fake one to keep the loading indicator going.\n      startFakeNavigation();\n    }\n  }\n\n  // $FlowFixMe\n  navigation.addEventListener('navigate', handleNavigate);\n  // $FlowFixMe\n  navigation.addEventListener('navigatesuccess', handleNavigateComplete);\n  // $FlowFixMe\n  navigation.addEventListener('navigateerror', handleNavigateComplete);\n\n  function startFakeNavigation() {\n    if (isCancelled) {\n      // We already stopped this Transition.\n      return;\n    }\n    if (navigation.transition) {\n      // There is an on-going Navigation already happening. Let's wait for it to\n      // finish before starting our fake one.\n      return;\n    }\n    // Trigger a fake navigation to the same page\n    const currentEntry = navigation.currentEntry;\n    if (currentEntry && currentEntry.url != null) {\n      navigation.navigate(currentEntry.url, {\n        state: currentEntry.getState(),\n        info: 'react-transition', // indicator to routers to ignore this navigation\n        history: 'replace',\n      });\n    }\n  }\n\n  // Delay the start a bit in case this is a fast navigation.\n  setTimeout(startFakeNavigation, 100);\n\n  return function () {\n    isCancelled = true;\n    // $FlowFixMe\n    navigation.removeEventListener('navigate', handleNavigate);\n    // $FlowFixMe\n    navigation.removeEventListener('navigatesuccess', handleNavigateComplete);\n    // $FlowFixMe\n    navigation.removeEventListener('navigateerror', handleNavigateComplete);\n    if (pendingResolve !== null) {\n      pendingResolve();\n      pendingResolve = null;\n    }\n  };\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\n                                                                     \n             \n            \n                             \n                                                 \n\nimport {isValidContainer} from 'react-dom-bindings/src/client/ReactDOMContainer';\nimport {queueExplicitHydrationTarget} from 'react-dom-bindings/src/events/ReactDOMEventReplaying';\nimport {REACT_ELEMENT_TYPE} from 'shared/ReactSymbols';\nimport {\n  disableCommentsAsDOMContainers,\n  enableDefaultTransitionIndicator,\n} from 'shared/ReactFeatureFlags';\n\n                        \n                                        \n                  \n                                  \n  \n\n                                 \n                                \n                                                            \n                            \n                     \n                 \n                                           \n            \n                   \n                 \n                \n                                \n                                                  \n      \n            \n                        \n                 \n                                           \n            \n                                                           \n  \n\n                                  \n                      \n                                                    \n                                                   \n                          \n                                \n                                                            \n                            \n                     \n                 \n                                           \n            \n                   \n                 \n                \n                                \n                                                  \n      \n            \n                        \n                 \n                                           \n            \n                                                           \n                                              \n  \n\nimport {\n  isContainerMarkedAsRoot,\n  markContainerAsRoot,\n  unmarkContainerAsRoot,\n} from 'react-dom-bindings/src/client/ReactDOMComponentTree';\nimport {listenToAllSupportedEvents} from 'react-dom-bindings/src/events/DOMPluginEventSystem';\nimport {COMMENT_NODE} from 'react-dom-bindings/src/client/HTMLNodeType';\n\nimport {\n  createContainer,\n  createHydrationContainer,\n  updateContainer,\n  updateContainerSync,\n  flushSyncWork,\n  isAlreadyRendering,\n  defaultOnUncaughtError,\n  defaultOnCaughtError,\n  defaultOnRecoverableError,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport {defaultOnDefaultTransitionIndicator} from './ReactDOMDefaultTransitionIndicator';\nimport {ConcurrentRoot} from 'react-reconciler/src/ReactRootTags';\n\n// $FlowFixMe[missing-this-annot]\nfunction ReactDOMRoot(internalRoot           ) {\n  this._internalRoot = internalRoot;\n}\n\n// $FlowFixMe[prop-missing] found when upgrading Flow\nReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =\n  // $FlowFixMe[missing-this-annot]\n  function (children               )       {\n    const root = this._internalRoot;\n    if (root === null) {\n      throw new Error('Cannot update an unmounted root.');\n    }\n\n    if (__DEV__) {\n      // using a reference to `arguments` bails out of GCC optimizations which affect function arity\n      const args = arguments;\n      if (typeof args[1] === 'function') {\n        console.error(\n          'does not support the second callback argument. ' +\n            'To execute a side effect after rendering, declare it in a component body with useEffect().',\n        );\n      } else if (isValidContainer(args[1])) {\n        console.error(\n          'You passed a container to the second argument of root.render(...). ' +\n            \"You don't need to pass it again since you already passed it to create the root.\",\n        );\n      } else if (typeof args[1] !== 'undefined') {\n        console.error(\n          'You passed a second argument to root.render(...) but it only accepts ' +\n            'one argument.',\n        );\n      }\n    }\n    updateContainer(children, root, null, null);\n  };\n\n// $FlowFixMe[prop-missing] found when upgrading Flow\nReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =\n  // $FlowFixMe[missing-this-annot]\n  function ()       {\n    if (__DEV__) {\n      // using a reference to `arguments` bails out of GCC optimizations which affect function arity\n      const args = arguments;\n      if (typeof args[0] === 'function') {\n        console.error(\n          'does not support a callback argument. ' +\n            'To execute a side effect after rendering, declare it in a component body with useEffect().',\n        );\n      }\n    }\n    const root = this._internalRoot;\n    if (root !== null) {\n      this._internalRoot = null;\n      const container = root.containerInfo;\n      if (__DEV__) {\n        if (isAlreadyRendering()) {\n          console.error(\n            'Attempted to synchronously unmount a root while React was already ' +\n              'rendering. React cannot finish unmounting the root until the ' +\n              'current render has completed, which may lead to a race condition.',\n          );\n        }\n      }\n      updateContainerSync(null, root, null, null);\n      flushSyncWork();\n      unmarkContainerAsRoot(container);\n    }\n  };\n\nexport function createRoot(\n  container                                       ,\n  options                    ,\n)           {\n  if (!isValidContainer(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  warnIfReactDOMContainerInDEV(container);\n\n  const concurrentUpdatesByDefaultOverride = false;\n  let isStrictMode = false;\n  let identifierPrefix = '';\n  let onUncaughtError = defaultOnUncaughtError;\n  let onCaughtError = defaultOnCaughtError;\n  let onRecoverableError = defaultOnRecoverableError;\n  let onDefaultTransitionIndicator = defaultOnDefaultTransitionIndicator;\n  let transitionCallbacks = null;\n\n  if (options !== null && options !== undefined) {\n    if (__DEV__) {\n      if ((options     ).hydrate) {\n        console.warn(\n          'hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.',\n        );\n      } else {\n        if (\n          typeof options === 'object' &&\n          options !== null &&\n          (options     ).$$typeof === REACT_ELEMENT_TYPE\n        ) {\n          console.error(\n            'You passed a JSX element to createRoot. You probably meant to ' +\n              'call root.render instead. ' +\n              'Example usage:\\n\\n' +\n              '  let root = createRoot(domContainer);\\n' +\n              '  root.render(<App />);',\n          );\n        }\n      }\n    }\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n    if (options.identifierPrefix !== undefined) {\n      identifierPrefix = options.identifierPrefix;\n    }\n    if (options.onUncaughtError !== undefined) {\n      onUncaughtError = options.onUncaughtError;\n    }\n    if (options.onCaughtError !== undefined) {\n      onCaughtError = options.onCaughtError;\n    }\n    if (options.onRecoverableError !== undefined) {\n      onRecoverableError = options.onRecoverableError;\n    }\n    if (enableDefaultTransitionIndicator) {\n      if (options.onDefaultTransitionIndicator !== undefined) {\n        onDefaultTransitionIndicator = options.onDefaultTransitionIndicator;\n      }\n    }\n    if (options.unstable_transitionCallbacks !== undefined) {\n      transitionCallbacks = options.unstable_transitionCallbacks;\n    }\n  }\n\n  const root = createContainer(\n    container,\n    ConcurrentRoot,\n    null,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onUncaughtError,\n    onCaughtError,\n    onRecoverableError,\n    onDefaultTransitionIndicator,\n    transitionCallbacks,\n  );\n  markContainerAsRoot(root.current, container);\n\n  const rootContainerElement                                        =\n    !disableCommentsAsDOMContainers && container.nodeType === COMMENT_NODE\n      ? (container.parentNode     )\n      : container;\n  listenToAllSupportedEvents(rootContainerElement);\n\n  // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions\n  return new ReactDOMRoot(root);\n}\n\n// $FlowFixMe[missing-this-annot]\nfunction ReactDOMHydrationRoot(internalRoot           ) {\n  this._internalRoot = internalRoot;\n}\nfunction scheduleHydration(target      ) {\n  if (target) {\n    queueExplicitHydrationTarget(target);\n  }\n}\n// $FlowFixMe[prop-missing] found when upgrading Flow\nReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;\n\nexport function hydrateRoot(\n  container                    ,\n  initialChildren               ,\n  options                     ,\n)           {\n  if (!isValidContainer(container)) {\n    throw new Error('Target container is not a DOM element.');\n  }\n\n  warnIfReactDOMContainerInDEV(container);\n\n  if (__DEV__) {\n    if (initialChildren === undefined) {\n      console.error(\n        'Must provide initial children as second argument to hydrateRoot. ' +\n          'Example usage: hydrateRoot(domContainer, <App />)',\n      );\n    }\n  }\n\n  // For now we reuse the whole bag of options since they contain\n  // the hydration callbacks.\n  const hydrationCallbacks = options != null ? options : null;\n\n  const concurrentUpdatesByDefaultOverride = false;\n  let isStrictMode = false;\n  let identifierPrefix = '';\n  let onUncaughtError = defaultOnUncaughtError;\n  let onCaughtError = defaultOnCaughtError;\n  let onRecoverableError = defaultOnRecoverableError;\n  let onDefaultTransitionIndicator = defaultOnDefaultTransitionIndicator;\n  let transitionCallbacks = null;\n  let formState = null;\n  if (options !== null && options !== undefined) {\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n    if (options.identifierPrefix !== undefined) {\n      identifierPrefix = options.identifierPrefix;\n    }\n    if (options.onUncaughtError !== undefined) {\n      onUncaughtError = options.onUncaughtError;\n    }\n    if (options.onCaughtError !== undefined) {\n      onCaughtError = options.onCaughtError;\n    }\n    if (options.onRecoverableError !== undefined) {\n      onRecoverableError = options.onRecoverableError;\n    }\n    if (enableDefaultTransitionIndicator) {\n      if (options.onDefaultTransitionIndicator !== undefined) {\n        onDefaultTransitionIndicator = options.onDefaultTransitionIndicator;\n      }\n    }\n    if (options.unstable_transitionCallbacks !== undefined) {\n      transitionCallbacks = options.unstable_transitionCallbacks;\n    }\n    if (options.formState !== undefined) {\n      formState = options.formState;\n    }\n  }\n\n  const root = createHydrationContainer(\n    initialChildren,\n    null,\n    container,\n    ConcurrentRoot,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onUncaughtError,\n    onCaughtError,\n    onRecoverableError,\n    onDefaultTransitionIndicator,\n    transitionCallbacks,\n    formState,\n  );\n  markContainerAsRoot(root.current, container);\n  // This can't be a comment node since hydration doesn't work on comment nodes anyway.\n  listenToAllSupportedEvents(container);\n\n  // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions\n  return new ReactDOMHydrationRoot(root);\n}\n\nfunction warnIfReactDOMContainerInDEV(container     ) {\n  if (__DEV__) {\n    if (isContainerMarkedAsRoot(container)) {\n      if (container._reactRootContainer) {\n        console.error(\n          'You are calling ReactDOMClient.createRoot() on a container that was previously ' +\n            'passed to ReactDOM.render(). This is not supported.',\n        );\n      } else {\n        console.error(\n          'You are calling ReactDOMClient.createRoot() on a container that ' +\n            'has already been passed to createRoot() before. Instead, call ' +\n            'root.render() on the existing root instead if you want to update it.',\n        );\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport reactDOMPackageVersion from 'shared/ReactVersion';\nimport * as IsomorphicReactPackage from 'react';\n\nexport function ensureCorrectIsomorphicReactVersion() {\n  const isomorphicReactPackageVersion = IsomorphicReactPackage.version;\n  if (isomorphicReactPackageVersion !== reactDOMPackageVersion) {\n    throw new Error(\n      'Incompatible React versions: The \"react\" and \"react-dom\" packages must ' +\n        'have the exact same version. Instead got:\\n' +\n        `  - react:      ${isomorphicReactPackageVersion}\\n` +\n        `  - react-dom:  ${reactDOMPackageVersion}\\n` +\n        'Learn more: https://react.dev/warnings/version-mismatch',\n    );\n  }\n}\n", "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *      \n */\n\nimport {createRoot, hydrateRoot} from './ReactDOMRoot';\n\nimport {\n  injectIntoDevTools,\n  findHostInstance,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport {canUseDOM} from 'shared/ExecutionEnvironment';\nimport ReactVersion from 'shared/ReactVersion';\n\nimport Internals from 'shared/ReactDOMSharedInternals';\n\nimport {ensureCorrectIsomorphicReactVersion} from '../shared/ensureCorrectIsomorphicReactVersion';\nensureCorrectIsomorphicReactVersion();\n\nif (__DEV__) {\n  if (\n    typeof Map !== 'function' ||\n    // $FlowFixMe[prop-missing] Flow incorrectly thinks Map has no prototype\n    Map.prototype == null ||\n    typeof Map.prototype.forEach !== 'function' ||\n    typeof Set !== 'function' ||\n    // $FlowFixMe[prop-missing] Flow incorrectly thinks Set has no prototype\n    Set.prototype == null ||\n    typeof Set.prototype.clear !== 'function' ||\n    typeof Set.prototype.forEach !== 'function'\n  ) {\n    console.error(\n      'React depends on Map and Set built-in types. Make sure that you load a ' +\n        'polyfill in older browsers. https://react.dev/link/react-polyfills',\n    );\n  }\n}\n\nfunction findDOMNode(\n  componentOrElement                           ,\n)                        {\n  return findHostInstance(componentOrElement);\n}\n\n// Expose findDOMNode on internals\nInternals.findDOMNode = findDOMNode;\n\nexport {ReactVersion as version, createRoot, hydrateRoot};\n\nconst foundDevTools = injectIntoDevTools();\n\nif (__DEV__) {\n  if (!foundDevTools && canUseDOM && window.top === window.self) {\n    // If we're in Chrome or Firefox, provide a download link if not installed.\n    if (\n      (navigator.userAgent.indexOf('Chrome') > -1 &&\n        navigator.userAgent.indexOf('Edge') === -1) ||\n      navigator.userAgent.indexOf('Firefox') > -1\n    ) {\n      const protocol = window.location.protocol;\n      // Don't warn in exotic cases like chrome-extension://.\n      if (/^(https?|file):$/.test(protocol)) {\n        // eslint-disable-next-line react-internal/no-production-logging\n        console.info(\n          '%cDownload the React DevTools ' +\n            'for a better development experience: ' +\n            'https://react.dev/link/react-devtools' +\n            (protocol === 'file:'\n              ? '\\nYou might need to use a local HTTP server (instead of file://): ' +\n                'https://react.dev/link/react-devtools-faq'\n              : ''),\n          'font-weight:bold',\n        );\n      }\n    }\n  }\n}\n", "import { createRoot } from \"../dist/react-dom/client.js\";\nimport { createElement } from \"../dist/react/index.development.js\";\n\nfunction App() {\n  console.log(\"App called\");\n  return createElement(\"h1\", null, \"Hello world!\");\n}\n\nconst rootElement = document.getElementById(\"root\");\nconst reactRoot = createRoot(rootElement);\nreactRoot.render(createElement(App));\n"],
  "mappings": "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",
  "names": ["index", "startTime", "current", "getParent", "getWrappedName", "getContextName", "getContextName", "getWrappedName", "ReactSharedInternals", "pop", "push", "workInProgress", "Component", "pop", "push", "root", "renderLanes", "index", "set", "requestPaint", "ImmediatePriority", "UserBlockingPriority", "NormalPriority", "LowPriority", "IdlePriority", "log", "unstable_setDisableYieldValue", "root", "ImmediatePriority", "UserBlockingPriority", "NormalPriority", "IdlePriority", "log", "unstable_setDisableYieldValue", "root", "getCurrentTime", "hasPerformanceNow", "startTime", "renderStartTime", "root", "PossiblyWeakMap", "previousDispatcher", "workInProgress", "workInProgress", "index", "contextStackCursor", "push", "contextStackCursor", "pop", "push", "pop", "renderLanes", "workInProgress", "current", "scheduleCallback", "NormalPriority", "cache", "workInProgress", "root", "now", "createTask", "now", "root", "workInProgressRoot", "workInProgressRootRenderLanes", "cancelCallback", "UserBlockingPriority", "NormalPriority", "IdlePriority", "scheduleCallback", "scheduleCallback", "cancelCallback", "executionContext", "ImmediatePriority", "root", "root", "root", "renderLanes", "workInProgress", "push", "pop", "current", "set", "thenableState", "index", "root", "workInProgress", "index", "current", "updateFragment", "workInProgress", "reconcileChildFibers", "root", "current", "workInProgress", "enqueueUpdate", "root", "renderLanes", "callbacks", "push", "pop", "current", "push", "pop", "NoFlags", "Passive", "currentlyRenderingFiber", "thenableIndexCounter", "thenableState", "globalClientIdCounter", "current", "workInProgress", "Component", "currentlyRenderingFiber", "thenableState", "thenableIndexCounter", "index", "use", "useMemoCache", "didReadFromEntangledAsyncAction", "root", "isHydrating", "Passive", "startTransition", "noop", "currentlyRenderingFiber", "root", "globalClientIdCounter", "enqueueUpdate", "use", "useMemoCache", "use", "useMemoCache", "useEffectEvent", "workInProgress", "root", "enqueueUpdate", "workInProgress", "renderLanes", "current", "Component", "Component", "root", "root", "enqueueUpdate", "current", "wrapperError", "workInProgress", "callbacks", "workInProgress", "root", "push", "pop", "current", "workInProgress", "renderLanes", "Component", "compare", "hasContextChanged", "root", "instance", "renderLanes", "current", "workInProgress", "hasContextChanged", "root", "workInProgress", "current", "renderLanes", "current", "workInProgress", "renderLanes", "current", "renderLanes", "workInProgress", "root", "cache", "Component", "emptyObject", "workInProgress", "current", "updateHostComponent", "renderLanes", "updateHostText", "hydrationErrors", "Component", "cache", "current", "workInProgress", "renderLanes", "Component", "root", "cache", "current", "Passive", "NoFlags", "current", "commitStartTime", "root", "current", "current", "root", "Passive", "hydrationErrors", "startTime", "cache", "viewTransitionContextChanged", "trackEnterViewTransitions", "current", "nextPhase", "root", "getCacheForType", "cache", "root", "markRootSuspended", "markRootUpdated", "root", "markRootSuspended", "maySuspendCommit", "markRootUpdated", "markRootPinged", "current", "root", "markRootSuspended", "Component", "concurrentlyUpdatedLanes", "scheduleCallback", "NormalPriority", "requestPaint", "onCommitRoot", "IdlePriority", "root", "scheduleCallback", "IdlePriority", "enqueueUpdate", "markRootUpdated", "markRootPinged", "root", "scheduleCallback", "root", "Component", "current", "workInProgress", "renderLanes", "root", "Component", "root", "current", "root", "enqueueUpdate", "root", "index", "currentHook", "root", "index", "NoEventPriority", "requestFormReset", "ReactDOMSharedInternals_default", "setCurrentUpdatePriority", "ReactDOMSharedInternals_default", "getCurrentUpdatePriority", "resolveUpdatePriority", "prefix", "get", "set", "isHydrating", "style", "rARIA", "rARIACamel", "getInstanceFromNode", "batchedUpdates", "registerEvents", "batchedUpdates", "extractEvents", "registerEvents", "extractEvents", "registerEvents", "activeElement", "activeElementInst", "extractEvents", "extractEvents", "extractEvents", "registerEvents", "batchedUpdates", "runEventInBatch", "extractEvents", "registerEvents", "extractEvents", "batchedUpdates", "index", "setFocusIfFocusable", "setFocusIfFocusable", "ReactDOMSharedInternals_default", "flushSyncWork", "requestFormReset", "prefetchDNS", "preconnect", "preload", "preloadModule", "getInstanceFromNode", "root", "getInstanceFromNode", "root", "getCurrentUpdatePriority", "setCurrentUpdatePriority", "getInstanceFromNode", "root", "ImmediatePriority", "UserBlockingPriority", "NormalPriority", "LowPriority", "IdlePriority", "getInstanceFromNode", "root", "resolveUpdatePriority", "root", "ReactDOMSharedInternals_default"]
}
